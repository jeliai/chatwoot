import { __awaiter, __generator } from "tslib";
import { queryString } from '..';
import { Analytics } from '../../../analytics';
var analytics;
describe('queryString', function () {
    beforeEach(function () {
        analytics = new Analytics({
            writeKey: 'abc',
        });
    });
    describe('calls', function () {
        describe('identify', function () {
            it('if `ajs_uid` is present', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'identify');
                            return [4 /*yield*/, queryString(analytics, '?ajs_uid=1234')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('1234', {});
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('applies traits if `ajs_trait_` is present', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'identify');
                            return [4 /*yield*/, queryString(analytics, '?ajs_uid=1234&ajs_trait_address=123 St')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('1234', { address: '123 St' });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('applies multiple traits if `ajs_trait_` is declared more than once', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'identify');
                            return [4 /*yield*/, queryString(analytics, '?ajs_uid=1234&ajs_trait_address=123 St&ajs_trait_city=Vancouver')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('1234', {
                                address: '123 St',
                                city: 'Vancouver',
                            });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('only considers one `ajs_uid` received as parameter', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'identify');
                            return [4 /*yield*/, queryString(analytics, '?ajs_uid=1234&ajs_trait_address=123 St&ajs_trait_address=908 St')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('1234', { address: '908 St' });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('track', function () {
            it('calls track if `ajs_event` is present', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'track');
                            return [4 /*yield*/, queryString(analytics, '?ajs_event=Button Clicked')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('Button Clicked', {});
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('applies props if `ajs_prop_` is present', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'track');
                            return [4 /*yield*/, queryString(analytics, '?ajs_event=Button Clicked&ajs_prop_location=Home Page')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('Button Clicked', {
                                location: 'Home Page',
                            });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('applies multiple props if `ajs_prop_` is declared more than once', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'track');
                            return [4 /*yield*/, queryString(analytics, '?ajs_event=Button Clicked&ajs_prop_location=Home Page&ajs_prop_team=Instrumentation')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('Button Clicked', {
                                location: 'Home Page',
                                team: 'Instrumentation',
                            });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('only considers the first `ajs_event` received as parameter', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'track');
                            return [4 /*yield*/, queryString(analytics, '?ajs_event=Button Clicked&ajs_prop_location=Home Page&ajs_prop_location=Teams Page')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('Button Clicked', {
                                location: 'Teams Page',
                            });
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('setAnonymousId', function () {
            it('if `ajs_aid` is present', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'setAnonymousId');
                            return [4 /*yield*/, queryString(analytics, '?ajs_aid=immaghost')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('immaghost');
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('only considers the first aid received as parameter', function () { return __awaiter(void 0, void 0, void 0, function () {
                var spy;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            spy = jest.spyOn(analytics, 'setAnonymousId');
                            return [4 /*yield*/, queryString(analytics, '?ajs_aid=imbatman&ajs_aid=bruce')];
                        case 1:
                            _a.sent();
                            expect(spy).toHaveBeenCalledWith('bruce');
                            spy.mockRestore();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=index.test.js.map