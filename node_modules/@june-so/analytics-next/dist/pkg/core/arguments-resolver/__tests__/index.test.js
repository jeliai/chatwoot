import { resolveArguments, resolvePageArguments, resolveUserArguments, resolveAliasArguments, } from '../';
import { User } from '../../user';
var bananaPhone = {
    banana: 'phone',
};
var baseOptions = {
    integrations: {
        amplitude: false,
    },
};
describe(resolveArguments, function () {
    test('resolves all args', function () {
        var callback = jest.fn();
        var _a = resolveArguments('Test Event', bananaPhone, {
            integrations: {
                amplitude: false,
            },
        }, callback), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
        expect(event).toEqual('Test Event');
        expect(props).toEqual(bananaPhone);
        expect(options).toEqual({
            integrations: {
                amplitude: false,
            },
        });
        expect(cb).toEqual(callback);
    });
    describe('event as string', function () {
        test('event, props', function () {
            var _a = resolveArguments('Test Event', bananaPhone), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(options).toEqual({});
            expect(cb).toBeUndefined();
        });
        test('event, props, options', function () {
            var _a = resolveArguments('Test Event', bananaPhone, {
                integrations: {
                    intercom: false,
                },
            }), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(options).toEqual({
                integrations: {
                    intercom: false,
                },
            });
            expect(cb).toBeUndefined();
        });
        test('event, props, callback', function () {
            var fn = jest.fn();
            var _a = resolveArguments('Test Event', bananaPhone, fn), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(options).toEqual({});
            expect(cb).toEqual(fn);
        });
        test('event, callback', function () {
            var fn = jest.fn();
            var _a = resolveArguments('Test Event', fn), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual({});
            expect(options).toEqual({});
            expect(cb).toEqual(fn);
        });
    });
    describe('event as object', function () {
        test('requires an event name', function () {
            expect(function () {
                return resolveArguments({
                    type: 'track',
                });
            }).toThrowErrorMatchingInlineSnapshot("\"Event missing\"");
        });
        test('all args', function () {
            var fn = jest.fn();
            var _a = resolveArguments({
                type: 'track',
                event: 'Test Event',
                properties: bananaPhone,
            }, {
                integrations: {
                    amplitude: false,
                },
            }, fn), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(options).toEqual({
                integrations: {
                    amplitude: false,
                },
            });
            expect(cb).toEqual(fn);
        });
        test('event, options', function () {
            var _a = resolveArguments({
                type: 'track',
                event: 'Test Event',
                properties: bananaPhone,
            }, {
                integrations: {
                    amplitude: false,
                },
            }), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(options).toEqual({
                integrations: {
                    amplitude: false,
                },
            });
            expect(cb).toBeUndefined();
        });
        test('event, callback', function () {
            var fn = jest.fn();
            var _a = resolveArguments({
                type: 'track',
                event: 'Test Event',
                properties: bananaPhone,
            }, fn), event = _a[0], props = _a[1], options = _a[2], cb = _a[3];
            expect(event).toEqual('Test Event');
            expect(props).toEqual(bananaPhone);
            expect(cb).toEqual(fn);
            expect(options).toEqual({});
        });
    });
});
describe(resolvePageArguments, function () {
    test('should accept (category, name, properties, options, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('category', 'name', bananaPhone, baseOptions, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(category).toEqual('category');
        expect(name).toEqual('name');
        expect(properties).toEqual(bananaPhone);
        expect(options).toEqual(baseOptions);
        expect(cb).toEqual(fn);
    });
    test('empty strings ("", "", "", { integrations })', function () {
        var _a = resolvePageArguments('', '', null, {
            integrations: {
                Amplitude: {
                    sessionId: '123',
                },
            },
        }), category = _a[0], name = _a[1], properties = _a[2], options = _a[3];
        expect(category).toEqual('');
        expect(name).toEqual('');
        expect(properties).toEqual({});
        expect(options).toEqual({
            integrations: {
                Amplitude: {
                    sessionId: '123',
                },
            },
        });
    });
    test('should accept (category, name, properties, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('category', 'name', bananaPhone, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(category).toEqual('category');
        expect(name).toEqual('name');
        expect(properties).toEqual(bananaPhone);
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
    });
    it('should accept (category, name, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('category', 'name', fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(category).toEqual('category');
        expect(name).toEqual('name');
        expect(properties).toEqual({});
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
    });
    it('should accept (name, properties, options, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('name', bananaPhone, baseOptions, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(category).toEqual(null);
        expect(name).toEqual('name');
        expect(properties).toEqual(bananaPhone);
        expect(options).toEqual(baseOptions);
        expect(cb).toEqual(fn);
    });
    it('should accept (name, properties, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('name', bananaPhone, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(category).toEqual(null);
        expect(name).toEqual('name');
        expect(properties).toEqual(bananaPhone);
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
    });
    it('should accept (name, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments('name', fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(name).toEqual('name');
        expect(cb).toEqual(fn);
        expect(category).toEqual(null);
        expect(properties).toEqual({});
        expect(options).toEqual({});
    });
    it('should accept (properties, options, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments(bananaPhone, baseOptions, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(cb).toEqual(fn);
        expect(properties).toEqual(bananaPhone);
        expect(options).toEqual(baseOptions);
        expect(name).toEqual(null);
        expect(category).toEqual(null);
    });
    it('should accept (properties, callback)', function () {
        var fn = jest.fn();
        var _a = resolvePageArguments(bananaPhone, fn), category = _a[0], name = _a[1], properties = _a[2], options = _a[3], cb = _a[4];
        expect(properties).toEqual(bananaPhone);
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
        expect(name).toEqual(null);
        expect(category).toEqual(null);
    });
});
describe(resolveUserArguments, function () {
    var user;
    var resolver;
    var fn;
    var userTraits = {
        phone: '555 5555',
    };
    var uid = 'id';
    beforeEach(function () {
        user = new User();
        resolver = resolveUserArguments(user);
        fn = jest.fn();
    });
    it('should accept (id, traits, options, callback)', function () {
        var _a = resolver(uid, userTraits, baseOptions, fn), id = _a[0], traits = _a[1], options = _a[2], cb = _a[3];
        expect(id).toEqual(uid);
        expect(traits).toEqual(userTraits);
        expect(options).toEqual(baseOptions);
        expect(cb).toEqual(fn);
    });
    it('should accept (id, traits, callback)', function () {
        var _a = resolver(uid, userTraits, fn), id = _a[0], traits = _a[1], options = _a[2], cb = _a[3];
        expect(id).toEqual(uid);
        expect(traits).toEqual(userTraits);
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
    });
    it('should accept (id, callback)', function () {
        var _a = resolver(uid, fn), id = _a[0], traits = _a[1], options = _a[2], cb = _a[3];
        expect(id).toEqual(uid);
        expect(cb).toEqual(fn);
        expect(traits).toEqual({});
        expect(options).toEqual({});
    });
    it('should accept (traits, options, callback)', function () {
        user.identify('TestID');
        var _a = resolver(userTraits, baseOptions, fn), id = _a[0], traits = _a[1], options = _a[2], cb = _a[3];
        expect(id).toEqual('TestID');
        expect(cb).toEqual(fn);
        expect(traits).toEqual(userTraits);
        expect(options).toEqual(baseOptions);
    });
    it('should accept (traits, callback)', function () {
        user.identify('TestID');
        var _a = resolver(userTraits, fn), id = _a[0], traits = _a[1], options = _a[2], cb = _a[3];
        expect(id).toEqual('TestID');
        expect(traits).toEqual(userTraits);
        expect(cb).toEqual(fn);
        expect(options).toEqual({});
    });
    it('should accept (id, null, options)', function () {
        var _a = resolver(uid, null, baseOptions), id = _a[0], traits = _a[1], options = _a[2];
        expect(id).toEqual(uid);
        expect(traits).toEqual({});
        expect(options).toEqual(baseOptions);
    });
    it('should accept (id, traits)', function () {
        var _a = resolver(uid, userTraits), id = _a[0], traits = _a[1], options = _a[2];
        expect(id).toEqual(uid);
        expect(traits).toEqual(userTraits);
        expect(options).toEqual({});
    });
});
describe(resolveAliasArguments, function () {
    it('should accept (to, from, options, callback)', function () {
        var fn = jest.fn();
        var _a = resolveAliasArguments('to', 'from', {
            integrations: {
                intercom: false,
            },
        }, fn), to = _a[0], from = _a[1], options = _a[2], cb = _a[3];
        expect(to).toEqual('to');
        expect(from).toEqual('from');
        expect(options).toEqual({
            integrations: {
                intercom: false,
            },
        });
        expect(cb).toBe(fn);
    });
    it('should accept (to, options, callback)', function () {
        var fn = jest.fn();
        var _a = resolveAliasArguments('to', {
            integrations: {
                intercom: false,
            },
        }, fn), to = _a[0], from = _a[1], options = _a[2], cb = _a[3];
        expect(to).toEqual('to');
        expect(from).toBeNull();
        expect(options).toEqual({
            integrations: {
                intercom: false,
            },
        });
        expect(cb).toBe(fn);
    });
    it('should accept (to, callback)', function () {
        var fn = jest.fn();
        var _a = resolveAliasArguments('to', fn), to = _a[0], from = _a[1], options = _a[2], cb = _a[3];
        expect(to).toEqual('to');
        expect(from).toBeNull();
        expect(options).toEqual({});
        expect(cb).toBe(fn);
    });
    it('should accept (to, from, callback)', function () {
        var fn = jest.fn();
        var _a = resolveAliasArguments('to', 'from', fn), to = _a[0], from = _a[1], options = _a[2], cb = _a[3];
        expect(to).toEqual('to');
        expect(from).toEqual('from');
        expect(options).toEqual({});
        expect(cb).toBe(fn);
    });
});
//# sourceMappingURL=index.test.js.map