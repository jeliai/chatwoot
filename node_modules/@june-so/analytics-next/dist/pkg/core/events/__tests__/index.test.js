import uuid from '@lukeed/uuid';
import { range, uniq } from 'lodash';
import { EventFactory } from '..';
import { User } from '../../user';
describe('Event Factory', function () {
    var user;
    var factory;
    var shoes = { product: 'shoes', total: '$35', category: 'category' };
    var shopper = { totalSpent: 100 };
    beforeEach(function () {
        user = new User();
        user.reset();
        factory = new EventFactory(user);
    });
    describe('alias', function () {
        test('creates alias events', function () {
            var alias = factory.alias('netto', 'netto farah');
            expect(alias.type).toEqual('alias');
            expect(alias.event).toBeUndefined();
            expect(alias.userId).toEqual('netto');
            expect(alias.previousId).toEqual('netto farah');
        });
        it('does not accept traits or properties', function () {
            var alias = factory.alias('netto', 'netto farah');
            expect(alias.traits).toBeUndefined();
            expect(alias.properties).toBeUndefined();
        });
    });
    describe('group', function () {
        test('creates group events', function () {
            var group = factory.group('userId', { coolkids: true });
            expect(group.traits).toEqual({ coolkids: true });
            expect(group.type).toEqual('group');
            expect(group.event).toBeUndefined();
        });
        it('accepts traits', function () {
            var group = factory.group('netto', shopper);
            expect(group.traits).toEqual(shopper);
        });
        it('sets the groupId to the message', function () {
            var group = factory.group('coolKidsId', { coolkids: true });
            expect(group.groupId).toEqual('coolKidsId');
        });
    });
    describe('page', function () {
        test('creates page events', function () {
            var page = factory.page('category', 'name');
            expect(page.traits).toBeUndefined();
            expect(page.type).toEqual('page');
            expect(page.event).toBeUndefined();
            expect(page.name).toEqual('name');
            expect(page.category).toEqual('category');
        });
        it('accepts properties', function () {
            var page = factory.page('category', 'name', shoes);
            expect(page.properties).toEqual(shoes);
        });
        it('ignores category and page if not passed in', function () {
            var page = factory.page(null, null);
            expect(page.category).toBeUndefined();
            expect(page.name).toBeUndefined();
        });
    });
    describe('identify', function () {
        test('creates identify events', function () {
            var identify = factory.identify('Netto', shopper);
            expect(identify.traits).toEqual(shopper);
            expect(identify.properties).toBeUndefined();
            expect(identify.type).toEqual('identify');
            expect(identify.event).toBeUndefined();
        });
    });
    describe('track', function () {
        test('creates track events', function () {
            var track = factory.track('Order Completed', shoes);
            expect(track.event).toEqual('Order Completed');
            expect(track.properties).toEqual(shoes);
            expect(track.traits).toBeUndefined();
            expect(track.type).toEqual('track');
        });
        test('adds a message id', function () {
            var track = factory.track('Order Completed', shoes);
            expect(track.messageId).toContain('ajs-next');
        });
        test('adds a random message id even when random is mocked', function () {
            jest.useFakeTimers();
            jest.spyOn(uuid, 'v4').mockImplementation(function () { return 'abc-123'; });
            // fake timer and fake uuid => equal
            expect(factory.track('Order Completed', shoes).messageId).toEqual(factory.track('Order Completed', shoes).messageId);
            // restore uuid function => not equal
            jest.restoreAllMocks();
            expect(factory.track('Order Completed', shoes).messageId).not.toEqual(factory.track('Order Completed', shoes).messageId);
            // restore timers function => not equal
            jest.useRealTimers();
            expect(factory.track('Order Completed', shoes).messageId).not.toEqual(factory.track('Order Completed', shoes).messageId);
        });
        test('message ids are random', function () {
            var ids = range(0, 200).map(function () { return factory.track('Order Completed', shoes).messageId; });
            expect(uniq(ids)).toHaveLength(200);
        });
        test('sets an user id', function () {
            user.identify('007');
            var track = factory.track('Order Completed', shoes);
            expect(track.userId).toEqual('007');
        });
        test('sets an anonymous id', function () {
            var track = factory.track('Order Completed', shoes);
            expect(track.userId).toBeUndefined();
            expect(track.anonymousId).toEqual(user.anonymousId());
        });
        test('sets options in the context', function () {
            var track = factory.track('Order Completed', shoes, {
                opt1: true,
            });
            expect(track.context).toEqual({ opt1: true });
        });
        test('sets integrations', function () {
            var track = factory.track('Order Completed', shoes, {}, {
                amplitude: false,
            });
            expect(track.integrations).toEqual({ amplitude: false });
        });
        test('merges integrations from `options` and `integrations`', function () {
            var track = factory.track('Order Completed', shoes, {
                opt1: true,
                integrations: {
                    amplitude: false,
                },
            }, {
                googleAnalytics: true,
                amplitude: true,
            });
            expect(track.integrations).toEqual({
                googleAnalytics: true,
                amplitude: false,
            });
        });
        test('do not send integration settings overrides from initialization', function () {
            var track = factory.track('Order Completed', shoes, {
                integrations: {
                    Amplitude: {
                        sessionId: 'session_123',
                    },
                },
            }, {
                'Segment.io': {
                    apiHost: 'custom',
                },
                GoogleAnalytics: false,
                'Customer.io': {},
            });
            expect(track.integrations).toEqual({
                // do not pass Segment.io global settings
                'Segment.io': true,
                // accept amplitude event level settings
                Amplitude: {
                    sessionId: 'session_123',
                },
                // pass along google analytics setting
                GoogleAnalytics: false,
                // empty objects are still valid
                'Customer.io': true,
            });
        });
        test('should move foreign options into `context`', function () {
            var track = factory.track('Order Completed', shoes, {
                opt1: true,
                opt2: 'ü•ù',
                integrations: {
                    amplitude: false,
                },
            });
            expect(track.context).toEqual({ opt1: true, opt2: 'ü•ù' });
        });
        test('should not move known options into `context`', function () {
            var track = factory.track('Order Completed', shoes, {
                opt1: true,
                opt2: 'ü•ù',
                integrations: {
                    amplitude: false,
                },
                anonymousId: 'anon-1',
                timestamp: new Date(),
            });
            expect(track.context).toEqual({ opt1: true, opt2: 'ü•ù' });
        });
        test('accepts an anonymous id', function () {
            var track = factory.track('Order Completed', shoes, {
                anonymousId: 'anon-1',
            });
            expect(track.context).toEqual({});
            expect(track.anonymousId).toEqual('anon-1');
        });
        test('accepts a timestamp', function () {
            var timestamp = new Date();
            var track = factory.track('Order Completed', shoes, {
                timestamp: timestamp,
            });
            expect(track.context).toEqual({});
            expect(track.timestamp).toEqual(timestamp);
        });
        test('accepts traits', function () {
            var _a;
            var track = factory.track('Order Completed', shoes, {
                traits: {
                    cell: 'üì±',
                },
            });
            expect((_a = track.context) === null || _a === void 0 ? void 0 : _a.traits).toEqual({
                cell: 'üì±',
            });
        });
        test('accepts a context object', function () {
            var track = factory.track('Order Completed', shoes, {
                context: {
                    library: {
                        name: 'ajs-next',
                        version: '0.1.0',
                    },
                },
            });
            expect(track.context).toEqual({
                library: {
                    name: 'ajs-next',
                    version: '0.1.0',
                },
            });
        });
        test('merges a context object', function () {
            var track = factory.track('Order Completed', shoes, {
                foreignProp: 'üáßüá∑',
                context: {
                    innerProp: 'üëª',
                    library: {
                        name: 'ajs-next',
                        version: '0.1.0',
                    },
                },
            });
            expect(track.context).toEqual({
                library: {
                    name: 'ajs-next',
                    version: '0.1.0',
                },
                foreignProp: 'üáßüá∑',
                innerProp: 'üëª',
            });
        });
    });
    describe('normalize', function () {
        var msg = { type: 'track' };
        var opts = (msg.options = {});
        describe('message', function () {
            it('should merge original with normalized', function () {
                var _a;
                msg.userId = 'user-id';
                opts.integrations = { Segment: true };
                var normalized = factory['normalize'](msg);
                expect((_a = normalized.messageId) === null || _a === void 0 ? void 0 : _a.length).toBeGreaterThanOrEqual(41); // 'ajs-next-md5(content + [UUID])'
                delete normalized.messageId;
                expect(normalized).toStrictEqual({
                    integrations: { Segment: true },
                    type: 'track',
                    userId: 'user-id',
                    context: {},
                });
            });
        });
    });
});
//# sourceMappingURL=index.test.js.map