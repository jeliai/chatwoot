import { __awaiter, __generator } from "tslib";
import { asPromise } from '../as-promise';
describe('asPromise', function () {
    it('wraps a value so it can be awaited', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, asPromise(1)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('keeps promises as promises', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, asPromise(Promise.resolve(1))];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('works with functions', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, asPromise(function () { return 1; })];
                case 1:
                    _a.apply(void 0, [(_b.sent())()]).toBe(1);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=as-promise.test.js.map