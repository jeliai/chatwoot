import { __awaiter, __generator } from "tslib";
import { JSDOM } from 'jsdom';
import { Analytics } from '../../../analytics';
import { loadLegacyVideoPlugins } from '../index';
beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
    var html, jsd, windowSpy;
    return __generator(this, function (_a) {
        jest.restoreAllMocks();
        jest.resetAllMocks();
        html = "\n    <!DOCTYPE html>\n      <head>\n        <script>\n          'hi'\n        </script>\n      </head>\n      <body>\n      </body>\n    </html>\n    ".trim();
        jsd = new JSDOM(html, {
            runScripts: 'dangerously',
            resources: 'usable',
        });
        windowSpy = jest.spyOn(global, 'window', 'get');
        windowSpy.mockImplementation(function () {
            return jsd.window;
        });
        return [2 /*return*/];
    });
}); });
describe(loadLegacyVideoPlugins.name, function () {
    it('attaches video plugins to ajs', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ajs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.warn = function () { };
                    ajs = new Analytics({
                        writeKey: 'w_123',
                    });
                    return [4 /*yield*/, loadLegacyVideoPlugins(ajs)];
                case 1:
                    _a.sent();
                    expect(ajs.plugins).toMatchInlineSnapshot("\n      Object {\n        \"VimeoAnalytics\": [Function],\n        \"YouTubeAnalytics\": [Function],\n      }\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=index.test.js.map