import { __assign, __awaiter, __generator } from "tslib";
import { validation } from '..';
import { Context } from '../../../core/context';
var validEvent = {
    type: 'track',
    anonymousId: 'abc',
    event: 'test',
    properties: {},
    traits: {},
};
describe('validation', function () {
    ;
    ['track', 'identify', 'group', 'page', 'alias'].forEach(function (method) {
        describe(method, function () {
            it('validates that the `event` exists', function () { return __awaiter(void 0, void 0, void 0, function () {
                var val;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            val = function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    // @ts-ignore
                                    return [2 /*return*/, validation[method](
                                        // @ts-ignore
                                        new Context())];
                                });
                            }); };
                            return [4 /*yield*/, expect(val()).rejects.toMatchInlineSnapshot("[Error: Event is missing]")];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('validates that `event.event` exists', function () { return __awaiter(void 0, void 0, void 0, function () {
                var val;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            val = function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    // @ts-ignore
                                    return [2 /*return*/, validation[method](new Context(__assign(__assign({}, validEvent), { event: undefined })))];
                                });
                            }); };
                            if (!(method === 'track')) return [3 /*break*/, 2];
                            return [4 /*yield*/, expect(val()).rejects.toMatchInlineSnapshot("[Error: Event is not a string]")];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
            it('validates that `properties` or `traits` are objects', function () { return __awaiter(void 0, void 0, void 0, function () {
                var val;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (method === 'alias') {
                                return [2 /*return*/];
                            }
                            val = function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    // @ts-ignore
                                    return [2 /*return*/, validation[method](new Context(__assign(__assign({}, validEvent), { properties: undefined, traits: undefined })))];
                                });
                            }); };
                            return [4 /*yield*/, expect(val()).rejects.toMatchInlineSnapshot("[Error: properties is not an object]")];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('validates that it contains an user', function () { return __awaiter(void 0, void 0, void 0, function () {
                var val;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            val = function () { return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    // @ts-ignore
                                    return [2 /*return*/, validation[method](new Context(__assign(__assign({}, validEvent), { userId: undefined, anonymousId: undefined })))];
                                });
                            }); };
                            return [4 /*yield*/, expect(val()).rejects.toMatchInlineSnapshot("[Error: Missing userId or anonymousId]")];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=index.test.js.map