import { AliasParams, DispatchedEvent, EventParams, PageParams, UserParams } from './core/arguments-resolver';
import type { FormArgs, LinkArgs } from './core/auto-track';
import { Context } from './core/context';
import { Emitter } from './core/emitter';
import { Integrations, Plan, SegmentEvent } from './core/events';
import { Plugin } from './core/plugin';
import { EventQueue } from './core/queue/event-queue';
import { CookieOptions, Group, ID, User, UserOptions } from './core/user';
import type { LegacyIntegration } from './plugins/ajs-destination/types';
import type { DestinationMiddlewareFunction, MiddlewareFunction } from './plugins/middleware';
export interface AnalyticsSettings {
    writeKey: string;
    timeout?: number;
    plugins?: Plugin[];
    [key: string]: unknown;
}
export interface InitOptions {
    initialPageview?: boolean;
    cookie?: CookieOptions;
    user?: UserOptions;
    group?: UserOptions;
    integrations?: Integrations;
    plan?: Plan;
    retryQueue?: boolean;
}
export declare class Analytics extends Emitter {
    protected settings: AnalyticsSettings;
    private _user;
    private _group;
    private eventFactory;
    private _debug;
    initialized: boolean;
    integrations: Integrations;
    options: InitOptions;
    queue: EventQueue;
    constructor(settings: AnalyticsSettings, options?: InitOptions, queue?: EventQueue, user?: User, group?: Group);
    user: () => User;
    track(...args: EventParams): Promise<DispatchedEvent>;
    page(...args: PageParams): Promise<DispatchedEvent>;
    identify(...args: UserParams): Promise<DispatchedEvent>;
    group(...args: UserParams): Promise<DispatchedEvent> | Group;
    alias(...args: AliasParams): Promise<DispatchedEvent>;
    screen(...args: PageParams): Promise<DispatchedEvent>;
    trackClick(...args: LinkArgs): Promise<Analytics>;
    trackLink(...args: LinkArgs): Promise<Analytics>;
    trackSubmit(...args: FormArgs): Promise<Analytics>;
    trackForm(...args: FormArgs): Promise<Analytics>;
    register(...plugins: Plugin[]): Promise<Context>;
    deregister(...plugins: string[]): Promise<Context>;
    debug(toggle: boolean): Analytics;
    reset(): void;
    timeout(timeout: number): void;
    private dispatch;
    addSourceMiddleware(fn: MiddlewareFunction): Promise<Analytics>;
    addDestinationMiddleware(integrationName: string, ...middlewares: DestinationMiddlewareFunction[]): Promise<Analytics>;
    setAnonymousId(id?: string): ID;
    queryString(query: string): Promise<Context[]>;
    /**
     * @deprecated This function does not register a destination plugin.
     *
     * Instantiates a legacy Analytics.js destination.
     *
     * This function does not register the destination as an Analytics.JS plugin,
     * all the it does it to invoke the factory function back.
     */
    use(legacyPluginFactory: (analytics: Analytics) => void): Analytics;
    ready(callback?: Function): Promise<unknown>;
    noConflict(): Analytics;
    normalize(msg: SegmentEvent): SegmentEvent;
    get failedInitializations(): string[];
    get VERSION(): string;
    initialize(settings?: AnalyticsSettings, options?: InitOptions): Promise<Analytics>;
    init: (settings?: AnalyticsSettings | undefined, options?: InitOptions | undefined) => Promise<Analytics>;
    pageview(url: string): Promise<Analytics>;
    get plugins(): any;
    get Integrations(): Record<string, LegacyIntegration>;
    log(): void;
    addIntegrationMiddleware(): void;
    listeners(): void;
    addEventListener(): void;
    removeAllListeners(): void;
    removeListener(): void;
    removeEventListener(): void;
    hasListeners(): void;
    addIntegration(): void;
    add(): void;
    push(args: any[]): void;
}
