"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var js_cookie_1 = tslib_1.__importDefault(require("js-cookie"));
var assert_1 = tslib_1.__importDefault(require("assert"));
function clear() {
    document.cookie.split(';').forEach(function (c) {
        document.cookie = c
            .replace(/^ +/, '')
            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
    });
    localStorage.clear();
}
describe('user', function () {
    var cookieKey = __1.User.defaults.cookie.key;
    var localStorageKey = __1.User.defaults.localStorage.key;
    var store = new __1.LocalStorage();
    describe('()', function () {
        beforeEach(function () {
            clear();
        });
        it('should pick the old "_sio" anonymousId', function () {
            js_cookie_1.default.set('_sio', 'anonymous-id----user-id');
            var user = new __1.User();
            expect(user.anonymousId()).toEqual('anonymous-id');
        });
        it('should not pick the old "_sio" if anonymous id is present', function () {
            js_cookie_1.default.set('_sio', 'old-anonymous-id----user-id');
            js_cookie_1.default.set('ajs_anonymous_id', 'new-anonymous-id');
            assert_1.default(new __1.User().anonymousId() === 'new-anonymous-id');
        });
        it('should create anonymous id if missing', function () {
            var _a;
            var user = new __1.User();
            assert_1.default(((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length) === 36);
        });
        it('should not overwrite anonymous id', function () {
            js_cookie_1.default.set('ajs_anonymous_id', 'anonymous');
            expect(new __1.User().anonymousId()).toEqual('anonymous');
        });
    });
    describe('#id', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        describe('when cookies are disabled', function () {
            beforeEach(function () {
                jest.spyOn(__1.Cookie, 'available').mockReturnValueOnce(false);
                user = new __1.User();
                clear();
            });
            it('should not reset id with new user', function () {
                store.set(cookieKey, 'id');
                user = new __1.User();
                assert_1.default(user.id() === 'id');
            });
            it('should get an id from the store', function () {
                store.set(cookieKey, 'id');
                assert_1.default(user.id() === 'id');
            });
            it('should set an id to the store', function () {
                user.id('id');
                assert_1.default(store.get(cookieKey) === 'id');
            });
            it('should set the id when not persisting', function () {
                user = new __1.User({ persist: false });
                user.id('id');
                assert_1.default(user.id() === 'id');
            });
            it('should be null by default', function () {
                assert_1.default(user.id() === null);
            });
            it('should not reset anonymousId if the user didnt have previous id', function () {
                var prev = user.anonymousId();
                user.id('foo');
                user.id('foo');
                user.id('foo');
                assert_1.default(user.anonymousId() === prev);
            });
            it('should reset anonymousId if the user id changed', function () {
                var _a;
                user.anonymousId('bla');
                var prev = user.anonymousId();
                user.id('foo');
                user.id('baz');
                expect(user.anonymousId()).not.toEqual(prev);
                expect((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length).toBe(36);
            });
            it('should not reset anonymousId if the user id changed to null', function () {
                var _a;
                var prev = user.anonymousId();
                user.id('foo');
                user.id(null);
                assert_1.default(user.anonymousId() === prev);
                assert_1.default(((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length) === 36);
            });
        });
        describe('when cookies and localStorage are disabled', function () {
            beforeEach(function () {
                jest.spyOn(__1.Cookie, 'available').mockReturnValueOnce(false);
                jest.spyOn(__1.LocalStorage, 'available').mockReturnValueOnce(false);
                user = new __1.User();
                clear();
            });
            it('should get an id from memory', function () {
                user.id('id');
                assert_1.default(user.id() === 'id');
                expect(js_cookie_1.default.get(cookieKey)).toBeFalsy();
                expect(store.get(cookieKey)).toBeFalsy();
            });
            it('should get an id when not persisting', function () {
                user = new __1.User({ persist: false });
                user.id('id');
                assert_1.default(user.id() === 'id');
            });
            it('should be null by default', function () {
                assert_1.default(user.id() === null);
            });
            it('should not reset anonymousId if the user didnt have previous id', function () {
                var prev = user.anonymousId();
                user.id('foo');
                user.id('foo');
                user.id('foo');
                assert_1.default(user.anonymousId() === prev);
            });
            it('should reset anonymousId if the user id changed', function () {
                var _a;
                var prev = user.anonymousId();
                user.id('foo');
                user.id('baz');
                assert_1.default(user.anonymousId() !== prev);
                assert_1.default(((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length) === 36);
            });
            it('should not reset anonymousId if the user id changed to null', function () {
                var _a;
                var prev = user.anonymousId();
                user.id('foo');
                user.id(null);
                assert_1.default(user.anonymousId() === prev);
                assert_1.default(((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length) === 36);
            });
        });
        describe('when cookies are enabled', function () {
            it('should get an id from the cookie', function () {
                js_cookie_1.default.set(cookieKey, 'id');
                assert_1.default(user.id() === 'id');
            });
            it('should set an id to the cookie', function () {
                user.id('id');
                assert_1.default(js_cookie_1.default.get(cookieKey) === 'id');
            });
            it('should get an id when not persisting', function () {
                user = new __1.User({ persist: false });
                user.id('id');
                assert_1.default(user.id() === 'id');
            });
            it('should be null by default', function () {
                assert_1.default(user.id() === null);
            });
            it('should parse integer values', function () {
                // @ts-expect-error the library only accepts strings or objects,
                // but AJS Classic allows setting numbers on cookie values, so we have
                // to parse them back to string.
                js_cookie_1.default.set(cookieKey, 1234);
                assert_1.default(user.id() === '1234');
            });
            it('should not reset anonymousId if the user didnt have previous id', function () {
                var prev = user.anonymousId();
                user.id('foo');
                user.id('foo');
                user.id('foo');
                assert_1.default(user.anonymousId() === prev);
            });
            it('should reset anonymousId if the user id changed', function () {
                var _a;
                var prev = user.anonymousId();
                user.id('foo');
                user.id('baz');
                assert_1.default(user.anonymousId() !== prev);
                assert_1.default(((_a = user.anonymousId()) === null || _a === void 0 ? void 0 : _a.length) === 36);
            });
        });
    });
    describe('#anonymousId', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        describe('when cookies are disabled', function () {
            beforeEach(function () {
                jest.spyOn(__1.Cookie, 'available').mockReturnValueOnce(false);
                user = new __1.User();
                clear();
            });
            it('should get an id from the store', function () {
                store.set('ajs_anonymous_id', 'anon-id');
                expect(user.anonymousId()).toEqual('anon-id');
            });
            it('should set an id to the store', function () {
                user.anonymousId('anon-id');
                assert_1.default(store.get('ajs_anonymous_id') === 'anon-id');
            });
            it('should return anonymousId using the store', function () {
                user.anonymousId('anon-id');
                assert_1.default(user.anonymousId() === 'anon-id');
            });
            it('should get an id without quotes from the store', function () {
                window.localStorage.setItem('ajs_anonymous_id', 'abc-def');
                assert_1.default(user.anonymousId() === 'abc-def');
            });
        });
        describe('when cookies and localStorage are disabled', function () {
            beforeEach(function () {
                jest.spyOn(__1.LocalStorage, 'available').mockReturnValueOnce(false);
                jest.spyOn(__1.Cookie, 'available').mockReturnValueOnce(false);
                user = new __1.User();
                clear();
            });
            it('should get an id from memory', function () {
                user.anonymousId('anon-id');
                assert_1.default(user.anonymousId() === 'anon-id');
                expect(js_cookie_1.default.get('ajs_anonymous_id')).toBeFalsy();
            });
        });
        describe('when cookies are enabled', function () {
            it('should get an id from the cookie', function () {
                js_cookie_1.default.set('ajs_anonymous_id', 'anon-id');
                assert_1.default(user.anonymousId() === 'anon-id');
            });
            it('should set an id to the cookie', function () {
                user.anonymousId('anon-id');
                assert_1.default(js_cookie_1.default.get('ajs_anonymous_id') === 'anon-id');
            });
            it('should set anonymousId in both cookie and localStorage', function () {
                user.anonymousId('anon0');
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), 'anon0');
                assert_1.default.equal(store.get('ajs_anonymous_id'), 'anon0');
            });
            it('should not set anonymousId in localStorage when localStorage fallback is disabled', function () {
                user = new __1.User({
                    localStorageFallbackDisabled: true,
                });
                user.anonymousId('anon0');
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), 'anon0');
                assert_1.default.equal(store.get('ajs_anonymous_id'), null);
            });
            it('should copy value from cookie to localStorage', function () {
                user = new __1.User();
                js_cookie_1.default.set('ajs_anonymous_id', 'anon1');
                assert_1.default.equal(user.anonymousId(), 'anon1');
                assert_1.default.equal(store.get('ajs_anonymous_id'), 'anon1');
            });
            it('should not copy value from cookie to localStorage when localStorage fallback is disabled', function () {
                user = new __1.User({
                    localStorageFallbackDisabled: true,
                });
                js_cookie_1.default.set('ajs_anonymous_id', 'anon1');
                assert_1.default.equal(user.anonymousId(), 'anon1');
                assert_1.default.equal(store.get('ajs_anonymous_id'), null);
            });
            it('should fall back to localStorage when cookie is not set', function () {
                user = new __1.User();
                user.anonymousId('anon12');
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), 'anon12');
                // delete the cookie
                js_cookie_1.default.remove('ajs_anonymous_id');
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), null);
                // verify anonymousId() returns the correct id even when there's no cookie
                assert_1.default.equal(user.anonymousId(), 'anon12');
                // verify cookie value is restored from localStorage
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), 'anon12');
            });
            it('should write to both cookie and localStorage when generating a new anonymousId', function () {
                user = new __1.User();
                user.anonymousId('bla');
                var anonId = user.anonymousId();
                assert_1.default.notEqual(anonId, null);
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), anonId);
                assert_1.default.equal(store.get('ajs_anonymous_id'), anonId);
            });
            it('should not write to both cookie and localStorage when generating a new anonymousId and localStorage fallback is disabled', function () {
                user = new __1.User({
                    localStorageFallbackDisabled: true,
                });
                user.anonymousId('bla');
                var anonId = user.anonymousId();
                assert_1.default.notEqual(anonId, null);
                assert_1.default.equal(js_cookie_1.default.get('ajs_anonymous_id'), anonId);
                assert_1.default.equal(store.get('ajs_anonymous_id'), null);
            });
        });
    });
    describe('#traits', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        it('should get traits', function () {
            store.set(localStorageKey, { trait: true });
            expect(user.traits()).toEqual({ trait: true });
        });
        it('should get traits when not persisting', function () {
            user = new __1.User({ persist: false });
            user.traits({ trait: true });
            expect(user.traits()).toEqual({ trait: true });
            expect(store.get(localStorageKey)).toBeNull();
        });
        it('should set traits', function () {
            user.traits({ trait: true });
            expect(store.get(localStorageKey)).toEqual({ trait: true });
        });
        it('should default traits to an empty object', function () {
            user.traits(null);
            expect(store.get(localStorageKey)).toEqual({});
        });
        it('should default traits to an empty object when not persisting', function () {
            user = new __1.User({ persist: false });
            user.traits(null);
            expect(user.traits()).toEqual({});
        });
        it('should be an empty object by default', function () {
            expect(user.traits()).toEqual({});
        });
        it('should not reset traits on new user', function () {
            user.traits({ trait: true });
            user = new __1.User();
            expect(user.traits()).toEqual({ trait: true });
        });
    });
    describe('#options', function () {
        it('should have default cookie options', function () {
            var cookie = new __1.Cookie();
            expect(cookie['options'].domain).toBe(undefined);
            expect(cookie['options'].maxage).toBe(365);
            expect(cookie['options'].path).toBe('/');
            expect(cookie['options'].sameSite).toBe('Lax');
            expect(cookie['options'].secure).toBe(undefined);
        });
        it('should set options properly', function () {
            var cookie = new __1.Cookie({ domain: 'foo', secure: true, path: '/test' });
            expect(cookie['options'].domain).toBe('foo');
            expect(cookie['options'].secure).toBe(true);
            expect(cookie['options'].path).toBe('/test');
        });
    });
    describe('#save', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        it('should save an id to a cookie', function () {
            user.id('id');
            user.save();
            expect(js_cookie_1.default.get(cookieKey)).toEqual('id');
        });
        it('should save an id to localStorage', function () {
            user.id('id');
            user.save();
            expect(store.get(cookieKey)).toEqual('id');
        });
        it('should not save an id to localStorage when localStorage fallback is disabled', function () {
            user = new __1.User({
                localStorageFallbackDisabled: true,
            });
            user.id('id');
            user.save();
            expect(store.get(cookieKey)).toBeNull();
        });
        it('should not get id from localStorage when fallback is disabled and id() is called', function () {
            user = new __1.User({
                localStorageFallbackDisabled: false,
            });
            user.id('id');
            user.save();
            js_cookie_1.default.remove(cookieKey);
            user = new __1.User({
                localStorageFallbackDisabled: true,
            });
            user.id('foo');
            user.save();
            expect(user.id()).toEqual('foo');
            expect(store.get(cookieKey)).toEqual('id');
        });
        it('should save traits to local storage', function () {
            user.traits({ trait: true });
            user.save();
            expect(store.get(localStorageKey)).toEqual({ trait: true });
        });
        it('shouldnt save if persist is false', function () {
            user = new __1.User({
                persist: false,
            });
            user.id('id');
            user.save();
            expect(js_cookie_1.default.get(cookieKey)).toBeUndefined();
        });
    });
    describe('#logout', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        it('should reset an id and traits', function () {
            user.id('id');
            user.anonymousId('anon-id');
            user.traits({ trait: true });
            user.logout();
            expect(js_cookie_1.default.get('ajs_anonymous_id')).toBeUndefined();
            expect(user.id()).toBeNull();
            expect(user.traits()).toEqual({});
        });
        it('should clear id in cookie', function () {
            user.id('id');
            user.save();
            user.logout();
            expect(js_cookie_1.default.getJSON(cookieKey)).toBeFalsy();
        });
        it('should clear id in local storage', function () {
            user.id('id');
            user.save();
            user.logout();
            expect(store.get(cookieKey)).toBeNull();
        });
        it('should clear traits in local storage', function () {
            user.traits({ trait: true });
            user.save();
            user.logout();
            expect(store.get(localStorageKey)).toEqual({});
        });
    });
    describe('#identify', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        it('should save an id', function () {
            user.identify('id');
            expect(user.id()).toEqual('id');
        });
        it('should save traits', function () {
            user.identify(null, { trait: true });
            expect(user.traits()).toEqual({ trait: true });
            expect(store.get(localStorageKey)).toEqual({ trait: true });
        });
        it('should save an id and traits', function () {
            user.identify('id', { trait: true });
            expect(user.id()).toEqual('id');
            expect(user.traits()).toEqual({ trait: true });
            expect(js_cookie_1.default.getJSON(cookieKey)).toEqual('id');
            expect(store.get(localStorageKey)).toEqual({ trait: true });
        });
        it('should extend existing traits', function () {
            user.traits({ one: 1 });
            user.identify('id', { two: 2 });
            expect(user.traits()).toEqual({ one: 1, two: 2 });
            expect(store.get(localStorageKey)).toEqual({ one: 1, two: 2 });
        });
        it('shouldnt extend existing traits for a new id', function () {
            user.id('id');
            user.traits({ one: 1 });
            user.identify('new', { two: 2 });
            expect(user.traits()).toEqual({ two: 2 });
            expect(store.get(localStorageKey)).toEqual({ two: 2 });
        });
        it('should reset traits for a new id', function () {
            user.id('id');
            user.traits({ one: 1 });
            user.identify('new');
            expect(user.traits()).toEqual({});
            expect(store.get(localStorageKey)).toEqual({});
        });
    });
    describe('#load', function () {
        var user;
        beforeEach(function () {
            user = new __1.User();
            clear();
        });
        it('should load an empty user', function () {
            user.load();
            expect(user.id()).toBe(null);
            expect(user.traits()).toEqual({});
        });
        it('should load an id from a cookie', function () {
            js_cookie_1.default.set(cookieKey, 'le id');
            user.load();
            expect(user.id()).toEqual('le id');
        });
        it('should load traits from local storage', function () {
            store.set(localStorageKey, { trait: true });
            user.load();
            expect(user.traits()).toEqual({ trait: true });
        });
        it('should load from an old cookie', function () {
            js_cookie_1.default.set(__1.User.defaults.cookie.oldKey, {
                id: 'old',
                traits: { trait: true },
            });
            user.load();
            expect(user.id()).toEqual('old');
            expect(user.traits()).toEqual({ trait: true });
        });
        it('load should preserve the original User cookie options', function () {
            user = new __1.User(undefined, {
                domain: 'foo',
            }).load();
            // @ts-ignore - we are testing the private properties here
            expect(user.cookies['options'].domain).toEqual('foo');
        });
    });
});
describe('group', function () {
    var store = new __1.LocalStorage();
    beforeEach(function () {
        clear();
    });
    it('should net reset id and traits', function () {
        var group = new __1.Group();
        group.id('gid');
        group.traits({ trait: true });
        group = new __1.Group();
        expect(group.id()).toBe('gid');
        expect(group.traits().trait).toBe(true);
    });
    it('id() should fallback to localStorage', function () {
        var group = new __1.Group();
        group.id('gid');
        js_cookie_1.default.remove('ajs_group_id');
        assert_1.default.equal(js_cookie_1.default.get('ajs_group_id'), null);
        assert_1.default.equal(group.id(), 'gid');
        assert_1.default.equal(store.get('ajs_group_id'), 'gid');
    });
    it('behaves the same as user', function () {
        var user = new __1.User();
        var group = new __1.Group();
        user.id('uid');
        group.id('gid');
        expect(user.id()).toEqual('uid');
        expect(group.id()).toEqual('gid');
    });
    it('always ignores anonymous ids', function () {
        var group = new __1.Group();
        expect(group.anonymousId()).toBeUndefined();
        group.anonymousId('bla');
        expect(group.anonymousId()).toBeUndefined();
    });
    it('uses a different cookie from user', function () {
        var _a, _b;
        var group = new __1.Group();
        group.id('gid');
        expect(js_cookie_1.default.get((_b = (_a = group.options.cookie) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : '')).toEqual('gid');
        expect(js_cookie_1.default.get(__1.User.defaults.cookie.key)).not.toEqual('gid');
    });
    it('uses a different local storage key', function () {
        var _a, _b;
        var group = new __1.Group();
        group.identify('gid', { coolkids: true });
        expect(store.get((_b = (_a = group.options.localStorage) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : '')).toEqual({
            coolkids: true,
        });
        expect(store.get(__1.User.defaults.localStorage.key)).not.toEqual({
            coolkids: true,
        });
    });
    describe('#options', function () {
        it('should set options with defaults', function () {
            var group = new __1.Group();
            expect(group.options).toEqual({
                persist: true,
                cookie: {
                    key: 'ajs_group_id',
                },
                localStorage: {
                    key: 'ajs_group_properties',
                },
            });
        });
    });
});
describe('store', function () {
    var store = new __1.LocalStorage();
    beforeEach(function () {
        clear();
    });
    describe('#get', function () {
        it('should not not get an empty record', function () {
            expect(store.get('abc') === undefined);
        });
        it('should get an existing record', function () {
            store.set('x', { a: 'b' });
            expect(store.get('x')).toStrictEqual({ a: 'b' });
        });
    });
    describe('#set', function () {
        it('should be able to set a record', function () {
            store.set('x', { a: 'b' });
            expect(store.get('x')).toStrictEqual({ a: 'b' });
        });
        it('should catch localStorage quota exceeded errors', function () {
            var val = 'x'.repeat(10 * 1024 * 1024);
            store.set('foo', val);
            expect(store.get('foo')).toBe(null);
        });
    });
    describe('#remove', function () {
        it('should be able to remove a record', function () {
            store.set('x', { a: 'b' });
            expect(store.get('x')).toStrictEqual({ a: 'b' });
            store.remove('x');
            expect(store.get('x') === undefined);
        });
    });
});
describe('Custom cookie params', function () {
    beforeEach(function () {
        clear();
    });
    it('allows for overriding keys', function () {
        var customUser = new __1.User({}, {
            maxage: 200,
            path: '/',
            sameSite: 'Lax',
        });
        customUser.identify('some_id', { trait: true });
        expect(document.cookie).toMatchInlineSnapshot("\"; ajs_user_id=some_id\"");
        expect(customUser.id()).toBe('some_id');
        expect(customUser.traits()).toEqual({ trait: true });
    });
});
//# sourceMappingURL=index.test.js.map