import { SegmentEvent } from '../events';
import Logger, { LogLevel, LogMessage } from '../logger';
import Stats, { Metric } from '../stats';
import { MetricsOptions } from '../stats/remote-metrics';
export interface AbstractContext {
    cancel: () => never;
    log: (level: LogLevel, message: string, extras?: object) => void;
    stats: Stats;
}
export interface SerializedContext {
    id: string;
    event: SegmentEvent;
    logs: LogMessage[];
    metrics: Metric[];
}
interface CancelationOptions {
    retry?: boolean;
    reason?: string;
    type?: string;
}
export declare class ContextCancelation {
    retry: boolean;
    type: string;
    reason?: string;
    constructor(options: CancelationOptions);
}
export declare class Context implements AbstractContext {
    private _event;
    private _attempts;
    logger: Logger;
    stats: Stats;
    private _id;
    constructor(event: SegmentEvent, id?: string);
    static initMetrics(options?: MetricsOptions): void;
    static system(): Context;
    isSame(other: Context): boolean;
    cancel: (error?: Error | ContextCancelation | undefined) => never;
    log(level: LogLevel, message: string, extras?: object): void;
    get id(): string;
    get event(): SegmentEvent;
    set event(evt: SegmentEvent);
    get attempts(): number;
    set attempts(attempts: number);
    updateEvent(path: string, val: unknown): SegmentEvent;
    logs(): LogMessage[];
    flush(): void;
    toJSON(): SerializedContext;
}
export {};
