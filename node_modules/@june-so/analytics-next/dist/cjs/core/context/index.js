"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = exports.ContextCancelation = void 0;
var tslib_1 = require("tslib");
var uuid_1 = require("@lukeed/uuid");
var dset_1 = require("dset");
var logger_1 = tslib_1.__importDefault(require("../logger"));
var stats_1 = tslib_1.__importDefault(require("../stats"));
var remote_metrics_1 = require("../stats/remote-metrics");
var ContextCancelation = /** @class */ (function () {
    function ContextCancelation(options) {
        var _a, _b, _c;
        this.retry = (_a = options.retry) !== null && _a !== void 0 ? _a : true;
        this.type = (_b = options.type) !== null && _b !== void 0 ? _b : 'plugin Error';
        this.reason = (_c = options.reason) !== null && _c !== void 0 ? _c : '';
    }
    return ContextCancelation;
}());
exports.ContextCancelation = ContextCancelation;
var remoteMetrics;
var Context = /** @class */ (function () {
    function Context(event, id) {
        this.logger = new logger_1.default();
        this.cancel = function (error) {
            if (error) {
                throw error;
            }
            throw new ContextCancelation({ reason: 'Context Cancel' });
        };
        this._attempts = 0;
        this._event = event;
        this._id = id !== null && id !== void 0 ? id : uuid_1.v4();
        this.stats = new stats_1.default(remoteMetrics);
    }
    Context.initMetrics = function (options) {
        remoteMetrics = new remote_metrics_1.RemoteMetrics(options);
    };
    Context.system = function () {
        return new Context({ type: 'track', event: 'system' });
    };
    Context.prototype.isSame = function (other) {
        return other._id === this._id;
    };
    Context.prototype.log = function (level, message, extras) {
        this.logger.log(level, message, extras);
    };
    Object.defineProperty(Context.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "event", {
        get: function () {
            return this._event;
        },
        set: function (evt) {
            this._event = evt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Context.prototype, "attempts", {
        get: function () {
            return this._attempts;
        },
        set: function (attempts) {
            this._attempts = attempts;
        },
        enumerable: false,
        configurable: true
    });
    Context.prototype.updateEvent = function (path, val) {
        var _a;
        // Don't allow integrations that are set to false to be overwritten with integration settings.
        if (path.split('.')[0] === 'integrations') {
            var integrationName = path.split('.')[1];
            if (((_a = this._event.integrations) === null || _a === void 0 ? void 0 : _a[integrationName]) === false) {
                return this._event;
            }
        }
        dset_1.dset(this._event, path, val);
        return this._event;
    };
    Context.prototype.logs = function () {
        return this.logger.logs;
    };
    Context.prototype.flush = function () {
        this.logger.flush();
        this.stats.flush();
    };
    Context.prototype.toJSON = function () {
        return {
            id: this._id,
            event: this._event,
            logs: this.logger.logs,
            metrics: this.stats.metrics,
        };
    };
    return Context;
}());
exports.Context = Context;
//# sourceMappingURL=index.js.map