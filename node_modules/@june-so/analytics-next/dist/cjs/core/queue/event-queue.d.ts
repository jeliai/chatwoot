import { Analytics } from '../../analytics';
import { PriorityQueue } from '../../lib/priority-queue';
import { Context } from '../context';
import { Emitter } from '../emitter';
import { Plugin } from '../plugin';
export declare class EventQueue extends Emitter {
    queue: PriorityQueue<Context>;
    plugins: Plugin[];
    failedInitializations: string[];
    private flushing;
    constructor(priorityQueue?: PriorityQueue<Context>);
    register(ctx: Context, plugin: Plugin, instance: Analytics): Promise<void>;
    deregister(ctx: Context, plugin: Plugin, instance: Analytics): Promise<void>;
    dispatch(ctx: Context): Promise<Context>;
    private subscribeToDelivery;
    dispatchSingle(ctx: Context): Promise<Context>;
    isEmpty(): boolean;
    private scheduleFlush;
    private deliver;
    private enqueuRetry;
    flush(): Promise<Context[]>;
    private isReady;
    private availableExtensions;
    private flushOne;
}
