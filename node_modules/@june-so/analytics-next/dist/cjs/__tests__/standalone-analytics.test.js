"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsdom_1 = tslib_1.__importStar(require("jsdom"));
var browser_1 = require("../browser");
var segment_snippet_1 = require("../tester/__fixtures__/segment-snippet");
var standalone_analytics_1 = require("../standalone-analytics");
var utils_1 = require("ts-jest/utils");
var unfetch_1 = tslib_1.__importDefault(require("unfetch"));
var persisted_1 = require("../lib/priority-queue/persisted");
var track = jest.fn();
var identify = jest.fn();
var page = jest.fn();
var setAnonymousId = jest.fn();
var register = jest.fn();
var addSourceMiddleware = jest.fn();
jest.mock('../analytics', function () { return ({
    Analytics: function () { return ({
        track: track,
        identify: identify,
        page: page,
        setAnonymousId: setAnonymousId,
        addSourceMiddleware: addSourceMiddleware,
        register: register,
        emit: jest.fn(),
        queue: {
            queue: new persisted_1.PersistedPriorityQueue(1, 'event-queue'),
        },
    }); },
}); });
var fetchSettings = Promise.resolve({
    json: function () {
        return Promise.resolve({
            integrations: {},
        });
    },
});
jest.mock('unfetch', function () {
    return jest.fn();
});
describe('standalone bundle', function () {
    var segmentDotCom = "foo";
    beforeEach(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var html, virtualConsole, jsd, windowSpy, documentSpy;
        return tslib_1.__generator(this, function (_a) {
            jest.restoreAllMocks();
            jest.resetAllMocks();
            html = ("\n    <!DOCTYPE html>\n      <head>\n        <script>\n          " + segment_snippet_1.snippet(segmentDotCom, true, "\n            window.analytics.track('fruit basket', { fruits: ['\uD83C\uDF4C', '\uD83C\uDF47'] })\n            window.analytics.identify('netto', { employer: 'segment' })\n            window.analytics.setAnonymousId('anonNetto')\n          ") + "\n        </script>\n      </head>\n      <body>\n      </body>\n    </html>\n    ").trim();
            virtualConsole = new jsdom_1.default.VirtualConsole();
            jsd = new jsdom_1.JSDOM(html, {
                runScripts: 'dangerously',
                resources: 'usable',
                url: 'https://segment.com',
                virtualConsole: virtualConsole,
            });
            windowSpy = jest.spyOn(global, 'window', 'get');
            documentSpy = jest.spyOn(global, 'document', 'get');
            jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
            windowSpy.mockImplementation(function () {
                return jsd.window;
            });
            documentSpy.mockImplementation(function () { return jsd.window.document; });
            return [2 /*return*/];
        });
    }); });
    it('detects embedded write keys', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var fakeAjs, spy;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    window.analyticsWriteKey = 'write_key_abc_123';
                    fakeAjs = {
                        ready: function (cb) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                cb();
                                return [2 /*return*/];
                            });
                        }); },
                    };
                    spy = jest
                        .spyOn(browser_1.AnalyticsBrowser, 'standalone')
                        .mockResolvedValueOnce(fakeAjs);
                    return [4 /*yield*/, standalone_analytics_1.install()];
                case 1:
                    _a.sent();
                    expect(spy).toHaveBeenCalledWith('write_key_abc_123', {});
                    return [2 /*return*/];
            }
        });
    }); });
    it('derives the write key from scripts on the page', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var fakeAjs, spy;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeAjs = {
                        ready: function (cb) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                cb();
                                return [2 /*return*/];
                            });
                        }); },
                    };
                    spy = jest
                        .spyOn(browser_1.AnalyticsBrowser, 'standalone')
                        .mockResolvedValueOnce(fakeAjs);
                    return [4 /*yield*/, standalone_analytics_1.install()];
                case 1:
                    _a.sent();
                    expect(spy).toHaveBeenCalledWith(segmentDotCom, {});
                    return [2 /*return*/];
            }
        });
    }); });
    it('runs any buffered operations after load', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // @ts-ignore ignore Response required fields
                    utils_1.mocked(unfetch_1.default).mockImplementation(function () { return fetchSettings; });
                    return [4 /*yield*/, standalone_analytics_1.install()];
                case 1:
                    _a.sent();
                    setTimeout(function () {
                        expect(track).toHaveBeenCalledWith('fruit basket', {
                            fruits: ['üçå', 'üçá'],
                        });
                        expect(identify).toHaveBeenCalledWith('netto', {
                            employer: 'segment',
                        });
                        expect(page).toHaveBeenCalled();
                        done();
                    }, 0);
                    return [2 /*return*/];
            }
        });
    }); });
    it('adds buffered source middleware before other buffered operations', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var operations;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // @ts-ignore ignore Response required fields
                    utils_1.mocked(unfetch_1.default).mockImplementation(function () { return fetchSettings; });
                    operations = [];
                    addSourceMiddleware.mockImplementationOnce(function () {
                        return operations.push('addSourceMiddleware');
                    });
                    page.mockImplementationOnce(function () { return operations.push('page'); });
                    return [4 /*yield*/, standalone_analytics_1.install()];
                case 1:
                    _a.sent();
                    setTimeout(function () {
                        expect(addSourceMiddleware).toHaveBeenCalled();
                        expect(operations).toEqual([
                            // should run before page call in the snippet
                            'addSourceMiddleware',
                            'page',
                        ]);
                        done();
                    }, 0);
                    return [2 /*return*/];
            }
        });
    }); });
    it('sets buffered anonymousId before loading destinations', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var operations;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // @ts-ignore ignore Response required fields
                    utils_1.mocked(unfetch_1.default).mockImplementation(function () { return fetchSettings; });
                    operations = [];
                    track.mockImplementationOnce(function () { return operations.push('track'); });
                    setAnonymousId.mockImplementationOnce(function () {
                        return operations.push('setAnonymousId');
                    });
                    register.mockImplementationOnce(function () { return operations.push('register'); });
                    return [4 /*yield*/, standalone_analytics_1.install()];
                case 1:
                    _a.sent();
                    setTimeout(function () {
                        expect(setAnonymousId).toHaveBeenCalledWith('anonNetto');
                        expect(operations).toEqual([
                            // should run before any plugin is registered
                            'setAnonymousId',
                            // should run before any events are sent downstream
                            'register',
                            // should run after all plugins have been registered
                            'track',
                        ]);
                        done();
                    }, 0);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=standalone-analytics.test.js.map