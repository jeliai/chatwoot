"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsdom_1 = tslib_1.__importStar(require("jsdom"));
var utils_1 = require("ts-jest/utils");
var unfetch_1 = tslib_1.__importDefault(require("unfetch"));
var p_while_1 = require("../lib/p-while");
var segment_snippet_1 = require("../tester/__fixtures__/segment-snippet");
var cdnResponse = {
    integrations: {
        Zapier: {
            type: 'server',
        },
        'Amazon S3': {},
        Amplitude: {
            type: 'browser',
        },
        Segmentio: {
            type: 'browser',
        },
        Iterable: {
            type: 'browser',
            name: 'Iterable',
        },
    },
};
var fetchSettings = Promise.resolve({
    json: function () { return Promise.resolve(cdnResponse); },
});
jest.mock('unfetch', function () {
    return jest.fn();
});
describe('standalone bundle', function () {
    var segmentDotCom = "foo";
    var jsd;
    var windowSpy;
    var documentSpy;
    beforeEach(function () {
        jest.restoreAllMocks();
        jest.resetAllMocks();
        jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
        // @ts-ignore ignore Response required fields
        utils_1.mocked(unfetch_1.default).mockImplementation(function () { return fetchSettings; });
        var html = ("\n    <!DOCTYPE html>\n      <head>\n        <script>\n          " + segment_snippet_1.snippet(segmentDotCom, true) + "\n        </script>\n      </head>\n      <body>\n      </body>\n    </html>\n    ").trim();
        var virtualConsole = new jsdom_1.default.VirtualConsole();
        jsd = new jsdom_1.JSDOM(html, {
            runScripts: 'dangerously',
            resources: 'usable',
            url: 'https://segment.com',
            virtualConsole: virtualConsole,
        });
        windowSpy = jest.spyOn(global, 'window', 'get');
        documentSpy = jest.spyOn(global, 'document', 'get');
        jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
        windowSpy.mockImplementation(function () {
            return jsd.window;
        });
        documentSpy.mockImplementation(function () { return jsd.window.document; });
    });
    it('loads AJS on execution', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require('../standalone')); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, p_while_1.pWhile(function () { var _a; return ((_a = window.analytics) === null || _a === void 0 ? void 0 : _a.initialized) !== true; }, function () { })];
                case 2:
                    _a.sent();
                    expect(window.analytics).not.toBeUndefined();
                    expect(window.analytics.initialized).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=standalone.test.js.map