"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsdom_1 = require("jsdom");
var analytics_1 = require("../analytics");
// @ts-ignore loadLegacySettings mocked dependency is accused as unused
var browser_1 = require("../browser");
var test_writekeys_1 = require("./test-writekeys");
var writeKey = test_writekeys_1.TEST_WRITEKEY;
describe('queryString', function () {
    var jsd;
    beforeEach(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var html, windowSpy;
        return tslib_1.__generator(this, function (_a) {
            jest.restoreAllMocks();
            jest.resetAllMocks();
            html = "\n    <!DOCTYPE html>\n      <head>\n        <script>'hi'</script>\n      </head>\n      <body>\n      </body>\n    </html>\n    ".trim();
            jsd = new jsdom_1.JSDOM(html, {
                runScripts: 'dangerously',
                resources: 'usable',
                url: 'https://localhost',
            });
            windowSpy = jest.spyOn(global, 'window', 'get');
            windowSpy.mockImplementation(function () { return jsd.window; });
            return [2 /*return*/];
        });
    }); });
    it('applies query string logic if window.location.search is present', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var mockQueryString;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.mock('../analytics');
                    mockQueryString = jest
                        .fn()
                        .mockImplementation(function () { return Promise.resolve(); });
                    analytics_1.Analytics.prototype.queryString = mockQueryString;
                    jsd.reconfigure({
                        url: 'https://localhost/?ajs_id=123',
                    });
                    return [4 /*yield*/, browser_1.AnalyticsBrowser.load({ writeKey: writeKey })];
                case 1:
                    _a.sent();
                    expect(mockQueryString).toHaveBeenCalledWith('?ajs_id=123');
                    return [2 /*return*/];
            }
        });
    }); });
    it('applies query string logic if window.location.hash is present', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var mockQueryString;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.mock('../analytics');
                    mockQueryString = jest
                        .fn()
                        .mockImplementation(function () { return Promise.resolve(); });
                    analytics_1.Analytics.prototype.queryString = mockQueryString;
                    jsd.reconfigure({
                        url: 'https://localhost/#/?ajs_id=123',
                    });
                    return [4 /*yield*/, browser_1.AnalyticsBrowser.load({ writeKey: writeKey })];
                case 1:
                    _a.sent();
                    expect(mockQueryString).toHaveBeenCalledWith('?ajs_id=123');
                    jsd.reconfigure({
                        url: 'https://localhost/#about?ajs_id=123',
                    });
                    return [4 /*yield*/, browser_1.AnalyticsBrowser.load({ writeKey: writeKey })];
                case 2:
                    _a.sent();
                    expect(mockQueryString).toHaveBeenCalledWith('?ajs_id=123');
                    return [2 /*return*/];
            }
        });
    }); });
    it('applies query string logic if window.location.hash is present in different formats', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var mockQueryString;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.mock('../analytics');
                    mockQueryString = jest
                        .fn()
                        .mockImplementation(function () { return Promise.resolve(); });
                    analytics_1.Analytics.prototype.queryString = mockQueryString;
                    jsd.reconfigure({
                        url: 'https://localhost/#about?ajs_id=123',
                    });
                    return [4 /*yield*/, browser_1.AnalyticsBrowser.load({ writeKey: writeKey })];
                case 1:
                    _a.sent();
                    expect(mockQueryString).toHaveBeenCalledWith('?ajs_id=123');
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=query-string.integration.test.js.map