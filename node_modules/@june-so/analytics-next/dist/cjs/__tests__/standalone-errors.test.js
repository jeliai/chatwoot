"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsdom_1 = tslib_1.__importStar(require("jsdom"));
var browser_1 = require("../browser");
var segment_snippet_1 = require("../tester/__fixtures__/segment-snippet");
var p_while_1 = require("../lib/p-while");
var utils_1 = require("ts-jest/utils");
var unfetch_1 = tslib_1.__importDefault(require("unfetch"));
var remote_metrics_1 = require("../core/stats/remote-metrics");
var cdnResponse = {
    integrations: {
        Zapier: {
            type: 'server',
        },
        'Amazon S3': {},
        Amplitude: {
            type: 'browser',
        },
        Segmentio: {
            type: 'browser',
        },
        Iterable: {
            type: 'browser',
            name: 'Iterable',
        },
    },
};
var fetchSettings = Promise.resolve({
    json: function () { return Promise.resolve(cdnResponse); },
});
jest.mock('unfetch', function () {
    return jest.fn();
});
describe('standalone bundle', function () {
    var segmentDotCom = "foo";
    var jsd;
    beforeEach(function () {
        jest.restoreAllMocks();
        jest.resetAllMocks();
        jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
        // @ts-ignore ignore Response required fields
        utils_1.mocked(unfetch_1.default).mockImplementation(function () { return fetchSettings; });
        var html = ("\n    <!DOCTYPE html>\n      <head>\n        <script>\n          " + segment_snippet_1.snippet(segmentDotCom, true) + "\n        </script>\n      </head>\n      <body>\n      </body>\n    </html>\n    ").trim();
        var virtualConsole = new jsdom_1.default.VirtualConsole();
        jsd = new jsdom_1.JSDOM(html, {
            runScripts: 'dangerously',
            resources: 'usable',
            url: 'https://segment.com',
            virtualConsole: virtualConsole,
        });
        var windowSpy = jest.spyOn(global, 'window', 'get');
        var documentSpy = jest.spyOn(global, 'document', 'get');
        jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
        windowSpy.mockImplementation(function () {
            return jsd.window;
        });
        documentSpy.mockImplementation(function () { return jsd.window.document; });
    });
    it('catches initialization errors and reports them', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var errorMessages, metrics;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    window.analyticsWriteKey = 'write_key_abc_123';
                    errorMessages = [];
                    metrics = [];
                    jest.spyOn(console, 'error').mockImplementationOnce(function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        errorMessages.push(args.join(','));
                    });
                    jest
                        .spyOn(remote_metrics_1.RemoteMetrics.prototype, 'increment')
                        .mockImplementationOnce(function (metric, tags) {
                        metrics.push({
                            metric: metric,
                            tags: tags,
                        });
                    });
                    jest
                        .spyOn(browser_1.AnalyticsBrowser, 'standalone')
                        .mockRejectedValueOnce(new Error('Ohhh nooo'));
                    return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require('../standalone')); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, p_while_1.pWhile(function () { return errorMessages.length === 0; }, function () { })];
                case 2:
                    _a.sent();
                    expect(metrics).toMatchInlineSnapshot("\n      Array [\n        Object {\n          \"metric\": \"analytics_js.invoke.error\",\n          \"tags\": Array [\n            \"type:initialization\",\n            \"message:Ohhh nooo\",\n            \"name:Error\",\n            \"host:segment.com\",\n            \"wk:write_key_abc_123\",\n          ],\n        },\n      ]\n    ");
                    expect(errorMessages).toMatchInlineSnapshot("\n      Array [\n        \"[analytics.js],Failed to load Analytics.js,Error: Ohhh nooo\",\n      ]\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=standalone-errors.test.js.map