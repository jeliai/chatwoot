"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var context_1 = require("../../../core/context");
var jsdom_1 = tslib_1.__importDefault(require("jsdom"));
describe('Remote Middleware', function () {
    beforeEach(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var html, jsd, windowSpy;
        return tslib_1.__generator(this, function (_a) {
            jest.restoreAllMocks();
            jest.resetAllMocks();
            html = "\n    <!DOCTYPE html>\n      <head>\n        <script>'you need me here'</script>\n      </head>\n      <body></body>\n    </html>\n    ".trim();
            jsd = new jsdom_1.default.JSDOM(html, {
                runScripts: 'dangerously',
                resources: 'usable',
                url: 'https://localhost',
            });
            windowSpy = jest.spyOn(global, 'window', 'get');
            windowSpy.mockImplementation(function () { return jsd.window; });
            return [2 /*return*/];
        });
    }); });
    it('ignores empty dictionaries', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var md;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.remoteMiddlewares(context_1.Context.system(), {
                        integrations: {},
                    })];
                case 1:
                    md = _a.sent();
                    expect(md).toEqual([]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('loads middleware that exist', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var md;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.remoteMiddlewares(context_1.Context.system(), {
                        integrations: {},
                        enabledMiddleware: {
                            '@segment/analytics.js-middleware-braze-deduplicate': true,
                        },
                    })];
                case 1:
                    md = _a.sent();
                    expect(md.length).toEqual(1);
                    expect(md[0]).toMatchInlineSnapshot("[Function]");
                    return [2 /*return*/];
            }
        });
    }); });
    it('ignores segment namespace', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var md;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.remoteMiddlewares(context_1.Context.system(), {
                        integrations: {},
                        enabledMiddleware: {
                            '@segment/analytics.js-middleware-braze-deduplicate': true,
                            'analytics.js-middleware-braze-deduplicate': true,
                        },
                    })];
                case 1:
                    md = _a.sent();
                    expect(md.length).toEqual(2);
                    expect(md[0]).toEqual(md[1]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('loads middleware through remote script tags', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sources;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.remoteMiddlewares(context_1.Context.system(), {
                        integrations: {},
                        enabledMiddleware: {
                            '@segment/analytics.js-middleware-braze-deduplicate': true,
                        },
                    })];
                case 1:
                    _a.sent();
                    sources = Array.from(window.document.querySelectorAll('script'))
                        .map(function (s) { return s.src; })
                        .filter(Boolean);
                    expect(sources).toMatchInlineSnapshot("\n      Array [\n        \"https://cdn.segment.com/next-integrations/middleware/analytics.js-middleware-braze-deduplicate/latest/analytics.js-middleware-braze-deduplicate.js.gz\",\n      ]\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
    it('ignores middleware that do not exist', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx, md;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jest.spyOn(global.console, 'error').mockImplementation();
                    ctx = context_1.Context.system();
                    return [4 /*yield*/, __1.remoteMiddlewares(ctx, {
                            integrations: {},
                            enabledMiddleware: {
                                '@segment/analytics.js-middleware-braze-deduplicate': true,
                                '@segment/analytics.js-middleware-that-does-not-exist': true,
                            },
                        })];
                case 1:
                    md = _a.sent();
                    expect(md.length).toEqual(1);
                    expect(md[0]).toMatchInlineSnapshot("[Function]");
                    expect(ctx.logs().map(function (l) { return l.message; })).toMatchInlineSnapshot("\n      Array [\n        [Error: Failed to load https://cdn.segment.com/next-integrations/middleware/analytics.js-middleware-that-does-not-exist/latest/analytics.js-middleware-that-does-not-exist.js.gz],\n      ]\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=index.test.js.map