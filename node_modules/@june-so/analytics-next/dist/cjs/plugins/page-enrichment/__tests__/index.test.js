"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var analytics_1 = require("@/analytics");
var __1 = require("..");
var ajs;
describe('Page Enrichment', function () {
    beforeEach(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ajs = new analytics_1.Analytics({
                        writeKey: 'abc_123',
                    });
                    return [4 /*yield*/, ajs.register(__1.pageEnrichment)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('enriches page calls', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ajs.page('Checkout', {})];
                case 1:
                    ctx = _a.sent();
                    expect(ctx.event.properties).toMatchInlineSnapshot("\n      Object {\n        \"name\": \"Checkout\",\n        \"path\": \"/\",\n        \"referrer\": \"\",\n        \"search\": \"\",\n        \"title\": \"\",\n        \"url\": \"http://localhost/\",\n      }\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
    test('enriches track events with the page context', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ajs.track('My event', {
                        banana: 'phone',
                    })];
                case 1:
                    ctx = _b.sent();
                    expect((_a = ctx.event.context) === null || _a === void 0 ? void 0 : _a.page).toMatchInlineSnapshot("\n      Object {\n        \"path\": \"/\",\n        \"referrer\": \"\",\n        \"search\": \"\",\n        \"title\": \"\",\n        \"url\": \"http://localhost/\",\n      }\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
    test('enriches page events with the page context', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ajs.page('My event', { banana: 'phone' }, { page: { url: 'not-localhost' } })];
                case 1:
                    ctx = _b.sent();
                    expect((_a = ctx.event.context) === null || _a === void 0 ? void 0 : _a.page).toMatchInlineSnapshot("\n    Object {\n      \"path\": \"/\",\n      \"referrer\": \"\",\n      \"search\": \"\",\n      \"title\": \"\",\n      \"url\": \"not-localhost\",\n    }\n  ");
                    return [2 /*return*/];
            }
        });
    }); });
    test('enriches page events using properties', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ajs.page('My event', { banana: 'phone', referrer: 'foo' })];
                case 1:
                    ctx = _b.sent();
                    expect((_a = ctx.event.context) === null || _a === void 0 ? void 0 : _a.page).toMatchInlineSnapshot("\n    Object {\n      \"path\": \"/\",\n      \"referrer\": \"foo\",\n      \"search\": \"\",\n      \"title\": \"\",\n      \"url\": \"http://localhost/\",\n    }\n  ");
                    return [2 /*return*/];
            }
        });
    }); });
    test('enriches identify events with the page context', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ctx;
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, ajs.identify('Netto', {
                        banana: 'phone',
                    })];
                case 1:
                    ctx = _b.sent();
                    expect((_a = ctx.event.context) === null || _a === void 0 ? void 0 : _a.page).toMatchInlineSnapshot("\n      Object {\n        \"path\": \"/\",\n        \"referrer\": \"\",\n        \"search\": \"\",\n        \"title\": \"\",\n        \"url\": \"http://localhost/\",\n      }\n    ");
                    return [2 /*return*/];
            }
        });
    }); });
    test('runs before any other plugin', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var called;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    called = false;
                    return [4 /*yield*/, ajs.addSourceMiddleware(function (_a) {
                            var _b, _c;
                            var payload = _a.payload, next = _a.next;
                            called = true;
                            expect((_c = (_b = payload.obj) === null || _b === void 0 ? void 0 : _b.context) === null || _c === void 0 ? void 0 : _c.page).not.toBeFalsy();
                            next(payload);
                        })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, ajs.track('My event', {
                            banana: 'phone',
                        })];
                case 2:
                    _a.sent();
                    expect(called).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
describe('pageDefaults', function () {
    var el = document.createElement('link');
    el.setAttribute('rel', 'canonical');
    beforeEach(function () {
        el.setAttribute('href', '');
        document.clear();
    });
    afterEach(function () {
        jest.restoreAllMocks();
    });
    it('handles no canonical links', function () {
        var defs = __1.pageDefaults();
        expect(defs.url).not.toBeNull();
    });
    it('handles canonical links', function () {
        el.setAttribute('href', 'http://www.segment.local');
        document.body.appendChild(el);
        var defs = __1.pageDefaults();
        expect(defs.url).toEqual('http://www.segment.local');
    });
    it('handles canonical links with a path', function () {
        el.setAttribute('href', 'http://www.segment.local/test');
        document.body.appendChild(el);
        var defs = __1.pageDefaults();
        expect(defs.url).toEqual('http://www.segment.local/test');
        expect(defs.path).toEqual('/test');
    });
    it('handles canonical links with search params in the url', function () {
        el.setAttribute('href', 'http://www.segment.local?test=true');
        document.body.appendChild(el);
        var defs = __1.pageDefaults();
        expect(defs.url).toEqual('http://www.segment.local?test=true');
    });
});
//# sourceMappingURL=index.test.js.map