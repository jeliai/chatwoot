"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var __1 = require("..");
var analytics_1 = require("../../../analytics");
var context_1 = require("../../../core/context");
var as_promise_1 = require("../../../lib/as-promise");
describe(__1.sourceMiddlewarePlugin, function () {
    var simpleMiddleware = function (_a) {
        var payload = _a.payload, next = _a.next;
        if (!payload.obj.context) {
            payload.obj.context = {};
        }
        payload.obj.context.hello = 'from the other side';
        next(payload);
    };
    var xt = __1.sourceMiddlewarePlugin(simpleMiddleware, {});
    it('creates a source middleware', function () {
        expect(xt.name).toEqual('Source Middleware simpleMiddleware');
        expect(xt.version).toEqual('0.1.0');
    });
    it('is loaded automatically', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    // @ts-expect-error
                    _a = expect;
                    return [4 /*yield*/, xt.load(context_1.Context.system())];
                case 1:
                    // @ts-expect-error
                    _a.apply(void 0, [_b.sent()]).toBeTruthy();
                    expect(xt.isLoaded()).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('Middleware', function () {
        it('allows for changing the event', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var changeProperties, xt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        changeProperties = function (_a) {
                            var payload = _a.payload, next = _a.next;
                            if (!payload.obj.properties) {
                                payload.obj.properties = {};
                            }
                            payload.obj.properties.hello = 'from the other side';
                            next(payload);
                        };
                        xt = __1.sourceMiddlewarePlugin(changeProperties, {});
                        _a = expect;
                        return [4 /*yield*/, xt.track(new context_1.Context({
                                type: 'track',
                            }))];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.properties]).toEqual({
                            hello: 'from the other side',
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('uses a segment facade object', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var type, facadeMiddleware, xt;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = '';
                        facadeMiddleware = function (_a) {
                            var payload = _a.payload, next = _a.next;
                            type = payload.type();
                            next(payload);
                        };
                        xt = __1.sourceMiddlewarePlugin(facadeMiddleware, {});
                        return [4 /*yield*/, xt.track(new context_1.Context({
                                type: 'track',
                            }))];
                    case 1:
                        _a.sent();
                        expect(type).toEqual(type);
                        return [2 /*return*/];
                }
            });
        }); });
        it('cancels the event if `next` is not called', function (done) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var hangs, hangsXT, doesNotHang, doesNotHangXT, toReturn, returnedCtx, toCancel;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hangs = function () { };
                        hangsXT = __1.sourceMiddlewarePlugin(hangs, {});
                        doesNotHang = function (_a) {
                            var next = _a.next, payload = _a.payload;
                            next(payload);
                        };
                        doesNotHangXT = __1.sourceMiddlewarePlugin(doesNotHang, {});
                        toReturn = new context_1.Context({ type: 'track' });
                        return [4 /*yield*/, doesNotHangXT.track(toReturn)];
                    case 1:
                        returnedCtx = _a.sent();
                        expect(returnedCtx).toBe(toReturn);
                        toCancel = new context_1.Context({ type: 'track' });
                        return [4 /*yield*/, as_promise_1.asPromise(hangsXT.track(toCancel)).catch(function (err) {
                                expect(err).toMatchInlineSnapshot("\n          ContextCancelation {\n            \"reason\": \"Middleware `next` function skipped\",\n            \"retry\": false,\n            \"type\": \"middleware_cancellation\",\n          }\n        ");
                                done();
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Common use cases', function () {
        it('can be used to cancel an event altogether', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var blowUp, ajs, ctx, notDelivered;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        blowUp = function () {
                            // do nothing
                            // do not invoke next
                        };
                        ajs = new analytics_1.Analytics({
                            writeKey: 'abc',
                        });
                        return [4 /*yield*/, ajs.page('hello')];
                    case 1:
                        ctx = _a.sent();
                        expect(ctx.logs().map(function (l) { return l.message; })).toContain('Delivered');
                        return [4 /*yield*/, ajs.addSourceMiddleware(blowUp)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, ajs.page('hello')];
                    case 3:
                        notDelivered = _a.sent();
                        expect(notDelivered.logs().map(function (l) { return l.message; })).not.toContain('Delivered');
                        return [2 /*return*/];
                }
            });
        }); });
        it('can be used to re-route/cancel destinations', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var middlewareInvoked, pageMock, skipGA, gaDestination, ajs;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        middlewareInvoked = false;
                        pageMock = jest.fn();
                        skipGA = function (_a) {
                            var payload = _a.payload, next = _a.next;
                            if (!payload.obj.integrations) {
                                payload.obj.integrations = {};
                            }
                            payload.obj.integrations['Google Analytics'] = false;
                            middlewareInvoked = true;
                            next(payload);
                        };
                        gaDestination = {
                            name: 'Google Analytics',
                            isLoaded: function () { return true; },
                            load: function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/];
                            }); }); },
                            type: 'destination',
                            version: '1.0',
                            page: function (ctx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    pageMock();
                                    return [2 /*return*/, ctx];
                                });
                            }); },
                        };
                        ajs = new analytics_1.Analytics({
                            writeKey: 'abc',
                        });
                        return [4 /*yield*/, ajs.register(gaDestination)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, ajs.page('hello')];
                    case 2:
                        _a.sent();
                        expect(pageMock).toHaveBeenCalled();
                        return [4 /*yield*/, ajs.addSourceMiddleware(skipGA)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, ajs.page('hello')];
                    case 4:
                        _a.sent();
                        expect(middlewareInvoked).toBe(true);
                        expect(pageMock).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Event API', function () {
        it('wraps track', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var evt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        evt = new context_1.Context({
                            type: 'track',
                        });
                        _a = expect;
                        return [4 /*yield*/, xt.track(evt)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.context]).toMatchInlineSnapshot("\n        Object {\n          \"hello\": \"from the other side\",\n        }\n      ");
                        return [2 /*return*/];
                }
            });
        }); });
        it('wraps identify', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var evt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        evt = new context_1.Context({
                            type: 'identify',
                        });
                        _a = expect;
                        return [4 /*yield*/, xt.identify(evt)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.context]).toMatchInlineSnapshot("\n        Object {\n          \"hello\": \"from the other side\",\n        }\n      ");
                        return [2 /*return*/];
                }
            });
        }); });
        it('wraps page', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var evt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        evt = new context_1.Context({
                            type: 'page',
                        });
                        _a = expect;
                        return [4 /*yield*/, xt.page(evt)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.context]).toMatchInlineSnapshot("\n        Object {\n          \"hello\": \"from the other side\",\n        }\n      ");
                        return [2 /*return*/];
                }
            });
        }); });
        it('wraps group', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var evt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        evt = new context_1.Context({
                            type: 'group',
                        });
                        _a = expect;
                        return [4 /*yield*/, xt.group(evt)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.context]).toMatchInlineSnapshot("\n        Object {\n          \"hello\": \"from the other side\",\n        }\n      ");
                        return [2 /*return*/];
                }
            });
        }); });
        it('wraps alias', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var evt, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        evt = new context_1.Context({
                            type: 'alias',
                        });
                        _a = expect;
                        return [4 /*yield*/, xt.alias(evt)];
                    case 1:
                        _a.apply(void 0, [(_b.sent()).event.context]).toMatchInlineSnapshot("\n        Object {\n          \"hello\": \"from the other side\",\n        }\n      ");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=index.test.js.map