"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVersion = exports.unloadIntegration = exports.loadIntegration = void 0;
var tslib_1 = require("tslib");
var parse_cdn_1 = require("../../lib/parse-cdn");
var load_script_1 = require("../../lib/load-script");
var cdn = (_b = (_a = window.analytics) === null || _a === void 0 ? void 0 : _a._cdn) !== null && _b !== void 0 ? _b : parse_cdn_1.getCDN();
var path = cdn + '/next-integrations';
function normalizeName(name) {
    return name.toLowerCase().replace('.', '').replace(/\s+/g, '-');
}
function recordLoadMetrics(fullPath, ctx, name) {
    var _a, _b, _c;
    try {
        var metric = ((_c = (_b = (_a = global.window) === null || _a === void 0 ? void 0 : _a.performance) === null || _b === void 0 ? void 0 : _b.getEntriesByName(fullPath, 'resource')) !== null && _c !== void 0 ? _c : [])[0];
        // we assume everything that took under 100ms is cached
        metric &&
            ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), tslib_1.__spreadArrays([
                name
            ], (metric.duration < 100 ? ['cached'] : [])));
    }
    catch (_) {
        // not available
    }
}
function loadIntegration(ctx, analyticsInstance, name, version, settings) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var pathName, fullPath, err_1, deps, integrationBuilder, analyticsStub, integration;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pathName = normalizeName(name);
                    fullPath = path + "/integrations/" + pathName + "/" + version + "/" + pathName + ".dynamic.js.gz";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, load_script_1.loadScript(fullPath)];
                case 2:
                    _a.sent();
                    recordLoadMetrics(fullPath, ctx, name);
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    ctx.stats.gauge('legacy_destination_time', -1, ["plugin:" + name, "failed"]);
                    throw err_1;
                case 4:
                    deps = window[pathName + "Deps"];
                    return [4 /*yield*/, Promise.all(deps.map(function (dep) { return load_script_1.loadScript(path + dep + '.gz'); }))
                        // @ts-ignore
                    ];
                case 5:
                    _a.sent();
                    // @ts-ignore
                    window[pathName + "Loader"]();
                    integrationBuilder = window[pathName + "Integration"];
                    // GA and Appcues use a different interface to instantiating integrations
                    if (integrationBuilder.Integration) {
                        analyticsStub = {
                            user: function () { return analyticsInstance.user(); },
                            addIntegration: function () { },
                        };
                        integrationBuilder(analyticsStub);
                        integrationBuilder = integrationBuilder.Integration;
                    }
                    integration = new integrationBuilder(settings);
                    integration.analytics = analyticsInstance;
                    return [2 /*return*/, integration];
            }
        });
    });
}
exports.loadIntegration = loadIntegration;
function unloadIntegration(name, version) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var pathName;
        return tslib_1.__generator(this, function (_a) {
            pathName = normalizeName(name);
            return [2 /*return*/, load_script_1.unloadScript(path + "/integrations/" + pathName + "/" + version + "/" + pathName + ".dynamic.js.gz")];
        });
    });
}
exports.unloadIntegration = unloadIntegration;
function resolveVersion(settings) {
    var _a, _b, _c, _d;
    return ((_d = (_b = (_a = settings.versionSettings) === null || _a === void 0 ? void 0 : _a.override) !== null && _b !== void 0 ? _b : (_c = settings.versionSettings) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : 'latest');
}
exports.resolveVersion = resolveVersion;
//# sourceMappingURL=loader.js.map