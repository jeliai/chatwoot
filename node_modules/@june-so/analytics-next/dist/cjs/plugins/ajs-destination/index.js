"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ajsDestinations = exports.LegacyDestination = void 0;
var tslib_1 = require("tslib");
var facade_1 = require("@segment/facade");
var connection_1 = require("../../core/connection");
var context_1 = require("../../core/context");
var environment_1 = require("../../core/environment");
var delivery_1 = require("../../core/queue/delivery");
var as_promise_1 = require("../../lib/as-promise");
var merged_options_1 = require("../../lib/merged-options");
var p_while_1 = require("../../lib/p-while");
var persisted_1 = require("../../lib/priority-queue/persisted");
var middleware_1 = require("../middleware");
var routing_middleware_1 = require("../routing-middleware");
var loader_1 = require("./loader");
var klona = function (evt) {
    return JSON.parse(JSON.stringify(evt));
};
function flushQueue(xt, queue) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var failedQueue;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    failedQueue = [];
                    if (connection_1.isOffline()) {
                        return [2 /*return*/, queue];
                    }
                    return [4 /*yield*/, p_while_1.pWhile(function () { return queue.length > 0 && connection_1.isOnline(); }, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var ctx, result, success;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        ctx = queue.pop();
                                        if (!ctx) {
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, delivery_1.attempt(ctx, xt)];
                                    case 1:
                                        result = _a.sent();
                                        success = result instanceof context_1.Context;
                                        if (!success) {
                                            failedQueue.push(ctx);
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); })
                        // re-add failed tasks
                    ];
                case 1:
                    _a.sent();
                    // re-add failed tasks
                    failedQueue.map(function (failed) { return queue.pushWithBackoff(failed); });
                    return [2 /*return*/, queue];
            }
        });
    });
}
var LegacyDestination = /** @class */ (function () {
    function LegacyDestination(name, version, settings, options) {
        if (settings === void 0) { settings = {}; }
        this.options = {};
        this.type = 'destination';
        this.middleware = [];
        this._ready = false;
        this._initialized = false;
        this.flushing = false;
        this.name = name;
        this.version = version;
        this.settings = tslib_1.__assign({}, settings);
        // AJS-Renderer sets an extraneous `type` setting that clobbers
        // existing type defaults. We need to remove it if it's present
        if (this.settings['type'] && this.settings['type'] === 'browser') {
            delete this.settings['type'];
        }
        this.options = options;
        this.buffer = new persisted_1.PersistedPriorityQueue(4, "dest-" + name);
        this.scheduleFlush();
    }
    LegacyDestination.prototype.isLoaded = function () {
        return this._ready;
    };
    LegacyDestination.prototype.ready = function () {
        var _a;
        return (_a = this.onReady) !== null && _a !== void 0 ? _a : Promise.resolve();
    };
    LegacyDestination.prototype.load = function (ctx, analyticsInstance) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._ready || this.onReady !== undefined) {
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, loader_1.loadIntegration(ctx, analyticsInstance, this.name, this.version, this.settings)];
                    case 1:
                        _a.integration = _b.sent();
                        this.onReady = new Promise(function (resolve) {
                            var onReadyFn = function () {
                                _this._ready = true;
                                resolve(true);
                            };
                            _this.integration.once('ready', onReadyFn);
                        });
                        this.onInitialize = new Promise(function (resolve) {
                            var onInit = function () {
                                _this._initialized = true;
                                resolve(true);
                            };
                            _this.integration.on('initialize', onInit);
                        });
                        try {
                            ctx.stats.increment('analytics_js.integration.invoke', 1, [
                                "method:initialize",
                                "integration_name:" + this.name,
                            ]);
                            this.integration.initialize();
                        }
                        catch (error) {
                            ctx.stats.increment('analytics_js.integration.invoke.error', 1, [
                                "method:initialize",
                                "integration_name:" + this.name,
                            ]);
                            throw error;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    LegacyDestination.prototype.unload = function (_ctx, _analyticsInstance) {
        return loader_1.unloadIntegration(this.name, this.version);
    };
    LegacyDestination.prototype.addMiddleware = function () {
        var _a;
        var fn = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fn[_i] = arguments[_i];
        }
        this.middleware = (_a = this.middleware).concat.apply(_a, fn);
    };
    LegacyDestination.prototype.shouldBuffer = function (ctx) {
        return (
        // page events can't be buffered because of destinations that automatically add page views
        ctx.event.type !== 'page' &&
            (connection_1.isOffline() || this._ready === false || this._initialized === false));
    };
    LegacyDestination.prototype.send = function (ctx, clz, eventType) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var plan, ev, planEvent, afterMiddleware, event, err_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.shouldBuffer(ctx)) {
                            this.buffer.push(ctx);
                            this.scheduleFlush();
                            return [2 /*return*/, ctx];
                        }
                        plan = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.plan) === null || _b === void 0 ? void 0 : _b.track;
                        ev = ctx.event.event;
                        if (plan && ev && this.name !== 'Segment.io') {
                            planEvent = plan[ev];
                            if ((planEvent === null || planEvent === void 0 ? void 0 : planEvent.enabled) === false) {
                                ctx.updateEvent('integrations', tslib_1.__assign(tslib_1.__assign({}, ctx.event.integrations), { All: false, 'Segment.io': true }));
                                ctx.cancel(new context_1.ContextCancelation({
                                    retry: false,
                                    reason: "Event " + ev + " disabled for integration " + this.name + " in tracking plan",
                                    type: 'Dropped by plan',
                                }));
                                return [2 /*return*/, ctx];
                            }
                            else {
                                ctx.updateEvent('integrations', tslib_1.__assign(tslib_1.__assign({}, ctx.event.integrations), planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations));
                            }
                            if ((planEvent === null || planEvent === void 0 ? void 0 : planEvent.enabled) && (planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations[this.name]) === false) {
                                ctx.cancel(new context_1.ContextCancelation({
                                    retry: false,
                                    reason: "Event " + ev + " disabled for integration " + this.name + " in tracking plan",
                                    type: 'Dropped by plan',
                                }));
                                return [2 /*return*/, ctx];
                            }
                        }
                        return [4 /*yield*/, middleware_1.applyDestinationMiddleware(this.name, klona(ctx.event), this.middleware)];
                    case 1:
                        afterMiddleware = _c.sent();
                        if (afterMiddleware === null) {
                            return [2 /*return*/, ctx];
                        }
                        event = new clz(afterMiddleware, {});
                        ctx.stats.increment('analytics_js.integration.invoke', 1, [
                            "method:" + eventType,
                            "integration_name:" + this.name,
                        ]);
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 5, , 6]);
                        if (!this.integration) return [3 /*break*/, 4];
                        return [4 /*yield*/, as_promise_1.asPromise(this.integration.invoke.call(this.integration, eventType, event))];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        err_1 = _c.sent();
                        ctx.stats.increment('analytics_js.integration.invoke.error', 1, [
                            "method:" + eventType,
                            "integration_name:" + this.name,
                        ]);
                        throw err_1;
                    case 6: return [2 /*return*/, ctx];
                }
            });
        });
    };
    LegacyDestination.prototype.track = function (ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.send(ctx, facade_1.Track, 'track')];
            });
        });
    };
    LegacyDestination.prototype.page = function (ctx) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                if (((_a = this.integration) === null || _a === void 0 ? void 0 : _a._assumesPageview) && !this._initialized) {
                    this.integration.initialize();
                }
                return [2 /*return*/, this.onInitialize.then(function () {
                        return _this.send(ctx, facade_1.Page, 'page');
                    })];
            });
        });
    };
    LegacyDestination.prototype.identify = function (ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.send(ctx, facade_1.Identify, 'identify')];
            });
        });
    };
    LegacyDestination.prototype.alias = function (ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.send(ctx, facade_1.Alias, 'alias')];
            });
        });
    };
    LegacyDestination.prototype.group = function (ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.send(ctx, facade_1.Group, 'group')];
            });
        });
    };
    LegacyDestination.prototype.scheduleFlush = function () {
        var _this = this;
        if (this.flushing) {
            return;
        }
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.flushing = true;
                        _a = this;
                        return [4 /*yield*/, flushQueue(this, this.buffer)];
                    case 1:
                        _a.buffer = _b.sent();
                        this.flushing = false;
                        if (this.buffer.todo > 0) {
                            this.scheduleFlush();
                        }
                        return [2 /*return*/];
                }
            });
        }); }, Math.random() * 5000);
    };
    return LegacyDestination;
}());
exports.LegacyDestination = LegacyDestination;
function ajsDestinations(settings, globalIntegrations, options) {
    var _a, _b;
    if (globalIntegrations === void 0) { globalIntegrations = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var routingRules, routingMiddleware, integrationOptions;
        return tslib_1.__generator(this, function (_c) {
            if (environment_1.isServer()) {
                return [2 /*return*/, []];
            }
            if (settings.plan) {
                options = options !== null && options !== void 0 ? options : {};
                options.plan = settings.plan;
            }
            routingRules = (_b = (_a = settings.middlewareSettings) === null || _a === void 0 ? void 0 : _a.routingRules) !== null && _b !== void 0 ? _b : [];
            routingMiddleware = routing_middleware_1.tsubMiddleware(routingRules);
            integrationOptions = merged_options_1.mergedOptions(settings, options !== null && options !== void 0 ? options : {});
            return [2 /*return*/, Object.entries(settings.integrations)
                    .map(function (_a) {
                    var _b;
                    var name = _a[0], integrationSettings = _a[1];
                    if (name.startsWith('Segment')) {
                        return;
                    }
                    var allDisableAndNotDefined = globalIntegrations.All === false &&
                        globalIntegrations[name] === undefined;
                    if (globalIntegrations[name] === false || allDisableAndNotDefined) {
                        return;
                    }
                    var type = integrationSettings.type, bundlingStatus = integrationSettings.bundlingStatus, versionSettings = integrationSettings.versionSettings;
                    // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of
                    // destinations without a defined value for `bundlingStatus`
                    var deviceMode = bundlingStatus !== 'unbundled' &&
                        (type === 'browser' || ((_b = versionSettings === null || versionSettings === void 0 ? void 0 : versionSettings.componentTypes) === null || _b === void 0 ? void 0 : _b.includes('browser')));
                    // checking for iterable is a quick fix we need in place to prevent
                    // errors showing Iterable as a failed destiantion. Ideally, we should
                    // fix the Iterable metadata instead, but that's a longer process.
                    if ((!deviceMode && name !== 'Segment.io') || name === 'Iterable') {
                        return;
                    }
                    var version = loader_1.resolveVersion(integrationSettings);
                    var destination = new LegacyDestination(name, version, integrationOptions[name], options);
                    var routing = routingRules.filter(function (rule) { return rule.destinationName === name; });
                    if (routing.length > 0) {
                        destination.addMiddleware(routingMiddleware);
                    }
                    return destination;
                })
                    .filter(function (xt) { return xt !== undefined; })];
        });
    });
}
exports.ajsDestinations = ajsDestinations;
//# sourceMappingURL=index.js.map