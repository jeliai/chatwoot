"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsBrowser = exports.loadLegacySettings = void 0;
var tslib_1 = require("tslib");
var get_process_env_1 = require("./lib/get-process-env");
var analytics_1 = require("./analytics");
var context_1 = require("./core/context");
var merged_options_1 = require("./lib/merged-options");
var page_enrichment_1 = require("./plugins/page-enrichment");
var remote_loader_1 = require("./plugins/remote-loader");
var segmentio_1 = require("./plugins/segmentio");
var validation_1 = require("./plugins/validation");
function loadLegacySettings(writeKey, settings) {
    var _a;
    return {
        // @ts-expect-error
        integrations: {
            'Segment.io': {
                apiKey: writeKey,
                addBundledMetadata: true,
                apiHost: (_a = settings.apiHost) !== null && _a !== void 0 ? _a : "api.june.so/sdk",
                versionSettings: { version: '4.4.7', componentTypes: ['browser'] },
            },
        },
        plan: {
            track: { __default: { enabled: true, integrations: {} } },
            identify: {
                __default: { enabled: true },
            },
            group: { __default: { enabled: true } },
        },
        edgeFunction: {},
        analyticsNextEnabled: true,
        middlewareSettings: {},
        enabledMiddleware: {},
        metrics: { sampleRate: 0.1 },
        legacyVideoPluginsEnabled: false,
        remotePlugins: [],
    };
}
exports.loadLegacySettings = loadLegacySettings;
function hasLegacyDestinations(settings) {
    return (get_process_env_1.getProcessEnv().NODE_ENV !== 'test' &&
        // just one integration means segmentio
        Object.keys(settings.integrations).length > 1);
}
function flushBuffered(analytics) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var wa, buffered, _loop_1, _i, buffered_1, _a, operation, args;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    wa = window.analytics;
                    buffered = 
                    // @ts-expect-error
                    wa && wa[0] ? tslib_1.__spreadArrays(wa) : [];
                    _loop_1 = function (operation, args) {
                        var _a;
                        return tslib_1.__generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!
                                    // @ts-expect-error
                                    (analytics[operation] &&
                                        // @ts-expect-error
                                        typeof analytics[operation] === 'function')) 
                                    // @ts-expect-error
                                    return [3 /*break*/, 3];
                                    if (!(operation === 'addSourceMiddleware')) return [3 /*break*/, 2];
                                    // @ts-expect-error
                                    return [4 /*yield*/, (_a = analytics[operation]).call.apply(_a, tslib_1.__spreadArrays([analytics], args))];
                                case 1:
                                    // @ts-expect-error
                                    _b.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    // flush each individual event as its own task, so not to block initial page loads
                                    setTimeout(function () {
                                        var _a;
                                        // @ts-expect-error
                                        (_a = analytics[operation]).call.apply(_a, tslib_1.__spreadArrays([analytics], args));
                                    }, 0);
                                    _b.label = 3;
                                case 3: return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, buffered_1 = buffered;
                    _b.label = 1;
                case 1:
                    if (!(_i < buffered_1.length)) return [3 /*break*/, 4];
                    _a = buffered_1[_i], operation = _a[0], args = _a.slice(1);
                    return [5 /*yield**/, _loop_1(operation, args)];
                case 2:
                    _b.sent();
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * With AJS classic, we allow users to call setAnonymousId before the library initialization.
 * This is important because some of the destinations will use the anonymousId during the initialization,
 * and if we set anonId afterwards, that wouldnâ€™t impact the destination.
 */
function flushAnonymousUser(analytics) {
    var wa = window.analytics;
    var buffered = 
    // @ts-expect-error
    wa && wa[0] ? tslib_1.__spreadArrays(wa) : [];
    var anon = buffered.find(function (_a) {
        var op = _a[0];
        return op === 'setAnonymousId';
    });
    if (anon) {
        var id = anon[1];
        analytics.setAnonymousId(id);
    }
}
function registerPlugins(legacySettings, analytics, opts, options, plugins) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var legacyDestinations, _d, schemaFilter, _e, mergedSettings, remotePlugins, toRegister, shouldIgnoreSegmentio, ctx;
        var _this = this;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!hasLegacyDestinations(legacySettings)) return [3 /*break*/, 2];
                    return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require(
                        /* webpackChunkName: "ajs-destination" */ './plugins/ajs-destination')); }).then(function (mod) {
                            return mod.ajsDestinations(legacySettings, analytics.integrations, opts);
                        })];
                case 1:
                    _d = _f.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _d = [];
                    _f.label = 3;
                case 3:
                    legacyDestinations = _d;
                    if (!legacySettings.legacyVideoPluginsEnabled) return [3 /*break*/, 5];
                    return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require(
                        /* webpackChunkName: "legacyVideos" */ './plugins/legacy-video-plugins')); }).then(function (mod) {
                            return mod.loadLegacyVideoPlugins(analytics);
                        })];
                case 4:
                    _f.sent();
                    _f.label = 5;
                case 5:
                    if (!((_a = opts.plan) === null || _a === void 0 ? void 0 : _a.track)) return [3 /*break*/, 7];
                    return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require(
                        /* webpackChunkName: "schemaFilter" */ './plugins/schema-filter')); }).then(function (mod) {
                            var _a;
                            return mod.schemaFilter((_a = opts.plan) === null || _a === void 0 ? void 0 : _a.track, legacySettings);
                        })];
                case 6:
                    _e = _f.sent();
                    return [3 /*break*/, 8];
                case 7:
                    _e = undefined;
                    _f.label = 8;
                case 8:
                    schemaFilter = _e;
                    mergedSettings = merged_options_1.mergedOptions(legacySettings, options);
                    return [4 /*yield*/, remote_loader_1.remoteLoader(legacySettings).catch(function () { return []; })];
                case 9:
                    remotePlugins = _f.sent();
                    toRegister = tslib_1.__spreadArrays([
                        validation_1.validation,
                        page_enrichment_1.pageEnrichment
                    ], plugins, legacyDestinations, remotePlugins);
                    if (schemaFilter) {
                        toRegister.push(schemaFilter);
                    }
                    shouldIgnoreSegmentio = (((_b = opts.integrations) === null || _b === void 0 ? void 0 : _b.All) === false && !opts.integrations['Segment.io']) ||
                        (opts.integrations && opts.integrations['Segment.io'] === false);
                    if (!shouldIgnoreSegmentio) {
                        toRegister.push(segmentio_1.segmentio(analytics, mergedSettings['Segment.io'], legacySettings.integrations));
                    }
                    return [4 /*yield*/, analytics.register.apply(analytics, toRegister)];
                case 10:
                    ctx = _f.sent();
                    if (!(Object.keys((_c = legacySettings.enabledMiddleware) !== null && _c !== void 0 ? _c : {}).length > 0)) return [3 /*break*/, 12];
                    return [4 /*yield*/, Promise.resolve().then(function () { return tslib_1.__importStar(require(
                        /* webpackChunkName: "remoteMiddleware" */ './plugins/remote-middleware')); }).then(function (_a) {
                            var remoteMiddlewares = _a.remoteMiddlewares;
                            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var middleware, promises;
                                return tslib_1.__generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, remoteMiddlewares(ctx, legacySettings)];
                                        case 1:
                                            middleware = _b.sent();
                                            promises = middleware.map(function (mdw) {
                                                return analytics.addSourceMiddleware(mdw);
                                            });
                                            return [2 /*return*/, Promise.all(promises)];
                                    }
                                });
                            });
                        })];
                case 11:
                    _f.sent();
                    _f.label = 12;
                case 12: return [2 /*return*/, ctx];
            }
        });
    });
}
var AnalyticsBrowser = /** @class */ (function () {
    function AnalyticsBrowser() {
    }
    AnalyticsBrowser.load = function (settings, options) {
        var _a, _b, _c, _d, _e;
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var legacySettings, retryQueue, opts, analytics, plugins, ctx, search, hash, term;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, loadLegacySettings(settings.writeKey, settings)];
                    case 1:
                        legacySettings = _f.sent();
                        retryQueue = (_b = (_a = legacySettings.integrations['Segment.io']) === null || _a === void 0 ? void 0 : _a.retryQueue) !== null && _b !== void 0 ? _b : true;
                        opts = tslib_1.__assign({ retryQueue: retryQueue }, options);
                        analytics = new analytics_1.Analytics(settings, opts);
                        plugins = (_c = settings.plugins) !== null && _c !== void 0 ? _c : [];
                        context_1.Context.initMetrics(legacySettings.metrics);
                        // needs to be flushed before plugins are registered
                        flushAnonymousUser(analytics);
                        return [4 /*yield*/, registerPlugins(legacySettings, analytics, opts, options, plugins)];
                    case 2:
                        ctx = _f.sent();
                        analytics.initialized = true;
                        analytics.emit('initialize', settings, options);
                        if (options.initialPageview) {
                            analytics.page().catch(console.error);
                        }
                        search = (_d = window.location.search) !== null && _d !== void 0 ? _d : '';
                        hash = (_e = window.location.hash) !== null && _e !== void 0 ? _e : '';
                        term = search.length ? search : hash.replace(/(?=#).*(?=\?)/, '');
                        if (term.includes('ajs_')) {
                            analytics.queryString(term).catch(console.error);
                        }
                        return [4 /*yield*/, flushBuffered(analytics)];
                    case 3:
                        _f.sent();
                        return [2 /*return*/, [analytics, ctx]];
                }
            });
        });
    };
    AnalyticsBrowser.standalone = function (writeKey, options) {
        return AnalyticsBrowser.load({ writeKey: writeKey }, options).then(function (res) { return res[0]; });
    };
    return AnalyticsBrowser;
}());
exports.AnalyticsBrowser = AnalyticsBrowser;
//# sourceMappingURL=browser.js.map