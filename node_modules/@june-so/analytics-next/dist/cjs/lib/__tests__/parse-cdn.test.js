"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var jsdom_1 = require("jsdom");
var parse_cdn_1 = require("../parse-cdn");
function withTag(tag) {
    var html = ("\n    <!DOCTYPE html>\n      <head>\n        " + tag + "\n      </head>\n      <body>\n      </body>\n    </html>\n    ").trim();
    var virtualConsole = new jsdom_1.VirtualConsole();
    var jsd = new jsdom_1.JSDOM(html, {
        runScripts: 'dangerously',
        resources: 'usable',
        url: 'https://segment.com',
        virtualConsole: virtualConsole,
    });
    var windowSpy = jest.spyOn(global, 'window', 'get');
    var documentSpy = jest.spyOn(global, 'document', 'get');
    jest.spyOn(console, 'warn').mockImplementationOnce(function () { });
    windowSpy.mockImplementation(function () {
        return jsd.window;
    });
    documentSpy.mockImplementation(function () { return jsd.window.document; });
}
beforeEach(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        jest.restoreAllMocks();
        jest.resetAllMocks();
        return [2 /*return*/];
    });
}); });
it('detects the existing segment cdn', function () {
    withTag("\n    <script src=\"https://cdn.segment.com/analytics.js/v1/gA5MBlJXrtZaB5sMMZvCF6czfBcfzNO6/analytics.min.js\" />\n  ");
    expect(parse_cdn_1.getCDN()).toMatchInlineSnapshot("\"https://cdn.segment.com\"");
});
it('detects custom cdns that match Segment in domain instrumentation patterns', function () {
    withTag("\n    <script src=\"https://my.cdn.domain/analytics.js/v1/gA5MBlJXrtZaB5sMMZvCF6czfBcfzNO6/analytics.min.js\" />\n  ");
    expect(parse_cdn_1.getCDN()).toMatchInlineSnapshot("\"https://my.cdn.domain\"");
});
it('falls back to Segment if CDN is used as a proxy', function () {
    withTag("\n    <script src=\"https://my.cdn.proxy/custom-analytics.min.js\" />\n  ");
    expect(parse_cdn_1.getCDN()).toMatchInlineSnapshot("\"https://cdn.segment.com\"");
});
it('falls back to Segment if the script is not at all present on the page', function () {
    withTag('');
    expect(parse_cdn_1.getCDN()).toMatchInlineSnapshot("\"https://cdn.segment.com\"");
});
//# sourceMappingURL=parse-cdn.test.js.map