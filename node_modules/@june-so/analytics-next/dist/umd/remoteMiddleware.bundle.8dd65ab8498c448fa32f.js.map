{"version":3,"file":"remoteMiddleware.bundle.8dd65ab8498c448fa32f.js","mappings":";;;;;;;;;;;;;;;;;;;AAEiD;AACC;AACN;AAG5C,IAAM,GAAG,eAAG,MAAM,CAAC,SAAS,0CAAE,IAAI,mCAAI,sDAAM,EAAE;AAC9C,IAAM,IAAI,GAAG,GAAG,GAAG,oBAAoB;AAEhC,SAAe,iBAAiB,CACrC,GAAY,EACZ,QAAwB;;0EACvB,OAAO;;;;;;oBACR,IAAI,2DAAQ,EAAE,EAAE;wBACd,sBAAO,EAAE;qBACV;oBAEK,gBAAgB,SAAG,QAAQ,CAAC,iBAAiB,mCAAI,EAAE;oBACnD,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;oBAErC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAO,IAAI;;;;;oCAC7B,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;oCAC7C,QAAQ,GAAM,IAAI,oBAAe,aAAa,gBAAW,aAAa,WAAQ;;;;oCAGlF,qBAAM,4DAAU,CAAC,QAAQ,CAAC;wCAC1B,aAAa;sCADa;;oCAA1B,SAA0B;oCAC1B,aAAa;oCACb,sBAAO,MAAM,CAAI,aAAa,eAAY,CAAuB;;;oCAEjE,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,OAAK,CAAC;oCACvB,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,0BAA0B,CAAC;;;;;yBAElD,CAAC;oBAEe,qBAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;;oBAAvC,UAAU,GAAG,SAA0B;oBAC3C,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;oBAEvC,sBAAO,UAAkC;;;;CAC1C","sources":["webpack://@june-so/analytics-next/./src/plugins/remote-middleware/index.ts"],"sourcesContent":["import { LegacySettings } from '../../browser'\nimport { Context } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { loadScript } from '../../lib/load-script'\nimport { getCDN } from '../../lib/parse-cdn'\nimport { MiddlewareFunction } from '../middleware'\n\nconst cdn = window.analytics?._cdn ?? getCDN()\nconst path = cdn + '/next-integrations'\n\nexport async function remoteMiddlewares(\n  ctx: Context,\n  settings: LegacySettings\n): Promise<MiddlewareFunction[]> {\n  if (isServer()) {\n    return []\n  }\n\n  const remoteMiddleware = settings.enabledMiddleware ?? {}\n  const names = Object.keys(remoteMiddleware)\n\n  const scripts = names.map(async (name) => {\n    const nonNamespaced = name.replace('@segment/', '')\n    const fullPath = `${path}/middleware/${nonNamespaced}/latest/${nonNamespaced}.js.gz`\n\n    try {\n      await loadScript(fullPath)\n      // @ts-ignore\n      return window[`${nonNamespaced}Middleware`] as MiddlewareFunction\n    } catch (error) {\n      ctx.log('error', error)\n      ctx.stats.increment('failed_remote_middleware')\n    }\n  })\n\n  let middleware = await Promise.all(scripts)\n  middleware = middleware.filter(Boolean)\n\n  return middleware as MiddlewareFunction[]\n}\n"],"names":[],"sourceRoot":""}