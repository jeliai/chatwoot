{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport alertMixin from 'shared/mixins/alertMixin';\nimport validationMixin from './validationMixin';\nimport { mapGetters } from 'vuex';\nimport validations from './validations';\nimport { getRandomColor } from 'dashboard/helper/labelColor';\nexport default {\n  mixins: [alertMixin, validationMixin],\n  data: function data() {\n    return {\n      color: '#000',\n      description: '',\n      title: '',\n      showOnSidebar: true\n    };\n  },\n  validations: validations,\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'labels/getUIFlags'\n  })),\n  mounted: function mounted() {\n    this.color = getRandomColor();\n  },\n  methods: {\n    onClose: function onClose() {\n      this.$emit('close');\n    },\n    addLabel: function addLabel() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var errorMessage;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('labels/create', {\n                  color: _this.color,\n                  description: _this.description,\n                  title: _this.title,\n                  show_on_sidebar: _this.showOnSidebar\n                });\n\n              case 3:\n                _this.showAlert(_this.$t('LABEL_MGMT.ADD.API.SUCCESS_MESSAGE'));\n\n                _this.onClose();\n\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                errorMessage = _context.t0.message || _this.$t('LABEL_MGMT.ADD.API.ERROR_MESSAGE');\n\n                _this.showAlert(errorMessage);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["AddLabel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,OAAA,UAAA,MAAA,0BAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,SAAA,cAAA,QAAA,6BAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,eAAA,CADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,MADA;AAEA,MAAA,WAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA,EAHA;AAIA,MAAA,aAAA,EAAA;AAJA,KAAA;AAMA,GATA;AAUA,EAAA,WAAA,EAAA,WAVA;AAWA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA;AADA,GAAA,CADA,CAXA;AAgBA,EAAA,OAhBA,qBAgBA;AACA,SAAA,KAAA,GAAA,cAAA,EAAA;AACA,GAlBA;AAmBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,WAAA,KAAA,CAAA,OAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,eAAA,EAAA;AACA,kBAAA,KAAA,EAAA,KAAA,CAAA,KADA;AAEA,kBAAA,WAAA,EAAA,KAAA,CAAA,WAFA;AAGA,kBAAA,KAAA,EAAA,KAAA,CAAA,KAHA;AAIA,kBAAA,eAAA,EAAA,KAAA,CAAA;AAJA,iBAAA,CAFA;;AAAA;AAQA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oCAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,OAAA;;AATA;AAAA;;AAAA;AAAA;AAAA;AAWA,gBAAA,YAXA,GAYA,YAAA,OAAA,IAAA,KAAA,CAAA,EAAA,CAAA,kCAAA,CAZA;;AAaA,gBAAA,KAAA,CAAA,SAAA,CAAA,YAAA;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAnBA;AAnBA,CAAA","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <woot-modal-header\n      :header-title=\"$t('LABEL_MGMT.ADD.TITLE')\"\n      :header-content=\"$t('LABEL_MGMT.ADD.DESC')\"\n    />\n    <form class=\"row\" @submit.prevent=\"addLabel\">\n      <woot-input\n        v-model.trim=\"title\"\n        :class=\"{ error: $v.title.$error }\"\n        class=\"medium-12 columns\"\n        :label=\"$t('LABEL_MGMT.FORM.NAME.LABEL')\"\n        :placeholder=\"$t('LABEL_MGMT.FORM.NAME.PLACEHOLDER')\"\n        :error=\"getLabelTitleErrorMessage\"\n        data-testid=\"label-title\"\n        @input=\"$v.title.$touch\"\n      />\n\n      <woot-input\n        v-model.trim=\"description\"\n        :class=\"{ error: $v.description.$error }\"\n        class=\"medium-12 columns\"\n        :label=\"$t('LABEL_MGMT.FORM.DESCRIPTION.LABEL')\"\n        :placeholder=\"$t('LABEL_MGMT.FORM.DESCRIPTION.PLACEHOLDER')\"\n        data-testid=\"label-description\"\n        @input=\"$v.description.$touch\"\n      />\n\n      <div class=\"medium-12\">\n        <label>\n          {{ $t('LABEL_MGMT.FORM.COLOR.LABEL') }}\n          <woot-color-picker v-model=\"color\" />\n        </label>\n      </div>\n      <div class=\"medium-12\">\n        <input v-model=\"showOnSidebar\" type=\"checkbox\" :value=\"true\" />\n        <label for=\"conversation_creation\">\n          {{ $t('LABEL_MGMT.FORM.SHOW_ON_SIDEBAR.LABEL') }}\n        </label>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"medium-12 columns\">\n          <woot-button\n            :is-disabled=\"$v.title.$invalid || uiFlags.isCreating\"\n            :is-loading=\"uiFlags.isCreating\"\n            data-testid=\"label-submit\"\n          >\n            {{ $t('LABEL_MGMT.FORM.CREATE') }}\n          </woot-button>\n          <woot-button class=\"button clear\" @click.prevent=\"onClose\">\n            {{ $t('LABEL_MGMT.FORM.CANCEL') }}\n          </woot-button>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport alertMixin from 'shared/mixins/alertMixin';\nimport validationMixin from './validationMixin';\nimport { mapGetters } from 'vuex';\nimport validations from './validations';\nimport { getRandomColor } from 'dashboard/helper/labelColor';\n\nexport default {\n  mixins: [alertMixin, validationMixin],\n  data() {\n    return {\n      color: '#000',\n      description: '',\n      title: '',\n      showOnSidebar: true,\n    };\n  },\n  validations,\n  computed: {\n    ...mapGetters({\n      uiFlags: 'labels/getUIFlags',\n    }),\n  },\n  mounted() {\n    this.color = getRandomColor();\n  },\n  methods: {\n    onClose() {\n      this.$emit('close');\n    },\n    async addLabel() {\n      try {\n        await this.$store.dispatch('labels/create', {\n          color: this.color,\n          description: this.description,\n          title: this.title,\n          show_on_sidebar: this.showOnSidebar,\n        });\n        this.showAlert(this.$t('LABEL_MGMT.ADD.API.SUCCESS_MESSAGE'));\n        this.onClose();\n      } catch (error) {\n        const errorMessage =\n          error.message || this.$t('LABEL_MGMT.ADD.API.ERROR_MESSAGE');\n        this.showAlert(errorMessage);\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/labels"},"metadata":{},"sourceType":"module"}