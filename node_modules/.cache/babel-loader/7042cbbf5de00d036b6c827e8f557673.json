{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport SettingsHeader from 'dashboard/routes/dashboard/settings/SettingsHeader';\nexport default {\n  components: {\n    SettingsHeader: SettingsHeader\n  },\n  mixins: [globalConfigMixin],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    items: function items() {\n      var _this = this;\n\n      var allItems = this.$t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW').map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          body: _this.useInstallationName(item.body, _this.globalConfig.installationName)\n        });\n      });\n      return allItems;\n    },\n    portalHeaderText: function portalHeaderText() {\n      if (this.$route.name === 'new_portal_information') {\n        return this.$t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.BASIC_SETTINGS_PAGE.HEADER');\n      }\n\n      if (this.$route.name === 'portal_customization') {\n        return this.$t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.CUSTOMIZATION_PAGE.HEADER');\n      }\n\n      return '';\n    }\n  })\n};","map":{"version":3,"sources":["NewPortal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,iBAAA,MAAA,iCAAA;AACA,OAAA,cAAA,MAAA,oDAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GADA;AAIA,EAAA,MAAA,EAAA,CAAA,iBAAA,CAJA;AAKA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,YAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,KAJA,mBAIA;AAAA;;AACA,UAAA,QAAA,GAAA,KAAA,EAAA,CAAA,oCAAA,EAAA,GAAA,CACA,UAAA,IAAA;AAAA,+CACA,IADA;AAEA,UAAA,IAAA,EAAA,KAAA,CAAA,mBAAA,CACA,IAAA,CAAA,IADA,EAEA,KAAA,CAAA,YAAA,CAAA,gBAFA;AAFA;AAAA,OADA,CAAA;AAUA,aAAA,QAAA;AACA,KAhBA;AAiBA,IAAA,gBAjBA,8BAiBA;AACA,UAAA,KAAA,MAAA,CAAA,IAAA,KAAA,wBAAA,EAAA;AACA,eAAA,KAAA,EAAA,CACA,oEADA,CAAA;AAGA;;AACA,UAAA,KAAA,MAAA,CAAA,IAAA,KAAA,sBAAA,EAAA;AACA,eAAA,KAAA,EAAA,CACA,mEADA,CAAA;AAGA;;AACA,aAAA,EAAA;AACA;AA7BA;AALA,CAAA","sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <settings-header\n      button-route=\"new\"\n      :header-title=\"portalHeaderText\"\n      show-back-button\n      :back-button-label=\"\n        $t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.BACK_BUTTON')\n      \"\n      :show-new-button=\"false\"\n    />\n    <div class=\"row content-box full-height\">\n      <woot-wizard\n        class=\"hide-for-small-only medium-3 columns\"\n        :global-config=\"globalConfig\"\n        :items=\"items\"\n      />\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport SettingsHeader from 'dashboard/routes/dashboard/settings/SettingsHeader';\nexport default {\n  components: {\n    SettingsHeader,\n  },\n  mixins: [globalConfigMixin],\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n    }),\n    items() {\n      const allItems = this.$t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW').map(\n        item => ({\n          ...item,\n          body: this.useInstallationName(\n            item.body,\n            this.globalConfig.installationName\n          ),\n        })\n      );\n\n      return allItems;\n    },\n    portalHeaderText() {\n      if (this.$route.name === 'new_portal_information') {\n        return this.$t(\n          'HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.BASIC_SETTINGS_PAGE.HEADER'\n        );\n      }\n      if (this.$route.name === 'portal_customization') {\n        return this.$t(\n          'HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.CUSTOMIZATION_PAGE.HEADER'\n        );\n      }\n      return '';\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.wrapper {\n  flex: 1;\n}\n.container {\n  display: flex;\n  flex: 1;\n}\n.wizard-box {\n  border-right: 1px solid var(--s-25);\n  ::v-deep .item {\n    background: var(--white);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/helpcenter/pages/portals"},"metadata":{},"sourceType":"module"}