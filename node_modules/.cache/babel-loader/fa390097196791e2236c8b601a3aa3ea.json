{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport InputRadioGroup from './components/InputRadioGroup';\nimport SingleSelectDropdown from './components/SingleSelectDropdown';\nexport default {\n  components: {\n    SettingsSection: SettingsSection,\n    InputRadioGroup: InputRadioGroup,\n    SingleSelectDropdown: SingleSelectDropdown\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isSMTPEnabled: false,\n      address: '',\n      port: '',\n      login: '',\n      password: '',\n      domain: '',\n      ssl: false,\n      starttls: true,\n      openSSLVerifyMode: 'none',\n      authMechanism: 'login',\n      encryptionProtocols: [{\n        id: 'ssl',\n        title: 'SSL/TLS',\n        checked: false\n      }, {\n        id: 'starttls',\n        title: 'STARTTLS',\n        checked: true\n      }],\n      openSSLVerifyModes: [{\n        key: 1,\n        value: 'none'\n      }, {\n        key: 2,\n        value: 'peer'\n      }, {\n        key: 3,\n        value: 'client_once'\n      }, {\n        key: 4,\n        value: 'fail_if_no_peer_cert'\n      }],\n      authMechanisms: [{\n        key: 1,\n        value: 'plain'\n      }, {\n        key: 2,\n        value: 'login'\n      }, {\n        key: 3,\n        value: 'cram-md5'\n      }, {\n        key: 4,\n        value: 'xoauth'\n      }, {\n        key: 5,\n        value: 'xoauth2'\n      }, {\n        key: 6,\n        value: 'ntlm'\n      }, {\n        key: 7,\n        value: 'gssapi'\n      }]\n    };\n  },\n  validations: {\n    address: {\n      required: required\n    },\n    port: {\n      required: required,\n      minLength: minLength(2)\n    },\n    login: {\n      required: required\n    },\n    password: {\n      required: required\n    },\n    domain: {\n      required: required\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'inboxes/getUIFlags'\n  })),\n  watch: {\n    inbox: function inbox() {\n      this.setDefaults();\n    }\n  },\n  mounted: function mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults: function setDefaults() {\n      var _this$inbox = this.inbox,\n          smtp_enabled = _this$inbox.smtp_enabled,\n          smtp_address = _this$inbox.smtp_address,\n          smtp_port = _this$inbox.smtp_port,\n          smtp_login = _this$inbox.smtp_login,\n          smtp_password = _this$inbox.smtp_password,\n          smtp_domain = _this$inbox.smtp_domain,\n          smtp_enable_starttls_auto = _this$inbox.smtp_enable_starttls_auto,\n          smtp_enable_ssl_tls = _this$inbox.smtp_enable_ssl_tls,\n          smtp_openssl_verify_mode = _this$inbox.smtp_openssl_verify_mode,\n          smtp_authentication = _this$inbox.smtp_authentication;\n      this.isSMTPEnabled = smtp_enabled;\n      this.address = smtp_address;\n      this.port = smtp_port;\n      this.login = smtp_login;\n      this.password = smtp_password;\n      this.domain = smtp_domain;\n      this.starttls = smtp_enable_starttls_auto;\n      this.ssl = smtp_enable_ssl_tls;\n      this.openSSLVerifyMode = smtp_openssl_verify_mode;\n      this.authMechanism = smtp_authentication;\n      this.encryptionProtocols = [{\n        id: 'ssl',\n        title: 'SSL/TLS',\n        checked: smtp_enable_ssl_tls\n      }, {\n        id: 'starttls',\n        title: 'STARTTLS',\n        checked: smtp_enable_starttls_auto\n      }];\n    },\n    handleEncryptionChange: function handleEncryptionChange(encryption) {\n      if (encryption.id === 'ssl') {\n        this.ssl = true;\n        this.starttls = false;\n      } else {\n        this.ssl = false;\n        this.starttls = true;\n      }\n    },\n    handleSSLModeChange: function handleSSLModeChange(mode) {\n      this.openSSLVerifyMode = mode;\n    },\n    handleAuthMechanismChange: function handleAuthMechanismChange(mode) {\n      this.authMechanism = mode;\n    },\n    updateInbox: function updateInbox() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var payload;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                payload = {\n                  id: _this.inbox.id,\n                  channel: {\n                    smtp_enabled: _this.isSMTPEnabled,\n                    smtp_address: _this.address,\n                    smtp_port: _this.port,\n                    smtp_login: _this.login,\n                    smtp_password: _this.password,\n                    smtp_domain: _this.domain,\n                    smtp_enable_ssl_tls: _this.ssl,\n                    smtp_enable_starttls_auto: _this.starttls,\n                    smtp_openssl_verify_mode: _this.openSSLVerifyMode,\n                    smtp_authentication: _this.authMechanism\n                  }\n                };\n                _context.next = 4;\n                return _this.$store.dispatch('inboxes/updateInboxSMTP', payload);\n\n              case 4:\n                _this.showAlert(_this.$t('INBOX_MGMT.SMTP.EDIT.SUCCESS_MESSAGE'));\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('INBOX_MGMT.SMTP.EDIT.ERROR_MESSAGE'));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["SmtpSettings.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"settings--content\">\n    <settings-section\n      :title=\"$t('INBOX_MGMT.SMTP.TITLE')\"\n      :sub-title=\"$t('INBOX_MGMT.SMTP.SUBTITLE')\"\n    >\n      <form @submit.prevent=\"updateInbox\">\n        <label for=\"toggle-enable-smtp\">\n          <input\n            v-model=\"isSMTPEnabled\"\n            type=\"checkbox\"\n            name=\"toggle-enable-smtp\"\n          />\n          {{ $t('INBOX_MGMT.SMTP.TOGGLE_AVAILABILITY') }}\n        </label>\n        <p>{{ $t('INBOX_MGMT.SMTP.TOGGLE_HELP') }}</p>\n        <div v-if=\"isSMTPEnabled\" class=\"smtp-details-wrap\">\n          <woot-input\n            v-model.trim=\"address\"\n            :class=\"{ error: $v.address.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.ADDRESS.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.SMTP.ADDRESS.PLACE_HOLDER')\"\n            @blur=\"$v.address.$touch\"\n          />\n          <woot-input\n            v-model=\"port\"\n            type=\"number\"\n            :class=\"{ error: $v.port.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.PORT.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.SMTP.PORT.PLACE_HOLDER')\"\n            @blur=\"$v.port.$touch\"\n          />\n          <woot-input\n            v-model=\"login\"\n            :class=\"{ error: $v.login.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.LOGIN.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.SMTP.LOGIN.PLACE_HOLDER')\"\n            @blur=\"$v.login.$touch\"\n          />\n          <woot-input\n            v-model=\"password\"\n            :class=\"{ error: $v.password.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.PASSWORD.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.SMTP.PASSWORD.PLACE_HOLDER')\"\n            type=\"password\"\n            @blur=\"$v.password.$touch\"\n          />\n          <woot-input\n            v-model.trim=\"domain\"\n            :class=\"{ error: $v.domain.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.DOMAIN.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.SMTP.DOMAIN.PLACE_HOLDER')\"\n            @blur=\"$v.domain.$touch\"\n          />\n          <input-radio-group\n            :label=\"$t('INBOX_MGMT.SMTP.ENCRYPTION')\"\n            :items=\"encryptionProtocols\"\n            :action=\"handleEncryptionChange\"\n          />\n          <single-select-dropdown\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.OPEN_SSL_VERIFY_MODE')\"\n            :selected=\"openSSLVerifyMode\"\n            :options=\"openSSLVerifyModes\"\n            :action=\"handleSSLModeChange\"\n          />\n          <single-select-dropdown\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.SMTP.AUTH_MECHANISM')\"\n            :selected=\"authMechanism\"\n            :options=\"authMechanisms\"\n            :action=\"handleAuthMechanismChange\"\n          />\n        </div>\n        <woot-submit-button\n          :button-text=\"$t('INBOX_MGMT.SMTP.UPDATE')\"\n          :loading=\"uiFlags.isUpdatingSMTP\"\n          :disabled=\"($v.$invalid && isSMTPEnabled) || uiFlags.isUpdatingSMTP\"\n        />\n      </form>\n    </settings-section>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport InputRadioGroup from './components/InputRadioGroup';\nimport SingleSelectDropdown from './components/SingleSelectDropdown';\n\nexport default {\n  components: {\n    SettingsSection,\n    InputRadioGroup,\n    SingleSelectDropdown,\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      isSMTPEnabled: false,\n      address: '',\n      port: '',\n      login: '',\n      password: '',\n      domain: '',\n      ssl: false,\n      starttls: true,\n      openSSLVerifyMode: 'none',\n      authMechanism: 'login',\n      encryptionProtocols: [\n        { id: 'ssl', title: 'SSL/TLS', checked: false },\n        { id: 'starttls', title: 'STARTTLS', checked: true },\n      ],\n      openSSLVerifyModes: [\n        { key: 1, value: 'none' },\n        { key: 2, value: 'peer' },\n        { key: 3, value: 'client_once' },\n        { key: 4, value: 'fail_if_no_peer_cert' },\n      ],\n      authMechanisms: [\n        { key: 1, value: 'plain' },\n        { key: 2, value: 'login' },\n        { key: 3, value: 'cram-md5' },\n        { key: 4, value: 'xoauth' },\n        { key: 5, value: 'xoauth2' },\n        { key: 6, value: 'ntlm' },\n        { key: 7, value: 'gssapi' },\n      ],\n    };\n  },\n  validations: {\n    address: { required },\n    port: {\n      required,\n      minLength: minLength(2),\n    },\n    login: { required },\n    password: { required },\n    domain: { required },\n  },\n  computed: {\n    ...mapGetters({ uiFlags: 'inboxes/getUIFlags' }),\n  },\n  watch: {\n    inbox() {\n      this.setDefaults();\n    },\n  },\n  mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults() {\n      const {\n        smtp_enabled,\n        smtp_address,\n        smtp_port,\n        smtp_login,\n        smtp_password,\n        smtp_domain,\n        smtp_enable_starttls_auto,\n        smtp_enable_ssl_tls,\n        smtp_openssl_verify_mode,\n        smtp_authentication,\n      } = this.inbox;\n      this.isSMTPEnabled = smtp_enabled;\n      this.address = smtp_address;\n      this.port = smtp_port;\n      this.login = smtp_login;\n      this.password = smtp_password;\n      this.domain = smtp_domain;\n      this.starttls = smtp_enable_starttls_auto;\n      this.ssl = smtp_enable_ssl_tls;\n      this.openSSLVerifyMode = smtp_openssl_verify_mode;\n      this.authMechanism = smtp_authentication;\n\n      this.encryptionProtocols = [\n        { id: 'ssl', title: 'SSL/TLS', checked: smtp_enable_ssl_tls },\n        {\n          id: 'starttls',\n          title: 'STARTTLS',\n          checked: smtp_enable_starttls_auto,\n        },\n      ];\n    },\n    handleEncryptionChange(encryption) {\n      if (encryption.id === 'ssl') {\n        this.ssl = true;\n        this.starttls = false;\n      } else {\n        this.ssl = false;\n        this.starttls = true;\n      }\n    },\n    handleSSLModeChange(mode) {\n      this.openSSLVerifyMode = mode;\n    },\n    handleAuthMechanismChange(mode) {\n      this.authMechanism = mode;\n    },\n    async updateInbox() {\n      try {\n        const payload = {\n          id: this.inbox.id,\n          channel: {\n            smtp_enabled: this.isSMTPEnabled,\n            smtp_address: this.address,\n            smtp_port: this.port,\n            smtp_login: this.login,\n            smtp_password: this.password,\n            smtp_domain: this.domain,\n            smtp_enable_ssl_tls: this.ssl,\n            smtp_enable_starttls_auto: this.starttls,\n            smtp_openssl_verify_mode: this.openSSLVerifyMode,\n            smtp_authentication: this.authMechanism,\n          },\n        };\n        await this.$store.dispatch('inboxes/updateInboxSMTP', payload);\n        this.showAlert(this.$t('INBOX_MGMT.SMTP.EDIT.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('INBOX_MGMT.SMTP.EDIT.ERROR_MESSAGE'));\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.smtp-details-wrap {\n  margin-bottom: var(--space-medium);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox"},"metadata":{},"sourceType":"module"}