{"ast":null,"code":"var _mutations;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport * as MutationHelpers from 'shared/helpers/vuex/mutationHelpers';\nimport types from '../mutation-types';\nimport CSATReports from '../../api/csatReports';\nimport { downloadCsvFile } from '../../helper/downloadHelper';\n\nvar computeDistribution = function computeDistribution(value, total) {\n  return (value * 100 / total).toFixed(2);\n};\n\nexport var state = {\n  records: [],\n  metrics: {\n    totalResponseCount: 0,\n    ratingsCount: {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0\n    },\n    totalSentMessagesCount: 0\n  },\n  uiFlags: {\n    isFetching: false,\n    isFetchingMetrics: false\n  }\n};\nexport var getters = {\n  getCSATResponses: function getCSATResponses(_state) {\n    return _state.records;\n  },\n  getMetrics: function getMetrics(_state) {\n    return _state.metrics;\n  },\n  getUIFlags: function getUIFlags(_state) {\n    return _state.uiFlags;\n  },\n  getSatisfactionScore: function getSatisfactionScore(_state) {\n    if (!_state.metrics.totalResponseCount) {\n      return 0;\n    }\n\n    return computeDistribution(_state.metrics.ratingsCount[4] + _state.metrics.ratingsCount[5], _state.metrics.totalResponseCount);\n  },\n  getResponseRate: function getResponseRate(_state) {\n    if (!_state.metrics.totalSentMessagesCount) {\n      return 0;\n    }\n\n    return computeDistribution(_state.metrics.totalResponseCount, _state.metrics.totalSentMessagesCount);\n  },\n  getRatingPercentage: function getRatingPercentage(_state) {\n    if (!_state.metrics.totalResponseCount) {\n      return {\n        1: 0,\n        2: 0,\n        3: 0,\n        4: 0,\n        5: 0\n      };\n    }\n\n    return {\n      1: computeDistribution(_state.metrics.ratingsCount[1], _state.metrics.totalResponseCount),\n      2: computeDistribution(_state.metrics.ratingsCount[2], _state.metrics.totalResponseCount),\n      3: computeDistribution(_state.metrics.ratingsCount[3], _state.metrics.totalResponseCount),\n      4: computeDistribution(_state.metrics.ratingsCount[4], _state.metrics.totalResponseCount),\n      5: computeDistribution(_state.metrics.ratingsCount[5], _state.metrics.totalResponseCount)\n    };\n  }\n};\nexport var actions = {\n  get: function () {\n    var _getResponses = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit,\n          _ref2,\n          _ref2$page,\n          page,\n          from,\n          to,\n          user_ids,\n          response,\n          _args = arguments;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _ref2 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref2$page = _ref2.page, page = _ref2$page === void 0 ? 1 : _ref2$page, from = _ref2.from, to = _ref2.to, user_ids = _ref2.user_ids;\n              commit(types.SET_CSAT_RESPONSE_UI_FLAG, {\n                isFetching: true\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return CSATReports.get({\n                page: page,\n                from: from,\n                to: to,\n                user_ids: user_ids\n              });\n\n            case 6:\n              response = _context.sent;\n              commit(types.SET_CSAT_RESPONSE, response.data);\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n\n            case 12:\n              _context.prev = 12;\n              commit(types.SET_CSAT_RESPONSE_UI_FLAG, {\n                isFetching: false\n              });\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10, 12, 15]]);\n    }));\n\n    function getResponses(_x) {\n      return _getResponses.apply(this, arguments);\n    }\n\n    return getResponses;\n  }(),\n  getMetrics: function () {\n    var _getMetrics = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3, _ref4) {\n      var commit, from, to, user_ids, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              from = _ref4.from, to = _ref4.to, user_ids = _ref4.user_ids;\n              commit(types.SET_CSAT_RESPONSE_UI_FLAG, {\n                isFetchingMetrics: true\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return CSATReports.getMetrics({\n                from: from,\n                to: to,\n                user_ids: user_ids\n              });\n\n            case 6:\n              response = _context2.sent;\n              commit(types.SET_CSAT_RESPONSE_METRICS, response.data);\n              _context2.next = 12;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](3);\n\n            case 12:\n              _context2.prev = 12;\n              commit(types.SET_CSAT_RESPONSE_UI_FLAG, {\n                isFetchingMetrics: false\n              });\n              return _context2.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 10, 12, 15]]);\n    }));\n\n    function getMetrics(_x2, _x3) {\n      return _getMetrics.apply(this, arguments);\n    }\n\n    return getMetrics;\n  }(),\n  downloadCSATReports: function downloadCSATReports(_, params) {\n    return CSATReports.download(params).then(function (response) {\n      downloadCsvFile(params.fileName, response.data);\n    });\n  }\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_CSAT_RESPONSE_UI_FLAG, function (_state, data) {\n  _state.uiFlags = _objectSpread(_objectSpread({}, _state.uiFlags), data);\n}), _defineProperty(_mutations, types.SET_CSAT_RESPONSE, MutationHelpers.set), _defineProperty(_mutations, types.SET_CSAT_RESPONSE_METRICS, function (_state, _ref5) {\n  var totalResponseCount = _ref5.total_count,\n      ratingsCount = _ref5.ratings_count,\n      totalSentMessagesCount = _ref5.total_sent_messages_count;\n  _state.metrics.totalResponseCount = totalResponseCount || 0;\n  _state.metrics.ratingsCount = {\n    1: ratingsCount['1'] || 0,\n    2: ratingsCount['2'] || 0,\n    3: ratingsCount['3'] || 0,\n    4: ratingsCount['4'] || 0,\n    5: ratingsCount['5'] || 0\n  };\n  _state.metrics.totalSentMessagesCount = totalSentMessagesCount || 0;\n}), _mutations);\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/csat.js"],"names":["MutationHelpers","types","CSATReports","downloadCsvFile","computeDistribution","value","total","toFixed","state","records","metrics","totalResponseCount","ratingsCount","totalSentMessagesCount","uiFlags","isFetching","isFetchingMetrics","getters","getCSATResponses","_state","getMetrics","getUIFlags","getSatisfactionScore","getResponseRate","getRatingPercentage","actions","get","commit","page","from","to","user_ids","SET_CSAT_RESPONSE_UI_FLAG","response","SET_CSAT_RESPONSE","data","getResponses","SET_CSAT_RESPONSE_METRICS","downloadCSATReports","_","params","download","then","fileName","mutations","set","total_count","ratings_count","total_sent_messages_count","namespaced"],"mappings":"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","sourcesContent":["import * as MutationHelpers from 'shared/helpers/vuex/mutationHelpers';\nimport types from '../mutation-types';\nimport CSATReports from '../../api/csatReports';\nimport { downloadCsvFile } from '../../helper/downloadHelper';\n\nconst computeDistribution = (value, total) =>\n  ((value * 100) / total).toFixed(2);\n\nexport const state = {\n  records: [],\n  metrics: {\n    totalResponseCount: 0,\n    ratingsCount: {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0,\n    },\n    totalSentMessagesCount: 0,\n  },\n  uiFlags: {\n    isFetching: false,\n    isFetchingMetrics: false,\n  },\n};\n\nexport const getters = {\n  getCSATResponses(_state) {\n    return _state.records;\n  },\n  getMetrics(_state) {\n    return _state.metrics;\n  },\n  getUIFlags(_state) {\n    return _state.uiFlags;\n  },\n  getSatisfactionScore(_state) {\n    if (!_state.metrics.totalResponseCount) {\n      return 0;\n    }\n    return computeDistribution(\n      _state.metrics.ratingsCount[4] + _state.metrics.ratingsCount[5],\n      _state.metrics.totalResponseCount\n    );\n  },\n  getResponseRate(_state) {\n    if (!_state.metrics.totalSentMessagesCount) {\n      return 0;\n    }\n    return computeDistribution(\n      _state.metrics.totalResponseCount,\n      _state.metrics.totalSentMessagesCount\n    );\n  },\n  getRatingPercentage(_state) {\n    if (!_state.metrics.totalResponseCount) {\n      return { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    }\n    return {\n      1: computeDistribution(\n        _state.metrics.ratingsCount[1],\n        _state.metrics.totalResponseCount\n      ),\n      2: computeDistribution(\n        _state.metrics.ratingsCount[2],\n        _state.metrics.totalResponseCount\n      ),\n      3: computeDistribution(\n        _state.metrics.ratingsCount[3],\n        _state.metrics.totalResponseCount\n      ),\n      4: computeDistribution(\n        _state.metrics.ratingsCount[4],\n        _state.metrics.totalResponseCount\n      ),\n      5: computeDistribution(\n        _state.metrics.ratingsCount[5],\n        _state.metrics.totalResponseCount\n      ),\n    };\n  },\n};\n\nexport const actions = {\n  get: async function getResponses(\n    { commit },\n    { page = 1, from, to, user_ids } = {}\n  ) {\n    commit(types.SET_CSAT_RESPONSE_UI_FLAG, { isFetching: true });\n    try {\n      const response = await CSATReports.get({ page, from, to, user_ids });\n      commit(types.SET_CSAT_RESPONSE, response.data);\n    } catch (error) {\n      // Ignore error\n    } finally {\n      commit(types.SET_CSAT_RESPONSE_UI_FLAG, { isFetching: false });\n    }\n  },\n  getMetrics: async function getMetrics({ commit }, { from, to, user_ids }) {\n    commit(types.SET_CSAT_RESPONSE_UI_FLAG, { isFetchingMetrics: true });\n    try {\n      const response = await CSATReports.getMetrics({ from, to, user_ids });\n      commit(types.SET_CSAT_RESPONSE_METRICS, response.data);\n    } catch (error) {\n      // Ignore error\n    } finally {\n      commit(types.SET_CSAT_RESPONSE_UI_FLAG, { isFetchingMetrics: false });\n    }\n  },\n  downloadCSATReports(_, params) {\n    return CSATReports.download(params).then(response => {\n      downloadCsvFile(params.fileName, response.data);\n    });\n  },\n};\n\nexport const mutations = {\n  [types.SET_CSAT_RESPONSE_UI_FLAG](_state, data) {\n    _state.uiFlags = {\n      ..._state.uiFlags,\n      ...data,\n    };\n  },\n\n  [types.SET_CSAT_RESPONSE]: MutationHelpers.set,\n  [types.SET_CSAT_RESPONSE_METRICS](\n    _state,\n    {\n      total_count: totalResponseCount,\n      ratings_count: ratingsCount,\n      total_sent_messages_count: totalSentMessagesCount,\n    }\n  ) {\n    _state.metrics.totalResponseCount = totalResponseCount || 0;\n    _state.metrics.ratingsCount = {\n      1: ratingsCount['1'] || 0,\n      2: ratingsCount['2'] || 0,\n      3: ratingsCount['3'] || 0,\n      4: ratingsCount['4'] || 0,\n      5: ratingsCount['5'] || 0,\n    };\n    _state.metrics.totalSentMessagesCount = totalSentMessagesCount || 0;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}