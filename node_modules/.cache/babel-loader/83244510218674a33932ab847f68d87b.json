{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport MentionBox from '../mentions/MentionBox.vue';\nexport default {\n  components: {\n    MentionBox: MentionBox\n  },\n  props: {\n    searchKey: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    cannedMessages: 'getCannedResponses'\n  })), {}, {\n    items: function items() {\n      return this.cannedMessages.map(function (cannedMessage) {\n        return {\n          label: cannedMessage.short_code,\n          key: cannedMessage.short_code,\n          description: cannedMessage.content\n        };\n      });\n    }\n  }),\n  watch: {\n    searchKey: function searchKey() {\n      this.fetchCannedResponses();\n    }\n  },\n  mounted: function mounted() {\n    this.fetchCannedResponses();\n  },\n  methods: {\n    fetchCannedResponses: function fetchCannedResponses() {\n      this.$store.dispatch('getCannedResponse', {\n        searchKey: this.searchKey\n      });\n    },\n    handleMentionClick: function handleMentionClick() {\n      var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$emit('click', item.description);\n    }\n  }\n};","map":{"version":3,"sources":["CannedResponse.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAKA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,4BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,cAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,KAJA,mBAIA;AACA,aAAA,KAAA,cAAA,CAAA,GAAA,CAAA,UAAA,aAAA;AAAA,eAAA;AACA,UAAA,KAAA,EAAA,aAAA,CAAA,UADA;AAEA,UAAA,GAAA,EAAA,aAAA,CAAA,UAFA;AAGA,UAAA,WAAA,EAAA,aAAA,CAAA;AAHA,SAAA;AAAA,OAAA,CAAA;AAKA;AAVA,IARA;AAoBA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,oBAAA;AACA;AAHA,GApBA;AAyBA,EAAA,OAzBA,qBAyBA;AACA,SAAA,oBAAA;AACA,GA3BA;AA4BA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA;AAAA,QAAA,SAAA,EAAA,KAAA;AAAA,OAAA;AACA,KAHA;AAIA,IAAA,kBAJA,gCAIA;AAAA,UAAA,IAAA,uEAAA,EAAA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA,WAAA;AACA;AANA;AA5BA,CAAA","sourcesContent":["<template>\n  <mention-box :items=\"items\" @mention-select=\"handleMentionClick\" />\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport MentionBox from '../mentions/MentionBox.vue';\n\nexport default {\n  components: { MentionBox },\n  props: {\n    searchKey: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    ...mapGetters({\n      cannedMessages: 'getCannedResponses',\n    }),\n    items() {\n      return this.cannedMessages.map(cannedMessage => ({\n        label: cannedMessage.short_code,\n        key: cannedMessage.short_code,\n        description: cannedMessage.content,\n      }));\n    },\n  },\n  watch: {\n    searchKey() {\n      this.fetchCannedResponses();\n    },\n  },\n  mounted() {\n    this.fetchCannedResponses();\n  },\n  methods: {\n    fetchCannedResponses() {\n      this.$store.dispatch('getCannedResponse', { searchKey: this.searchKey });\n    },\n    handleMentionClick(item = {}) {\n      this.$emit('click', item.description);\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}