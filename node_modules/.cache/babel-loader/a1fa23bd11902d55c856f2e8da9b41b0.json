{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport unfetch from 'unfetch';\nvar fetch = unfetch;\n\nif (typeof window !== 'undefined') {\n  // @ts-ignore\n  fetch = window.fetch || unfetch;\n}\n\nvar MAX_PAYLOAD_SIZE = 500;\n\nfunction kilobytes(buffer) {\n  var size = encodeURI(JSON.stringify(buffer)).split(/%..|./).length - 1;\n  return size / 1024;\n}\n/**\n * Checks if the payload is over or close to\n * the maximum payload size allowed by tracking\n * API.\n */\n\n\nfunction approachingTrackingAPILimit(buffer) {\n  return kilobytes(buffer) >= MAX_PAYLOAD_SIZE - 50;\n}\n\nfunction chunks(batch) {\n  var result = [];\n  var index = 0;\n  batch.forEach(function (item) {\n    var size = kilobytes(result[index]);\n\n    if (size >= 64) {\n      index++;\n    }\n\n    if (result[index]) {\n      result[index].push(item);\n    } else {\n      result[index] = [item];\n    }\n  });\n  return result;\n}\n\nexport default function batch(apiHost, config) {\n  var _this = this;\n\n  var _a, _b;\n\n  var buffer = [];\n  var flushing = false;\n  var limit = (_a = config === null || config === void 0 ? void 0 : config.size) !== null && _a !== void 0 ? _a : 10;\n  var timeout = (_b = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b !== void 0 ? _b : 5000;\n\n  function flush() {\n    var _a;\n\n    if (flushing) {\n      return;\n    }\n\n    flushing = true;\n    var batch = buffer.map(function (_a) {\n      var _url = _a[0],\n          blob = _a[1];\n      return blob;\n    });\n    buffer = [];\n    flushing = false;\n    var writeKey = (_a = batch[0]) === null || _a === void 0 ? void 0 : _a.writeKey;\n    return fetch(\"https://\" + apiHost + \"/b\", {\n      // @ts-ignore\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        batch: batch,\n        writeKey: writeKey\n      })\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n  var schedule = scheduleFlush();\n\n  function scheduleFlush() {\n    return setTimeout(function () {\n      schedule = undefined;\n\n      if (buffer.length && !flushing) {\n        flush();\n      }\n    }, timeout);\n  }\n\n  window.addEventListener('beforeunload', function () {\n    if (buffer.length === 0) {\n      return;\n    }\n\n    var batch = buffer.map(function (_a) {\n      var _url = _a[0],\n          blob = _a[1];\n      return blob;\n    });\n    var chunked = chunks(batch);\n    var reqs = chunked.map(function (chunk) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var remote, writeKey;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          if (chunk.length === 0) {\n            return [2\n            /*return*/\n            ];\n          }\n\n          remote = \"https://\" + apiHost + \"/b\";\n          writeKey = (_a = chunk[0]) === null || _a === void 0 ? void 0 : _a.writeKey;\n          return [2\n          /*return*/\n          , fetch(remote, {\n            // @ts-expect-error\n            keepalive: true,\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify({\n              batch: chunk,\n              writeKey: writeKey\n            })\n          })];\n        });\n      });\n    });\n    Promise.all(reqs).catch(console.error);\n  });\n\n  function dispatch(url, body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var bufferOverflow;\n      return __generator(this, function (_a) {\n        buffer.push([url, body]);\n        bufferOverflow = buffer.length >= limit || approachingTrackingAPILimit(buffer);\n\n        if (bufferOverflow && !flushing) {\n          flush();\n        } else {\n          if (!schedule) {\n            schedule = scheduleFlush();\n          }\n        }\n\n        return [2\n        /*return*/\n        , true];\n      });\n    });\n  }\n\n  return {\n    dispatch: dispatch\n  };\n}","map":null,"metadata":{},"sourceType":"module"}