{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nexport default {\n  components: {\n    Thumbnail: Thumbnail\n  },\n  props: {\n    agentList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    selectedAgents: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    updateSelectedAgents: {\n      type: Function,\n      default: function _default() {}\n    },\n    isWorking: {\n      type: Boolean,\n      default: false\n    },\n    submitButtonText: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  computed: {\n    selectedAgentCount: function selectedAgentCount() {\n      return this.selectedAgents.length;\n    },\n    allAgentsSelected: function allAgentsSelected() {\n      return this.selectedAgents.length === this.agentList.length;\n    },\n    disableSubmitButton: function disableSubmitButton() {\n      return this.selectedAgentCount === 0;\n    }\n  },\n  methods: {\n    isAgentSelected: function isAgentSelected(agentId) {\n      return this.selectedAgents.includes(agentId);\n    },\n    handleSelectAgent: function handleSelectAgent(agentId) {\n      var shouldRemove = this.isAgentSelected(agentId);\n      var result = [];\n\n      if (shouldRemove) {\n        result = this.selectedAgents.filter(function (item) {\n          return item !== agentId;\n        });\n      } else {\n        result = [].concat(_toConsumableArray(this.selectedAgents), [agentId]);\n      }\n\n      this.updateSelectedAgents(result);\n    },\n    selectAllAgents: function selectAllAgents() {\n      var result = this.agentList.map(function (item) {\n        return item.id;\n      });\n      this.updateSelectedAgents(result);\n    },\n    agentRowClass: function agentRowClass(agentId) {\n      return {\n        'is-active': this.isAgentSelected(agentId)\n      };\n    }\n  }\n};","map":{"version":3,"sources":["AgentSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA,OAAA,SAAA,MAAA,4CAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KALA;AASA,IAAA,oBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KATA;AAaA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAjBA,GAJA;AA0BA,EAAA,IA1BA,kBA0BA;AACA,WAAA,EAAA;AACA,GA5BA;AA6BA,EAAA,QAAA,EAAA;AACA,IAAA,kBADA,gCACA;AACA,aAAA,KAAA,cAAA,CAAA,MAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AACA,aAAA,KAAA,cAAA,CAAA,MAAA,KAAA,KAAA,SAAA,CAAA,MAAA;AACA,KANA;AAOA,IAAA,mBAPA,iCAOA;AACA,aAAA,KAAA,kBAAA,KAAA,CAAA;AACA;AATA,GA7BA;AAwCA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,OADA,EACA;AACA,aAAA,KAAA,cAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AACA,KAHA;AAIA,IAAA,iBAJA,6BAIA,OAJA,EAIA;AACA,UAAA,YAAA,GAAA,KAAA,eAAA,CAAA,OAAA,CAAA;AAEA,UAAA,MAAA,GAAA,EAAA;;AACA,UAAA,YAAA,EAAA;AACA,QAAA,MAAA,GAAA,KAAA,cAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,KAAA,OAAA;AAAA,SAAA,CAAA;AACA,OAFA,MAEA;AACA,QAAA,MAAA,gCAAA,KAAA,cAAA,IAAA,OAAA,EAAA;AACA;;AAEA,WAAA,oBAAA,CAAA,MAAA;AACA,KAfA;AAgBA,IAAA,eAhBA,6BAgBA;AACA,UAAA,MAAA,GAAA,KAAA,SAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA;AAAA,OAAA,CAAA;AACA,WAAA,oBAAA,CAAA,MAAA;AACA,KAnBA;AAoBA,IAAA,aApBA,yBAoBA,OApBA,EAoBA;AACA,aAAA;AAAA,qBAAA,KAAA,eAAA,CAAA,OAAA;AAAA,OAAA;AACA;AAtBA;AAxCA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"add-agents__header\" />\n    <table class=\"woot-table\">\n      <thead>\n        <tr>\n          <td>\n            <div class=\"checkbox-wrap\">\n              <input\n                name=\"select-all-agents\"\n                type=\"checkbox\"\n                :checked=\"allAgentsSelected ? 'checked' : ''\"\n                :title=\"$t('TEAMS_SETTINGS.AGENTS.SELECT_ALL')\"\n                @click.self=\"selectAllAgents\"\n              />\n            </div>\n          </td>\n          <td>{{ $t('TEAMS_SETTINGS.AGENTS.AGENT') }}</td>\n          <td>{{ $t('TEAMS_SETTINGS.AGENTS.EMAIL') }}</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          v-for=\"agent in agentList\"\n          :key=\"agent.id\"\n          :class=\"agentRowClass(agent.id)\"\n        >\n          <td class=\"checkbox-cell\">\n            <div class=\"checkbox-wrap\">\n              <input\n                type=\"checkbox\"\n                :checked=\"isAgentSelected(agent.id)\"\n                @click.self=\"() => handleSelectAgent(agent.id)\"\n              />\n            </div>\n          </td>\n          <td>\n            <div class=\"user-info-wrap\">\n              <thumbnail\n                :src=\"agent.thumbnail\"\n                size=\"24px\"\n                :username=\"agent.name\"\n                :status=\"agent.availability_status\"\n              />\n              <h4 class=\"sub-block-title user-name\">\n                {{ agent.name }}\n              </h4>\n            </div>\n          </td>\n          <td>\n            {{ agent.email || '---' }}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"add-agents__footer\">\n      <p>\n        {{\n          $t('TEAMS_SETTINGS.AGENTS.SELECTED_COUNT', {\n            selected: selectedAgents.length,\n            total: agentList.length,\n          })\n        }}\n      </p>\n      <woot-submit-button\n        :button-text=\"submitButtonText\"\n        :loading=\"isWorking\"\n        :disabled=\"disableSubmitButton\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\n\nexport default {\n  components: {\n    Thumbnail,\n  },\n  props: {\n    agentList: {\n      type: Array,\n      default: () => [],\n    },\n    selectedAgents: {\n      type: Array,\n      default: () => [],\n    },\n    updateSelectedAgents: {\n      type: Function,\n      default: () => {},\n    },\n    isWorking: {\n      type: Boolean,\n      default: false,\n    },\n    submitButtonText: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {};\n  },\n  computed: {\n    selectedAgentCount() {\n      return this.selectedAgents.length;\n    },\n    allAgentsSelected() {\n      return this.selectedAgents.length === this.agentList.length;\n    },\n    disableSubmitButton() {\n      return this.selectedAgentCount === 0;\n    },\n  },\n  methods: {\n    isAgentSelected(agentId) {\n      return this.selectedAgents.includes(agentId);\n    },\n    handleSelectAgent(agentId) {\n      const shouldRemove = this.isAgentSelected(agentId);\n\n      let result = [];\n      if (shouldRemove) {\n        result = this.selectedAgents.filter(item => item !== agentId);\n      } else {\n        result = [...this.selectedAgents, agentId];\n      }\n\n      this.updateSelectedAgents(result);\n    },\n    selectAllAgents() {\n      const result = this.agentList.map(item => item.id);\n      this.updateSelectedAgents(result);\n    },\n    agentRowClass(agentId) {\n      return { 'is-active': this.isAgentSelected(agentId) };\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.table__meta {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--space-small);\n}\n\n.user-info-wrap {\n  display: flex;\n  align-items: center;\n}\n\n.user-name {\n  margin-bottom: 0;\n  margin-left: var(--space-small);\n}\n\n.add-agents__footer {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.checkbox-wrap {\n  display: flex;\n  align-items: center;\n\n  input {\n    margin: 0;\n  }\n}\n.checkbox-cell {\n  width: var(--space-larger);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/teams"},"metadata":{},"sourceType":"module"}