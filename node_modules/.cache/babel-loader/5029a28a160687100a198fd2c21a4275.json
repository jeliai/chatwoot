{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, minValue, maxValue } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport accountMixin from '../../../../mixins/account';\n\nvar semver = require('semver');\n\nexport default {\n  mixins: [accountMixin, alertMixin, configMixin],\n  data: function data() {\n    return {\n      id: '',\n      name: '',\n      locale: 'en',\n      domain: '',\n      supportEmail: '',\n      features: {},\n      autoResolveDuration: null,\n      latestChatwootVersion: null\n    };\n  },\n  validations: {\n    name: {\n      required: required\n    },\n    locale: {\n      required: required\n    },\n    autoResolveDuration: {\n      minValue: minValue(1),\n      maxValue: maxValue(999)\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get',\n    getAccount: 'accounts/getAccount',\n    uiFlags: 'accounts/getUIFlags'\n  })), {}, {\n    hasAnUpdateAvailable: function hasAnUpdateAvailable() {\n      if (!semver.valid(this.latestChatwootVersion)) {\n        return false;\n      }\n\n      return semver.lt(this.globalConfig.appVersion, this.latestChatwootVersion);\n    },\n    languagesSortedByCode: function languagesSortedByCode() {\n      var enabledLanguages = _toConsumableArray(this.enabledLanguages);\n\n      return enabledLanguages.sort(function (l1, l2) {\n        return l1.iso_639_1_code.localeCompare(l2.iso_639_1_code);\n      });\n    },\n    isUpdating: function isUpdating() {\n      return this.uiFlags.isUpdating;\n    },\n    featureInboundEmailEnabled: function featureInboundEmailEnabled() {\n      return !!this.features.inbound_emails;\n    },\n    featureCustomDomainEmailEnabled: function featureCustomDomainEmailEnabled() {\n      return this.featureInboundEmailEnabled && !!this.customEmailDomainEnabled;\n    },\n    getAccountId: function getAccountId() {\n      return this.id.toString();\n    }\n  }),\n  mounted: function mounted() {\n    if (!this.id) {\n      this.initializeAccount();\n    }\n  },\n  methods: {\n    initializeAccount: function initializeAccount() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$getAccount, name, locale, id, domain, support_email, custom_email_domain_enabled, features, auto_resolve_duration, latestChatwootVersion;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('accounts/get');\n\n              case 3:\n                _this$getAccount = _this.getAccount(_this.accountId), name = _this$getAccount.name, locale = _this$getAccount.locale, id = _this$getAccount.id, domain = _this$getAccount.domain, support_email = _this$getAccount.support_email, custom_email_domain_enabled = _this$getAccount.custom_email_domain_enabled, features = _this$getAccount.features, auto_resolve_duration = _this$getAccount.auto_resolve_duration, latestChatwootVersion = _this$getAccount.latest_chatwoot_version;\n                _this.$root.$i18n.locale = locale;\n                _this.name = name;\n                _this.locale = locale;\n                _this.id = id;\n                _this.domain = domain;\n                _this.supportEmail = support_email;\n                _this.customEmailDomainEnabled = custom_email_domain_enabled;\n                _this.features = features;\n                _this.autoResolveDuration = auto_resolve_duration;\n                _this.latestChatwootVersion = latestChatwootVersion;\n                _context.next = 18;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](0);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 16]]);\n      }))();\n    },\n    updateAccount: function updateAccount() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this2.$v.$touch();\n\n                if (!_this2.$v.$invalid) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _this2.showAlert(_this2.$t('GENERAL_SETTINGS.FORM.ERROR'));\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.prev = 4;\n                _context2.next = 7;\n                return _this2.$store.dispatch('accounts/update', {\n                  locale: _this2.locale,\n                  name: _this2.name,\n                  domain: _this2.domain,\n                  support_email: _this2.supportEmail,\n                  auto_resolve_duration: _this2.autoResolveDuration\n                });\n\n              case 7:\n                _this2.$root.$i18n.locale = _this2.locale;\n\n                _this2.showAlert(_this2.$t('GENERAL_SETTINGS.UPDATE.SUCCESS'));\n\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](4);\n\n                _this2.showAlert(_this2.$t('GENERAL_SETTINGS.UPDATE.ERROR'));\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[4, 11]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"columns profile--settings\">\n    <form v-if=\"!uiFlags.isFetchingItem\" @submit.prevent=\"updateAccount\">\n      <div class=\"small-12 row profile--settings--row\">\n        <div class=\"columns small-3\">\n          <h4 class=\"block-title\">\n            {{ $t('GENERAL_SETTINGS.FORM.GENERAL_SECTION.TITLE') }}\n          </h4>\n          <p>{{ $t('GENERAL_SETTINGS.FORM.GENERAL_SECTION.NOTE') }}</p>\n        </div>\n        <div class=\"columns small-9 medium-5\">\n          <label :class=\"{ error: $v.name.$error }\">\n            {{ $t('GENERAL_SETTINGS.FORM.NAME.LABEL') }}\n            <input\n              v-model=\"name\"\n              type=\"text\"\n              :placeholder=\"$t('GENERAL_SETTINGS.FORM.NAME.PLACEHOLDER')\"\n              @blur=\"$v.name.$touch\"\n            />\n            <span v-if=\"$v.name.$error\" class=\"message\">\n              {{ $t('GENERAL_SETTINGS.FORM.NAME.ERROR') }}\n            </span>\n          </label>\n          <label :class=\"{ error: $v.locale.$error }\">\n            {{ $t('GENERAL_SETTINGS.FORM.LANGUAGE.LABEL') }}\n            <select v-model=\"locale\">\n              <option\n                v-for=\"lang in languagesSortedByCode\"\n                :key=\"lang.iso_639_1_code\"\n                :value=\"lang.iso_639_1_code\"\n              >\n                {{ lang.name }}\n              </option>\n            </select>\n            <span v-if=\"$v.locale.$error\" class=\"message\">\n              {{ $t('GENERAL_SETTINGS.FORM.LANGUAGE.ERROR') }}\n            </span>\n          </label>\n          <label v-if=\"featureInboundEmailEnabled\">\n            {{ $t('GENERAL_SETTINGS.FORM.FEATURES.INBOUND_EMAIL_ENABLED') }}\n          </label>\n          <label v-if=\"featureCustomDomainEmailEnabled\">\n            {{\n              $t('GENERAL_SETTINGS.FORM.FEATURES.CUSTOM_EMAIL_DOMAIN_ENABLED')\n            }}\n          </label>\n          <label v-if=\"featureCustomDomainEmailEnabled\">\n            {{ $t('GENERAL_SETTINGS.FORM.DOMAIN.LABEL') }}\n            <input\n              v-model=\"domain\"\n              type=\"text\"\n              :placeholder=\"$t('GENERAL_SETTINGS.FORM.DOMAIN.PLACEHOLDER')\"\n            />\n          </label>\n          <label v-if=\"featureCustomDomainEmailEnabled\">\n            {{ $t('GENERAL_SETTINGS.FORM.SUPPORT_EMAIL.LABEL') }}\n            <input\n              v-model=\"supportEmail\"\n              type=\"text\"\n              :placeholder=\"\n                $t('GENERAL_SETTINGS.FORM.SUPPORT_EMAIL.PLACEHOLDER')\n              \"\n            />\n          </label>\n          <label :class=\"{ error: $v.autoResolveDuration.$error }\">\n            {{ $t('GENERAL_SETTINGS.FORM.AUTO_RESOLVE_DURATION.LABEL') }}\n            <input\n              v-model=\"autoResolveDuration\"\n              type=\"number\"\n              :placeholder=\"\n                $t('GENERAL_SETTINGS.FORM.AUTO_RESOLVE_DURATION.PLACEHOLDER')\n              \"\n              @blur=\"$v.autoResolveDuration.$touch\"\n            />\n            <span v-if=\"$v.autoResolveDuration.$error\" class=\"message\">\n              {{ $t('GENERAL_SETTINGS.FORM.AUTO_RESOLVE_DURATION.ERROR') }}\n            </span>\n          </label>\n        </div>\n      </div>\n\n      <div class=\"profile--settings--row row\">\n        <div class=\"columns small-3\">\n          <h4 class=\"block-title\">\n            {{ $t('GENERAL_SETTINGS.FORM.ACCOUNT_ID.TITLE') }}\n          </h4>\n          <p>\n            {{ $t('GENERAL_SETTINGS.FORM.ACCOUNT_ID.NOTE') }}\n          </p>\n        </div>\n        <div class=\"columns small-9 medium-5\">\n          <woot-code :script=\"getAccountId\" />\n        </div>\n      </div>\n      <div class=\"current-version\">\n        <div>{{ `v${globalConfig.appVersion}` }}</div>\n        <div v-if=\"hasAnUpdateAvailable && globalConfig.displayManifest\">\n          {{\n            $t('GENERAL_SETTINGS.UPDATE_CHATWOOT', {\n              latestChatwootVersion: latestChatwootVersion,\n            })\n          }}\n        </div>\n      </div>\n\n      <woot-submit-button\n        class=\"button nice success button--fixed-right-top\"\n        :button-text=\"$t('GENERAL_SETTINGS.SUBMIT')\"\n        :loading=\"isUpdating\"\n      />\n    </form>\n\n    <woot-loading-state v-if=\"uiFlags.isFetchingItem\" />\n  </div>\n</template>\n\n<script>\nimport { required, minValue, maxValue } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport accountMixin from '../../../../mixins/account';\nconst semver = require('semver');\n\nexport default {\n  mixins: [accountMixin, alertMixin, configMixin],\n  data() {\n    return {\n      id: '',\n      name: '',\n      locale: 'en',\n      domain: '',\n      supportEmail: '',\n      features: {},\n      autoResolveDuration: null,\n      latestChatwootVersion: null,\n    };\n  },\n  validations: {\n    name: {\n      required,\n    },\n    locale: {\n      required,\n    },\n    autoResolveDuration: {\n      minValue: minValue(1),\n      maxValue: maxValue(999),\n    },\n  },\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n      getAccount: 'accounts/getAccount',\n      uiFlags: 'accounts/getUIFlags',\n    }),\n    hasAnUpdateAvailable() {\n      if (!semver.valid(this.latestChatwootVersion)) {\n        return false;\n      }\n\n      return semver.lt(\n        this.globalConfig.appVersion,\n        this.latestChatwootVersion\n      );\n    },\n    languagesSortedByCode() {\n      const enabledLanguages = [...this.enabledLanguages];\n      return enabledLanguages.sort((l1, l2) =>\n        l1.iso_639_1_code.localeCompare(l2.iso_639_1_code)\n      );\n    },\n    isUpdating() {\n      return this.uiFlags.isUpdating;\n    },\n\n    featureInboundEmailEnabled() {\n      return !!this.features.inbound_emails;\n    },\n\n    featureCustomDomainEmailEnabled() {\n      return this.featureInboundEmailEnabled && !!this.customEmailDomainEnabled;\n    },\n\n    getAccountId() {\n      return this.id.toString();\n    },\n  },\n  mounted() {\n    if (!this.id) {\n      this.initializeAccount();\n    }\n  },\n  methods: {\n    async initializeAccount() {\n      try {\n        await this.$store.dispatch('accounts/get');\n        const {\n          name,\n          locale,\n          id,\n          domain,\n          support_email,\n          custom_email_domain_enabled,\n          features,\n          auto_resolve_duration,\n          latest_chatwoot_version: latestChatwootVersion,\n        } = this.getAccount(this.accountId);\n\n        this.$root.$i18n.locale = locale;\n        this.name = name;\n        this.locale = locale;\n        this.id = id;\n        this.domain = domain;\n        this.supportEmail = support_email;\n        this.customEmailDomainEnabled = custom_email_domain_enabled;\n        this.features = features;\n        this.autoResolveDuration = auto_resolve_duration;\n        this.latestChatwootVersion = latestChatwootVersion;\n      } catch (error) {\n        // Ignore error\n      }\n    },\n\n    async updateAccount() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        this.showAlert(this.$t('GENERAL_SETTINGS.FORM.ERROR'));\n        return;\n      }\n      try {\n        await this.$store.dispatch('accounts/update', {\n          locale: this.locale,\n          name: this.name,\n          domain: this.domain,\n          support_email: this.supportEmail,\n          auto_resolve_duration: this.autoResolveDuration,\n        });\n        this.$root.$i18n.locale = this.locale;\n        this.showAlert(this.$t('GENERAL_SETTINGS.UPDATE.SUCCESS'));\n      } catch (error) {\n        this.showAlert(this.$t('GENERAL_SETTINGS.UPDATE.ERROR'));\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import '~dashboard/assets/scss/variables.scss';\n@import '~dashboard/assets/scss/mixins.scss';\n\n.profile--settings {\n  padding: 24px;\n  overflow: auto;\n}\n\n.profile--settings--row {\n  @include border-normal-bottom;\n  padding: $space-normal;\n  .small-3 {\n    padding: $space-normal $space-medium $space-normal 0;\n  }\n  .small-9 {\n    padding: $space-normal;\n  }\n}\n\n.current-version {\n  font-size: var(--font-size-small);\n  text-align: center;\n  padding: var(--space-normal);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/account"},"metadata":{},"sourceType":"module"}