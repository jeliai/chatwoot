{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { OPERATOR_TYPES_1, OPERATOR_TYPES_3, OPERATOR_TYPES_4 } from 'dashboard/routes/dashboard/settings/automation/operators';\nimport filterQueryGenerator from './filterQueryGenerator';\nimport actionQueryGenerator from './actionQueryGenerator';\nvar MESSAGE_CONDITION_VALUES = [{\n  id: 'incoming',\n  name: 'Incoming Message'\n}, {\n  id: 'outgoing',\n  name: 'Outgoing Message'\n}];\nexport var getCustomAttributeInputType = function getCustomAttributeInputType(key) {\n  var customAttributeMap = {\n    date: 'date',\n    text: 'plain_text',\n    list: 'search_select',\n    checkbox: 'search_select'\n  };\n  return customAttributeMap[key] || 'plain_text';\n};\nexport var isACustomAttribute = function isACustomAttribute(customAttributes, key) {\n  return customAttributes.find(function (attr) {\n    return attr.attribute_key === key;\n  });\n};\nexport var getCustomAttributeListDropdownValues = function getCustomAttributeListDropdownValues(customAttributes, type) {\n  return customAttributes.find(function (attr) {\n    return attr.attribute_key === type;\n  }).attribute_values.map(function (item) {\n    return {\n      id: item,\n      name: item\n    };\n  });\n};\nexport var isCustomAttributeCheckbox = function isCustomAttributeCheckbox(customAttributes, key) {\n  return customAttributes.find(function (attr) {\n    return attr.attribute_key === key && attr.attribute_display_type === 'checkbox';\n  });\n};\nexport var isCustomAttributeList = function isCustomAttributeList(customAttributes, type) {\n  return customAttributes.find(function (attr) {\n    return attr.attribute_key === type && attr.attribute_display_type === 'list';\n  });\n};\nexport var getOperatorTypes = function getOperatorTypes(key) {\n  var operatorMap = {\n    list: OPERATOR_TYPES_1,\n    text: OPERATOR_TYPES_3,\n    number: OPERATOR_TYPES_1,\n    link: OPERATOR_TYPES_1,\n    date: OPERATOR_TYPES_4,\n    checkbox: OPERATOR_TYPES_1\n  };\n  return operatorMap[key] || OPERATOR_TYPES_1;\n};\nexport var generateCustomAttributeTypes = function generateCustomAttributeTypes(customAttributes, type) {\n  return customAttributes.map(function (attr) {\n    return {\n      key: attr.attribute_key,\n      name: attr.attribute_display_name,\n      inputType: getCustomAttributeInputType(attr.attribute_display_type),\n      filterOperators: getOperatorTypes(attr.attribute_display_type),\n      customAttributeType: type\n    };\n  });\n};\nexport var generateConditionOptions = function generateConditionOptions(options) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  return options.map(function (i) {\n    return {\n      id: i[key],\n      name: i.title\n    };\n  });\n};\nexport var getActionOptions = function getActionOptions(_ref) {\n  var teams = _ref.teams,\n      labels = _ref.labels,\n      type = _ref.type;\n  var actionsMap = {\n    assign_team: teams,\n    send_email_to_team: teams,\n    add_label: generateConditionOptions(labels, 'title')\n  };\n  return actionsMap[type];\n};\nexport var getConditionOptions = function getConditionOptions(_ref2) {\n  var agents = _ref2.agents,\n      booleanFilterOptions = _ref2.booleanFilterOptions,\n      campaigns = _ref2.campaigns,\n      contacts = _ref2.contacts,\n      countries = _ref2.countries,\n      customAttributes = _ref2.customAttributes,\n      inboxes = _ref2.inboxes,\n      languages = _ref2.languages,\n      statusFilterOptions = _ref2.statusFilterOptions,\n      teams = _ref2.teams,\n      type = _ref2.type;\n\n  if (isCustomAttributeCheckbox(customAttributes, type)) {\n    return booleanFilterOptions;\n  }\n\n  if (isCustomAttributeList(customAttributes, type)) {\n    return getCustomAttributeListDropdownValues(customAttributes, type);\n  }\n\n  var conditionFilterMaps = {\n    status: statusFilterOptions,\n    assignee_id: agents,\n    contact: contacts,\n    inbox_id: inboxes,\n    team_id: teams,\n    campaigns: generateConditionOptions(campaigns),\n    browser_language: languages,\n    country_code: countries,\n    message_type: MESSAGE_CONDITION_VALUES\n  };\n  return conditionFilterMaps[type];\n};\nexport var getFileName = function getFileName(action) {\n  var files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var blobId = action.action_params[0];\n  if (!blobId) return '';\n\n  if (action.action_name === 'send_attachment') {\n    var file = files.find(function (item) {\n      return item.blob_id === blobId;\n    });\n    if (file) return file.filename.toString();\n  }\n\n  return '';\n};\nexport var getDefaultConditions = function getDefaultConditions(eventName) {\n  if (eventName === 'message_created') {\n    return [{\n      attribute_key: 'message_type',\n      filter_operator: 'equal_to',\n      values: '',\n      query_operator: 'and',\n      custom_attribute_type: ''\n    }];\n  }\n\n  return [{\n    attribute_key: 'status',\n    filter_operator: 'equal_to',\n    values: '',\n    query_operator: 'and',\n    custom_attribute_type: ''\n  }];\n};\nexport var getDefaultActions = function getDefaultActions() {\n  return [{\n    action_name: 'assign_team',\n    action_params: []\n  }];\n};\nexport var filterCustomAttributes = function filterCustomAttributes(customAttributes) {\n  return customAttributes.map(function (attr) {\n    return {\n      key: attr.attribute_key,\n      name: attr.attribute_display_name,\n      type: attr.attribute_display_type\n    };\n  });\n};\nexport var getStandardAttributeInputType = function getStandardAttributeInputType(automationTypes, event, key) {\n  return automationTypes[event].conditions.find(function (item) {\n    return item.key === key;\n  }).inputType;\n};\nexport var generateAutomationPayload = function generateAutomationPayload(payload) {\n  var automation = JSON.parse(JSON.stringify(payload));\n  automation.conditions[automation.conditions.length - 1].query_operator = null;\n  automation.conditions = filterQueryGenerator(automation.conditions).payload;\n  automation.actions = actionQueryGenerator(automation.actions);\n  return automation;\n};\nexport var isCustomAttribute = function isCustomAttribute(attrs, key) {\n  return attrs.find(function (attr) {\n    return attr.key === key;\n  });\n};\nexport var generateCustomAttributes = function generateCustomAttributes() {\n  var conversationAttributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var contactAttribtues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var conversationlabel = arguments.length > 2 ? arguments[2] : undefined;\n  var contactlabel = arguments.length > 3 ? arguments[3] : undefined;\n  var customAttributes = [];\n\n  if (conversationAttributes.length) {\n    customAttributes.push.apply(customAttributes, [{\n      key: \"conversation_custom_attribute\",\n      name: conversationlabel,\n      disabled: true\n    }].concat(_toConsumableArray(conversationAttributes)));\n  }\n\n  if (contactAttribtues.length) {\n    customAttributes.push.apply(customAttributes, [{\n      key: \"contact_custom_attribute\",\n      name: contactlabel,\n      disabled: true\n    }].concat(_toConsumableArray(contactAttribtues)));\n  }\n\n  return customAttributes;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/helper/automationHelper.js"],"names":["OPERATOR_TYPES_1","OPERATOR_TYPES_3","OPERATOR_TYPES_4","filterQueryGenerator","actionQueryGenerator","MESSAGE_CONDITION_VALUES","id","name","getCustomAttributeInputType","key","customAttributeMap","date","text","list","checkbox","isACustomAttribute","customAttributes","find","attr","attribute_key","getCustomAttributeListDropdownValues","type","attribute_values","map","item","isCustomAttributeCheckbox","attribute_display_type","isCustomAttributeList","getOperatorTypes","operatorMap","number","link","generateCustomAttributeTypes","attribute_display_name","inputType","filterOperators","customAttributeType","generateConditionOptions","options","i","title","getActionOptions","teams","labels","actionsMap","assign_team","send_email_to_team","add_label","getConditionOptions","agents","booleanFilterOptions","campaigns","contacts","countries","inboxes","languages","statusFilterOptions","conditionFilterMaps","status","assignee_id","contact","inbox_id","team_id","browser_language","country_code","message_type","getFileName","action","files","blobId","action_params","action_name","file","blob_id","filename","toString","getDefaultConditions","eventName","filter_operator","values","query_operator","custom_attribute_type","getDefaultActions","filterCustomAttributes","getStandardAttributeInputType","automationTypes","event","conditions","generateAutomationPayload","payload","automation","JSON","parse","stringify","length","actions","isCustomAttribute","attrs","generateCustomAttributes","conversationAttributes","contactAttribtues","conversationlabel","contactlabel","push","disabled"],"mappings":"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","sourcesContent":["import {\n  OPERATOR_TYPES_1,\n  OPERATOR_TYPES_3,\n  OPERATOR_TYPES_4,\n} from 'dashboard/routes/dashboard/settings/automation/operators';\nimport filterQueryGenerator from './filterQueryGenerator';\nimport actionQueryGenerator from './actionQueryGenerator';\nconst MESSAGE_CONDITION_VALUES = [\n  {\n    id: 'incoming',\n    name: 'Incoming Message',\n  },\n  {\n    id: 'outgoing',\n    name: 'Outgoing Message',\n  },\n];\n\nexport const getCustomAttributeInputType = key => {\n  const customAttributeMap = {\n    date: 'date',\n    text: 'plain_text',\n    list: 'search_select',\n    checkbox: 'search_select',\n  };\n\n  return customAttributeMap[key] || 'plain_text';\n};\n\nexport const isACustomAttribute = (customAttributes, key) => {\n  return customAttributes.find(attr => {\n    return attr.attribute_key === key;\n  });\n};\n\nexport const getCustomAttributeListDropdownValues = (\n  customAttributes,\n  type\n) => {\n  return customAttributes\n    .find(attr => attr.attribute_key === type)\n    .attribute_values.map(item => {\n      return {\n        id: item,\n        name: item,\n      };\n    });\n};\n\nexport const isCustomAttributeCheckbox = (customAttributes, key) => {\n  return customAttributes.find(attr => {\n    return (\n      attr.attribute_key === key && attr.attribute_display_type === 'checkbox'\n    );\n  });\n};\n\nexport const isCustomAttributeList = (customAttributes, type) => {\n  return customAttributes.find(attr => {\n    return (\n      attr.attribute_key === type && attr.attribute_display_type === 'list'\n    );\n  });\n};\n\nexport const getOperatorTypes = key => {\n  const operatorMap = {\n    list: OPERATOR_TYPES_1,\n    text: OPERATOR_TYPES_3,\n    number: OPERATOR_TYPES_1,\n    link: OPERATOR_TYPES_1,\n    date: OPERATOR_TYPES_4,\n    checkbox: OPERATOR_TYPES_1,\n  };\n\n  return operatorMap[key] || OPERATOR_TYPES_1;\n};\n\nexport const generateCustomAttributeTypes = (customAttributes, type) => {\n  return customAttributes.map(attr => {\n    return {\n      key: attr.attribute_key,\n      name: attr.attribute_display_name,\n      inputType: getCustomAttributeInputType(attr.attribute_display_type),\n      filterOperators: getOperatorTypes(attr.attribute_display_type),\n      customAttributeType: type,\n    };\n  });\n};\n\nexport const generateConditionOptions = (options, key = 'id') => {\n  return options.map(i => {\n    return {\n      id: i[key],\n      name: i.title,\n    };\n  });\n};\n\nexport const getActionOptions = ({ teams, labels, type }) => {\n  const actionsMap = {\n    assign_team: teams,\n    send_email_to_team: teams,\n    add_label: generateConditionOptions(labels, 'title'),\n  };\n  return actionsMap[type];\n};\n\nexport const getConditionOptions = ({\n  agents,\n  booleanFilterOptions,\n  campaigns,\n  contacts,\n  countries,\n  customAttributes,\n  inboxes,\n  languages,\n  statusFilterOptions,\n  teams,\n  type,\n}) => {\n  if (isCustomAttributeCheckbox(customAttributes, type)) {\n    return booleanFilterOptions;\n  }\n\n  if (isCustomAttributeList(customAttributes, type)) {\n    return getCustomAttributeListDropdownValues(customAttributes, type);\n  }\n\n  const conditionFilterMaps = {\n    status: statusFilterOptions,\n    assignee_id: agents,\n    contact: contacts,\n    inbox_id: inboxes,\n    team_id: teams,\n    campaigns: generateConditionOptions(campaigns),\n    browser_language: languages,\n    country_code: countries,\n    message_type: MESSAGE_CONDITION_VALUES,\n  };\n\n  return conditionFilterMaps[type];\n};\n\nexport const getFileName = (action, files = []) => {\n  const blobId = action.action_params[0];\n  if (!blobId) return '';\n  if (action.action_name === 'send_attachment') {\n    const file = files.find(item => item.blob_id === blobId);\n    if (file) return file.filename.toString();\n  }\n  return '';\n};\n\nexport const getDefaultConditions = eventName => {\n  if (eventName === 'message_created') {\n    return [\n      {\n        attribute_key: 'message_type',\n        filter_operator: 'equal_to',\n        values: '',\n        query_operator: 'and',\n        custom_attribute_type: '',\n      },\n    ];\n  }\n  return [\n    {\n      attribute_key: 'status',\n      filter_operator: 'equal_to',\n      values: '',\n      query_operator: 'and',\n      custom_attribute_type: '',\n    },\n  ];\n};\n\nexport const getDefaultActions = () => {\n  return [\n    {\n      action_name: 'assign_team',\n      action_params: [],\n    },\n  ];\n};\n\nexport const filterCustomAttributes = customAttributes => {\n  return customAttributes.map(attr => {\n    return {\n      key: attr.attribute_key,\n      name: attr.attribute_display_name,\n      type: attr.attribute_display_type,\n    };\n  });\n};\n\nexport const getStandardAttributeInputType = (automationTypes, event, key) => {\n  return automationTypes[event].conditions.find(item => item.key === key)\n    .inputType;\n};\n\nexport const generateAutomationPayload = payload => {\n  const automation = JSON.parse(JSON.stringify(payload));\n  automation.conditions[automation.conditions.length - 1].query_operator = null;\n  automation.conditions = filterQueryGenerator(automation.conditions).payload;\n  automation.actions = actionQueryGenerator(automation.actions);\n  return automation;\n};\n\nexport const isCustomAttribute = (attrs, key) => {\n  return attrs.find(attr => attr.key === key);\n};\n\nexport const generateCustomAttributes = (\n  conversationAttributes = [],\n  contactAttribtues = [],\n  conversationlabel,\n  contactlabel\n) => {\n  const customAttributes = [];\n  if (conversationAttributes.length) {\n    customAttributes.push(\n      {\n        key: `conversation_custom_attribute`,\n        name: conversationlabel,\n        disabled: true,\n      },\n      ...conversationAttributes\n    );\n  }\n  if (contactAttribtues.length) {\n    customAttributes.push(\n      {\n        key: `contact_custom_attribute`,\n        name: contactlabel,\n        disabled: true,\n      },\n      ...contactAttribtues\n    );\n  }\n  return customAttributes;\n};\n"]},"metadata":{},"sourceType":"module"}