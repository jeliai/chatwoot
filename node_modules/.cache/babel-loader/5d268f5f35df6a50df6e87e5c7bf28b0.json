{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UserMessage from 'widget/components/UserMessage';\nimport AgentMessageBubble from 'widget/components/AgentMessageBubble';\nimport timeMixin from 'dashboard/mixins/time';\nimport ImageBubble from 'widget/components/ImageBubble';\nimport FileBubble from 'widget/components/FileBubble';\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail';\nimport { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport configMixin from '../mixins/configMixin';\nimport messageMixin from '../mixins/messageMixin';\nimport { isASubmittedFormMessage } from 'shared/helpers/MessageTypeHelper';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\nexport default {\n  name: 'AgentMessage',\n  components: {\n    AgentMessageBubble: AgentMessageBubble,\n    ImageBubble: ImageBubble,\n    Thumbnail: Thumbnail,\n    UserMessage: UserMessage,\n    FileBubble: FileBubble\n  },\n  mixins: [timeMixin, configMixin, messageMixin, darkModeMixin],\n  props: {\n    message: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      hasImageError: false\n    };\n  },\n  computed: {\n    shouldDisplayAgentMessage: function shouldDisplayAgentMessage() {\n      if (this.contentType === 'input_select' && this.messageContentAttributes.submitted_values && !this.message.content) {\n        return false;\n      }\n\n      return this.message.content;\n    },\n    readableTime: function readableTime() {\n      var _this$message$created = this.message.created_at,\n          createdAt = _this$message$created === void 0 ? '' : _this$message$created;\n      return this.messageStamp(createdAt, 'LLL d yyyy, h:mm a');\n    },\n    messageType: function messageType() {\n      var _this$message$message = this.message.message_type,\n          type = _this$message$message === void 0 ? 1 : _this$message$message;\n      return type;\n    },\n    contentType: function contentType() {\n      var _this$message$content = this.message.content_type,\n          type = _this$message$content === void 0 ? '' : _this$message$content;\n      return type;\n    },\n    agentName: function agentName() {\n      if (this.message.message_type === MESSAGE_TYPE.TEMPLATE) {\n        return 'Bot';\n      }\n\n      if (this.message.sender) {\n        return this.message.sender.available_name || this.message.sender.name;\n      }\n\n      return 'Bot';\n    },\n    avatarUrl: function avatarUrl() {\n      // eslint-disable-next-line\n      var BotImage = require('dashboard/assets/images/chatwoot_bot.png');\n\n      var displayImage = this.useInboxAvatarForBot ? this.inboxAvatarUrl : BotImage;\n\n      if (this.message.message_type === MESSAGE_TYPE.TEMPLATE) {\n        return displayImage;\n      }\n\n      return this.message.sender ? this.message.sender.avatar_url : displayImage;\n    },\n    hasRecordedResponse: function hasRecordedResponse() {\n      return this.messageContentAttributes.submitted_email || this.messageContentAttributes.submitted_values && !['form', 'input_csat'].includes(this.contentType);\n    },\n    responseMessage: function responseMessage() {\n      if (this.messageContentAttributes.submitted_email) {\n        return {\n          content: this.messageContentAttributes.submitted_email\n        };\n      }\n\n      if (this.messageContentAttributes.submitted_values) {\n        if (this.contentType === 'input_select') {\n          var _this$messageContentA = _slicedToArray(this.messageContentAttributes.submitted_values, 1),\n              _this$messageContentA2 = _this$messageContentA[0],\n              selectionOption = _this$messageContentA2 === void 0 ? {} : _this$messageContentA2;\n\n          return {\n            content: selectionOption.title || selectionOption.value\n          };\n        }\n      }\n\n      return '';\n    },\n    isASubmittedForm: function isASubmittedForm() {\n      return isASubmittedFormMessage(this.message);\n    },\n    submittedFormValues: function submittedFormValues() {\n      return this.messageContentAttributes.submitted_values.map(function (submittedValue) {\n        return {\n          id: submittedValue.name,\n          content: submittedValue.value\n        };\n      });\n    },\n    wrapClass: function wrapClass() {\n      return {\n        'has-text': this.shouldDisplayAgentMessage\n      };\n    }\n  },\n  watch: {\n    message: function message() {\n      this.hasImageError = false;\n    }\n  },\n  mounted: function mounted() {\n    this.hasImageError = false;\n  },\n  methods: {\n    onImageLoadError: function onImageLoadError() {\n      this.hasImageError = true;\n    }\n  }\n};","map":{"version":3,"sources":["AgentMessage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"agent-message-wrap\"\n    :class=\"{ 'has-response': hasRecordedResponse || isASubmittedForm }\"\n  >\n    <div v-if=\"!isASubmittedForm\" class=\"agent-message\">\n      <div class=\"avatar-wrap\">\n        <thumbnail\n          v-if=\"message.showAvatar || hasRecordedResponse\"\n          :src=\"avatarUrl\"\n          size=\"24px\"\n          :username=\"agentName\"\n        />\n      </div>\n      <div class=\"message-wrap\">\n        <AgentMessageBubble\n          v-if=\"shouldDisplayAgentMessage\"\n          :content-type=\"contentType\"\n          :message-content-attributes=\"messageContentAttributes\"\n          :message-id=\"message.id\"\n          :message-type=\"messageType\"\n          :message=\"message.content\"\n        />\n        <div\n          v-if=\"hasAttachments\"\n          class=\"chat-bubble has-attachment agent\"\n          :class=\"(wrapClass, $dm('bg-white', 'dark:bg-slate-50'))\"\n        >\n          <div v-for=\"attachment in message.attachments\" :key=\"attachment.id\">\n            <image-bubble\n              v-if=\"attachment.file_type === 'image' && !hasImageError\"\n              :url=\"attachment.data_url\"\n              :thumb=\"attachment.data_url\"\n              :readable-time=\"readableTime\"\n              @error=\"onImageLoadError\"\n            />\n            <audio v-else-if=\"attachment.file_type === 'audio'\" controls>\n              <source :src=\"attachment.data_url\" />\n            </audio>\n            <file-bubble v-else :url=\"attachment.data_url\" />\n          </div>\n        </div>\n        <p\n          v-if=\"message.showAvatar || hasRecordedResponse\"\n          class=\"agent-name\"\n          :class=\"$dm('text-slate-700', 'dark:text-slate-200')\"\n        >\n          {{ agentName }}\n        </p>\n      </div>\n    </div>\n\n    <UserMessage v-if=\"hasRecordedResponse\" :message=\"responseMessage\" />\n    <div v-if=\"isASubmittedForm\">\n      <UserMessage\n        v-for=\"submittedValue in submittedFormValues\"\n        :key=\"submittedValue.id\"\n        :message=\"submittedValue\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserMessage from 'widget/components/UserMessage';\nimport AgentMessageBubble from 'widget/components/AgentMessageBubble';\nimport timeMixin from 'dashboard/mixins/time';\nimport ImageBubble from 'widget/components/ImageBubble';\nimport FileBubble from 'widget/components/FileBubble';\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail';\nimport { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport configMixin from '../mixins/configMixin';\nimport messageMixin from '../mixins/messageMixin';\nimport { isASubmittedFormMessage } from 'shared/helpers/MessageTypeHelper';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\n\nexport default {\n  name: 'AgentMessage',\n  components: {\n    AgentMessageBubble,\n    ImageBubble,\n    Thumbnail,\n    UserMessage,\n    FileBubble,\n  },\n  mixins: [timeMixin, configMixin, messageMixin, darkModeMixin],\n  props: {\n    message: {\n      type: Object,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      hasImageError: false,\n    };\n  },\n  computed: {\n    shouldDisplayAgentMessage() {\n      if (\n        this.contentType === 'input_select' &&\n        this.messageContentAttributes.submitted_values &&\n        !this.message.content\n      ) {\n        return false;\n      }\n      return this.message.content;\n    },\n    readableTime() {\n      const { created_at: createdAt = '' } = this.message;\n      return this.messageStamp(createdAt, 'LLL d yyyy, h:mm a');\n    },\n    messageType() {\n      const { message_type: type = 1 } = this.message;\n      return type;\n    },\n    contentType() {\n      const { content_type: type = '' } = this.message;\n      return type;\n    },\n    agentName() {\n      if (this.message.message_type === MESSAGE_TYPE.TEMPLATE) {\n        return 'Bot';\n      }\n      if (this.message.sender) {\n        return this.message.sender.available_name || this.message.sender.name;\n      }\n      return 'Bot';\n    },\n    avatarUrl() {\n      // eslint-disable-next-line\n      const BotImage = require('dashboard/assets/images/chatwoot_bot.png');\n      const displayImage = this.useInboxAvatarForBot\n        ? this.inboxAvatarUrl\n        : BotImage;\n\n      if (this.message.message_type === MESSAGE_TYPE.TEMPLATE) {\n        return displayImage;\n      }\n\n      return this.message.sender\n        ? this.message.sender.avatar_url\n        : displayImage;\n    },\n    hasRecordedResponse() {\n      return (\n        this.messageContentAttributes.submitted_email ||\n        (this.messageContentAttributes.submitted_values &&\n          !['form', 'input_csat'].includes(this.contentType))\n      );\n    },\n    responseMessage() {\n      if (this.messageContentAttributes.submitted_email) {\n        return { content: this.messageContentAttributes.submitted_email };\n      }\n\n      if (this.messageContentAttributes.submitted_values) {\n        if (this.contentType === 'input_select') {\n          const [\n            selectionOption = {},\n          ] = this.messageContentAttributes.submitted_values;\n          return { content: selectionOption.title || selectionOption.value };\n        }\n      }\n      return '';\n    },\n    isASubmittedForm() {\n      return isASubmittedFormMessage(this.message);\n    },\n    submittedFormValues() {\n      return this.messageContentAttributes.submitted_values.map(\n        submittedValue => ({\n          id: submittedValue.name,\n          content: submittedValue.value,\n        })\n      );\n    },\n    wrapClass() {\n      return {\n        'has-text': this.shouldDisplayAgentMessage,\n      };\n    },\n  },\n  watch: {\n    message() {\n      this.hasImageError = false;\n    },\n  },\n  mounted() {\n    this.hasImageError = false;\n  },\n  methods: {\n    onImageLoadError() {\n      this.hasImageError = true;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/widget/components"},"metadata":{},"sourceType":"module"}