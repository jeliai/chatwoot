{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport parse from 'date-fns/parse';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport { generateTimeSlots } from '../helpers/businessHour';\nvar timeSlots = generateTimeSlots(30);\nexport default {\n  components: {},\n  props: {\n    dayName: {\n      type: String,\n      default: '',\n      required: true\n    },\n    timeSlot: {\n      type: Object,\n      default: function _default() {\n        return {\n          from: '',\n          to: ''\n        };\n      }\n    }\n  },\n  computed: {\n    fromTimeSlots: function fromTimeSlots() {\n      return timeSlots;\n    },\n    toTimeSlots: function toTimeSlots() {\n      return timeSlots.filter(function (slot) {\n        return slot !== '12:00 AM';\n      });\n    },\n    isDayEnabled: {\n      get: function get() {\n        return this.timeSlot.from && this.timeSlot.to;\n      },\n      set: function set(value) {\n        var newSlot = value ? _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n          from: timeSlots[0],\n          to: timeSlots[16],\n          valid: true,\n          openAllDay: false\n        }) : _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n          from: '',\n          to: '',\n          valid: false,\n          openAllDay: false\n        });\n        this.$emit('update', newSlot);\n      }\n    },\n    fromTime: {\n      get: function get() {\n        return this.timeSlot.from;\n      },\n      set: function set(value) {\n        var fromDate = parse(value, 'hh:mm a', new Date());\n        var valid = differenceInMinutes(this.toDate, fromDate) / 60 > 0;\n        this.$emit('update', _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n          from: value,\n          valid: valid\n        }));\n      }\n    },\n    toTime: {\n      get: function get() {\n        return this.timeSlot.to;\n      },\n      set: function set(value) {\n        var toDate = parse(value, 'hh:mm a', new Date());\n\n        if (value === '12:00 AM') {\n          this.$emit('update', _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n            to: value,\n            valid: true\n          }));\n        } else {\n          var valid = differenceInMinutes(toDate, this.fromDate) / 60 > 0;\n          this.$emit('update', _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n            to: value,\n            valid: valid\n          }));\n        }\n      }\n    },\n    fromDate: function fromDate() {\n      return parse(this.fromTime, 'hh:mm a', new Date());\n    },\n    toDate: function toDate() {\n      return parse(this.toTime, 'hh:mm a', new Date());\n    },\n    totalHours: function totalHours() {\n      if (this.timeSlot.openAllDay) {\n        return 24;\n      }\n\n      var totalHours = differenceInMinutes(this.toDate, this.fromDate) / 60;\n      return totalHours;\n    },\n    hasError: function hasError() {\n      return !this.timeSlot.valid;\n    },\n    isOpenAllDay: {\n      get: function get() {\n        return this.timeSlot.openAllDay;\n      },\n      set: function set(value) {\n        if (value) {\n          this.$emit('update', _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n            from: '12:00 AM',\n            to: '11:59 PM',\n            valid: true,\n            openAllDay: value\n          }));\n        } else {\n          this.$emit('update', _objectSpread(_objectSpread({}, this.timeSlot), {}, {\n            from: '09:00 AM',\n            to: '05:00 PM',\n            valid: true,\n            openAllDay: value\n          }));\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["BusinessDay.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"day-wrap\">\n    <div class=\"checkbox-wrap\">\n      <input\n        v-model=\"isDayEnabled\"\n        name=\"enable-day\"\n        class=\"enable-checkbox\"\n        type=\"checkbox\"\n        :title=\"$t('INBOX_MGMT.BUSINESS_HOURS.DAY.ENABLE')\"\n      />\n    </div>\n    <div class=\"day\">\n      <span>{{ dayName }}</span>\n    </div>\n    <div v-if=\"isDayEnabled\" class=\"hours-select-wrap\">\n      <div class=\"hours-range\">\n        <div class=\"checkbox-wrap open-all-day\">\n          <input\n            v-model=\"isOpenAllDay\"\n            name=\"enable-open-all-day\"\n            class=\"enable-checkbox\"\n            type=\"checkbox\"\n            :title=\"$t('INBOX_MGMT.BUSINESS_HOURS.ALL_DAY')\"\n          />\n          <span>{{ $t('INBOX_MGMT.BUSINESS_HOURS.ALL_DAY') }}</span>\n        </div>\n        <multiselect\n          v-model=\"fromTime\"\n          :options=\"fromTimeSlots\"\n          deselect-label=\"\"\n          select-label=\"\"\n          selected-label=\"\"\n          :placeholder=\"$t('INBOX_MGMT.BUSINESS_HOURS.DAY.CHOOSE')\"\n          :allow-empty=\"false\"\n          :disabled=\"isOpenAllDay\"\n        />\n        <div class=\"separator-icon\">\n          <fluent-icon icon=\"subtract\" type=\"solid\" size=\"16\" />\n        </div>\n        <multiselect\n          v-model=\"toTime\"\n          :options=\"toTimeSlots\"\n          deselect-label=\"\"\n          select-label=\"\"\n          selected-label=\"\"\n          :placeholder=\"$t('INBOX_MGMT.BUSINESS_HOURS.DAY.CHOOSE')\"\n          :allow-empty=\"false\"\n          :disabled=\"isOpenAllDay\"\n        />\n      </div>\n      <div v-if=\"hasError\" class=\"date-error\">\n        <span class=\"error\">{{\n          $t('INBOX_MGMT.BUSINESS_HOURS.DAY.VALIDATION_ERROR')\n        }}</span>\n      </div>\n    </div>\n    <div v-else class=\"day-unavailable\">\n      <span>\n        {{ $t('INBOX_MGMT.BUSINESS_HOURS.DAY.UNAVAILABLE') }}\n      </span>\n    </div>\n    <div>\n      <span v-if=\"isDayEnabled && !hasError\" class=\"label\">\n        {{ totalHours }} {{ $t('INBOX_MGMT.BUSINESS_HOURS.DAY.HOURS') }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport parse from 'date-fns/parse';\nimport differenceInMinutes from 'date-fns/differenceInMinutes';\nimport { generateTimeSlots } from '../helpers/businessHour';\n\nconst timeSlots = generateTimeSlots(30);\n\nexport default {\n  components: {},\n  props: {\n    dayName: {\n      type: String,\n      default: '',\n      required: true,\n    },\n    timeSlot: {\n      type: Object,\n      default: () => ({\n        from: '',\n        to: '',\n      }),\n    },\n  },\n  computed: {\n    fromTimeSlots() {\n      return timeSlots;\n    },\n    toTimeSlots() {\n      return timeSlots.filter(slot => {\n        return slot !== '12:00 AM';\n      });\n    },\n    isDayEnabled: {\n      get() {\n        return this.timeSlot.from && this.timeSlot.to;\n      },\n      set(value) {\n        const newSlot = value\n          ? {\n              ...this.timeSlot,\n              from: timeSlots[0],\n              to: timeSlots[16],\n              valid: true,\n              openAllDay: false,\n            }\n          : {\n              ...this.timeSlot,\n              from: '',\n              to: '',\n              valid: false,\n              openAllDay: false,\n            };\n        this.$emit('update', newSlot);\n      },\n    },\n    fromTime: {\n      get() {\n        return this.timeSlot.from;\n      },\n      set(value) {\n        const fromDate = parse(value, 'hh:mm a', new Date());\n        const valid = differenceInMinutes(this.toDate, fromDate) / 60 > 0;\n        this.$emit('update', {\n          ...this.timeSlot,\n          from: value,\n          valid,\n        });\n      },\n    },\n    toTime: {\n      get() {\n        return this.timeSlot.to;\n      },\n      set(value) {\n        const toDate = parse(value, 'hh:mm a', new Date());\n        if (value === '12:00 AM') {\n          this.$emit('update', {\n            ...this.timeSlot,\n            to: value,\n            valid: true,\n          });\n        } else {\n          const valid = differenceInMinutes(toDate, this.fromDate) / 60 > 0;\n          this.$emit('update', {\n            ...this.timeSlot,\n            to: value,\n            valid,\n          });\n        }\n      },\n    },\n    fromDate() {\n      return parse(this.fromTime, 'hh:mm a', new Date());\n    },\n    toDate() {\n      return parse(this.toTime, 'hh:mm a', new Date());\n    },\n    totalHours() {\n      if (this.timeSlot.openAllDay) {\n        return 24;\n      }\n      const totalHours = differenceInMinutes(this.toDate, this.fromDate) / 60;\n      return totalHours;\n    },\n    hasError() {\n      return !this.timeSlot.valid;\n    },\n    isOpenAllDay: {\n      get() {\n        return this.timeSlot.openAllDay;\n      },\n      set(value) {\n        if (value) {\n          this.$emit('update', {\n            ...this.timeSlot,\n            from: '12:00 AM',\n            to: '11:59 PM',\n            valid: true,\n            openAllDay: value,\n          });\n        } else {\n          this.$emit('update', {\n            ...this.timeSlot,\n            from: '09:00 AM',\n            to: '05:00 PM',\n            valid: true,\n            openAllDay: value,\n          });\n        }\n      },\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.day-wrap::v-deep .multiselect {\n  margin: 0;\n  width: 12rem;\n\n  > .multiselect__tags {\n    padding-left: var(--space-slab);\n\n    .multiselect__single {\n      font-size: var(--font-size-small);\n      line-height: var(--space-medium);\n      padding: var(--space-small) 0;\n    }\n  }\n}\n.day-wrap {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-small) 0;\n  min-height: var(--space-larger);\n  box-sizing: content-box;\n  border-bottom: 1px solid var(--color-border-light);\n}\n.enable-checkbox {\n  margin: 0;\n}\n\n.hours-select-wrap {\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  flex-grow: 1;\n  position: relative;\n}\n\n.hours-range,\n.day-unavailable {\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  flex-grow: 1;\n}\n\n.day-unavailable {\n  font-size: var(--font-size-small);\n  color: var(--s-500);\n}\n\n.checkbox-wrap {\n  display: flex;\n  align-items: center;\n}\n\n.separator-icon,\n.day {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--space-slab);\n  height: 100%;\n}\n\n.day {\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-medium);\n  width: 13rem;\n}\n\n.label {\n  font-size: var(--font-size-mini);\n  color: var(--w-700);\n  background: var(--w-50);\n}\n\n.date-error {\n  padding-top: var(--space-smaller);\n}\n\n.error {\n  font-size: var(--font-size-mini);\n  color: var(--r-300);\n}\n\n.open-all-day {\n  margin-right: var(--space-medium);\n  span {\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-medium);\n    margin-left: var(--space-smaller);\n  }\n  input {\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-medium);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/components"},"metadata":{},"sourceType":"module"}