{"ast":null,"code":"import isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday'; // Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\n/**\r\n * @func Callback function to be called after delay\r\n * @delay Delay for debounce in ms\r\n * @immediate should execute immediately\r\n * @returns debounced callaback function\r\n */\n\nvar debounce = function debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = null;\n    var args = arguments;\n\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = window.setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n/**\r\n * @name Get contrasting text color\r\n * @description Get contrasting text color from a text color\r\n * @param bgColor  Background color of text.\r\n * @returns contrasting text color\r\n */\n\n\nvar getContrastingTextColor = function getContrastingTextColor(bgColor) {\n  var color = bgColor.replace('#', '');\n  var r = parseInt(color.slice(0, 2), 16);\n  var g = parseInt(color.slice(2, 4), 16);\n  var b = parseInt(color.slice(4, 6), 16); // http://stackoverflow.com/a/3943023/112731\n\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n};\n/**\r\n * @name Get formatted date\r\n * @description Get date in today, yesterday or any other date format\r\n * @param date  date\r\n * @param todayText  Today text\r\n * @param yesterdayText  Yesterday text\r\n * @returns formatted date\r\n */\n\n\nvar formatDate = function formatDate(_ref) {\n  var date = _ref.date,\n      todayText = _ref.todayText,\n      yesterdayText = _ref.yesterdayText;\n  var dateValue = new Date(date);\n  if (isToday(dateValue)) return todayText;\n  if (isYesterday(dateValue)) return yesterdayText;\n  return date;\n};\n/**\r\n * @name formatTime\r\n * @description Format time to Hour, Minute and Second\r\n * @param timeInSeconds  number\r\n * @returns formatted time\r\n */\n\n\nvar formatTime = function formatTime(timeInSeconds) {\n  var formattedTime = '';\n\n  if (timeInSeconds >= 60 && timeInSeconds < 3600) {\n    var minutes = Math.floor(timeInSeconds / 60);\n    formattedTime = minutes + \" Min\";\n    var seconds = minutes === 60 ? 0 : Math.floor(timeInSeconds % 60);\n    return formattedTime + (\"\" + (seconds > 0 ? ' ' + seconds + ' Sec' : ''));\n  }\n\n  if (timeInSeconds >= 3600 && timeInSeconds < 86400) {\n    var hours = Math.floor(timeInSeconds / 3600);\n    formattedTime = hours + \" Hr\";\n\n    var _minutes = timeInSeconds % 3600 < 60 || hours === 24 ? 0 : Math.floor(timeInSeconds % 3600 / 60);\n\n    return formattedTime + (\"\" + (_minutes > 0 ? ' ' + _minutes + ' Min' : ''));\n  }\n\n  if (timeInSeconds >= 86400) {\n    var days = Math.floor(timeInSeconds / 86400);\n    formattedTime = days + \" Day\";\n\n    var _hours = timeInSeconds % 86400 < 3600 || days >= 364 ? 0 : Math.floor(timeInSeconds % 86400 / 3600);\n\n    return formattedTime + (\"\" + (_hours > 0 ? ' ' + _hours + ' Hr' : ''));\n  }\n\n  return Math.floor(timeInSeconds) + \" Sec\";\n};\n/**\r\n * @name trimContent\r\n * @description Trim a string to max length\r\n * @param content String to trim\r\n * @param maxLength Length of the string to trim, default 1024\r\n * @param ellipsis Boolean to add dots at the end of the string, default false\r\n * @returns trimmed string\r\n */\n\n\nvar trimContent = function trimContent(content, maxLength, ellipsis) {\n  if (content === void 0) {\n    content = '';\n  }\n\n  if (maxLength === void 0) {\n    maxLength = 1024;\n  }\n\n  if (ellipsis === void 0) {\n    ellipsis = false;\n  }\n\n  var trimmedContent = content;\n\n  if (content.length > maxLength) {\n    trimmedContent = content.substring(0, maxLength);\n  }\n\n  if (ellipsis) {\n    trimmedContent = trimmedContent + '...';\n  }\n\n  return trimmedContent;\n};\n\nexport { debounce, formatDate, formatTime, getContrastingTextColor, trimContent };","map":null,"metadata":{},"sourceType":"module"}