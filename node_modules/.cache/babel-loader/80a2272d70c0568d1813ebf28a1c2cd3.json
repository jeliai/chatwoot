{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { REPLY_EDITOR_MODES, CHAR_LENGTH_WARNING } from './constants';\nimport { hasPressedAltAndPKey, hasPressedAltAndLKey } from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nexport default {\n  name: 'ReplyTopPanel',\n  mixins: [eventListenerMixins],\n  props: {\n    mode: {\n      type: String,\n      default: REPLY_EDITOR_MODES.REPLY\n    },\n    setReplyMode: {\n      type: Function,\n      default: function _default() {}\n    },\n    isMessageLengthReachingThreshold: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    charactersRemaining: {\n      type: Number,\n      default: function _default() {\n        return 0;\n      }\n    },\n    popoutReplyBox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    replyButtonClass: function replyButtonClass() {\n      return {\n        'is-active': this.mode === REPLY_EDITOR_MODES.REPLY\n      };\n    },\n    noteButtonClass: function noteButtonClass() {\n      return {\n        'is-active': this.mode === REPLY_EDITOR_MODES.NOTE\n      };\n    },\n    charLengthClass: function charLengthClass() {\n      return this.charactersRemaining < 0 ? 'message-error' : 'message-length';\n    },\n    characterLengthWarning: function characterLengthWarning() {\n      return this.charactersRemaining < 0 ? \"\".concat(-this.charactersRemaining, \" \").concat(CHAR_LENGTH_WARNING.NEGATIVE) : \"\".concat(this.charactersRemaining, \" \").concat(CHAR_LENGTH_WARNING.UNDER_50);\n    }\n  },\n  methods: {\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (hasPressedAltAndPKey(e)) {\n        this.handleNoteClick();\n      }\n\n      if (hasPressedAltAndLKey(e)) {\n        this.handleReplyClick();\n      }\n    },\n    handleReplyClick: function handleReplyClick() {\n      this.setReplyMode(REPLY_EDITOR_MODES.REPLY);\n    },\n    handleNoteClick: function handleNoteClick() {\n      this.setReplyMode(REPLY_EDITOR_MODES.NOTE);\n    }\n  }\n};","map":{"version":3,"sources":["ReplyTopPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,SAAA,kBAAA,EAAA,mBAAA,QAAA,aAAA;AACA,SACA,oBADA,EAEA,oBAFA,QAGA,gCAHA;AAIA,OAAA,mBAAA,MAAA,mCAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,MAAA,EAAA,CAAA,mBAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,kBAAA,CAAA;AAFA,KADA;AAKA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KALA;AASA,IAAA,gCAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,KAAA;AAAA;AAFA,KATA;AAaA,IAAA,mBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAbA;AAiBA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAjBA,GAHA;AAyBA,EAAA,QAAA,EAAA;AACA,IAAA,gBADA,8BACA;AACA,aAAA;AACA,qBAAA,KAAA,IAAA,KAAA,kBAAA,CAAA;AADA,OAAA;AAGA,KALA;AAMA,IAAA,eANA,6BAMA;AACA,aAAA;AACA,qBAAA,KAAA,IAAA,KAAA,kBAAA,CAAA;AADA,OAAA;AAGA,KAVA;AAWA,IAAA,eAXA,6BAWA;AACA,aAAA,KAAA,mBAAA,GAAA,CAAA,GAAA,eAAA,GAAA,gBAAA;AACA,KAbA;AAcA,IAAA,sBAdA,oCAcA;AACA,aAAA,KAAA,mBAAA,GAAA,CAAA,aACA,CAAA,KAAA,mBADA,cACA,mBAAA,CAAA,QADA,cAEA,KAAA,mBAFA,cAEA,mBAAA,CAAA,QAFA,CAAA;AAGA;AAlBA,GAzBA;AA6CA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,CADA,EACA;AACA,UAAA,oBAAA,CAAA,CAAA,CAAA,EAAA;AACA,aAAA,eAAA;AACA;;AACA,UAAA,oBAAA,CAAA,CAAA,CAAA,EAAA;AACA,aAAA,gBAAA;AACA;AACA,KARA;AASA,IAAA,gBATA,8BASA;AACA,WAAA,YAAA,CAAA,kBAAA,CAAA,KAAA;AACA,KAXA;AAYA,IAAA,eAZA,6BAYA;AACA,WAAA,YAAA,CAAA,kBAAA,CAAA,IAAA;AACA;AAdA;AA7CA,CAAA","sourcesContent":["<template>\n  <div class=\"top-box\">\n    <div class=\"mode-wrap button-group\">\n      <woot-button\n        variant=\"clear\"\n        class=\"button--reply\"\n        :class=\"replyButtonClass\"\n        @click=\"handleReplyClick\"\n      >\n        {{ $t('CONVERSATION.REPLYBOX.REPLY') }}\n      </woot-button>\n\n      <woot-button\n        class=\"button--note\"\n        variant=\"clear\"\n        color-scheme=\"warning\"\n        :class=\"noteButtonClass\"\n        @click=\"handleNoteClick\"\n      >\n        {{ $t('CONVERSATION.REPLYBOX.PRIVATE_NOTE') }}\n      </woot-button>\n    </div>\n    <div class=\"action-wrap\">\n      <div v-if=\"isMessageLengthReachingThreshold\" class=\"tabs-title\">\n        <span :class=\"charLengthClass\">\n          {{ characterLengthWarning }}\n        </span>\n      </div>\n    </div>\n    <woot-button\n      v-if=\"popoutReplyBox\"\n      variant=\"clear\"\n      icon=\"dismiss\"\n      color-scheme=\"secondary\"\n      class-names=\"popout-button\"\n      @click=\"$emit('click')\"\n    />\n    <woot-button\n      v-else\n      variant=\"clear\"\n      icon=\"resize-large\"\n      color-scheme=\"secondary\"\n      class-names=\"popout-button\"\n      @click=\"$emit('click')\"\n    />\n  </div>\n</template>\n\n<script>\nimport { REPLY_EDITOR_MODES, CHAR_LENGTH_WARNING } from './constants';\nimport {\n  hasPressedAltAndPKey,\n  hasPressedAltAndLKey,\n} from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nexport default {\n  name: 'ReplyTopPanel',\n  mixins: [eventListenerMixins],\n  props: {\n    mode: {\n      type: String,\n      default: REPLY_EDITOR_MODES.REPLY,\n    },\n    setReplyMode: {\n      type: Function,\n      default: () => {},\n    },\n    isMessageLengthReachingThreshold: {\n      type: Boolean,\n      default: () => false,\n    },\n    charactersRemaining: {\n      type: Number,\n      default: () => 0,\n    },\n    popoutReplyBox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    replyButtonClass() {\n      return {\n        'is-active': this.mode === REPLY_EDITOR_MODES.REPLY,\n      };\n    },\n    noteButtonClass() {\n      return {\n        'is-active': this.mode === REPLY_EDITOR_MODES.NOTE,\n      };\n    },\n    charLengthClass() {\n      return this.charactersRemaining < 0 ? 'message-error' : 'message-length';\n    },\n    characterLengthWarning() {\n      return this.charactersRemaining < 0\n        ? `${-this.charactersRemaining} ${CHAR_LENGTH_WARNING.NEGATIVE}`\n        : `${this.charactersRemaining} ${CHAR_LENGTH_WARNING.UNDER_50}`;\n    },\n  },\n  methods: {\n    handleKeyEvents(e) {\n      if (hasPressedAltAndPKey(e)) {\n        this.handleNoteClick();\n      }\n      if (hasPressedAltAndLKey(e)) {\n        this.handleReplyClick();\n      }\n    },\n    handleReplyClick() {\n      this.setReplyMode(REPLY_EDITOR_MODES.REPLY);\n    },\n    handleNoteClick() {\n      this.setReplyMode(REPLY_EDITOR_MODES.NOTE);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.top-box {\n  display: flex;\n  justify-content: space-between;\n\n  background: var(--b-50);\n}\n\n.button-group {\n  border: 0;\n  padding: 0;\n  margin: 0;\n\n  .button {\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-medium);\n    padding: var(--space-one) var(--space-normal);\n    margin: 0;\n    position: relative;\n    z-index: 1;\n\n    &.is-active {\n      background: white;\n    }\n  }\n\n  .button--reply {\n    border-radius: 0;\n    border-right: 1px solid var(--color-border);\n\n    &:hover,\n    &:focus {\n      border-right: 1px solid var(--color-border);\n    }\n  }\n\n  .button--note {\n    border-radius: 0;\n\n    &.is-active {\n      border-right: 1px solid var(--color-border);\n      background: var(--y-50);\n    }\n\n    &:hover,\n    &:active {\n      color: var(--y-700);\n    }\n  }\n}\n\n.button--note {\n  color: var(--y-600);\n}\n\n.action-wrap {\n  display: flex;\n  align-items: center;\n  margin: 0 var(--space-normal);\n  font-size: var(--font-size-mini);\n\n  .message-error {\n    color: var(--r-600);\n  }\n  .message-length {\n    color: var(--s-600);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/WootWriter"},"metadata":{},"sourceType":"module"}