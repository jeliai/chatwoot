{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport types from '../../mutation-types';\nimport NotificationsAPI from '../../../api/notifications';\nexport var actions = {\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit,\n          _ref2,\n          _ref2$page,\n          page,\n          _yield$NotificationsA,\n          _yield$NotificationsA2,\n          payload,\n          meta,\n          _args = arguments;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _ref2 = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref2$page = _ref2.page, page = _ref2$page === void 0 ? 1 : _ref2$page;\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isFetching: true\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return NotificationsAPI.get(page);\n\n            case 6:\n              _yield$NotificationsA = _context.sent;\n              _yield$NotificationsA2 = _yield$NotificationsA.data.data;\n              payload = _yield$NotificationsA2.payload;\n              meta = _yield$NotificationsA2.meta;\n              commit(types.CLEAR_NOTIFICATIONS);\n              commit(types.SET_NOTIFICATIONS, payload);\n              commit(types.SET_NOTIFICATIONS_META, meta);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isFetching: false\n              });\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isFetching: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 16]]);\n    }));\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }(),\n  unReadCount: function () {\n    var _unReadCount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _ref3,\n          commit,\n          _yield$NotificationsA3,\n          data,\n          _args2 = arguments;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, commit = _ref3.commit;\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdatingUnreadCount: true\n              });\n              _context2.prev = 2;\n              _context2.next = 5;\n              return NotificationsAPI.getUnreadCount();\n\n            case 5:\n              _yield$NotificationsA3 = _context2.sent;\n              data = _yield$NotificationsA3.data;\n              commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, data);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdatingUnreadCount: false\n              });\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](2);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdatingUnreadCount: false\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 11]]);\n    }));\n\n    function unReadCount() {\n      return _unReadCount.apply(this, arguments);\n    }\n\n    return unReadCount;\n  }(),\n  read: function () {\n    var _read = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref4, _ref5) {\n      var commit, primaryActorType, primaryActorId, unreadCount;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit;\n              primaryActorType = _ref5.primaryActorType, primaryActorId = _ref5.primaryActorId, unreadCount = _ref5.unreadCount;\n              _context3.prev = 2;\n              _context3.next = 5;\n              return NotificationsAPI.read(primaryActorType, primaryActorId);\n\n            case 5:\n              commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, unreadCount - 1);\n              commit(types.UPDATE_NOTIFICATION, primaryActorId);\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](2);\n              throw new Error(_context3.t0);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 9]]);\n    }));\n\n    function read(_x2, _x3) {\n      return _read.apply(this, arguments);\n    }\n\n    return read;\n  }(),\n  readAll: function () {\n    var _readAll = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref6) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref6.commit;\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdating: true\n              });\n              _context4.prev = 2;\n              _context4.next = 5;\n              return NotificationsAPI.readAll();\n\n            case 5:\n              commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, 0);\n              commit(types.UPDATE_ALL_NOTIFICATIONS);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdating: false\n              });\n              _context4.next = 14;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](2);\n              commit(types.SET_NOTIFICATIONS_UI_FLAG, {\n                isUpdating: false\n              });\n              throw new Error(_context4.t0);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[2, 10]]);\n    }));\n\n    function readAll(_x4) {\n      return _readAll.apply(this, arguments);\n    }\n\n    return readAll;\n  }(),\n  addNotification: function addNotification(_ref7, data) {\n    var commit = _ref7.commit;\n    commit(types.ADD_NOTIFICATION, data);\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/notifications/actions.js"],"names":["types","NotificationsAPI","actions","get","commit","page","SET_NOTIFICATIONS_UI_FLAG","isFetching","data","payload","meta","CLEAR_NOTIFICATIONS","SET_NOTIFICATIONS","SET_NOTIFICATIONS_META","unReadCount","isUpdatingUnreadCount","getUnreadCount","SET_NOTIFICATIONS_UNREAD_COUNT","read","primaryActorType","primaryActorId","unreadCount","UPDATE_NOTIFICATION","Error","readAll","isUpdating","UPDATE_ALL_NOTIFICATIONS","addNotification","ADD_NOTIFICATION"],"mappings":"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","sourcesContent":["import types from '../../mutation-types';\nimport NotificationsAPI from '../../../api/notifications';\n\nexport const actions = {\n  get: async ({ commit }, { page = 1 } = {}) => {\n    commit(types.SET_NOTIFICATIONS_UI_FLAG, { isFetching: true });\n    try {\n      const {\n        data: {\n          data: { payload, meta },\n        },\n      } = await NotificationsAPI.get(page);\n      commit(types.CLEAR_NOTIFICATIONS);\n      commit(types.SET_NOTIFICATIONS, payload);\n      commit(types.SET_NOTIFICATIONS_META, meta);\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isFetching: false });\n    } catch (error) {\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isFetching: false });\n    }\n  },\n  unReadCount: async ({ commit } = {}) => {\n    commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdatingUnreadCount: true });\n    try {\n      const { data } = await NotificationsAPI.getUnreadCount();\n      commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, data);\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdatingUnreadCount: false });\n    } catch (error) {\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdatingUnreadCount: false });\n    }\n  },\n  read: async (\n    { commit },\n    { primaryActorType, primaryActorId, unreadCount }\n  ) => {\n    try {\n      await NotificationsAPI.read(primaryActorType, primaryActorId);\n      commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, unreadCount - 1);\n      commit(types.UPDATE_NOTIFICATION, primaryActorId);\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n  readAll: async ({ commit }) => {\n    commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdating: true });\n    try {\n      await NotificationsAPI.readAll();\n      commit(types.SET_NOTIFICATIONS_UNREAD_COUNT, 0);\n      commit(types.UPDATE_ALL_NOTIFICATIONS);\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdating: false });\n    } catch (error) {\n      commit(types.SET_NOTIFICATIONS_UI_FLAG, { isUpdating: false });\n      throw new Error(error);\n    }\n  },\n\n  addNotification({ commit }, data) {\n    commit(types.ADD_NOTIFICATION, data);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}