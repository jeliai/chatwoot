{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { IFrameHelper } from 'widget/helpers/utils';\nimport { mapGetters } from 'vuex';\nimport configMixin from '../mixins/configMixin';\nimport { ON_UNREAD_MESSAGE_CLICK } from '../constants/widgetBusEvents';\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport UnreadMessage from 'widget/components/UnreadMessage.vue';\nexport default {\n  name: 'Unread',\n  components: {\n    FluentIcon: FluentIcon,\n    UnreadMessage: UnreadMessage\n  },\n  mixins: [configMixin],\n  props: {\n    messages: {\n      type: Array,\n      required: true\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    unreadMessageCount: 'conversation/getUnreadMessageCount'\n  })), {}, {\n    sender: function sender() {\n      var _this$messages = _slicedToArray(this.messages, 1),\n          firstMessage = _this$messages[0];\n\n      return firstMessage.sender || {};\n    }\n  }),\n  methods: {\n    openConversationView: function openConversationView() {\n      bus.$emit(ON_UNREAD_MESSAGE_CLICK);\n    },\n    closeFullView: function closeFullView() {\n      if (IFrameHelper.isIFrame()) {\n        IFrameHelper.sendMessage({\n          event: 'toggleBubble'\n        });\n      }\n    },\n    getMessageContent: function getMessageContent(message) {\n      var attachments = message.attachments,\n          content = message.content;\n      var hasAttachments = attachments && attachments.length;\n      if (content) return content;\n      if (hasAttachments) return \"\\uD83D\\uDCD1\";\n      return '';\n    }\n  }\n};","map":{"version":3,"sources":["UnreadMessageList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAA,YAAA,QAAA,sBAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,WAAA,MAAA,uBAAA;AACA,SAAA,uBAAA,QAAA,8BAAA;AACA,OAAA,UAAA,MAAA,wCAAA;AACA,OAAA,aAAA,MAAA,qCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,aAAA,EAAA;AAFA,GAFA;AAMA,EAAA,MAAA,EAAA,CAAA,WAAA,CANA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAPA;AAaA,EAAA,QAAA,kCACA,UAAA,CAAA;AAAA,IAAA,kBAAA,EAAA;AAAA,GAAA,CADA;AAEA,IAAA,MAFA,oBAEA;AACA,0CAAA,KAAA,QAAA;AAAA,UAAA,YAAA;;AACA,aAAA,YAAA,CAAA,MAAA,IAAA,EAAA;AACA;AALA,IAbA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AACA,MAAA,GAAA,CAAA,KAAA,CAAA,uBAAA;AACA,KAHA;AAIA,IAAA,aAJA,2BAIA;AACA,UAAA,YAAA,CAAA,QAAA,EAAA,EAAA;AACA,QAAA,YAAA,CAAA,WAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACA;AACA,KARA;AASA,IAAA,iBATA,6BASA,OATA,EASA;AACA,UAAA,WAAA,GAAA,OAAA,CAAA,WAAA;AAAA,UAAA,OAAA,GAAA,OAAA,CAAA,OAAA;AACA,UAAA,cAAA,GAAA,WAAA,IAAA,WAAA,CAAA,MAAA;AAEA,UAAA,OAAA,EAAA,OAAA,OAAA;AAEA,UAAA,cAAA,EAAA;AAEA,aAAA,EAAA;AACA;AAlBA;AApBA,CAAA","sourcesContent":["<template>\n  <div class=\"unread-wrap\">\n    <div class=\"close-unread-wrap\">\n      <button class=\"button small close-unread-button\" @click=\"closeFullView\">\n        <span class=\"flex items-center\">\n          <fluent-icon class=\"mr-1\" icon=\"dismiss\" size=\"12\" />\n          {{ $t('UNREAD_VIEW.CLOSE_MESSAGES_BUTTON') }}\n        </span>\n      </button>\n    </div>\n    <div class=\"unread-messages\">\n      <unread-message\n        v-for=\"(message, index) in messages\"\n        :key=\"message.id\"\n        :message-type=\"message.messageType\"\n        :message-id=\"message.id\"\n        :show-sender=\"!index\"\n        :sender=\"message.sender\"\n        :message=\"getMessageContent(message)\"\n        :campaign-id=\"message.campaignId\"\n      />\n    </div>\n\n    <div class=\"open-read-view-wrap\">\n      <button\n        v-if=\"unreadMessageCount\"\n        class=\"button clear-button\"\n        @click=\"openConversationView\"\n      >\n        <span class=\"flex items-center\">\n          <fluent-icon class=\"mr-2\" size=\"16\" icon=\"arrow-right\" />\n          {{ $t('UNREAD_VIEW.VIEW_MESSAGES_BUTTON') }}\n        </span>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { IFrameHelper } from 'widget/helpers/utils';\nimport { mapGetters } from 'vuex';\nimport configMixin from '../mixins/configMixin';\nimport { ON_UNREAD_MESSAGE_CLICK } from '../constants/widgetBusEvents';\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport UnreadMessage from 'widget/components/UnreadMessage.vue';\n\nexport default {\n  name: 'Unread',\n  components: {\n    FluentIcon,\n    UnreadMessage,\n  },\n  mixins: [configMixin],\n  props: {\n    messages: {\n      type: Array,\n      required: true,\n    },\n  },\n  computed: {\n    ...mapGetters({ unreadMessageCount: 'conversation/getUnreadMessageCount' }),\n    sender() {\n      const [firstMessage] = this.messages;\n      return firstMessage.sender || {};\n    },\n  },\n  methods: {\n    openConversationView() {\n      bus.$emit(ON_UNREAD_MESSAGE_CLICK);\n    },\n    closeFullView() {\n      if (IFrameHelper.isIFrame()) {\n        IFrameHelper.sendMessage({ event: 'toggleBubble' });\n      }\n    },\n    getMessageContent(message) {\n      const { attachments, content } = message;\n      const hasAttachments = attachments && attachments.length;\n\n      if (content) return content;\n\n      if (hasAttachments) return `ðŸ“‘`;\n\n      return '';\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n@import '~widget/assets/scss/variables';\n\n.unread-wrap {\n  width: 100%;\n  height: auto;\n  max-height: 100vh;\n  background: transparent;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  overflow: hidden;\n\n  .unread-messages {\n    padding-bottom: $space-small;\n  }\n\n  .clear-button {\n    background: transparent;\n    color: $color-woot;\n    border: 0;\n    font-weight: $font-weight-bold;\n    font-size: $font-size-medium;\n    transition: all 0.3s var(--ease-in-cubic);\n    margin-left: $space-smaller;\n    padding: 0 $space-one 0 0;\n\n    &:hover {\n      transform: translateX($space-smaller);\n      color: $color-primary-dark;\n    }\n  }\n\n  .close-unread-button {\n    background: $color-background;\n    color: $color-light-gray;\n    border: 0;\n    font-weight: $font-weight-medium;\n    font-size: $font-size-mini;\n    transition: all 0.3s var(--ease-in-cubic);\n    margin-bottom: $space-slab;\n    border-radius: $space-normal;\n\n    &:hover {\n      color: $color-body;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/widget/components"},"metadata":{},"sourceType":"module"}