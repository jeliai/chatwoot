{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nexport var DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER = [{\n  name: 'conversation_actions'\n}, {\n  name: 'macros'\n}, {\n  name: 'conversation_info'\n}, {\n  name: 'contact_attributes'\n}, {\n  name: 'previous_conversation'\n}];\nexport var DEFAULT_CONTACT_SIDEBAR_ITEMS_ORDER = [{\n  name: 'contact_attributes'\n}, {\n  name: 'contact_labels'\n}, {\n  name: 'previous_conversation'\n}];\nexport var isEditorHotKeyEnabled = function isEditorHotKeyEnabled(uiSettings, key) {\n  var _ref = uiSettings || {},\n      editorMessageKey = _ref.editor_message_key,\n      enterToSendEnabled = _ref.enter_to_send_enabled;\n\n  if (!editorMessageKey) {\n    if (enterToSendEnabled) {\n      return key === 'enter';\n    }\n\n    return key === 'cmd_enter';\n  }\n\n  return editorMessageKey === key;\n};\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiSettings: 'getUISettings'\n  })), {}, {\n    conversationSidebarItemsOrder: function conversationSidebarItemsOrder() {\n      var itemsOrder = this.uiSettings.conversation_sidebar_items_order; // If the sidebar order is not set, use the default order.\n\n      if (!itemsOrder) {\n        return DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER;\n      } // If the sidebar order doesn't have the new elements, then add them to the list.\n\n\n      DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER.forEach(function (item) {\n        if (!itemsOrder.find(function (i) {\n          return i.name === item.name;\n        })) {\n          itemsOrder.push(item);\n        }\n      });\n      return itemsOrder;\n    },\n    contactSidebarItemsOrder: function contactSidebarItemsOrder() {\n      var itemsOrder = this.uiSettings.contact_sidebar_items_order;\n      return itemsOrder || DEFAULT_CONTACT_SIDEBAR_ITEMS_ORDER;\n    }\n  }),\n  methods: {\n    updateUISettings: function updateUISettings() {\n      var uiSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.$store.dispatch('updateUISettings', {\n        uiSettings: _objectSpread(_objectSpread({}, this.uiSettings), uiSettings)\n      });\n    },\n    isContactSidebarItemOpen: function isContactSidebarItemOpen(key) {\n      var isOpen = this.uiSettings[key];\n      return !!isOpen;\n    },\n    toggleSidebarUIState: function toggleSidebarUIState(key) {\n      this.updateUISettings(_defineProperty({}, key, !this.isContactSidebarItemOpen(key)));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/uiSettings.js"],"names":["mapGetters","DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER","name","DEFAULT_CONTACT_SIDEBAR_ITEMS_ORDER","isEditorHotKeyEnabled","uiSettings","key","editorMessageKey","editor_message_key","enterToSendEnabled","enter_to_send_enabled","computed","conversationSidebarItemsOrder","itemsOrder","conversation_sidebar_items_order","forEach","item","find","i","push","contactSidebarItemsOrder","contact_sidebar_items_order","methods","updateUISettings","$store","dispatch","isContactSidebarItemOpen","isOpen","toggleSidebarUIState"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,OAAO,IAAMC,wCAAwC,GAAG,CACtD;AAAEC,EAAAA,IAAI,EAAE;AAAR,CADsD,EAEtD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAFsD,EAGtD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAHsD,EAItD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAJsD,EAKtD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CALsD,CAAjD;AAOP,OAAO,IAAMC,mCAAmC,GAAG,CACjD;AAAED,EAAAA,IAAI,EAAE;AAAR,CADiD,EAEjD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAFiD,EAGjD;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAHiD,CAA5C;AAMP,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAaC,GAAb,EAAqB;AACxD,aAGID,UAAU,IAAI,EAHlB;AAAA,MACsBE,gBADtB,QACEC,kBADF;AAAA,MAEyBC,kBAFzB,QAEEC,qBAFF;;AAIA,MAAI,CAACH,gBAAL,EAAuB;AACrB,QAAIE,kBAAJ,EAAwB;AACtB,aAAOH,GAAG,KAAK,OAAf;AACD;;AACD,WAAOA,GAAG,KAAK,WAAf;AACD;;AACD,SAAOC,gBAAgB,KAAKD,GAA5B;AACD,CAZM;AAcP,eAAe;AACbK,EAAAA,QAAQ,kCACHX,UAAU,CAAC;AAAEK,IAAAA,UAAU,EAAE;AAAd,GAAD,CADP;AAENO,IAAAA,6BAFM,2CAE0B;AAC9B,UAA0CC,UAA1C,GAAyD,KAAKR,UAA9D,CAAQS,gCAAR,CAD8B,CAE9B;;AACA,UAAI,CAACD,UAAL,EAAiB;AACf,eAAOZ,wCAAP;AACD,OAL6B,CAM9B;;;AACAA,MAAAA,wCAAwC,CAACc,OAAzC,CAAiD,UAAAC,IAAI,EAAI;AACvD,YAAI,CAACH,UAAU,CAACI,IAAX,CAAgB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAChB,IAAF,KAAWc,IAAI,CAACd,IAApB;AAAA,SAAjB,CAAL,EAAiD;AAC/CW,UAAAA,UAAU,CAACM,IAAX,CAAgBH,IAAhB;AACD;AACF,OAJD;AAKA,aAAOH,UAAP;AACD,KAfK;AAgBNO,IAAAA,wBAhBM,sCAgBqB;AACzB,UAAqCP,UAArC,GAAoD,KAAKR,UAAzD,CAAQgB,2BAAR;AACA,aAAOR,UAAU,IAAIV,mCAArB;AACD;AAnBK,IADK;AAsBbmB,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBADO,8BAC2B;AAAA,UAAjBlB,UAAiB,uEAAJ,EAAI;AAChC,WAAKmB,MAAL,CAAYC,QAAZ,CAAqB,kBAArB,EAAyC;AACvCpB,QAAAA,UAAU,kCACL,KAAKA,UADA,GAELA,UAFK;AAD6B,OAAzC;AAMD,KARM;AASPqB,IAAAA,wBATO,oCASkBpB,GATlB,EASuB;AAC5B,UAAeqB,MAAf,GAA0B,KAAKtB,UAA/B,CAASC,GAAT;AACA,aAAO,CAAC,CAACqB,MAAT;AACD,KAZM;AAaPC,IAAAA,oBAbO,gCAactB,GAbd,EAamB;AACxB,WAAKiB,gBAAL,qBAAyBjB,GAAzB,EAA+B,CAAC,KAAKoB,wBAAL,CAA8BpB,GAA9B,CAAhC;AACD;AAfM;AAtBI,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\nexport const DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER = [\n  { name: 'conversation_actions' },\n  { name: 'macros' },\n  { name: 'conversation_info' },\n  { name: 'contact_attributes' },\n  { name: 'previous_conversation' },\n];\nexport const DEFAULT_CONTACT_SIDEBAR_ITEMS_ORDER = [\n  { name: 'contact_attributes' },\n  { name: 'contact_labels' },\n  { name: 'previous_conversation' },\n];\n\nexport const isEditorHotKeyEnabled = (uiSettings, key) => {\n  const {\n    editor_message_key: editorMessageKey,\n    enter_to_send_enabled: enterToSendEnabled,\n  } = uiSettings || {};\n  if (!editorMessageKey) {\n    if (enterToSendEnabled) {\n      return key === 'enter';\n    }\n    return key === 'cmd_enter';\n  }\n  return editorMessageKey === key;\n};\n\nexport default {\n  computed: {\n    ...mapGetters({ uiSettings: 'getUISettings' }),\n    conversationSidebarItemsOrder() {\n      const { conversation_sidebar_items_order: itemsOrder } = this.uiSettings;\n      // If the sidebar order is not set, use the default order.\n      if (!itemsOrder) {\n        return DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER;\n      }\n      // If the sidebar order doesn't have the new elements, then add them to the list.\n      DEFAULT_CONVERSATION_SIDEBAR_ITEMS_ORDER.forEach(item => {\n        if (!itemsOrder.find(i => i.name === item.name)) {\n          itemsOrder.push(item);\n        }\n      });\n      return itemsOrder;\n    },\n    contactSidebarItemsOrder() {\n      const { contact_sidebar_items_order: itemsOrder } = this.uiSettings;\n      return itemsOrder || DEFAULT_CONTACT_SIDEBAR_ITEMS_ORDER;\n    },\n  },\n  methods: {\n    updateUISettings(uiSettings = {}) {\n      this.$store.dispatch('updateUISettings', {\n        uiSettings: {\n          ...this.uiSettings,\n          ...uiSettings,\n        },\n      });\n    },\n    isContactSidebarItemOpen(key) {\n      const { [key]: isOpen } = this.uiSettings;\n      return !!isOpen;\n    },\n    toggleSidebarUIState(key) {\n      this.updateUISettings({ [key]: !this.isContactSidebarItemOpen(key) });\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}