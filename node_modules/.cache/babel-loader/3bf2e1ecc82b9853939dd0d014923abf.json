{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nimport CustomButton from 'shared/components/Button';\nimport ChatInputWrap from 'widget/components/ChatInputWrap.vue';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport { sendEmailTranscript } from 'widget/api/conversation';\nimport routerMixin from 'widget/mixins/routerMixin';\nexport default {\n  components: {\n    ChatInputWrap: ChatInputWrap,\n    CustomButton: CustomButton\n  },\n  mixins: [routerMixin],\n  props: {\n    msg: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    conversationAttributes: 'conversationAttributes/getConversationParams',\n    widgetColor: 'appConfig/getWidgetColor',\n    conversationSize: 'conversation/getConversationSize',\n    currentUser: 'contacts/getCurrentUser',\n    isWidgetStyleFlat: 'appConfig/isWidgetStyleFlat'\n  })), {}, {\n    textColor: function textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hideReplyBox: function hideReplyBox() {\n      var allowMessagesAfterResolved = window.chatwootWebChannel.allowMessagesAfterResolved;\n      var status = this.conversationAttributes.status;\n      return !allowMessagesAfterResolved && status === 'resolved';\n    },\n    showEmailTranscriptButton: function showEmailTranscriptButton() {\n      return this.currentUser && this.currentUser.email;\n    }\n  }),\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('conversation', ['sendMessage', 'sendAttachment', 'clearConversations'])), mapActions('conversationAttributes', ['getAttributes', 'clearConversationAttributes'])), {}, {\n    handleSendMessage: function handleSendMessage(content) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.sendMessage({\n                  content: content\n                });\n\n              case 2:\n                // Update conversation attributes on new conversation\n                if (_this.conversationSize === 0) {\n                  _this.getAttributes();\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    handleSendAttachment: function handleSendAttachment(attachment) {\n      this.sendAttachment({\n        attachment: attachment\n      });\n    },\n    startNewConversation: function startNewConversation() {\n      this.clearConversations();\n      this.clearConversationAttributes(); // To create a new conversation, we are redirecting\n      // the user to pre-chat with contact fields disabled\n      // Pass disableContactFields params to the route\n      // This would disable the contact fields in the pre-chat form\n\n      this.replaceRoute('prechat-form', {\n        disableContactFields: true\n      });\n    },\n    sendTranscript: function sendTranscript() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var email;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                email = _this2.currentUser.email;\n\n                if (!email) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.prev = 2;\n                _context2.next = 5;\n                return sendEmailTranscript({\n                  email: email\n                });\n\n              case 5:\n                window.bus.$emit(BUS_EVENTS.SHOW_ALERT, {\n                  message: _this2.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_SUCCESS'),\n                  type: 'success'\n                });\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                window.bus.$emit(BUS_EVENTS.SHOW_ALERT, {\n                  message: _this2.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_ERROR')\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 8]]);\n      }))();\n    }\n  })\n};","map":{"version":3,"sources":["ChatFooter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,SAAA,uBAAA,QAAA,iBAAA;AACA,OAAA,YAAA,MAAA,0BAAA;AACA,OAAA,aAAA,MAAA,qCAAA;AACA,SAAA,UAAA,QAAA,4BAAA;AACA,SAAA,mBAAA,QAAA,yBAAA;AACA,OAAA,WAAA,MAAA,2BAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA,aADA;AAEA,IAAA,YAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,WAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GANA;AAYA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,sBAAA,EAAA,8CADA;AAEA,IAAA,WAAA,EAAA,0BAFA;AAGA,IAAA,gBAAA,EAAA,kCAHA;AAIA,IAAA,WAAA,EAAA,yBAJA;AAKA,IAAA,iBAAA,EAAA;AALA,GAAA,CADA;AAQA,IAAA,SARA,uBAQA;AACA,aAAA,uBAAA,CAAA,KAAA,WAAA,CAAA;AACA,KAVA;AAWA,IAAA,YAXA,0BAWA;AACA,UAAA,0BAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,0BAAA;AACA,UAAA,MAAA,GAAA,KAAA,sBAAA,CAAA,MAAA;AACA,aAAA,CAAA,0BAAA,IAAA,MAAA,KAAA,UAAA;AACA,KAfA;AAgBA,IAAA,yBAhBA,uCAgBA;AACA,aAAA,KAAA,WAAA,IAAA,KAAA,WAAA,CAAA,KAAA;AACA;AAlBA,IAZA;AAgCA,EAAA,OAAA,gDACA,UAAA,CAAA,cAAA,EAAA,CACA,aADA,EAEA,gBAFA,EAGA,oBAHA,CAAA,CADA,GAMA,UAAA,CAAA,wBAAA,EAAA,CACA,eADA,EAEA,6BAFA,CAAA,CANA;AAUA,IAAA,iBAVA,6BAUA,OAVA,EAUA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,WAAA,CAAA;AACA,kBAAA,OAAA,EAAA;AADA,iBAAA,CADA;;AAAA;AAIA;AACA,oBAAA,KAAA,CAAA,gBAAA,KAAA,CAAA,EAAA;AACA,kBAAA,KAAA,CAAA,aAAA;AACA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,KAlBA;AAmBA,IAAA,oBAnBA,gCAmBA,UAnBA,EAmBA;AACA,WAAA,cAAA,CAAA;AAAA,QAAA,UAAA,EAAA;AAAA,OAAA;AACA,KArBA;AAsBA,IAAA,oBAtBA,kCAsBA;AACA,WAAA,kBAAA;AACA,WAAA,2BAAA,GAFA,CAIA;AACA;AACA;AACA;;AACA,WAAA,YAAA,CAAA,cAAA,EAAA;AAAA,QAAA,oBAAA,EAAA;AAAA,OAAA;AACA,KA/BA;AAgCA,IAAA,cAhCA,4BAgCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KADA,GACA,MAAA,CAAA,WADA,CACA,KADA;;AAAA,qBAEA,KAFA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAIA,mBAAA,CAAA;AACA,kBAAA,KAAA,EAAA;AADA,iBAAA,CAJA;;AAAA;AAOA,gBAAA,MAAA,CAAA,GAAA,CAAA,KAAA,CAAA,UAAA,CAAA,UAAA,EAAA;AACA,kBAAA,OAAA,EAAA,MAAA,CAAA,EAAA,CAAA,qCAAA,CADA;AAEA,kBAAA,IAAA,EAAA;AAFA,iBAAA;AAPA;AAAA;;AAAA;AAAA;AAAA;AAYA,gBAAA,MAAA,CAAA,GAAA,CAAA,KAAA,CAAA,UAAA,CAAA,UAAA,EAAA;AACA,kBAAA,OAAA,EAAA,MAAA,CAAA,EAAA,CAAA,mCAAA;AADA,iBAAA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAjDA;AAhCA,CAAA","sourcesContent":["<template>\n  <footer\n    v-if=\"!hideReplyBox\"\n    class=\"shadow-sm bg-white mb-1 z-50 relative\"\n    :class=\"{ 'rounded-lg': !isWidgetStyleFlat }\"\n  >\n    <chat-input-wrap\n      :on-send-message=\"handleSendMessage\"\n      :on-send-attachment=\"handleSendAttachment\"\n    />\n  </footer>\n  <div v-else>\n    <custom-button\n      class=\"font-medium\"\n      block\n      :bg-color=\"widgetColor\"\n      :text-color=\"textColor\"\n      @click=\"startNewConversation\"\n    >\n      {{ $t('START_NEW_CONVERSATION') }}\n    </custom-button>\n    <custom-button\n      v-if=\"showEmailTranscriptButton\"\n      type=\"clear\"\n      class=\"font-normal\"\n      @click=\"sendTranscript\"\n    >\n      {{ $t('EMAIL_TRANSCRIPT.BUTTON_TEXT') }}\n    </custom-button>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nimport CustomButton from 'shared/components/Button';\nimport ChatInputWrap from 'widget/components/ChatInputWrap.vue';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport { sendEmailTranscript } from 'widget/api/conversation';\nimport routerMixin from 'widget/mixins/routerMixin';\nexport default {\n  components: {\n    ChatInputWrap,\n    CustomButton,\n  },\n  mixins: [routerMixin],\n  props: {\n    msg: {\n      type: String,\n      default: '',\n    },\n  },\n  computed: {\n    ...mapGetters({\n      conversationAttributes: 'conversationAttributes/getConversationParams',\n      widgetColor: 'appConfig/getWidgetColor',\n      conversationSize: 'conversation/getConversationSize',\n      currentUser: 'contacts/getCurrentUser',\n      isWidgetStyleFlat: 'appConfig/isWidgetStyleFlat',\n    }),\n    textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hideReplyBox() {\n      const { allowMessagesAfterResolved } = window.chatwootWebChannel;\n      const { status } = this.conversationAttributes;\n      return !allowMessagesAfterResolved && status === 'resolved';\n    },\n    showEmailTranscriptButton() {\n      return this.currentUser && this.currentUser.email;\n    },\n  },\n  methods: {\n    ...mapActions('conversation', [\n      'sendMessage',\n      'sendAttachment',\n      'clearConversations',\n    ]),\n    ...mapActions('conversationAttributes', [\n      'getAttributes',\n      'clearConversationAttributes',\n    ]),\n    async handleSendMessage(content) {\n      await this.sendMessage({\n        content,\n      });\n      // Update conversation attributes on new conversation\n      if (this.conversationSize === 0) {\n        this.getAttributes();\n      }\n    },\n    handleSendAttachment(attachment) {\n      this.sendAttachment({ attachment });\n    },\n    startNewConversation() {\n      this.clearConversations();\n      this.clearConversationAttributes();\n\n      // To create a new conversation, we are redirecting\n      // the user to pre-chat with contact fields disabled\n      // Pass disableContactFields params to the route\n      // This would disable the contact fields in the pre-chat form\n      this.replaceRoute('prechat-form', { disableContactFields: true });\n    },\n    async sendTranscript() {\n      const { email } = this.currentUser;\n      if (email) {\n        try {\n          await sendEmailTranscript({\n            email,\n          });\n          window.bus.$emit(BUS_EVENTS.SHOW_ALERT, {\n            message: this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_SUCCESS'),\n            type: 'success',\n          });\n        } catch (error) {\n          window.bus.$emit(BUS_EVENTS.SHOW_ALERT, {\n            message: this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_ERROR'),\n          });\n        }\n      }\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n@import '~widget/assets/scss/variables.scss';\n\n.branding {\n  align-items: center;\n  color: $color-body;\n  display: flex;\n  font-size: $font-size-default;\n  justify-content: center;\n  padding: $space-one;\n  text-align: center;\n  text-decoration: none;\n\n  img {\n    margin-right: $space-small;\n    max-width: $space-two;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/widget/components"},"metadata":{},"sourceType":"module"}