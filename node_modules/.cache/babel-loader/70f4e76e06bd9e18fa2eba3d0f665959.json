{"ast":null,"code":"import { getCurrentHub } from '@sentry/browser';\nimport { formatComponentName, generateComponentTrace } from './components';\nexport var attachErrorHandler = function attachErrorHandler(app, options) {\n  var _a = app.config,\n      errorHandler = _a.errorHandler,\n      warnHandler = _a.warnHandler,\n      silent = _a.silent;\n\n  app.config.errorHandler = function (error, vm, lifecycleHook) {\n    var componentName = formatComponentName(vm, false);\n    var trace = vm ? generateComponentTrace(vm) : '';\n    var metadata = {\n      componentName: componentName,\n      lifecycleHook: lifecycleHook,\n      trace: trace\n    };\n\n    if (vm && options.attachProps) {\n      // Vue2 - $options.propsData\n      // Vue3 - $props\n      metadata.propsData = vm.$options.propsData || vm.$props;\n    } // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n\n\n    setTimeout(function () {\n      getCurrentHub().withScope(function (scope) {\n        scope.setContext('vue', metadata);\n        getCurrentHub().captureException(error);\n      });\n    });\n\n    if (typeof errorHandler === 'function') {\n      errorHandler.call(app, error, vm, lifecycleHook);\n    }\n\n    if (options.logErrors) {\n      var hasConsole = typeof console !== 'undefined';\n      var message = \"Error in \" + lifecycleHook + \": \\\"\" + (error && error.toString()) + \"\\\"\";\n\n      if (warnHandler) {\n        warnHandler.call(null, message, vm, trace);\n      } else if (hasConsole && !silent) {\n        // eslint-disable-next-line no-console\n        console.error(\"[Vue warn]: \" + message + trace);\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}