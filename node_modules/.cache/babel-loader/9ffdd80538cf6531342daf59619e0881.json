{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nvar _mutations;\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Vue from 'vue';\nimport types from '../mutation-types';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport ConversationInboxApi from '../../api/inbox/conversation';\nvar state = {\n  records: {},\n  uiFlags: {\n    isFetching: false,\n    isUpdating: false\n  }\n};\nexport var getters = {\n  getUIFlags: function getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getByConversationId: function getByConversationId(_state) {\n    return function (conversationId) {\n      return _state.records[conversationId];\n    };\n  }\n};\nexport var actions = {\n  show: function () {\n    var _show = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n      var commit, conversationId, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              conversationId = _ref2.conversationId;\n              commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n                isFetching: true\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return ConversationInboxApi.fetchParticipants(conversationId);\n\n            case 6:\n              response = _context.sent;\n              commit(types.SET_CONVERSATION_WATCHERS, {\n                conversationId: conversationId,\n                data: response.data\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              throwErrorMessage(_context.t0);\n\n            case 13:\n              _context.prev = 13;\n              commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n                isFetching: false\n              });\n              return _context.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10, 13, 16]]);\n    }));\n\n    function show(_x, _x2) {\n      return _show.apply(this, arguments);\n    }\n\n    return show;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3, _ref4) {\n      var commit, conversationId, userIds, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              conversationId = _ref4.conversationId, userIds = _ref4.userIds;\n              commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n                isUpdating: true\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return ConversationInboxApi.updateParticipants({\n                conversationId: conversationId,\n                userIds: userIds\n              });\n\n            case 6:\n              response = _context2.sent;\n              commit(types.SET_CONVERSATION_WATCHERS, {\n                conversationId: conversationId,\n                data: response.data\n              });\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](3);\n              throwErrorMessage(_context2.t0);\n\n            case 13:\n              _context2.prev = 13;\n              commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n                isUpdating: false\n              });\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 10, 13, 16]]);\n    }));\n\n    function update(_x3, _x4) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }()\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_CONVERSATION_WATCHERS_UI_FLAG, function ($state, data) {\n  $state.uiFlags = _objectSpread(_objectSpread({}, $state.uiFlags), data);\n}), _defineProperty(_mutations, types.SET_CONVERSATION_WATCHERS, function ($state, _ref5) {\n  var data = _ref5.data,\n      conversationId = _ref5.conversationId;\n  Vue.set($state.records, conversationId, data);\n}), _mutations);\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversationWatchers.js"],"names":["Vue","types","throwErrorMessage","ConversationInboxApi","state","records","uiFlags","isFetching","isUpdating","getters","getUIFlags","$state","getByConversationId","_state","conversationId","actions","show","commit","SET_CONVERSATION_WATCHERS_UI_FLAG","fetchParticipants","response","SET_CONVERSATION_WATCHERS","data","update","userIds","updateParticipants","mutations","set","namespaced"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport types from '../mutation-types';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\n\nimport ConversationInboxApi from '../../api/inbox/conversation';\n\nconst state = {\n  records: {},\n  uiFlags: {\n    isFetching: false,\n    isUpdating: false,\n  },\n};\n\nexport const getters = {\n  getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getByConversationId: _state => conversationId => {\n    return _state.records[conversationId];\n  },\n};\n\nexport const actions = {\n  show: async ({ commit }, { conversationId }) => {\n    commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n      isFetching: true,\n    });\n\n    try {\n      const response = await ConversationInboxApi.fetchParticipants(\n        conversationId\n      );\n      commit(types.SET_CONVERSATION_WATCHERS, {\n        conversationId,\n        data: response.data,\n      });\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n        isFetching: false,\n      });\n    }\n  },\n\n  update: async ({ commit }, { conversationId, userIds }) => {\n    commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n      isUpdating: true,\n    });\n\n    try {\n      const response = await ConversationInboxApi.updateParticipants({\n        conversationId,\n        userIds,\n      });\n      commit(types.SET_CONVERSATION_WATCHERS, {\n        conversationId,\n        data: response.data,\n      });\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_CONVERSATION_WATCHERS_UI_FLAG, {\n        isUpdating: false,\n      });\n    }\n  },\n};\n\nexport const mutations = {\n  [types.SET_CONVERSATION_WATCHERS_UI_FLAG]($state, data) {\n    $state.uiFlags = {\n      ...$state.uiFlags,\n      ...data,\n    };\n  },\n\n  [types.SET_CONVERSATION_WATCHERS]($state, { data, conversationId }) {\n    Vue.set($state.records, conversationId, data);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}