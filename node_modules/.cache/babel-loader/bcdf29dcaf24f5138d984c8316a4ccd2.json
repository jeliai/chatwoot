{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mixin as clickaway } from 'vue-clickaway';\nimport { VeTable } from 'vue-easytable';\nimport { getCountryFlag } from 'dashboard/helper/flag';\nimport Spinner from 'shared/components/Spinner.vue';\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from 'dashboard/mixins/time';\nimport FluentIcon from 'shared/components/FluentIcon/DashboardIcon';\nexport default {\n  components: {\n    EmptyState: EmptyState,\n    Spinner: Spinner,\n    VeTable: VeTable\n  },\n  mixins: [clickaway, timeMixin],\n  props: {\n    contacts: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    showSearchEmptyState: {\n      type: Boolean,\n      default: false\n    },\n    onClickContact: {\n      type: Function,\n      default: function _default() {}\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    activeContactId: {\n      type: [String, Number],\n      default: ''\n    },\n    sortParam: {\n      type: String,\n      default: 'name'\n    },\n    sortOrder: {\n      type: String,\n      default: 'asc'\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      sortConfig: {},\n      sortOption: {\n        sortAlways: true,\n        sortChange: function sortChange(params) {\n          return _this.$emit('on-sort-change', params);\n        }\n      }\n    };\n  },\n  computed: {\n    tableData: function tableData() {\n      var _this2 = this;\n\n      if (this.isLoading) {\n        return [];\n      }\n\n      return this.contacts.map(function (item) {\n        // Note: The attributes used here is in snake case\n        // as it simplier the sort attribute calculation\n        var additional = item.additional_attributes || {};\n        var lastActivityAt = item.last_activity_at;\n        return _objectSpread(_objectSpread({}, item), {}, {\n          phone_number: item.phone_number || '---',\n          company: additional.company_name || '---',\n          profiles: additional.social_profiles || {},\n          city: additional.city || '---',\n          country: additional.country,\n          countryCode: additional.country_code,\n          conversationsCount: item.conversations_count || '---',\n          last_activity_at: lastActivityAt ? _this2.dynamicTime(lastActivityAt) : '---'\n        });\n      });\n    },\n    columns: function columns() {\n      var _this3 = this;\n\n      var h = this.$createElement;\n      return [{\n        field: 'name',\n        key: 'name',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.NAME'),\n        fixed: 'left',\n        align: 'left',\n        sortBy: this.sortConfig.name || '',\n        width: 300,\n        renderBodyCell: function renderBodyCell(_ref) {\n          var row = _ref.row;\n          return h(\"woot-button\", {\n            attrs: {\n              variant: \"clear\"\n            },\n            on: {\n              \"click\": function click() {\n                return _this3.onClickContact(row.id);\n              }\n            }\n          }, [h(\"div\", {\n            \"class\": \"row--user-block\"\n          }, [h(Thumbnail, {\n            attrs: {\n              src: row.thumbnail,\n              size: \"32px\",\n              username: row.name,\n              status: row.availability_status\n            }\n          }), h(\"div\", {\n            \"class\": \"user-block\"\n          }, [h(\"h6\", {\n            \"class\": \"sub-block-title text-truncate\"\n          }, [h(\"router-link\", {\n            attrs: {\n              to: \"/app/accounts/\".concat(_this3.$route.params.accountId, \"/contacts/\").concat(row.id)\n            },\n            \"class\": \"user-name\"\n          }, [row.name])]), h(\"button\", {\n            \"class\": \"button clear small link view-details--button\"\n          }, [_this3.$t('CONTACTS_PAGE.LIST.VIEW_DETAILS')])])])]);\n        }\n      }, {\n        field: 'email',\n        key: 'email',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.EMAIL_ADDRESS'),\n        align: 'left',\n        sortBy: this.sortConfig.email || '',\n        width: 240,\n        renderBodyCell: function renderBodyCell(_ref2) {\n          var row = _ref2.row;\n          if (row.email) return h(\"div\", {\n            \"class\": \"text-truncate\"\n          }, [h(\"a\", {\n            attrs: {\n              target: \"_blank\",\n              rel: \"noopener noreferrer nofollow\",\n              href: \"mailto:\".concat(row.email)\n            }\n          }, [row.email])]);\n          return '---';\n        }\n      }, {\n        field: 'phone_number',\n        key: 'phone_number',\n        sortBy: this.sortConfig.phone_number || '',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.PHONE_NUMBER'),\n        align: 'left'\n      }, {\n        field: 'company',\n        key: 'company',\n        sortBy: this.sortConfig.company_name || '',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.COMPANY'),\n        align: 'left'\n      }, {\n        field: 'city',\n        key: 'city',\n        sortBy: this.sortConfig.city || '',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.CITY'),\n        align: 'left'\n      }, {\n        field: 'country',\n        key: 'country',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.COUNTRY'),\n        align: 'left',\n        sortBy: this.sortConfig.country || '',\n        renderBodyCell: function renderBodyCell(_ref3) {\n          var row = _ref3.row;\n\n          if (row.country) {\n            return h(\"div\", {\n              \"class\": \"text-truncate\"\n            }, [\"\".concat(getCountryFlag(row.countryCode), \" \").concat(row.country)]);\n          }\n\n          return '---';\n        }\n      }, {\n        field: 'profiles',\n        key: 'profiles',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.SOCIAL_PROFILES'),\n        align: 'left',\n        renderBodyCell: function renderBodyCell(_ref4) {\n          var row = _ref4.row;\n          var profiles = row.profiles;\n          var items = Object.keys(profiles);\n          if (!items.length) return '---';\n          return h(\"div\", {\n            \"class\": \"cell--social-profiles\"\n          }, [items.map(function (profile) {\n            return profiles[profile] && h(\"a\", {\n              attrs: {\n                target: \"_blank\",\n                rel: \"noopener noreferrer nofollow\",\n                href: \"https://\".concat(profile, \".com/\").concat(profiles[profile])\n              }\n            }, [h(FluentIcon, {\n              attrs: {\n                icon: \"brand-\".concat(profile)\n              }\n            })]);\n          })]);\n        }\n      }, {\n        field: 'last_activity_at',\n        key: 'last_activity_at',\n        sortBy: this.sortConfig.last_activity_at || '',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.LAST_ACTIVITY'),\n        align: 'left'\n      }, {\n        field: 'conversationsCount',\n        key: 'conversationsCount',\n        title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.CONVERSATIONS'),\n        width: 150,\n        align: 'left'\n      }];\n    }\n  },\n  watch: {\n    sortOrder: function sortOrder() {\n      this.setSortConfig();\n    },\n    sortParam: function sortParam() {\n      this.setSortConfig();\n    }\n  },\n  mounted: function mounted() {\n    this.setSortConfig();\n  },\n  methods: {\n    setSortConfig: function setSortConfig() {\n      this.sortConfig = _defineProperty({}, this.sortParam, this.sortOrder);\n    }\n  }\n};","map":{"version":3,"sources":["ContactsTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section class=\"contacts-table-wrap\">\n    <ve-table\n      :fixed-header=\"true\"\n      max-height=\"calc(100vh - 11.4rem)\"\n      scroll-width=\"187rem\"\n      :columns=\"columns\"\n      :table-data=\"tableData\"\n      :border-around=\"false\"\n      :sort-option=\"sortOption\"\n    />\n\n    <empty-state\n      v-if=\"showSearchEmptyState\"\n      :title=\"$t('CONTACTS_PAGE.LIST.404')\"\n    />\n    <empty-state\n      v-else-if=\"!isLoading && !contacts.length\"\n      :title=\"$t('CONTACTS_PAGE.LIST.NO_CONTACTS')\"\n    />\n    <div v-if=\"isLoading\" class=\"contacts--loader\">\n      <spinner />\n      <span>{{ $t('CONTACTS_PAGE.LIST.LOADING_MESSAGE') }}</span>\n    </div>\n  </section>\n</template>\n\n<script>\nimport { mixin as clickaway } from 'vue-clickaway';\nimport { VeTable } from 'vue-easytable';\nimport { getCountryFlag } from 'dashboard/helper/flag';\n\nimport Spinner from 'shared/components/Spinner.vue';\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from 'dashboard/mixins/time';\nimport FluentIcon from 'shared/components/FluentIcon/DashboardIcon';\n\nexport default {\n  components: {\n    EmptyState,\n    Spinner,\n    VeTable,\n  },\n  mixins: [clickaway, timeMixin],\n  props: {\n    contacts: {\n      type: Array,\n      default: () => [],\n    },\n    showSearchEmptyState: {\n      type: Boolean,\n      default: false,\n    },\n    onClickContact: {\n      type: Function,\n      default: () => {},\n    },\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    activeContactId: {\n      type: [String, Number],\n      default: '',\n    },\n    sortParam: {\n      type: String,\n      default: 'name',\n    },\n    sortOrder: {\n      type: String,\n      default: 'asc',\n    },\n  },\n  data() {\n    return {\n      sortConfig: {},\n      sortOption: {\n        sortAlways: true,\n        sortChange: params => this.$emit('on-sort-change', params),\n      },\n    };\n  },\n  computed: {\n    tableData() {\n      if (this.isLoading) {\n        return [];\n      }\n      return this.contacts.map(item => {\n        // Note: The attributes used here is in snake case\n        // as it simplier the sort attribute calculation\n        const additional = item.additional_attributes || {};\n        const { last_activity_at: lastActivityAt } = item;\n        return {\n          ...item,\n          phone_number: item.phone_number || '---',\n          company: additional.company_name || '---',\n          profiles: additional.social_profiles || {},\n          city: additional.city || '---',\n          country: additional.country,\n          countryCode: additional.country_code,\n          conversationsCount: item.conversations_count || '---',\n          last_activity_at: lastActivityAt\n            ? this.dynamicTime(lastActivityAt)\n            : '---',\n        };\n      });\n    },\n    columns() {\n      return [\n        {\n          field: 'name',\n          key: 'name',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.NAME'),\n          fixed: 'left',\n          align: 'left',\n          sortBy: this.sortConfig.name || '',\n          width: 300,\n          renderBodyCell: ({ row }) => (\n            <woot-button\n              variant=\"clear\"\n              onClick={() => this.onClickContact(row.id)}\n            >\n              <div class=\"row--user-block\">\n                <Thumbnail\n                  src={row.thumbnail}\n                  size=\"32px\"\n                  username={row.name}\n                  status={row.availability_status}\n                />\n                <div class=\"user-block\">\n                  <h6 class=\"sub-block-title text-truncate\">\n                    <router-link\n                      to={`/app/accounts/${this.$route.params.accountId}/contacts/${row.id}`}\n                      class=\"user-name\"\n                    >\n                      {row.name}\n                    </router-link>\n                  </h6>\n                  <button class=\"button clear small link view-details--button\">\n                    {this.$t('CONTACTS_PAGE.LIST.VIEW_DETAILS')}\n                  </button>\n                </div>\n              </div>\n            </woot-button>\n          ),\n        },\n        {\n          field: 'email',\n          key: 'email',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.EMAIL_ADDRESS'),\n          align: 'left',\n          sortBy: this.sortConfig.email || '',\n          width: 240,\n          renderBodyCell: ({ row }) => {\n            if (row.email)\n              return (\n                <div class=\"text-truncate\">\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer nofollow\"\n                    href={`mailto:${row.email}`}\n                  >\n                    {row.email}\n                  </a>\n                </div>\n              );\n            return '---';\n          },\n        },\n        {\n          field: 'phone_number',\n          key: 'phone_number',\n          sortBy: this.sortConfig.phone_number || '',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.PHONE_NUMBER'),\n          align: 'left',\n        },\n        {\n          field: 'company',\n          key: 'company',\n          sortBy: this.sortConfig.company_name || '',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.COMPANY'),\n          align: 'left',\n        },\n        {\n          field: 'city',\n          key: 'city',\n          sortBy: this.sortConfig.city || '',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.CITY'),\n          align: 'left',\n        },\n        {\n          field: 'country',\n          key: 'country',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.COUNTRY'),\n          align: 'left',\n          sortBy: this.sortConfig.country || '',\n          renderBodyCell: ({ row }) => {\n            if (row.country) {\n              return (\n                <div class=\"text-truncate\">\n                  {`${getCountryFlag(row.countryCode)} ${row.country}`}\n                </div>\n              );\n            }\n            return '---';\n          },\n        },\n        {\n          field: 'profiles',\n          key: 'profiles',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.SOCIAL_PROFILES'),\n          align: 'left',\n          renderBodyCell: ({ row }) => {\n            const { profiles } = row;\n\n            const items = Object.keys(profiles);\n\n            if (!items.length) return '---';\n\n            return (\n              <div class=\"cell--social-profiles\">\n                {items.map(\n                  profile =>\n                    profiles[profile] && (\n                      <a\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer nofollow\"\n                        href={`https://${profile}.com/${profiles[profile]}`}\n                      >\n                        <FluentIcon icon={`brand-${profile}`} />\n                      </a>\n                    )\n                )}\n              </div>\n            );\n          },\n        },\n        {\n          field: 'last_activity_at',\n          key: 'last_activity_at',\n          sortBy: this.sortConfig.last_activity_at || '',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.LAST_ACTIVITY'),\n          align: 'left',\n        },\n        {\n          field: 'conversationsCount',\n          key: 'conversationsCount',\n          title: this.$t('CONTACTS_PAGE.LIST.TABLE_HEADER.CONVERSATIONS'),\n          width: 150,\n          align: 'left',\n        },\n      ];\n    },\n  },\n  watch: {\n    sortOrder() {\n      this.setSortConfig();\n    },\n    sortParam() {\n      this.setSortConfig();\n    },\n  },\n  mounted() {\n    this.setSortConfig();\n  },\n  methods: {\n    setSortConfig() {\n      this.sortConfig = { [this.sortParam]: this.sortOrder };\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~dashboard/assets/scss/mixins';\n\n.contacts-table-wrap {\n  flex: 1 1;\n  height: 100%;\n  overflow: hidden;\n}\n\n.contacts-table-wrap::v-deep {\n  .ve-table {\n    padding-bottom: var(--space-large);\n  }\n  .row--user-block {\n    align-items: center;\n    display: flex;\n    text-align: left;\n\n    .user-block {\n      min-width: 0;\n    }\n\n    .user-thumbnail-box {\n      margin-right: var(--space-small);\n    }\n\n    .user-name {\n      font-size: var(--font-size-small);\n      font-weight: var(--font-weight-medium);\n      margin: 0;\n      text-transform: capitalize;\n    }\n\n    .view-details--button {\n      color: var(--color-body);\n    }\n\n    .user-email {\n      margin: 0;\n    }\n  }\n\n  .ve-table-header-th {\n    padding: var(--space-small) var(--space-two) !important;\n  }\n\n  .ve-table-body-td {\n    padding: var(--space-small) var(--space-two) !important;\n  }\n\n  .ve-table-header-th {\n    font-size: var(--font-size-mini) !important;\n  }\n  .ve-table-sort {\n    top: -4px;\n  }\n}\n\n.contacts--loader {\n  align-items: center;\n  display: flex;\n  font-size: var(--font-size-default);\n  justify-content: center;\n  padding: var(--space-big);\n}\n\n.cell--social-profiles {\n  a {\n    color: var(--s-300);\n    display: inline-block;\n    font-size: var(--font-size-medium);\n    min-width: var(--space-large);\n    text-align: center;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/contacts/components"},"metadata":{},"sourceType":"module"}