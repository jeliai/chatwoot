{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\nimport NotificationPanelList from './NotificationPanelList';\nexport default {\n  components: {\n    NotificationPanelList: NotificationPanelList\n  },\n  mixins: [clickaway],\n  data: function data() {\n    return {\n      pageSize: 15\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    accountId: 'getCurrentAccountId',\n    meta: 'notifications/getMeta',\n    records: 'notifications/getNotifications',\n    uiFlags: 'notifications/getUIFlags'\n  })), {}, {\n    totalUnreadNotifications: function totalUnreadNotifications() {\n      return this.meta.unreadCount;\n    },\n    noUnreadNotificationAvailable: function noUnreadNotificationAvailable() {\n      return this.meta.unreadCount === 0;\n    },\n    getUnreadNotifications: function getUnreadNotifications() {\n      return this.records.filter(function (notification) {\n        return notification.read_at === null;\n      });\n    },\n    currentPage: function currentPage() {\n      return Number(this.meta.currentPage);\n    },\n    lastPage: function lastPage() {\n      if (this.totalUnreadNotifications > 15) {\n        return Math.ceil(this.totalUnreadNotifications / this.pageSize);\n      }\n\n      return 1;\n    },\n    inFirstPage: function inFirstPage() {\n      var page = Number(this.meta.currentPage);\n      return page === 1;\n    },\n    inLastPage: function inLastPage() {\n      return this.currentPage === this.lastPage;\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('notifications/get', {\n      page: 1\n    });\n  },\n  methods: {\n    onPageChange: function onPageChange(page) {\n      this.$store.dispatch('notifications/get', {\n        page: page\n      });\n    },\n    openConversation: function openConversation(notification) {\n      var primaryActorId = notification.primary_actor_id,\n          primaryActorType = notification.primary_actor_type,\n          conversationId = notification.primary_actor.id;\n      this.$store.dispatch('notifications/read', {\n        primaryActorId: primaryActorId,\n        primaryActorType: primaryActorType,\n        unreadCount: this.meta.unreadCount\n      });\n      this.$router.push({\n        name: 'inbox_conversation',\n        params: {\n          conversation_id: conversationId\n        }\n      });\n      this.$emit('close');\n    },\n    onClickNextPage: function onClickNextPage() {\n      if (!this.inLastPage) {\n        var page = this.currentPage + 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickPreviousPage: function onClickPreviousPage() {\n      if (!this.inFirstPage) {\n        var page = this.currentPage - 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickFirstPage: function onClickFirstPage() {\n      if (!this.inFirstPage) {\n        var page = 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickLastPage: function onClickLastPage() {\n      if (!this.inLastPage) {\n        var page = this.lastPage;\n        this.onPageChange(page);\n      }\n    },\n    onMarkAllDoneClick: function onMarkAllDoneClick() {\n      this.$store.dispatch('notifications/readAll');\n    },\n    closeNotificationPanel: function closeNotificationPanel() {\n      this.$emit('close');\n    }\n  }\n};","map":{"version":3,"sources":["NotificationPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"modal-mask\">\n    <div\n      v-on-clickaway=\"closeNotificationPanel\"\n      class=\"notification-wrap flex-space-between\"\n    >\n      <div class=\"header-wrap w-full flex-space-between\">\n        <div class=\"header-title--wrap flex-view\">\n          <span class=\"header-title\">\n            {{ $t('NOTIFICATIONS_PAGE.UNREAD_NOTIFICATION.TITLE') }}\n          </span>\n          <span v-if=\"totalUnreadNotifications\" class=\"total-count block-title\">\n            {{ totalUnreadNotifications }}\n          </span>\n        </div>\n        <div class=\"flex-view\">\n          <woot-button\n            v-if=\"!noUnreadNotificationAvailable\"\n            color-scheme=\"primary\"\n            variant=\"smooth\"\n            size=\"tiny\"\n            class-names=\"action-button\"\n            :is-loading=\"uiFlags.isUpdating\"\n            @click=\"onMarkAllDoneClick\"\n          >\n            {{ $t('NOTIFICATIONS_PAGE.MARK_ALL_DONE') }}\n          </woot-button>\n          <woot-button\n            color-scheme=\"secondary\"\n            variant=\"link\"\n            size=\"tiny\"\n            icon=\"dismiss\"\n            @click=\"closeNotificationPanel\"\n          />\n        </div>\n      </div>\n      <notification-panel-list\n        :notifications=\"getUnreadNotifications\"\n        :is-loading=\"uiFlags.isFetching\"\n        :on-click-notification=\"openConversation\"\n        :in-last-page=\"inLastPage\"\n      />\n      <div v-if=\"records.length !== 0\" class=\"footer-wrap flex-space-between\">\n        <div class=\"flex-view\">\n          <woot-button\n            size=\"medium\"\n            variant=\"clear\"\n            color-scheme=\"secondary\"\n            class-names=\"page-change--button\"\n            :is-disabled=\"inFirstPage\"\n            @click=\"onClickFirstPage\"\n          >\n            <fluent-icon icon=\"chevron-left\" size=\"16\" />\n            <fluent-icon\n              icon=\"chevron-left\"\n              size=\"16\"\n              class=\"margin-left-minus-slab\"\n            />\n          </woot-button>\n          <woot-button\n            color-scheme=\"secondary\"\n            variant=\"clear\"\n            size=\"medium\"\n            icon=\"chevron-left\"\n            :disabled=\"inFirstPage\"\n            @click=\"onClickPreviousPage\"\n          />\n        </div>\n        <span class=\"page-count\"> {{ currentPage }} - {{ lastPage }} </span>\n        <div class=\"flex-view\">\n          <woot-button\n            color-scheme=\"secondary\"\n            variant=\"clear\"\n            size=\"medium\"\n            icon=\"chevron-right\"\n            :disabled=\"inLastPage\"\n            @click=\"onClickNextPage\"\n          />\n          <woot-button\n            size=\"medium\"\n            variant=\"clear\"\n            color-scheme=\"secondary\"\n            class-names=\"page-change--button\"\n            :disabled=\"inLastPage\"\n            @click=\"onClickLastPage\"\n          >\n            <fluent-icon icon=\"chevron-right\" size=\"16\" />\n            <fluent-icon\n              icon=\"chevron-right\"\n              size=\"16\"\n              class=\"margin-left-minus-slab\"\n            />\n          </woot-button>\n        </div>\n      </div>\n      <div v-else />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\n\nimport NotificationPanelList from './NotificationPanelList';\n\nexport default {\n  components: {\n    NotificationPanelList,\n  },\n  mixins: [clickaway],\n  data() {\n    return {\n      pageSize: 15,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      accountId: 'getCurrentAccountId',\n      meta: 'notifications/getMeta',\n      records: 'notifications/getNotifications',\n      uiFlags: 'notifications/getUIFlags',\n    }),\n    totalUnreadNotifications() {\n      return this.meta.unreadCount;\n    },\n    noUnreadNotificationAvailable() {\n      return this.meta.unreadCount === 0;\n    },\n    getUnreadNotifications() {\n      return this.records.filter(notification => notification.read_at === null);\n    },\n    currentPage() {\n      return Number(this.meta.currentPage);\n    },\n    lastPage() {\n      if (this.totalUnreadNotifications > 15) {\n        return Math.ceil(this.totalUnreadNotifications / this.pageSize);\n      }\n      return 1;\n    },\n    inFirstPage() {\n      const page = Number(this.meta.currentPage);\n      return page === 1;\n    },\n    inLastPage() {\n      return this.currentPage === this.lastPage;\n    },\n  },\n  mounted() {\n    this.$store.dispatch('notifications/get', { page: 1 });\n  },\n  methods: {\n    onPageChange(page) {\n      this.$store.dispatch('notifications/get', { page });\n    },\n    openConversation(notification) {\n      const {\n        primary_actor_id: primaryActorId,\n        primary_actor_type: primaryActorType,\n        primary_actor: { id: conversationId },\n      } = notification;\n\n      this.$store.dispatch('notifications/read', {\n        primaryActorId,\n        primaryActorType,\n        unreadCount: this.meta.unreadCount,\n      });\n      this.$router.push({\n        name: 'inbox_conversation',\n        params: { conversation_id: conversationId },\n      });\n      this.$emit('close');\n    },\n    onClickNextPage() {\n      if (!this.inLastPage) {\n        const page = this.currentPage + 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickPreviousPage() {\n      if (!this.inFirstPage) {\n        const page = this.currentPage - 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickFirstPage() {\n      if (!this.inFirstPage) {\n        const page = 1;\n        this.onPageChange(page);\n      }\n    },\n    onClickLastPage() {\n      if (!this.inLastPage) {\n        const page = this.lastPage;\n        this.onPageChange(page);\n      }\n    },\n    onMarkAllDoneClick() {\n      this.$store.dispatch('notifications/readAll');\n    },\n    closeNotificationPanel() {\n      this.$emit('close');\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.flex-view {\n  display: flex;\n}\n\n.flex-space-between {\n  display: flex;\n  justify-content: space-between;\n}\n\n.notification-wrap {\n  flex-direction: column;\n  height: 90vh;\n  width: 52rem;\n  background-color: var(--white);\n  border-radius: var(--border-radius-medium);\n  position: absolute;\n  left: var(--space-jumbo);\n  margin: var(--space-small);\n}\n.header-wrap {\n  flex-direction: row;\n  align-items: center;\n  border-bottom: 1px solid var(--s-50);\n  padding: var(--space-two) var(--space-medium) var(--space-slab)\n    var(--space-medium);\n\n  .header-title--wrap {\n    align-items: center;\n  }\n\n  .header-title {\n    font-size: var(--font-size-two);\n    font-weight: var(--font-weight-black);\n  }\n\n  .total-count {\n    padding: var(--space-smaller) var(--space-small);\n    background: var(--b-50);\n    border-radius: var(--border-radius-rounded);\n    font-size: var(--font-size-micro);\n    font-weight: var(--font-weight-bold);\n  }\n\n  .action-button {\n    padding: var(--space-micro) var(--space-small);\n    margin-right: var(--space-small);\n  }\n}\n\n.page-count {\n  font-size: var(--font-size-micro);\n  font-weight: var(--font-weight-bold);\n  color: var(--s-500);\n}\n\n.footer-wrap {\n  align-items: center;\n  padding: var(--space-smaller) var(--space-two);\n}\n\n.page-change--button:hover {\n  background: var(--s-50);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/notifications/components"},"metadata":{},"sourceType":"module"}