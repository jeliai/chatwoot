{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nexport var formatBytes = function formatBytes(bytes) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  if (bytes === 0) return '0 Bytes';\n  var k = 1024;\n  var dm = decimals < 0 ? 0 : decimals;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\nexport var fileSizeInMegaBytes = function fileSizeInMegaBytes(bytes) {\n  return bytes / (1024 * 1024);\n};\nexport var checkFileSizeLimit = function checkFileSizeLimit(file, maximumUploadLimit) {\n  var _file$file;\n\n  var fileSize = (file === null || file === void 0 ? void 0 : (_file$file = file.file) === null || _file$file === void 0 ? void 0 : _file$file.size) || (file === null || file === void 0 ? void 0 : file.size);\n  var fileSizeInMB = fileSizeInMegaBytes(fileSize);\n  return fileSizeInMB <= maximumUploadLimit;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/helpers/FileHelper.js"],"names":["formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","fileSizeInMegaBytes","checkFileSizeLimit","file","maximumUploadLimit","fileSize","size","fileSizeInMB"],"mappings":";AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAyB;AAAA,MAAjBC,QAAiB,uEAAN,CAAM;AAClD,MAAID,KAAK,KAAK,CAAd,EAAiB,OAAO,SAAP;AAEjB,MAAME,CAAC,GAAG,IAAV;AACA,MAAMC,EAAE,GAAGF,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBA,QAA9B;AACA,MAAMG,KAAK,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAAd;AAEA,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASR,KAAT,IAAkBM,IAAI,CAACE,GAAL,CAASN,CAAT,CAA7B,CAAV;AAEA,SAAOO,UAAU,CAAC,CAACT,KAAK,GAAGM,IAAI,CAACI,GAAL,CAASR,CAAT,EAAYG,CAAZ,CAAT,EAAyBM,OAAzB,CAAiCR,EAAjC,CAAD,CAAV,GAAmD,GAAnD,GAAyDC,KAAK,CAACC,CAAD,CAArE;AACD,CAVM;AAYP,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAZ,KAAK,EAAI;AAC1C,SAAOA,KAAK,IAAI,OAAO,IAAX,CAAZ;AACD,CAFM;AAIP,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAOC,kBAAP,EAA8B;AAAA;;AAC9D,MAAMC,QAAQ,GAAG,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEA,IAAN,0DAAYG,IAAZ,MAAoBH,IAApB,aAAoBA,IAApB,uBAAoBA,IAAI,CAAEG,IAA1B,CAAjB;AACA,MAAMC,YAAY,GAAGN,mBAAmB,CAACI,QAAD,CAAxC;AACA,SAAOE,YAAY,IAAIH,kBAAvB;AACD,CAJM","sourcesContent":["export const formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport const fileSizeInMegaBytes = bytes => {\n  return bytes / (1024 * 1024);\n};\n\nexport const checkFileSizeLimit = (file, maximumUploadLimit) => {\n  const fileSize = file?.file?.size || file?.size;\n  const fileSizeInMB = fileSizeInMegaBytes(fileSize);\n  return fileSizeInMB <= maximumUploadLimit;\n};\n"]},"metadata":{},"sourceType":"module"}