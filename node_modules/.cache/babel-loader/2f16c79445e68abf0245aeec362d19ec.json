{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport Vue from 'vue';\nimport { getAvailableAgents } from 'widget/api/agent';\nimport * as MutationHelpers from 'shared/helpers/vuex/mutationHelpers';\nvar state = {\n  records: [],\n  uiFlags: {\n    isError: false,\n    hasFetched: false\n  }\n};\nexport var getters = {\n  getHasFetched: function getHasFetched($state) {\n    return $state.uiFlags.hasFetched;\n  },\n  availableAgents: function availableAgents($state) {\n    return $state.records.filter(function (agent) {\n      return agent.availability_status === 'online';\n    });\n  }\n};\nexport var actions = {\n  fetchAvailableAgents: function () {\n    var _fetchAvailableAgents = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, websiteToken) {\n      var commit, _yield$getAvailableAg, data, _data$payload, payload;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return getAvailableAgents(websiteToken);\n\n            case 4:\n              _yield$getAvailableAg = _context.sent;\n              data = _yield$getAvailableAg.data;\n              _data$payload = data.payload, payload = _data$payload === void 0 ? [] : _data$payload;\n              commit('setAgents', payload);\n              commit('setError', false);\n              commit('setHasFetched', true);\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              commit('setError', true);\n              commit('setHasFetched', true);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    function fetchAvailableAgents(_x, _x2) {\n      return _fetchAvailableAgents.apply(this, arguments);\n    }\n\n    return fetchAvailableAgents;\n  }(),\n  updatePresence: function () {\n    var _updatePresence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, data) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              commit('updatePresence', data);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function updatePresence(_x3, _x4) {\n      return _updatePresence.apply(this, arguments);\n    }\n\n    return updatePresence;\n  }()\n};\nexport var mutations = {\n  setAgents: function setAgents($state, data) {\n    Vue.set($state, 'records', data);\n  },\n  updatePresence: MutationHelpers.updatePresence,\n  setError: function setError($state, value) {\n    Vue.set($state.uiFlags, 'isError', value);\n  },\n  setHasFetched: function setHasFetched($state, value) {\n    Vue.set($state.uiFlags, 'hasFetched', value);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/agent.js"],"names":["Vue","getAvailableAgents","MutationHelpers","state","records","uiFlags","isError","hasFetched","getters","getHasFetched","$state","availableAgents","filter","agent","availability_status","actions","fetchAvailableAgents","websiteToken","commit","data","payload","updatePresence","mutations","setAgents","set","setError","value","setHasFetched","namespaced"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAO,KAAKC,eAAZ,MAAiC,qCAAjC;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE,EADG;AAEZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,KADF;AAEPC,IAAAA,UAAU,EAAE;AAFL;AAFG,CAAd;AAQA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,aAAa,EAAE,uBAAAC,MAAM;AAAA,WAAIA,MAAM,CAACL,OAAP,CAAeE,UAAnB;AAAA,GADA;AAErBI,EAAAA,eAAe,EAAE,yBAAAD,MAAM;AAAA,WACrBA,MAAM,CAACN,OAAP,CAAeQ,MAAf,CAAsB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,mBAAN,KAA8B,QAAlC;AAAA,KAA3B,CADqB;AAAA;AAFF,CAAhB;AAMP,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,oBAAoB;AAAA,wFAAE,uBAAmBC,YAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,MAAT,QAASA,MAAT;AAAA;AAAA;AAAA,qBAEKjB,kBAAkB,CAACgB,YAAD,CAFvB;;AAAA;AAAA;AAEVE,cAAAA,IAFU,yBAEVA,IAFU;AAAA,8BAGOA,IAHP,CAGVC,OAHU,EAGVA,OAHU,8BAGA,EAHA;AAIlBF,cAAAA,MAAM,CAAC,WAAD,EAAcE,OAAd,CAAN;AACAF,cAAAA,MAAM,CAAC,UAAD,EAAa,KAAb,CAAN;AACAA,cAAAA,MAAM,CAAC,eAAD,EAAkB,IAAlB,CAAN;AANkB;AAAA;;AAAA;AAAA;AAAA;AAQlBA,cAAAA,MAAM,CAAC,UAAD,EAAa,IAAb,CAAN;AACAA,cAAAA,MAAM,CAAC,eAAD,EAAkB,IAAlB,CAAN;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADC;AAarBG,EAAAA,cAAc;AAAA,kFAAE,yBAAmBF,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASD,cAAAA,MAAT,SAASA,MAAT;AACdA,cAAAA,MAAM,CAAC,gBAAD,EAAmBC,IAAnB,CAAN;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAbO,CAAhB;AAkBP,OAAO,IAAMG,SAAS,GAAG;AACvBC,EAAAA,SADuB,qBACbb,MADa,EACLS,IADK,EACC;AACtBnB,IAAAA,GAAG,CAACwB,GAAJ,CAAQd,MAAR,EAAgB,SAAhB,EAA2BS,IAA3B;AACD,GAHsB;AAIvBE,EAAAA,cAAc,EAAEnB,eAAe,CAACmB,cAJT;AAKvBI,EAAAA,QALuB,oBAKdf,MALc,EAKNgB,KALM,EAKC;AACtB1B,IAAAA,GAAG,CAACwB,GAAJ,CAAQd,MAAM,CAACL,OAAf,EAAwB,SAAxB,EAAmCqB,KAAnC;AACD,GAPsB;AAQvBC,EAAAA,aARuB,yBAQTjB,MARS,EAQDgB,KARC,EAQM;AAC3B1B,IAAAA,GAAG,CAACwB,GAAJ,CAAQd,MAAM,CAACL,OAAf,EAAwB,YAAxB,EAAsCqB,KAAtC;AACD;AAVsB,CAAlB;AAaP,eAAe;AACbE,EAAAA,UAAU,EAAE,IADC;AAEbzB,EAAAA,KAAK,EAALA,KAFa;AAGbK,EAAAA,OAAO,EAAPA,OAHa;AAIbO,EAAAA,OAAO,EAAPA,OAJa;AAKbO,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import Vue from 'vue';\nimport { getAvailableAgents } from 'widget/api/agent';\nimport * as MutationHelpers from 'shared/helpers/vuex/mutationHelpers';\n\nconst state = {\n  records: [],\n  uiFlags: {\n    isError: false,\n    hasFetched: false,\n  },\n};\n\nexport const getters = {\n  getHasFetched: $state => $state.uiFlags.hasFetched,\n  availableAgents: $state =>\n    $state.records.filter(agent => agent.availability_status === 'online'),\n};\n\nexport const actions = {\n  fetchAvailableAgents: async ({ commit }, websiteToken) => {\n    try {\n      const { data } = await getAvailableAgents(websiteToken);\n      const { payload = [] } = data;\n      commit('setAgents', payload);\n      commit('setError', false);\n      commit('setHasFetched', true);\n    } catch (error) {\n      commit('setError', true);\n      commit('setHasFetched', true);\n    }\n  },\n  updatePresence: async ({ commit }, data) => {\n    commit('updatePresence', data);\n  },\n};\n\nexport const mutations = {\n  setAgents($state, data) {\n    Vue.set($state, 'records', data);\n  },\n  updatePresence: MutationHelpers.updatePresence,\n  setError($state, value) {\n    Vue.set($state.uiFlags, 'isError', value);\n  },\n  setHasFetched($state, value) {\n    Vue.set($state.uiFlags, 'hasFetched', value);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}