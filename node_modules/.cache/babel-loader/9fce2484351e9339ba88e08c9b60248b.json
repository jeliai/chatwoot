{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport NoteList from './components/NoteList';\nexport default {\n  components: {\n    NoteList: NoteList\n  },\n  props: {\n    contactId: {\n      type: Number,\n      required: true\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'contactNotes/getUIFlags'\n  })), {}, {\n    notes: function notes() {\n      return this.$store.getters['contactNotes/getAllNotesByContact'](this.contactId);\n    }\n  }),\n  mounted: function mounted() {\n    this.fetchContactNotes();\n  },\n  methods: {\n    fetchContactNotes: function fetchContactNotes() {\n      var contactId = this.contactId;\n      if (contactId) this.$store.dispatch('contactNotes/get', {\n        contactId: contactId\n      });\n    },\n    onAdd: function onAdd(content) {\n      var contactId = this.contactId;\n      this.$store.dispatch('contactNotes/create', {\n        content: content,\n        contactId: contactId\n      });\n    },\n    onDelete: function onDelete(noteId) {\n      var contactId = this.contactId;\n      this.$store.dispatch('contactNotes/delete', {\n        noteId: noteId,\n        contactId: contactId\n      });\n    }\n  }\n};","map":{"version":3,"sources":["NotesOnContactPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAUA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,QAAA,MAAA,uBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAJA;AAUA,EAAA,QAAA,kCACA,UAAA,CAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA,CADA;AAEA,IAAA,KAFA,mBAEA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,mCAAA,EACA,KAAA,SADA,CAAA;AAGA;AANA,IAVA;AAkBA,EAAA,OAlBA,qBAkBA;AACA,SAAA,iBAAA;AACA,GApBA;AAqBA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,UAAA,SAAA,GAAA,IAAA,CAAA,SAAA;AACA,UAAA,SAAA,EAAA,KAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;AACA,KAJA;AAKA,IAAA,KALA,iBAKA,OALA,EAKA;AACA,UAAA,SAAA,GAAA,IAAA,CAAA,SAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;AAAA,QAAA,OAAA,EAAA,OAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;AACA,KARA;AASA,IAAA,QATA,oBASA,MATA,EASA;AACA,UAAA,SAAA,GAAA,IAAA,CAAA,SAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;AAAA,QAAA,MAAA,EAAA,MAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;AACA;AAZA;AArBA,CAAA","sourcesContent":["<template>\n  <note-list\n    :is-fetching=\"uiFlags.isFetching\"\n    :notes=\"notes\"\n    @add=\"onAdd\"\n    @delete=\"onDelete\"\n  />\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport NoteList from './components/NoteList';\n\nexport default {\n  components: {\n    NoteList,\n  },\n  props: {\n    contactId: {\n      type: Number,\n      required: true,\n    },\n  },\n  computed: {\n    ...mapGetters({ uiFlags: 'contactNotes/getUIFlags' }),\n    notes() {\n      return this.$store.getters['contactNotes/getAllNotesByContact'](\n        this.contactId\n      );\n    },\n  },\n  mounted() {\n    this.fetchContactNotes();\n  },\n  methods: {\n    fetchContactNotes() {\n      const { contactId } = this;\n      if (contactId) this.$store.dispatch('contactNotes/get', { contactId });\n    },\n    onAdd(content) {\n      const { contactId } = this;\n      this.$store.dispatch('contactNotes/create', { content, contactId });\n    },\n    onDelete(noteId) {\n      const { contactId } = this;\n      this.$store.dispatch('contactNotes/delete', { noteId, contactId });\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/modules/notes"},"metadata":{},"sourceType":"module"}