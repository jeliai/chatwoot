{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport { required, minLength } from 'vuelidate/lib/validators';\nexport default {\n  components: {\n    SettingsSection: SettingsSection\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isIMAPEnabled: false,\n      address: '',\n      port: '',\n      login: '',\n      password: '',\n      isSSLEnabled: true\n    };\n  },\n  validations: {\n    address: {\n      required: required\n    },\n    port: {\n      required: required,\n      minLength: minLength(2)\n    },\n    login: {\n      required: required\n    },\n    password: {\n      required: required\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'inboxes/getUIFlags'\n  })),\n  watch: {\n    inbox: function inbox() {\n      this.setDefaults();\n    }\n  },\n  mounted: function mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults: function setDefaults() {\n      var _this$inbox = this.inbox,\n          imap_enabled = _this$inbox.imap_enabled,\n          imap_address = _this$inbox.imap_address,\n          imap_port = _this$inbox.imap_port,\n          imap_login = _this$inbox.imap_login,\n          imap_password = _this$inbox.imap_password,\n          imap_enable_ssl = _this$inbox.imap_enable_ssl;\n      this.isIMAPEnabled = imap_enabled;\n      this.address = imap_address;\n      this.port = imap_port;\n      this.login = imap_login;\n      this.password = imap_password;\n      this.isSSLEnabled = imap_enable_ssl;\n    },\n    updateInbox: function updateInbox() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var payload;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _this.loading = true;\n                payload = {\n                  id: _this.inbox.id,\n                  formData: false,\n                  channel: {\n                    imap_enabled: _this.isIMAPEnabled,\n                    imap_address: _this.address,\n                    imap_port: _this.port,\n                    imap_login: _this.login,\n                    imap_password: _this.password,\n                    imap_enable_ssl: _this.isSSLEnabled,\n                    imap_inbox_synced_at: _this.isIMAPEnabled ? new Date().toISOString() : undefined\n                  }\n                };\n\n                if (!_this.isIMAPEnabled) {\n                  payload.channel.smtp_enabled = false;\n                }\n\n                _context.next = 6;\n                return _this.$store.dispatch('inboxes/updateInboxIMAP', payload);\n\n              case 6:\n                _this.showAlert(_this.$t('INBOX_MGMT.IMAP.EDIT.SUCCESS_MESSAGE'));\n\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_context.t0.message);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["ImapSettings.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"settings--content\">\n    <settings-section\n      :title=\"$t('INBOX_MGMT.IMAP.TITLE')\"\n      :sub-title=\"$t('INBOX_MGMT.IMAP.SUBTITLE')\"\n      :note=\"$t('INBOX_MGMT.IMAP.NOTE_TEXT')\"\n    >\n      <form @submit.prevent=\"updateInbox\">\n        <label for=\"toggle-imap-enable\">\n          <input\n            v-model=\"isIMAPEnabled\"\n            type=\"checkbox\"\n            name=\"toggle-imap-enable\"\n          />\n          {{ $t('INBOX_MGMT.IMAP.TOGGLE_AVAILABILITY') }}\n        </label>\n        <p>{{ $t('INBOX_MGMT.IMAP.TOGGLE_HELP') }}</p>\n        <div v-if=\"isIMAPEnabled\" class=\"imap-details-wrap\">\n          <woot-input\n            v-model.trim=\"address\"\n            :class=\"{ error: $v.address.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.IMAP.ADDRESS.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.IMAP.ADDRESS.PLACE_HOLDER')\"\n            @blur=\"$v.address.$touch\"\n          />\n          <woot-input\n            v-model=\"port\"\n            type=\"number\"\n            :class=\"{ error: $v.port.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.IMAP.PORT.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.IMAP.PORT.PLACE_HOLDER')\"\n            @blur=\"$v.port.$touch\"\n          />\n          <woot-input\n            v-model=\"login\"\n            :class=\"{ error: $v.login.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.IMAP.LOGIN.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.IMAP.LOGIN.PLACE_HOLDER')\"\n            @blur=\"$v.login.$touch\"\n          />\n          <woot-input\n            v-model=\"password\"\n            :class=\"{ error: $v.password.$error }\"\n            class=\"medium-9 columns\"\n            :label=\"$t('INBOX_MGMT.IMAP.PASSWORD.LABEL')\"\n            :placeholder=\"$t('INBOX_MGMT.IMAP.PASSWORD.PLACE_HOLDER')\"\n            type=\"password\"\n            @blur=\"$v.password.$touch\"\n          />\n          <label for=\"toggle-enable-ssl\">\n            <input\n              v-model=\"isSSLEnabled\"\n              type=\"checkbox\"\n              name=\"toggle-enable-ssl\"\n            />\n            {{ $t('INBOX_MGMT.IMAP.ENABLE_SSL') }}\n          </label>\n        </div>\n        <woot-submit-button\n          :button-text=\"$t('INBOX_MGMT.IMAP.UPDATE')\"\n          :loading=\"uiFlags.isUpdatingIMAP\"\n          :disabled=\"($v.$invalid && isIMAPEnabled) || uiFlags.isUpdatingIMAP\"\n        />\n      </form>\n    </settings-section>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport { required, minLength } from 'vuelidate/lib/validators';\n\nexport default {\n  components: {\n    SettingsSection,\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      isIMAPEnabled: false,\n      address: '',\n      port: '',\n      login: '',\n      password: '',\n      isSSLEnabled: true,\n    };\n  },\n  validations: {\n    address: { required },\n    port: { required, minLength: minLength(2) },\n    login: { required },\n    password: { required },\n  },\n  computed: {\n    ...mapGetters({ uiFlags: 'inboxes/getUIFlags' }),\n  },\n  watch: {\n    inbox() {\n      this.setDefaults();\n    },\n  },\n  mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults() {\n      const {\n        imap_enabled,\n        imap_address,\n        imap_port,\n        imap_login,\n        imap_password,\n        imap_enable_ssl,\n      } = this.inbox;\n      this.isIMAPEnabled = imap_enabled;\n      this.address = imap_address;\n      this.port = imap_port;\n      this.login = imap_login;\n      this.password = imap_password;\n      this.isSSLEnabled = imap_enable_ssl;\n    },\n    async updateInbox() {\n      try {\n        this.loading = true;\n        let payload = {\n          id: this.inbox.id,\n          formData: false,\n          channel: {\n            imap_enabled: this.isIMAPEnabled,\n            imap_address: this.address,\n            imap_port: this.port,\n            imap_login: this.login,\n            imap_password: this.password,\n            imap_enable_ssl: this.isSSLEnabled,\n            imap_inbox_synced_at: this.isIMAPEnabled\n              ? new Date().toISOString()\n              : undefined,\n          },\n        };\n\n        if (!this.isIMAPEnabled) {\n          payload.channel.smtp_enabled = false;\n        }\n\n        await this.$store.dispatch('inboxes/updateInboxIMAP', payload);\n        this.showAlert(this.$t('INBOX_MGMT.IMAP.EDIT.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(error.message);\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.imap-details-wrap {\n  margin-bottom: var(--space-medium);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox"},"metadata":{},"sourceType":"module"}