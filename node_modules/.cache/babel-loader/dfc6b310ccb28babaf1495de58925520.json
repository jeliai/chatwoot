{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport Spinner from 'shared/components/Spinner.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from '../../../../mixins/time';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    Thumbnail: Thumbnail,\n    Spinner: Spinner,\n    EmptyState: EmptyState\n  },\n  mixins: [timeMixin],\n  props: {\n    notifications: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isUpdating: {\n      type: Boolean,\n      default: false\n    },\n    onClickNotification: {\n      type: Function,\n      default: function _default() {}\n    },\n    onMarkAllDoneClick: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    notificationMetadata: 'notifications/getMeta'\n  })), {}, {\n    showEmptyResult: function showEmptyResult() {\n      return !this.isLoading && this.notifications.length === 0;\n    }\n  })\n};","map":{"version":3,"sources":["NotificationTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,OAAA,SAAA,MAAA,4CAAA;AACA,OAAA,OAAA,MAAA,+BAAA;AACA,OAAA,UAAA,MAAA,6CAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,UAAA,EAAA;AAHA,GADA;AAMA,EAAA,MAAA,EAAA,CAAA,SAAA,CANA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,mBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KAbA;AAiBA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AAjBA,GAPA;AA6BA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,oBAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,eAJA,6BAIA;AACA,aAAA,CAAA,KAAA,SAAA,IAAA,KAAA,aAAA,CAAA,MAAA,KAAA,CAAA;AACA;AANA;AA7BA,CAAA","sourcesContent":["<template>\n  <section class=\"notification--table-wrap\">\n    <woot-submit-button\n      v-if=\"notificationMetadata.unreadCount\"\n      class=\"button nice success button--fixed-right-top\"\n      :button-text=\"$t('NOTIFICATIONS_PAGE.MARK_ALL_DONE')\"\n      :loading=\"isUpdating\"\n      @click=\"onMarkAllDoneClick\"\n    />\n\n    <table class=\"woot-table notifications-table\">\n      <tbody v-show=\"!isLoading\">\n        <tr\n          v-for=\"notificationItem in notifications\"\n          :key=\"notificationItem.id\"\n          :class=\"{\n            'is-unread': notificationItem.read_at === null,\n          }\"\n          @click=\"() => onClickNotification(notificationItem)\"\n        >\n          <td>\n            <div class=\"flex-view notification-contant--wrap text-truncate\">\n              <h5 class=\"notification--title\">\n                {{\n                  `#${\n                    notificationItem.primary_actor\n                      ? notificationItem.primary_actor.id\n                      : $t(`NOTIFICATIONS_PAGE.DELETE_TITLE`)\n                  }`\n                }}\n              </h5>\n              <span class=\"notification--message-title text-truncate\">\n                {{ notificationItem.push_message_title }}\n              </span>\n            </div>\n          </td>\n          <td class=\"text-right\">\n            <span class=\"notification--type\">\n              {{\n                $t(\n                  `NOTIFICATIONS_PAGE.TYPE_LABEL.${notificationItem.notification_type}`\n                )\n              }}\n            </span>\n          </td>\n          <td class=\"thumbnail--column\">\n            <thumbnail\n              v-if=\"notificationItem.primary_actor.meta.assignee\"\n              :src=\"notificationItem.primary_actor.meta.assignee.thumbnail\"\n              size=\"36px\"\n              :username=\"notificationItem.primary_actor.meta.assignee.name\"\n            />\n          </td>\n          <td>\n            <div class=\"text-right timestamp--column\">\n              <span class=\"notification--created-at\">\n                {{ dynamicTime(notificationItem.created_at) }}\n              </span>\n            </div>\n          </td>\n          <td>\n            <div\n              v-if=\"!notificationItem.read_at\"\n              class=\"notification--unread-indicator\"\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <empty-state\n      v-if=\"showEmptyResult\"\n      :title=\"$t('NOTIFICATIONS_PAGE.LIST.404')\"\n    />\n    <div v-if=\"isLoading\" class=\"notifications--loader\">\n      <spinner />\n      <span>{{ $t('NOTIFICATIONS_PAGE.LIST.LOADING_MESSAGE') }}</span>\n    </div>\n  </section>\n</template>\n\n<script>\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport Spinner from 'shared/components/Spinner.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from '../../../../mixins/time';\nimport { mapGetters } from 'vuex';\n\nexport default {\n  components: {\n    Thumbnail,\n    Spinner,\n    EmptyState,\n  },\n  mixins: [timeMixin],\n  props: {\n    notifications: {\n      type: Array,\n      default: () => [],\n    },\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    isUpdating: {\n      type: Boolean,\n      default: false,\n    },\n    onClickNotification: {\n      type: Function,\n      default: () => {},\n    },\n    onMarkAllDoneClick: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  computed: {\n    ...mapGetters({\n      notificationMetadata: 'notifications/getMeta',\n    }),\n    showEmptyResult() {\n      return !this.isLoading && this.notifications.length === 0;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~dashboard/assets/scss/mixins';\n\n.notification--title {\n  font-size: var(--font-size-small);\n  margin: 0;\n}\n\n.notification--table-wrap {\n  @include scroll-on-hover;\n  flex: 1 1;\n  height: 100%;\n  padding: var(--space-large) var(--space-larger);\n}\n\n.notifications-table {\n  > tbody {\n    > tr {\n      cursor: pointer;\n\n      &:hover {\n        background: var(--b-50);\n      }\n\n      &.is-active {\n        background: var(--b-100);\n      }\n\n      > td {\n        &.conversation-count-item {\n          padding-left: var(--space-medium);\n        }\n      }\n\n      &:last-child {\n        border-bottom: 0;\n      }\n    }\n  }\n}\n\n.is-unread {\n  font-weight: var(--font-weight-bold);\n}\n\n.notifications--loader {\n  font-size: var(--font-size-default);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: var(--space-big);\n}\n\n.notification--unread-indicator {\n  width: var(--space-one);\n  height: var(--space-one);\n  border-radius: 50%;\n  background: var(--color-woot);\n}\n\n.notification--created-at {\n  color: var(--s-700);\n  font-size: var(--font-size-mini);\n}\n\n.notification--type {\n  font-size: var(--font-size-mini);\n}\n\n.thumbnail--column {\n  width: 5.2rem;\n}\n\n.timestamp--column {\n  min-width: 13rem;\n  text-align: right;\n}\n\n.notification-contant--wrap {\n  flex-direction: column;\n  max-width: 50rem;\n}\n\n.notification--message-title {\n  color: var(--s-700);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/notifications/components"},"metadata":{},"sourceType":"module"}