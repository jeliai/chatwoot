{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport hookMixin from './hookMixin';\nexport default {\n  mixins: [hookMixin],\n  props: {\n    integration: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    hookHeaders: function hookHeaders() {\n      return this.integration.visible_properties;\n    },\n    hooks: function hooks() {\n      var _this = this;\n\n      if (!this.hasConnectedHooks) {\n        return [];\n      }\n\n      var hooks = this.integration.hooks;\n      return hooks.map(function (hook) {\n        return _objectSpread(_objectSpread({}, hook), {}, {\n          id: hook.id,\n          properties: _this.hookHeaders.map(function (property) {\n            return hook.settings[property] ? hook.settings[property] : '--';\n          })\n        });\n      });\n    }\n  }),\n  mounted: function mounted() {},\n  methods: {\n    inboxName: function inboxName(hook) {\n      return hook.inbox ? hook.inbox.name : '';\n    }\n  }\n};","map":{"version":3,"sources":["MultipleIntegrationHooks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,SAAA,CADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AADA,GAFA;AAQA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,YAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,WAJA,yBAIA;AACA,aAAA,KAAA,WAAA,CAAA,kBAAA;AACA,KANA;AAOA,IAAA,KAPA,mBAOA;AAAA;;AACA,UAAA,CAAA,KAAA,iBAAA,EAAA;AACA,eAAA,EAAA;AACA;;AACA,UAAA,KAAA,GAAA,KAAA,WAAA,CAAA,KAAA;AACA,aAAA,KAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,+CACA,IADA;AAEA,UAAA,EAAA,EAAA,IAAA,CAAA,EAFA;AAGA,UAAA,UAAA,EAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAAA,UAAA,QAAA;AAAA,mBACA,IAAA,CAAA,QAAA,CAAA,QAAA,IAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,IADA;AAAA,WAAA;AAHA;AAAA,OAAA,CAAA;AAOA;AAnBA,IARA;AA6BA,EAAA,OA7BA,qBA6BA,CAAA,CA7BA;AA8BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,IADA,EACA;AACA,aAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,GAAA,EAAA;AACA;AAHA;AA9BA,CAAA","sourcesContent":["<template>\n  <div class=\"row \">\n    <div class=\"small-8 columns with-right-space \">\n      <table v-if=\"hasConnectedHooks\" class=\"woot-table\">\n        <thead>\n          <th v-for=\"hookHeader in hookHeaders\" :key=\"hookHeader\">\n            {{ hookHeader }}\n          </th>\n          <th v-if=\"isHookTypeInbox\">\n            {{ $t('INTEGRATION_APPS.LIST.INBOX') }}\n          </th>\n        </thead>\n        <tbody>\n          <tr v-for=\"hook in hooks\" :key=\"hook.id\">\n            <td\n              v-for=\"property in hook.properties\"\n              :key=\"property\"\n              class=\"hook-item\"\n            >\n              {{ property }}\n            </td>\n            <td v-if=\"isHookTypeInbox\" class=\"hook-item\">\n              {{ inboxName(hook) }}\n            </td>\n            <td class=\"button-wrapper\">\n              <woot-button\n                v-tooltip.top=\"$t('INTEGRATION_APPS.LIST.DELETE.BUTTON_TEXT')\"\n                variant=\"smooth\"\n                color-scheme=\"alert\"\n                size=\"tiny\"\n                icon=\"dismiss-circle\"\n                class-names=\"grey-btn\"\n                @click=\"$emit('delete', hook)\"\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p v-else class=\"no-items-error-message\">\n        {{\n          $t('INTEGRATION_APPS.NO_HOOK_CONFIGURED', {\n            integrationId: integration.id,\n          })\n        }}\n      </p>\n    </div>\n    <div class=\"small-4 columns\">\n      <p>\n        <b>{{ integration.name }}</b>\n      </p>\n      <p\n        v-dompurify-html=\"\n          $t(\n            `INTEGRATION_APPS.SIDEBAR_DESCRIPTION.${integration.name.toUpperCase()}`,\n            { installationName: globalConfig.installationName }\n          )\n        \"\n      />\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport hookMixin from './hookMixin';\nexport default {\n  mixins: [hookMixin],\n  props: {\n    integration: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n    }),\n    hookHeaders() {\n      return this.integration.visible_properties;\n    },\n    hooks() {\n      if (!this.hasConnectedHooks) {\n        return [];\n      }\n      const { hooks } = this.integration;\n      return hooks.map(hook => ({\n        ...hook,\n        id: hook.id,\n        properties: this.hookHeaders.map(property =>\n          hook.settings[property] ? hook.settings[property] : '--'\n        ),\n      }));\n    },\n  },\n  mounted() {},\n  methods: {\n    inboxName(hook) {\n      return hook.inbox ? hook.inbox.name : '';\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.hook-item {\n  word-break: break-word;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/integrationapps"},"metadata":{},"sourceType":"module"}