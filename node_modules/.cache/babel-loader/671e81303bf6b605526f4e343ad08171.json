{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport Thumbnail from '../../../../components/widgets/Thumbnail';\nimport AddAgent from './AddAgent';\nimport EditAgent from './EditAgent';\nexport default {\n  components: {\n    AddAgent: AddAgent,\n    EditAgent: EditAgent,\n    Thumbnail: Thumbnail\n  },\n  mixins: [globalConfigMixin],\n  data: function data() {\n    return {\n      loading: {},\n      showAddPopup: false,\n      showDeletePopup: false,\n      showEditPopup: false,\n      agentAPI: {\n        message: ''\n      },\n      currentAgent: {}\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    agentList: 'agents/getAgents',\n    uiFlags: 'agents/getUIFlags',\n    currentUserId: 'getCurrentUserID',\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    deleteConfirmText: function deleteConfirmText() {\n      return \"\".concat(this.$t('AGENT_MGMT.DELETE.CONFIRM.YES'), \" \").concat(this.currentAgent.name);\n    },\n    deleteRejectText: function deleteRejectText() {\n      return \"\".concat(this.$t('AGENT_MGMT.DELETE.CONFIRM.NO'), \" \").concat(this.currentAgent.name);\n    },\n    deleteMessage: function deleteMessage() {\n      return \" \".concat(this.currentAgent.name, \"?\");\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('agents/get');\n  },\n  methods: {\n    showEditAction: function showEditAction(agent) {\n      return this.currentUserId !== agent.id;\n    },\n    showDeleteAction: function showDeleteAction(agent) {\n      if (this.currentUserId === agent.id) {\n        return false;\n      }\n\n      if (!agent.confirmed) {\n        return true;\n      }\n\n      if (agent.role === 'administrator') {\n        return this.verifiedAdministrators().length !== 1;\n      }\n\n      return true;\n    },\n    verifiedAdministrators: function verifiedAdministrators() {\n      return this.agentList.filter(function (agent) {\n        return agent.role === 'administrator' && agent.confirmed;\n      });\n    },\n    // Edit Function\n    openAddPopup: function openAddPopup() {\n      this.showAddPopup = true;\n    },\n    hideAddPopup: function hideAddPopup() {\n      this.showAddPopup = false;\n    },\n    // Edit Function\n    openEditPopup: function openEditPopup(agent) {\n      this.showEditPopup = true;\n      this.currentAgent = agent;\n    },\n    hideEditPopup: function hideEditPopup() {\n      this.showEditPopup = false;\n    },\n    // Delete Function\n    openDeletePopup: function openDeletePopup(agent) {\n      this.showDeletePopup = true;\n      this.currentAgent = agent;\n    },\n    closeDeletePopup: function closeDeletePopup() {\n      this.showDeletePopup = false;\n    },\n    confirmDeletion: function confirmDeletion() {\n      this.loading[this.currentAgent.id] = true;\n      this.closeDeletePopup();\n      this.deleteAgent(this.currentAgent.id);\n    },\n    deleteAgent: function deleteAgent(id) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('agents/delete', id);\n\n              case 3:\n                _this.showAlert(_this.$t('AGENT_MGMT.DELETE.API.SUCCESS_MESSAGE'));\n\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('AGENT_MGMT.DELETE.API.ERROR_MESSAGE'));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }))();\n    },\n    // Show SnackBar\n    showAlert: function showAlert(message) {\n      // Reset loading, current selected agent\n      this.loading[this.currentAgent.id] = false;\n      this.currentAgent = {}; // Show message\n\n      this.agentAPI.message = message;\n      bus.$emit('newToastMessage', message);\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <woot-button\n      color-scheme=\"success\"\n      class-names=\"button--fixed-right-top\"\n      icon=\"add-circle\"\n      @click=\"openAddPopup()\"\n    >\n      {{ $t('AGENT_MGMT.HEADER_BTN_TXT') }}\n    </woot-button>\n\n    <!-- List Agents -->\n    <div class=\"row\">\n      <div class=\"small-8 columns with-right-space \">\n        <woot-loading-state\n          v-if=\"uiFlags.isFetching\"\n          :message=\"$t('AGENT_MGMT.LOADING')\"\n        />\n        <div v-else>\n          <p v-if=\"!agentList.length\">\n            {{ $t('AGENT_MGMT.LIST.404') }}\n          </p>\n          <table v-else class=\"woot-table\">\n            <tbody>\n              <tr v-for=\"(agent, index) in agentList\" :key=\"agent.email\">\n                <!-- Gravtar Image -->\n                <td>\n                  <thumbnail\n                    :src=\"agent.thumbnail\"\n                    class=\"columns\"\n                    :username=\"agent.name\"\n                    size=\"40px\"\n                    :status=\"agent.availability_status\"\n                  />\n                </td>\n                <!-- Agent Name + Email -->\n                <td>\n                  <span class=\"agent-name\">\n                    {{ agent.name }}\n                  </span>\n                  <span>{{ agent.email }}</span>\n                </td>\n                <!-- Agent Role + Verification Status -->\n                <td>\n                  <span class=\"agent-name\">\n                    {{\n                      $t(`AGENT_MGMT.AGENT_TYPES.${agent.role.toUpperCase()}`)\n                    }}\n                  </span>\n                  <span v-if=\"agent.confirmed\">\n                    {{ $t('AGENT_MGMT.LIST.VERIFIED') }}\n                  </span>\n                  <span v-if=\"!agent.confirmed\">\n                    {{ $t('AGENT_MGMT.LIST.VERIFICATION_PENDING') }}\n                  </span>\n                </td>\n                <!-- Actions -->\n                <td>\n                  <div class=\"button-wrapper\">\n                    <woot-button\n                      v-if=\"showEditAction(agent)\"\n                      v-tooltip.top=\"$t('AGENT_MGMT.EDIT.BUTTON_TEXT')\"\n                      variant=\"smooth\"\n                      size=\"tiny\"\n                      color-scheme=\"secondary\"\n                      icon=\"edit\"\n                      class-names=\"grey-btn\"\n                      @click=\"openEditPopup(agent)\"\n                    />\n                    <woot-button\n                      v-if=\"showDeleteAction(agent)\"\n                      v-tooltip.top=\"$t('AGENT_MGMT.DELETE.BUTTON_TEXT')\"\n                      variant=\"smooth\"\n                      color-scheme=\"alert\"\n                      size=\"tiny\"\n                      icon=\"dismiss-circle\"\n                      class-names=\"grey-btn\"\n                      :is-loading=\"loading[agent.id]\"\n                      @click=\"openDeletePopup(agent, index)\"\n                    />\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <div class=\"small-4 columns\">\n        <span\n          v-dompurify-html=\"\n            useInstallationName(\n              $t('AGENT_MGMT.SIDEBAR_TXT'),\n              globalConfig.installationName\n            )\n          \"\n        />\n      </div>\n    </div>\n    <!-- Add Agent -->\n    <woot-modal :show.sync=\"showAddPopup\" :on-close=\"hideAddPopup\">\n      <add-agent :on-close=\"hideAddPopup\" />\n    </woot-modal>\n    <!-- Edit Agent -->\n    <woot-modal :show.sync=\"showEditPopup\" :on-close=\"hideEditPopup\">\n      <edit-agent\n        v-if=\"showEditPopup\"\n        :id=\"currentAgent.id\"\n        :name=\"currentAgent.name\"\n        :type=\"currentAgent.role\"\n        :email=\"currentAgent.email\"\n        :on-close=\"hideEditPopup\"\n      />\n    </woot-modal>\n    <!-- Delete Agent -->\n    <woot-delete-modal\n      :show.sync=\"showDeletePopup\"\n      :on-close=\"closeDeletePopup\"\n      :on-confirm=\"confirmDeletion\"\n      :title=\"$t('AGENT_MGMT.DELETE.CONFIRM.TITLE')\"\n      :message=\"$t('AGENT_MGMT.DELETE.CONFIRM.MESSAGE')\"\n      :message-value=\"deleteMessage\"\n      :confirm-text=\"deleteConfirmText\"\n      :reject-text=\"deleteRejectText\"\n    />\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport Thumbnail from '../../../../components/widgets/Thumbnail';\nimport AddAgent from './AddAgent';\nimport EditAgent from './EditAgent';\n\nexport default {\n  components: {\n    AddAgent,\n    EditAgent,\n    Thumbnail,\n  },\n  mixins: [globalConfigMixin],\n  data() {\n    return {\n      loading: {},\n      showAddPopup: false,\n      showDeletePopup: false,\n      showEditPopup: false,\n      agentAPI: {\n        message: '',\n      },\n      currentAgent: {},\n    };\n  },\n  computed: {\n    ...mapGetters({\n      agentList: 'agents/getAgents',\n      uiFlags: 'agents/getUIFlags',\n      currentUserId: 'getCurrentUserID',\n      globalConfig: 'globalConfig/get',\n    }),\n    deleteConfirmText() {\n      return `${this.$t('AGENT_MGMT.DELETE.CONFIRM.YES')} ${\n        this.currentAgent.name\n      }`;\n    },\n    deleteRejectText() {\n      return `${this.$t('AGENT_MGMT.DELETE.CONFIRM.NO')} ${\n        this.currentAgent.name\n      }`;\n    },\n    deleteMessage() {\n      return ` ${this.currentAgent.name}?`;\n    },\n  },\n  mounted() {\n    this.$store.dispatch('agents/get');\n  },\n  methods: {\n    showEditAction(agent) {\n      return this.currentUserId !== agent.id;\n    },\n    showDeleteAction(agent) {\n      if (this.currentUserId === agent.id) {\n        return false;\n      }\n\n      if (!agent.confirmed) {\n        return true;\n      }\n\n      if (agent.role === 'administrator') {\n        return this.verifiedAdministrators().length !== 1;\n      }\n      return true;\n    },\n    verifiedAdministrators() {\n      return this.agentList.filter(\n        agent => agent.role === 'administrator' && agent.confirmed\n      );\n    },\n    // Edit Function\n    openAddPopup() {\n      this.showAddPopup = true;\n    },\n    hideAddPopup() {\n      this.showAddPopup = false;\n    },\n\n    // Edit Function\n    openEditPopup(agent) {\n      this.showEditPopup = true;\n      this.currentAgent = agent;\n    },\n    hideEditPopup() {\n      this.showEditPopup = false;\n    },\n\n    // Delete Function\n    openDeletePopup(agent) {\n      this.showDeletePopup = true;\n      this.currentAgent = agent;\n    },\n    closeDeletePopup() {\n      this.showDeletePopup = false;\n    },\n    confirmDeletion() {\n      this.loading[this.currentAgent.id] = true;\n      this.closeDeletePopup();\n      this.deleteAgent(this.currentAgent.id);\n    },\n    async deleteAgent(id) {\n      try {\n        await this.$store.dispatch('agents/delete', id);\n        this.showAlert(this.$t('AGENT_MGMT.DELETE.API.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('AGENT_MGMT.DELETE.API.ERROR_MESSAGE'));\n      }\n    },\n    // Show SnackBar\n    showAlert(message) {\n      // Reset loading, current selected agent\n      this.loading[this.currentAgent.id] = false;\n      this.currentAgent = {};\n      // Show message\n      this.agentAPI.message = message;\n      bus.$emit('newToastMessage', message);\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/agents"},"metadata":{},"sourceType":"module"}