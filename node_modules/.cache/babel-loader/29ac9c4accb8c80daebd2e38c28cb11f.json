{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nvar opts = ['includePrerelease', 'loose', 'rtl'];\n\nvar parseOptions = function parseOptions(options) {\n  return !options ? {} : _typeof(options) !== 'object' ? {\n    loose: true\n  } : opts.filter(function (k) {\n    return options[k];\n  }).reduce(function (options, k) {\n    options[k] = true;\n    return options;\n  }, {});\n};\n\nmodule.exports = parseOptions;","map":null,"metadata":{},"sourceType":"module"}