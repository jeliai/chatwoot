{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexport function klona(x) {\n  if (_typeof(x) !== 'object') return x;\n  var k,\n      tmp,\n      str = Object.prototype.toString.call(x);\n\n  if (str === '[object Object]') {\n    if (x.constructor !== Object && typeof x.constructor === 'function') {\n      tmp = new x.constructor();\n\n      for (k in x) {\n        if (x.hasOwnProperty(k) && tmp[k] !== x[k]) {\n          tmp[k] = klona(x[k]);\n        }\n      }\n    } else {\n      tmp = {}; // null\n\n      for (k in x) {\n        if (k === '__proto__') {\n          Object.defineProperty(tmp, k, {\n            value: klona(x[k]),\n            configurable: true,\n            enumerable: true,\n            writable: true\n          });\n        } else {\n          tmp[k] = klona(x[k]);\n        }\n      }\n    }\n\n    return tmp;\n  }\n\n  if (str === '[object Array]') {\n    k = x.length;\n\n    for (tmp = Array(k); k--;) {\n      tmp[k] = klona(x[k]);\n    }\n\n    return tmp;\n  }\n\n  if (str === '[object Date]') {\n    return new Date(+x);\n  }\n\n  if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n    tmp.lastIndex = x.lastIndex;\n    return tmp;\n  }\n\n  return x;\n}","map":null,"metadata":{},"sourceType":"module"}