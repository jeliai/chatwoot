{"ast":null,"code":"var _mutations;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport Vue from 'vue';\nimport * as types from '../mutation-types';\nimport ContactAPI from '../../api/contacts';\nimport ConversationApi from '../../api/conversations';\nvar state = {\n  records: {},\n  uiFlags: {\n    isFetching: false\n  }\n};\nexport var getters = {\n  getUIFlags: function getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getContactConversation: function getContactConversation($state) {\n    return function (id) {\n      return $state.records[Number(id)] || [];\n    };\n  }\n};\nexport var actions = {\n  create: function () {\n    var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, params) {\n      var commit, inboxId, message, contactId, sourceId, mailSubject, assigneeId, _yield$ConversationAp, data;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n                isCreating: true\n              });\n              inboxId = params.inboxId, message = params.message, contactId = params.contactId, sourceId = params.sourceId, mailSubject = params.mailSubject, assigneeId = params.assigneeId;\n              _context.prev = 3;\n              _context.next = 6;\n              return ConversationApi.create({\n                inbox_id: inboxId,\n                contact_id: contactId,\n                source_id: sourceId,\n                additional_attributes: {\n                  mail_subject: mailSubject\n                },\n                message: message,\n                assignee_id: assigneeId\n              });\n\n            case 6:\n              _yield$ConversationAp = _context.sent;\n              data = _yield$ConversationAp.data;\n              commit(types.default.ADD_CONTACT_CONVERSATION, {\n                id: contactId,\n                data: data\n              });\n              return _context.abrupt(\"return\", data);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              throw new Error(_context.t0);\n\n            case 15:\n              _context.prev = 15;\n              commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n                isCreating: false\n              });\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 12, 15, 18]]);\n    }));\n\n    function create(_x, _x2) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }(),\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, contactId) {\n      var commit, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n                isFetching: true\n              });\n              _context2.prev = 2;\n              _context2.next = 5;\n              return ContactAPI.getConversations(contactId);\n\n            case 5:\n              response = _context2.sent;\n              commit(types.default.SET_CONTACT_CONVERSATIONS, {\n                id: contactId,\n                data: response.data.payload\n              });\n              commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n                isFetching: false\n              });\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n                isFetching: false\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 10]]);\n    }));\n\n    function get(_x3, _x4) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }()\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, function ($state, data) {\n  $state.uiFlags = _objectSpread(_objectSpread({}, $state.uiFlags), data);\n}), _defineProperty(_mutations, types.default.SET_CONTACT_CONVERSATIONS, function ($state, _ref3) {\n  var id = _ref3.id,\n      data = _ref3.data;\n  Vue.set($state.records, id, data);\n}), _defineProperty(_mutations, types.default.ADD_CONTACT_CONVERSATION, function ($state, _ref4) {\n  var id = _ref4.id,\n      data = _ref4.data;\n  var conversations = $state.records[id] || [];\n\n  var updatedConversations = _toConsumableArray(conversations);\n\n  var index = conversations.findIndex(function (conversation) {\n    return conversation.id === data.id;\n  });\n\n  if (index !== -1) {\n    updatedConversations[index] = _objectSpread(_objectSpread({}, conversations[index]), data);\n  } else {\n    updatedConversations.push(data);\n  }\n\n  Vue.set($state.records, id, updatedConversations);\n}), _defineProperty(_mutations, types.default.DELETE_CONTACT_CONVERSATION, function ($state, id) {\n  Vue.delete($state.records, id);\n}), _mutations);\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/contactConversations.js"],"names":["Vue","types","ContactAPI","ConversationApi","state","records","uiFlags","isFetching","getters","getUIFlags","$state","getContactConversation","id","Number","actions","create","params","commit","default","SET_CONTACT_CONVERSATIONS_UI_FLAG","isCreating","inboxId","message","contactId","sourceId","mailSubject","assigneeId","inbox_id","contact_id","source_id","additional_attributes","mail_subject","assignee_id","data","ADD_CONTACT_CONVERSATION","Error","get","getConversations","response","SET_CONTACT_CONVERSATIONS","payload","mutations","set","conversations","updatedConversations","index","findIndex","conversation","push","DELETE_CONTACT_CONVERSATION","delete","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,mBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE,EADG;AAEZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL;AAFG,CAAd;AAOA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,UADqB,sBACVC,MADU,EACF;AACjB,WAAOA,MAAM,CAACJ,OAAd;AACD,GAHoB;AAIrBK,EAAAA,sBAAsB,EAAE,gCAAAD,MAAM;AAAA,WAAI,UAAAE,EAAE,EAAI;AACtC,aAAOF,MAAM,CAACL,OAAP,CAAeQ,MAAM,CAACD,EAAD,CAArB,KAA8B,EAArC;AACD,KAF6B;AAAA;AAJT,CAAhB;AASP,OAAO,IAAME,OAAO,GAAG;AACrBC,EAAAA,MAAM;AAAA,0EAAE,uBAAmBC,MAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,MAAT,QAASA,MAAT;AACNA,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcC,iCAAf,EAAkD;AACtDC,gBAAAA,UAAU,EAAE;AAD0C,eAAlD,CAAN;AAIEC,cAAAA,OALI,GAWFL,MAXE,CAKJK,OALI,EAMJC,OANI,GAWFN,MAXE,CAMJM,OANI,EAOJC,SAPI,GAWFP,MAXE,CAOJO,SAPI,EAQJC,QARI,GAWFR,MAXE,CAQJQ,QARI,EASJC,WATI,GAWFT,MAXE,CASJS,WATI,EAUJC,UAVI,GAWFV,MAXE,CAUJU,UAVI;AAAA;AAAA;AAAA,qBAamBvB,eAAe,CAACY,MAAhB,CAAuB;AAC5CY,gBAAAA,QAAQ,EAAEN,OADkC;AAE5CO,gBAAAA,UAAU,EAAEL,SAFgC;AAG5CM,gBAAAA,SAAS,EAAEL,QAHiC;AAI5CM,gBAAAA,qBAAqB,EAAE;AACrBC,kBAAAA,YAAY,EAAEN;AADO,iBAJqB;AAO5CH,gBAAAA,OAAO,EAAPA,OAP4C;AAQ5CU,gBAAAA,WAAW,EAAEN;AAR+B,eAAvB,CAbnB;;AAAA;AAAA;AAaIO,cAAAA,IAbJ,yBAaIA,IAbJ;AAuBJhB,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcgB,wBAAf,EAAyC;AAC7CtB,gBAAAA,EAAE,EAAEW,SADyC;AAE7CU,gBAAAA,IAAI,EAAJA;AAF6C,eAAzC,CAAN;AAvBI,+CA2BGA,IA3BH;;AAAA;AAAA;AAAA;AAAA,oBA6BE,IAAIE,KAAJ,aA7BF;;AAAA;AAAA;AA+BJlB,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcC,iCAAf,EAAkD;AACtDC,gBAAAA,UAAU,EAAE;AAD0C,eAAlD,CAAN;AA/BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADe;AAqCrBgB,EAAAA,GAAG;AAAA,uEAAE,yBAAmBb,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASN,cAAAA,MAAT,SAASA,MAAT;AACHA,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcC,iCAAf,EAAkD;AACtDZ,gBAAAA,UAAU,EAAE;AAD0C,eAAlD,CAAN;AADG;AAAA;AAAA,qBAKsBL,UAAU,CAACmC,gBAAX,CAA4Bd,SAA5B,CALtB;;AAAA;AAKKe,cAAAA,QALL;AAMDrB,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcqB,yBAAf,EAA0C;AAC9C3B,gBAAAA,EAAE,EAAEW,SAD0C;AAE9CU,gBAAAA,IAAI,EAAEK,QAAQ,CAACL,IAAT,CAAcO;AAF0B,eAA1C,CAAN;AAIAvB,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcC,iCAAf,EAAkD;AACtDZ,gBAAAA,UAAU,EAAE;AAD0C,eAAlD,CAAN;AAVC;AAAA;;AAAA;AAAA;AAAA;AAcDU,cAAAA,MAAM,CAAChB,KAAK,CAACiB,OAAN,CAAcC,iCAAf,EAAkD;AACtDZ,gBAAAA,UAAU,EAAE;AAD0C,eAAlD,CAAN;;AAdC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AArCkB,CAAhB;AA0DP,OAAO,IAAMkC,SAAS,iDACnBxC,KAAK,CAACiB,OAAN,CAAcC,iCADK,YAC8BT,MAD9B,EACsCuB,IADtC,EAC4C;AAC9DvB,EAAAA,MAAM,CAACJ,OAAP,mCACKI,MAAM,CAACJ,OADZ,GAEK2B,IAFL;AAID,CANmB,+BAOnBhC,KAAK,CAACiB,OAAN,CAAcqB,yBAPK,EAOuB,UAAC7B,MAAD,SAA0B;AAAA,MAAfE,EAAe,SAAfA,EAAe;AAAA,MAAXqB,IAAW,SAAXA,IAAW;AACnEjC,EAAAA,GAAG,CAAC0C,GAAJ,CAAQhC,MAAM,CAACL,OAAf,EAAwBO,EAAxB,EAA4BqB,IAA5B;AACD,CATmB,+BAUnBhC,KAAK,CAACiB,OAAN,CAAcgB,wBAVK,EAUsB,UAACxB,MAAD,SAA0B;AAAA,MAAfE,EAAe,SAAfA,EAAe;AAAA,MAAXqB,IAAW,SAAXA,IAAW;AAClE,MAAMU,aAAa,GAAGjC,MAAM,CAACL,OAAP,CAAeO,EAAf,KAAsB,EAA5C;;AAEA,MAAMgC,oBAAoB,sBAAOD,aAAP,CAA1B;;AACA,MAAME,KAAK,GAAGF,aAAa,CAACG,SAAd,CACZ,UAAAC,YAAY;AAAA,WAAIA,YAAY,CAACnC,EAAb,KAAoBqB,IAAI,CAACrB,EAA7B;AAAA,GADA,CAAd;;AAIA,MAAIiC,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,IAAAA,oBAAoB,CAACC,KAAD,CAApB,mCAAmCF,aAAa,CAACE,KAAD,CAAhD,GAA4DZ,IAA5D;AACD,GAFD,MAEO;AACLW,IAAAA,oBAAoB,CAACI,IAArB,CAA0Bf,IAA1B;AACD;;AAEDjC,EAAAA,GAAG,CAAC0C,GAAJ,CAAQhC,MAAM,CAACL,OAAf,EAAwBO,EAAxB,EAA4BgC,oBAA5B;AACD,CAzBmB,+BA0BnB3C,KAAK,CAACiB,OAAN,CAAc+B,2BA1BK,EA0ByB,UAACvC,MAAD,EAASE,EAAT,EAAgB;AAC3DZ,EAAAA,GAAG,CAACkD,MAAJ,CAAWxC,MAAM,CAACL,OAAlB,EAA2BO,EAA3B;AACD,CA5BmB,cAAf;AA+BP,eAAe;AACbuC,EAAAA,UAAU,EAAE,IADC;AAEb/C,EAAAA,KAAK,EAALA,KAFa;AAGbI,EAAAA,OAAO,EAAPA,OAHa;AAIbM,EAAAA,OAAO,EAAPA,OAJa;AAKb2B,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import Vue from 'vue';\nimport * as types from '../mutation-types';\nimport ContactAPI from '../../api/contacts';\nimport ConversationApi from '../../api/conversations';\n\nconst state = {\n  records: {},\n  uiFlags: {\n    isFetching: false,\n  },\n};\n\nexport const getters = {\n  getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getContactConversation: $state => id => {\n    return $state.records[Number(id)] || [];\n  },\n};\n\nexport const actions = {\n  create: async ({ commit }, params) => {\n    commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n      isCreating: true,\n    });\n    const {\n      inboxId,\n      message,\n      contactId,\n      sourceId,\n      mailSubject,\n      assigneeId,\n    } = params;\n    try {\n      const { data } = await ConversationApi.create({\n        inbox_id: inboxId,\n        contact_id: contactId,\n        source_id: sourceId,\n        additional_attributes: {\n          mail_subject: mailSubject,\n        },\n        message,\n        assignee_id: assigneeId,\n      });\n      commit(types.default.ADD_CONTACT_CONVERSATION, {\n        id: contactId,\n        data,\n      });\n      return data;\n    } catch (error) {\n      throw new Error(error);\n    } finally {\n      commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n        isCreating: false,\n      });\n    }\n  },\n  get: async ({ commit }, contactId) => {\n    commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n      isFetching: true,\n    });\n    try {\n      const response = await ContactAPI.getConversations(contactId);\n      commit(types.default.SET_CONTACT_CONVERSATIONS, {\n        id: contactId,\n        data: response.data.payload,\n      });\n      commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n        isFetching: false,\n      });\n    } catch (error) {\n      commit(types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG, {\n        isFetching: false,\n      });\n    }\n  },\n};\n\nexport const mutations = {\n  [types.default.SET_CONTACT_CONVERSATIONS_UI_FLAG]($state, data) {\n    $state.uiFlags = {\n      ...$state.uiFlags,\n      ...data,\n    };\n  },\n  [types.default.SET_CONTACT_CONVERSATIONS]: ($state, { id, data }) => {\n    Vue.set($state.records, id, data);\n  },\n  [types.default.ADD_CONTACT_CONVERSATION]: ($state, { id, data }) => {\n    const conversations = $state.records[id] || [];\n\n    const updatedConversations = [...conversations];\n    const index = conversations.findIndex(\n      conversation => conversation.id === data.id\n    );\n\n    if (index !== -1) {\n      updatedConversations[index] = { ...conversations[index], ...data };\n    } else {\n      updatedConversations.push(data);\n    }\n\n    Vue.set($state.records, id, updatedConversations);\n  },\n  [types.default.DELETE_CONTACT_CONVERSATION]: ($state, id) => {\n    Vue.delete($state.records, id);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}