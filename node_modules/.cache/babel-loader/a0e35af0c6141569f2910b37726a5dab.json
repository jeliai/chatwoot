{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CustomButton from 'shared/components/Button';\nimport Spinner from 'shared/components/Spinner';\nimport { mapGetters } from 'vuex';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nimport { isEmptyObject } from 'widget/helpers/utils';\nimport routerMixin from 'widget/mixins/routerMixin';\nimport darkModeMixin from 'widget/mixins/darkModeMixin';\nexport default {\n  components: {\n    CustomButton: CustomButton,\n    Spinner: Spinner\n  },\n  mixins: [routerMixin, darkModeMixin],\n  props: {\n    options: {\n      type: Object,\n      default: function _default() {}\n    },\n    disableContactFields: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      locale: this.$root.$i18n.locale,\n      message: '',\n      formValues: {},\n      labels: {\n        emailAddress: 'EMAIL_ADDRESS',\n        fullName: 'FULL_NAME',\n        phoneNumber: 'PHONE_NUMBER'\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    widgetColor: 'appConfig/getWidgetColor',\n    isCreating: 'conversation/getIsCreating',\n    activeCampaign: 'campaign/getActiveCampaign',\n    currentUser: 'contacts/getCurrentUser'\n  })), {}, {\n    textColor: function textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hasActiveCampaign: function hasActiveCampaign() {\n      return !isEmptyObject(this.activeCampaign);\n    },\n    shouldShowHeaderMessage: function shouldShowHeaderMessage() {\n      return this.hasActiveCampaign || this.options.preChatMessage;\n    },\n    headerMessage: function headerMessage() {\n      if (this.hasActiveCampaign) {\n        return this.$t('PRE_CHAT_FORM.CAMPAIGN_HEADER');\n      }\n\n      return this.options.preChatMessage;\n    },\n    preChatFields: function preChatFields() {\n      return this.disableContactFields ? [] : this.options.preChatFields;\n    },\n    filteredPreChatFields: function filteredPreChatFields() {\n      var isUserEmailAvailable = !!this.currentUser.email;\n      var isUserPhoneNumberAvailable = !!this.currentUser.phone_number;\n      var isUserIdentifierAvailable = !!this.currentUser.identifier;\n      var isUserNameAvailable = !!(isUserIdentifierAvailable || isUserEmailAvailable || isUserPhoneNumberAvailable);\n      return this.preChatFields.filter(function (field) {\n        if (isUserEmailAvailable && field.name === 'emailAddress') {\n          return false;\n        }\n\n        if (isUserPhoneNumberAvailable && field.name === 'phoneNumber') {\n          return false;\n        }\n\n        if (isUserNameAvailable && field.name === 'fullName') {\n          return false;\n        }\n\n        return true;\n      });\n    },\n    enabledPreChatFields: function enabledPreChatFields() {\n      var _this = this;\n\n      return this.filteredPreChatFields.filter(function (field) {\n        return field.enabled;\n      }).map(function (field) {\n        return _objectSpread(_objectSpread({}, field), {}, {\n          type: _this.findFieldType(field.type)\n        });\n      });\n    },\n    conversationCustomAttributes: function conversationCustomAttributes() {\n      var _this2 = this;\n\n      var conversationAttributes = {};\n      this.enabledPreChatFields.forEach(function (field) {\n        if (field.field_type === 'conversation_attribute') {\n          conversationAttributes = _objectSpread(_objectSpread({}, conversationAttributes), {}, _defineProperty({}, field.name, _this2.getValue(field)));\n        }\n      });\n      return conversationAttributes;\n    },\n    contactCustomAttributes: function contactCustomAttributes() {\n      var _this3 = this;\n\n      var contactAttributes = {};\n      this.enabledPreChatFields.forEach(function (field) {\n        if (field.field_type === 'contact_attribute') {\n          contactAttributes = _objectSpread(_objectSpread({}, contactAttributes), {}, _defineProperty({}, field.name, _this3.getValue(field)));\n        }\n      });\n      return contactAttributes;\n    },\n    inputStyles: function inputStyles() {\n      return \"mt-2 border rounded w-full py-2 px-3 text-slate-700 outline-none\";\n    },\n    isInputDarkOrLightMode: function isInputDarkOrLightMode() {\n      return \"\".concat(this.$dm('bg-white', 'dark:bg-slate-600'), \" \").concat(this.$dm('text-slate-700', 'dark:text-slate-50'));\n    },\n    inputBorderColor: function inputBorderColor() {\n      return \"\".concat(this.$dm('border-black-200', 'dark:border-black-500'));\n    }\n  }),\n  methods: {\n    labelClass: function labelClass(context) {\n      var hasErrors = context.hasErrors;\n\n      if (!hasErrors) {\n        return \"text-xs font-medium \".concat(this.$dm('text-black-800', 'dark:text-slate-50'));\n      }\n\n      return \"text-xs font-medium \".concat(this.$dm('text-red-400', 'dark:text-red-400'));\n    },\n    inputClass: function inputClass(context) {\n      var hasErrors = context.hasErrors,\n          classification = context.classification,\n          type = context.type;\n\n      if (classification === 'box' && type === 'checkbox') {\n        return '';\n      }\n\n      if (!hasErrors) {\n        return \"\".concat(this.inputStyles, \" hover:border-black-300 focus:border-black-300 \").concat(this.isInputDarkOrLightMode, \" \").concat(this.inputBorderColor);\n      }\n\n      return \"\".concat(this.inputStyles, \" border-red-200 hover:border-red-300 focus:border-red-300 \").concat(this.isInputDarkOrLightMode);\n    },\n    isContactFieldRequired: function isContactFieldRequired(field) {\n      return this.preChatFields.find(function (option) {\n        return option.name === field;\n      }).required;\n    },\n    getLabel: function getLabel(_ref) {\n      var name = _ref.name,\n          label = _ref.label;\n      if (this.labels[name]) return this.$t(\"PRE_CHAT_FORM.FIELDS.\".concat(this.labels[name], \".LABEL\"));\n      return label;\n    },\n    getPlaceHolder: function getPlaceHolder(_ref2) {\n      var name = _ref2.name,\n          placeholder = _ref2.placeholder;\n      if (this.labels[name]) return this.$t(\"PRE_CHAT_FORM.FIELDS.\".concat(this.labels[name], \".PLACEHOLDER\"));\n      return placeholder;\n    },\n    getValue: function getValue(_ref3) {\n      var name = _ref3.name,\n          type = _ref3.type;\n\n      if (type === 'select') {\n        return this.enabledPreChatFields.find(function (option) {\n          return option.name === name;\n        }).values[this.formValues[name]];\n      }\n\n      return this.formValues[name] || null;\n    },\n    getRequiredErrorMessage: function getRequiredErrorMessage(_ref4) {\n      var name = _ref4.name,\n          label = _ref4.label;\n      if (this.labels[name]) return this.$t(\"PRE_CHAT_FORM.FIELDS.\".concat(this.labels[name], \".REQUIRED_ERROR\"));\n      return \"\".concat(label, \" \").concat(this.$t('PRE_CHAT_FORM.IS_REQUIRED'));\n    },\n    getValidation: function getValidation(_ref5) {\n      var type = _ref5.type,\n          name = _ref5.name;\n\n      if (!this.isContactFieldRequired(name)) {\n        return '';\n      }\n\n      var validations = {\n        emailAddress: 'email',\n        phoneNumber: 'isPhoneE164OrEmpty',\n        url: 'url',\n        date: 'date',\n        text: null,\n        select: null,\n        number: null,\n        checkbox: false\n      };\n      var validationKeys = Object.keys(validations);\n      var validation = 'bail|required';\n\n      if (validationKeys.includes(name) || validationKeys.includes(type)) {\n        var validationType = validations[type] || validations[name];\n        return validationType ? \"\".concat(validation, \"|\").concat(validationType) : validation;\n      }\n\n      return '';\n    },\n    findFieldType: function findFieldType(type) {\n      if (type === 'link') {\n        return 'url';\n      }\n\n      if (type === 'list') {\n        return 'select';\n      }\n\n      return type;\n    },\n    getOptions: function getOptions(item) {\n      if (item.type === 'select') {\n        var values = {};\n        item.values.forEach(function (value, index) {\n          values = _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, index, value));\n        });\n        return values;\n      }\n\n      return null;\n    },\n    onSubmit: function onSubmit() {\n      var _this$formValues = this.formValues,\n          emailAddress = _this$formValues.emailAddress,\n          fullName = _this$formValues.fullName,\n          phoneNumber = _this$formValues.phoneNumber,\n          message = _this$formValues.message;\n      var email = this.currentUser.email;\n      this.$emit('submit', {\n        fullName: fullName,\n        phoneNumber: phoneNumber,\n        emailAddress: emailAddress || email,\n        message: message,\n        activeCampaignId: this.activeCampaign.id,\n        conversationCustomAttributes: this.conversationCustomAttributes,\n        contactCustomAttributes: this.contactCustomAttributes\n      });\n    }\n  }\n};","map":{"version":3,"sources":["Form.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <FormulateForm\n    v-model=\"formValues\"\n    class=\"flex flex-1 flex-col p-6 overflow-y-auto\"\n    @submit=\"onSubmit\"\n  >\n    <div\n      v-if=\"shouldShowHeaderMessage\"\n      class=\"mb-4 text-sm leading-5\"\n      :class=\"$dm('text-black-800', 'dark:text-slate-50')\"\n    >\n      {{ headerMessage }}\n    </div>\n    <FormulateInput\n      v-for=\"item in enabledPreChatFields\"\n      :key=\"item.name\"\n      :name=\"item.name\"\n      :type=\"item.type\"\n      :label=\"getLabel(item)\"\n      :placeholder=\"getPlaceHolder(item)\"\n      :validation=\"getValidation(item)\"\n      :options=\"getOptions(item)\"\n      :label-class=\"context => labelClass(context)\"\n      :input-class=\"context => inputClass(context)\"\n      :validation-messages=\"{\n        isPhoneE164OrEmpty: $t('PRE_CHAT_FORM.FIELDS.PHONE_NUMBER.VALID_ERROR'),\n        email: $t('PRE_CHAT_FORM.FIELDS.EMAIL_ADDRESS.VALID_ERROR'),\n        required: getRequiredErrorMessage(item),\n      }\"\n    />\n    <FormulateInput\n      v-if=\"!hasActiveCampaign\"\n      name=\"message\"\n      type=\"textarea\"\n      :label-class=\"context => labelClass(context)\"\n      :input-class=\"context => inputClass(context)\"\n      :label=\"$t('PRE_CHAT_FORM.FIELDS.MESSAGE.LABEL')\"\n      :placeholder=\"$t('PRE_CHAT_FORM.FIELDS.MESSAGE.PLACEHOLDER')\"\n      validation=\"required\"\n    />\n\n    <custom-button\n      class=\"font-medium my-5\"\n      block\n      :bg-color=\"widgetColor\"\n      :text-color=\"textColor\"\n      :disabled=\"isCreating\"\n    >\n      <spinner v-if=\"isCreating\" class=\"p-0\" />\n      {{ $t('START_CONVERSATION') }}\n    </custom-button>\n  </FormulateForm>\n</template>\n\n<script>\nimport CustomButton from 'shared/components/Button';\nimport Spinner from 'shared/components/Spinner';\nimport { mapGetters } from 'vuex';\nimport { getContrastingTextColor } from '@chatwoot/utils';\n\nimport { isEmptyObject } from 'widget/helpers/utils';\nimport routerMixin from 'widget/mixins/routerMixin';\nimport darkModeMixin from 'widget/mixins/darkModeMixin';\nexport default {\n  components: {\n    CustomButton,\n    Spinner,\n  },\n  mixins: [routerMixin, darkModeMixin],\n  props: {\n    options: {\n      type: Object,\n      default: () => {},\n    },\n    disableContactFields: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      locale: this.$root.$i18n.locale,\n      message: '',\n      formValues: {},\n      labels: {\n        emailAddress: 'EMAIL_ADDRESS',\n        fullName: 'FULL_NAME',\n        phoneNumber: 'PHONE_NUMBER',\n      },\n    };\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n      isCreating: 'conversation/getIsCreating',\n      activeCampaign: 'campaign/getActiveCampaign',\n      currentUser: 'contacts/getCurrentUser',\n    }),\n    textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hasActiveCampaign() {\n      return !isEmptyObject(this.activeCampaign);\n    },\n    shouldShowHeaderMessage() {\n      return this.hasActiveCampaign || this.options.preChatMessage;\n    },\n    headerMessage() {\n      if (this.hasActiveCampaign) {\n        return this.$t('PRE_CHAT_FORM.CAMPAIGN_HEADER');\n      }\n      return this.options.preChatMessage;\n    },\n    preChatFields() {\n      return this.disableContactFields ? [] : this.options.preChatFields;\n    },\n    filteredPreChatFields() {\n      const isUserEmailAvailable = !!this.currentUser.email;\n      const isUserPhoneNumberAvailable = !!this.currentUser.phone_number;\n      const isUserIdentifierAvailable = !!this.currentUser.identifier;\n      const isUserNameAvailable = !!(\n        isUserIdentifierAvailable ||\n        isUserEmailAvailable ||\n        isUserPhoneNumberAvailable\n      );\n      return this.preChatFields.filter(field => {\n        if (isUserEmailAvailable && field.name === 'emailAddress') {\n          return false;\n        }\n        if (isUserPhoneNumberAvailable && field.name === 'phoneNumber') {\n          return false;\n        }\n        if (isUserNameAvailable && field.name === 'fullName') {\n          return false;\n        }\n        return true;\n      });\n    },\n    enabledPreChatFields() {\n      return this.filteredPreChatFields\n        .filter(field => field.enabled)\n        .map(field => ({\n          ...field,\n          type: this.findFieldType(field.type),\n        }));\n    },\n    conversationCustomAttributes() {\n      let conversationAttributes = {};\n      this.enabledPreChatFields.forEach(field => {\n        if (field.field_type === 'conversation_attribute') {\n          conversationAttributes = {\n            ...conversationAttributes,\n            [field.name]: this.getValue(field),\n          };\n        }\n      });\n      return conversationAttributes;\n    },\n    contactCustomAttributes() {\n      let contactAttributes = {};\n      this.enabledPreChatFields.forEach(field => {\n        if (field.field_type === 'contact_attribute') {\n          contactAttributes = {\n            ...contactAttributes,\n            [field.name]: this.getValue(field),\n          };\n        }\n      });\n      return contactAttributes;\n    },\n    inputStyles() {\n      return `mt-2 border rounded w-full py-2 px-3 text-slate-700 outline-none`;\n    },\n    isInputDarkOrLightMode() {\n      return `${this.$dm('bg-white', 'dark:bg-slate-600')} ${this.$dm(\n        'text-slate-700',\n        'dark:text-slate-50'\n      )}`;\n    },\n    inputBorderColor() {\n      return `${this.$dm('border-black-200', 'dark:border-black-500')}`;\n    },\n  },\n  methods: {\n    labelClass(context) {\n      const { hasErrors } = context;\n      if (!hasErrors) {\n        return `text-xs font-medium ${this.$dm(\n          'text-black-800',\n          'dark:text-slate-50'\n        )}`;\n      }\n      return `text-xs font-medium ${this.$dm(\n        'text-red-400',\n        'dark:text-red-400'\n      )}`;\n    },\n    inputClass(context) {\n      const { hasErrors, classification, type } = context;\n      if (classification === 'box' && type === 'checkbox') {\n        return '';\n      }\n      if (!hasErrors) {\n        return `${this.inputStyles} hover:border-black-300 focus:border-black-300 ${this.isInputDarkOrLightMode} ${this.inputBorderColor}`;\n      }\n      return `${this.inputStyles} border-red-200 hover:border-red-300 focus:border-red-300 ${this.isInputDarkOrLightMode}`;\n    },\n    isContactFieldRequired(field) {\n      return this.preChatFields.find(option => option.name === field).required;\n    },\n    getLabel({ name, label }) {\n      if (this.labels[name])\n        return this.$t(`PRE_CHAT_FORM.FIELDS.${this.labels[name]}.LABEL`);\n      return label;\n    },\n    getPlaceHolder({ name, placeholder }) {\n      if (this.labels[name])\n        return this.$t(`PRE_CHAT_FORM.FIELDS.${this.labels[name]}.PLACEHOLDER`);\n      return placeholder;\n    },\n    getValue({ name, type }) {\n      if (type === 'select') {\n        return this.enabledPreChatFields.find(option => option.name === name)\n          .values[this.formValues[name]];\n      }\n      return this.formValues[name] || null;\n    },\n\n    getRequiredErrorMessage({ name, label }) {\n      if (this.labels[name])\n        return this.$t(\n          `PRE_CHAT_FORM.FIELDS.${this.labels[name]}.REQUIRED_ERROR`\n        );\n      return `${label} ${this.$t('PRE_CHAT_FORM.IS_REQUIRED')}`;\n    },\n    getValidation({ type, name }) {\n      if (!this.isContactFieldRequired(name)) {\n        return '';\n      }\n      const validations = {\n        emailAddress: 'email',\n        phoneNumber: 'isPhoneE164OrEmpty',\n        url: 'url',\n        date: 'date',\n        text: null,\n        select: null,\n        number: null,\n        checkbox: false,\n      };\n      const validationKeys = Object.keys(validations);\n      const validation = 'bail|required';\n      if (validationKeys.includes(name) || validationKeys.includes(type)) {\n        const validationType = validations[type] || validations[name];\n        return validationType ? `${validation}|${validationType}` : validation;\n      }\n      return '';\n    },\n    findFieldType(type) {\n      if (type === 'link') {\n        return 'url';\n      }\n      if (type === 'list') {\n        return 'select';\n      }\n\n      return type;\n    },\n    getOptions(item) {\n      if (item.type === 'select') {\n        let values = {};\n        item.values.forEach((value, index) => {\n          values = {\n            ...values,\n            [index]: value,\n          };\n        });\n        return values;\n      }\n      return null;\n    },\n    onSubmit() {\n      const { emailAddress, fullName, phoneNumber, message } = this.formValues;\n      const { email } = this.currentUser;\n      this.$emit('submit', {\n        fullName,\n        phoneNumber,\n        emailAddress: emailAddress || email,\n        message,\n        activeCampaignId: this.activeCampaign.id,\n        conversationCustomAttributes: this.conversationCustomAttributes,\n        contactCustomAttributes: this.contactCustomAttributes,\n      });\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n::v-deep {\n  .wrapper[data-type='checkbox'] {\n    .formulate-input-wrapper {\n      display: flex;\n      align-items: center;\n\n      label {\n        margin-left: 0.2rem;\n      }\n    }\n  }\n  @media (prefers-color-scheme: dark) {\n    .wrapper {\n      .formulate-input-element--date,\n      .formulate-input-element--checkbox {\n        input {\n          color-scheme: dark;\n        }\n      }\n    }\n  }\n  .wrapper[data-type='textarea'] {\n    .formulate-input-element--textarea {\n      textarea {\n        min-height: 8rem;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/widget/components/PreChat"},"metadata":{},"sourceType":"module"}