{"ast":null,"code":"import { __assign } from \"tslib\";\n\nvar compactMetricType = function compactMetricType(type) {\n  var enums = {\n    gauge: 'g',\n    counter: 'c'\n  };\n  return enums[type];\n};\n\nvar Stats =\n/** @class */\nfunction () {\n  function Stats(remoteMetrics) {\n    this.metrics = [];\n    this.remoteMetrics = remoteMetrics;\n  }\n\n  Stats.prototype.increment = function (metric, by, tags) {\n    var _a;\n\n    if (by === void 0) {\n      by = 1;\n    }\n\n    this.metrics.push({\n      metric: metric,\n      value: by,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'counter',\n      timestamp: Date.now()\n    });\n    (_a = this.remoteMetrics) === null || _a === void 0 ? void 0 : _a.increment(metric, tags !== null && tags !== void 0 ? tags : []);\n  };\n\n  Stats.prototype.gauge = function (metric, value, tags) {\n    this.metrics.push({\n      metric: metric,\n      value: value,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'gauge',\n      timestamp: Date.now()\n    });\n  };\n\n  Stats.prototype.flush = function () {\n    var formatted = this.metrics.map(function (m) {\n      return __assign(__assign({}, m), {\n        tags: m.tags.join(',')\n      });\n    }); // ie doesn't like console.table\n\n    if (console.table) {\n      console.table(formatted);\n    } else {\n      console.log(formatted);\n    }\n\n    this.metrics = [];\n  };\n  /**\n   * compact keys for smaller payload\n   */\n\n\n  Stats.prototype.serialize = function () {\n    return this.metrics.map(function (m) {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp\n      };\n    });\n  };\n\n  return Stats;\n}();\n\nexport default Stats;","map":null,"metadata":{},"sourceType":"module"}