{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport types from '../../../mutation-types';\nexport var setPageFilter = function setPageFilter(_ref) {\n  var dispatch = _ref.dispatch,\n      filter = _ref.filter,\n      page = _ref.page,\n      markEndReached = _ref.markEndReached;\n  dispatch('conversationPage/setCurrentPage', {\n    filter: filter,\n    page: page\n  }, {\n    root: true\n  });\n\n  if (markEndReached) {\n    dispatch('conversationPage/setEndReached', {\n      filter: filter\n    }, {\n      root: true\n    });\n  }\n};\nexport var setContacts = function setContacts(commit, chatList) {\n  commit(\"contacts/\".concat(types.SET_CONTACTS), chatList.map(function (chat) {\n    return chat.meta.sender;\n  }));\n};\nexport var isOnMentionsView = function isOnMentionsView(_ref2) {\n  var routeName = _ref2.route.name;\n  var MENTION_ROUTES = ['conversation_mentions', 'conversation_through_mentions'];\n  return MENTION_ROUTES.includes(routeName);\n};\nexport var isOnUnattendedView = function isOnUnattendedView(_ref3) {\n  var routeName = _ref3.route.name;\n  var UNATTENDED_ROUTES = ['conversation_unattended', 'conversation_through_unattended'];\n  return UNATTENDED_ROUTES.includes(routeName);\n};\nexport var buildConversationList = function buildConversationList(context, requestPayload, responseData, filterType) {\n  var conversationList = responseData.payload,\n      metaData = responseData.meta;\n  context.commit(types.SET_ALL_CONVERSATION, conversationList);\n  context.dispatch('conversationStats/set', metaData);\n  context.dispatch('conversationLabels/setBulkConversationLabels', conversationList);\n  context.commit(types.CLEAR_LIST_LOADING_STATUS);\n  setContacts(context.commit, conversationList);\n  setPageFilter({\n    dispatch: context.dispatch,\n    filter: filterType,\n    page: requestPayload.page,\n    markEndReached: !conversationList.length\n  });\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/helpers/actionHelpers.js"],"names":["types","setPageFilter","dispatch","filter","page","markEndReached","root","setContacts","commit","chatList","SET_CONTACTS","map","chat","meta","sender","isOnMentionsView","routeName","route","name","MENTION_ROUTES","includes","isOnUnattendedView","UNATTENDED_ROUTES","buildConversationList","context","requestPayload","responseData","filterType","conversationList","payload","metaData","SET_ALL_CONVERSATION","CLEAR_LIST_LOADING_STATUS","length"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAgD;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAAA,MAAnCC,MAAmC,QAAnCA,MAAmC;AAAA,MAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AAC3EH,EAAAA,QAAQ,CAAC,iCAAD,EAAoC;AAAEC,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,IAAI,EAAJA;AAAV,GAApC,EAAsD;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAtD,CAAR;;AACA,MAAID,cAAJ,EAAoB;AAClBH,IAAAA,QAAQ,CAAC,gCAAD,EAAmC;AAAEC,MAAAA,MAAM,EAANA;AAAF,KAAnC,EAA+C;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAA/C,CAAR;AACD;AACF,CALM;AAOP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAASC,QAAT,EAAsB;AAC/CD,EAAAA,MAAM,oBACQR,KAAK,CAACU,YADd,GAEJD,QAAQ,CAACE,GAAT,CAAa,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAL,CAAUC,MAAd;AAAA,GAAjB,CAFI,CAAN;AAID,CALM;AAOP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAoC;AAAA,MAAlBC,SAAkB,SAAjCC,KAAiC,CAAxBC,IAAwB;AAClE,MAAMC,cAAc,GAAG,CACrB,uBADqB,EAErB,+BAFqB,CAAvB;AAIA,SAAOA,cAAc,CAACC,QAAf,CAAwBJ,SAAxB,CAAP;AACD,CANM;AAQP,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,QAAoC;AAAA,MAAlBL,SAAkB,SAAjCC,KAAiC,CAAxBC,IAAwB;AACpE,MAAMI,iBAAiB,GAAG,CACxB,yBADwB,EAExB,iCAFwB,CAA1B;AAIA,SAAOA,iBAAiB,CAACF,QAAlB,CAA2BJ,SAA3B,CAAP;AACD,CANM;AAQP,OAAO,IAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,OADmC,EAEnCC,cAFmC,EAGnCC,YAHmC,EAInCC,UAJmC,EAKhC;AACH,MAAiBC,gBAAjB,GAAsDF,YAAtD,CAAQG,OAAR;AAAA,MAAyCC,QAAzC,GAAsDJ,YAAtD,CAAmCb,IAAnC;AACAW,EAAAA,OAAO,CAAChB,MAAR,CAAeR,KAAK,CAAC+B,oBAArB,EAA2CH,gBAA3C;AACAJ,EAAAA,OAAO,CAACtB,QAAR,CAAiB,uBAAjB,EAA0C4B,QAA1C;AACAN,EAAAA,OAAO,CAACtB,QAAR,CACE,8CADF,EAEE0B,gBAFF;AAIAJ,EAAAA,OAAO,CAAChB,MAAR,CAAeR,KAAK,CAACgC,yBAArB;AACAzB,EAAAA,WAAW,CAACiB,OAAO,CAAChB,MAAT,EAAiBoB,gBAAjB,CAAX;AACA3B,EAAAA,aAAa,CAAC;AACZC,IAAAA,QAAQ,EAAEsB,OAAO,CAACtB,QADN;AAEZC,IAAAA,MAAM,EAAEwB,UAFI;AAGZvB,IAAAA,IAAI,EAAEqB,cAAc,CAACrB,IAHT;AAIZC,IAAAA,cAAc,EAAE,CAACuB,gBAAgB,CAACK;AAJtB,GAAD,CAAb;AAMD,CArBM","sourcesContent":["import types from '../../../mutation-types';\n\nexport const setPageFilter = ({ dispatch, filter, page, markEndReached }) => {\n  dispatch('conversationPage/setCurrentPage', { filter, page }, { root: true });\n  if (markEndReached) {\n    dispatch('conversationPage/setEndReached', { filter }, { root: true });\n  }\n};\n\nexport const setContacts = (commit, chatList) => {\n  commit(\n    `contacts/${types.SET_CONTACTS}`,\n    chatList.map(chat => chat.meta.sender)\n  );\n};\n\nexport const isOnMentionsView = ({ route: { name: routeName } }) => {\n  const MENTION_ROUTES = [\n    'conversation_mentions',\n    'conversation_through_mentions',\n  ];\n  return MENTION_ROUTES.includes(routeName);\n};\n\nexport const isOnUnattendedView = ({ route: { name: routeName } }) => {\n  const UNATTENDED_ROUTES = [\n    'conversation_unattended',\n    'conversation_through_unattended',\n  ];\n  return UNATTENDED_ROUTES.includes(routeName);\n};\n\nexport const buildConversationList = (\n  context,\n  requestPayload,\n  responseData,\n  filterType\n) => {\n  const { payload: conversationList, meta: metaData } = responseData;\n  context.commit(types.SET_ALL_CONVERSATION, conversationList);\n  context.dispatch('conversationStats/set', metaData);\n  context.dispatch(\n    'conversationLabels/setBulkConversationLabels',\n    conversationList\n  );\n  context.commit(types.CLEAR_LIST_LOADING_STATUS);\n  setContacts(context.commit, conversationList);\n  setPageFilter({\n    dispatch: context.dispatch,\n    filter: filterType,\n    page: requestPayload.page,\n    markEndReached: !conversationList.length,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}