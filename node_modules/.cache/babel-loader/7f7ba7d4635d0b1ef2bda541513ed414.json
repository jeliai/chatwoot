{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport CsatMetricCard from './CsatMetricCard';\nimport { CSAT_RATINGS } from 'shared/constants/messages';\nexport default {\n  components: {\n    CsatMetricCard: CsatMetricCard\n  },\n  data: function data() {\n    return {\n      csatRatings: CSAT_RATINGS\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    metrics: 'csat/getMetrics',\n    ratingPercentage: 'csat/getRatingPercentage',\n    satisfactionScore: 'csat/getSatisfactionScore',\n    responseRate: 'csat/getResponseRate'\n  })), {}, {\n    chartData: function chartData() {\n      var _this = this;\n\n      return {\n        labels: ['Rating'],\n        datasets: CSAT_RATINGS.map(function (rating, index) {\n          return {\n            label: rating.emoji,\n            data: [_this.ratingPercentage[index + 1]],\n            backgroundColor: rating.color\n          };\n        })\n      };\n    },\n    responseCount: function responseCount() {\n      return this.metrics.totalResponseCount ? this.metrics.totalResponseCount.toLocaleString() : '--';\n    }\n  }),\n  methods: {\n    formatToPercent: function formatToPercent(value) {\n      return value ? \"\".concat(value, \"%\") : '--';\n    }\n  }\n};","map":{"version":3,"sources":["CsatMetrics.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,SAAA,YAAA,QAAA,2BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,WAAA,EAAA;AADA,KAAA;AAGA,GARA;AASA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA,iBADA;AAEA,IAAA,gBAAA,EAAA,0BAFA;AAGA,IAAA,iBAAA,EAAA,2BAHA;AAIA,IAAA,YAAA,EAAA;AAJA,GAAA,CADA;AAOA,IAAA,SAPA,uBAOA;AAAA;;AACA,aAAA;AACA,QAAA,MAAA,EAAA,CAAA,QAAA,CADA;AAEA,QAAA,QAAA,EAAA,YAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA,KAAA;AAAA,iBAAA;AACA,YAAA,KAAA,EAAA,MAAA,CAAA,KADA;AAEA,YAAA,IAAA,EAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAFA;AAGA,YAAA,eAAA,EAAA,MAAA,CAAA;AAHA,WAAA;AAAA,SAAA;AAFA,OAAA;AAQA,KAhBA;AAiBA,IAAA,aAjBA,2BAiBA;AACA,aAAA,KAAA,OAAA,CAAA,kBAAA,GACA,KAAA,OAAA,CAAA,kBAAA,CAAA,cAAA,EADA,GAEA,IAFA;AAGA;AArBA,IATA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,KADA,EACA;AACA,aAAA,KAAA,aAAA,KAAA,SAAA,IAAA;AACA;AAHA;AAhCA,CAAA","sourcesContent":["<template>\n  <div class=\"row csat--metrics-container\">\n    <csat-metric-card\n      :label=\"$t('CSAT_REPORTS.METRIC.TOTAL_RESPONSES.LABEL')\"\n      :info-text=\"$t('CSAT_REPORTS.METRIC.TOTAL_RESPONSES.TOOLTIP')\"\n      :value=\"responseCount\"\n    />\n    <csat-metric-card\n      :label=\"$t('CSAT_REPORTS.METRIC.SATISFACTION_SCORE.LABEL')\"\n      :info-text=\"$t('CSAT_REPORTS.METRIC.SATISFACTION_SCORE.TOOLTIP')\"\n      :value=\"formatToPercent(satisfactionScore)\"\n    />\n    <csat-metric-card\n      :label=\"$t('CSAT_REPORTS.METRIC.RESPONSE_RATE.LABEL')\"\n      :info-text=\"$t('CSAT_REPORTS.METRIC.RESPONSE_RATE.TOOLTIP')\"\n      :value=\"formatToPercent(responseRate)\"\n    />\n    <div v-if=\"metrics.totalResponseCount\" class=\"medium-6 report-card\">\n      <h3 class=\"heading\">\n        <div class=\"emoji--distribution\">\n          <div\n            v-for=\"(rating, key, index) in ratingPercentage\"\n            :key=\"rating + key + index\"\n            class=\"emoji--distribution-item\"\n          >\n            <span class=\"emoji--distribution-key\">{{\n              csatRatings[key - 1].emoji\n            }}</span>\n            <span>{{ formatToPercent(rating) }}</span>\n          </div>\n        </div>\n      </h3>\n      <div class=\"emoji--distribution-chart\">\n        <woot-horizontal-bar :collection=\"chartData\" :height=\"24\" />\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport CsatMetricCard from './CsatMetricCard';\nimport { CSAT_RATINGS } from 'shared/constants/messages';\n\nexport default {\n  components: {\n    CsatMetricCard,\n  },\n  data() {\n    return {\n      csatRatings: CSAT_RATINGS,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      metrics: 'csat/getMetrics',\n      ratingPercentage: 'csat/getRatingPercentage',\n      satisfactionScore: 'csat/getSatisfactionScore',\n      responseRate: 'csat/getResponseRate',\n    }),\n    chartData() {\n      return {\n        labels: ['Rating'],\n        datasets: CSAT_RATINGS.map((rating, index) => ({\n          label: rating.emoji,\n          data: [this.ratingPercentage[index + 1]],\n          backgroundColor: rating.color,\n        })),\n      };\n    },\n    responseCount() {\n      return this.metrics.totalResponseCount\n        ? this.metrics.totalResponseCount.toLocaleString()\n        : '--';\n    },\n  },\n  methods: {\n    formatToPercent(value) {\n      return value ? `${value}%` : '--';\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.csat--metrics-container {\n  background: var(--white);\n  margin-bottom: var(--space-two);\n  border-radius: var(--border-radius-normal);\n  border: 1px solid var(--color-border);\n  padding: var(--space-normal);\n}\n\n.emoji--distribution {\n  display: flex;\n  justify-content: flex-end;\n\n  .emoji--distribution-item {\n    padding-left: var(--space-normal);\n  }\n}\n\n.emoji--distribution-chart {\n  margin-top: var(--space-small);\n}\n\n.emoji--distribution-key {\n  margin-right: var(--space-micro);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/reports/components"},"metadata":{},"sourceType":"module"}