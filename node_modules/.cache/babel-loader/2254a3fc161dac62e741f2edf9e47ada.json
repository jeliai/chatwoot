{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { hasPressedAltAndOKey } from 'shared/helpers/KeyboardHelpers';\nimport { mapGetters } from 'vuex';\nimport agentMixin from '../../../mixins/agentMixin.js';\nimport BackButton from '../BackButton';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport InboxName from '../InboxName';\nimport MoreActions from './MoreActions';\nimport Thumbnail from '../Thumbnail';\nimport wootConstants from '../../../constants';\nimport { conversationListPageURL } from 'dashboard/helper/URLHelper';\nexport default {\n  components: {\n    BackButton: BackButton,\n    InboxName: InboxName,\n    MoreActions: MoreActions,\n    Thumbnail: Thumbnail\n  },\n  mixins: [inboxMixin, agentMixin, eventListenerMixins],\n  props: {\n    chat: {\n      type: Object,\n      default: function _default() {}\n    },\n    isContactPanelOpen: {\n      type: Boolean,\n      default: false\n    },\n    showBackButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'inboxAssignableAgents/getUIFlags',\n    currentChat: 'getSelectedChat'\n  })), {}, {\n    chatMetadata: function chatMetadata() {\n      return this.chat.meta;\n    },\n    backButtonUrl: function backButtonUrl() {\n      var _this$$route = this.$route,\n          _this$$route$params = _this$$route.params,\n          accountId = _this$$route$params.accountId,\n          inboxId = _this$$route$params.inbox_id,\n          label = _this$$route$params.label,\n          teamId = _this$$route$params.teamId,\n          name = _this$$route.name;\n      return conversationListPageURL({\n        accountId: accountId,\n        inboxId: inboxId,\n        label: label,\n        teamId: teamId,\n        conversationType: name === 'conversation_mentions' ? 'mention' : ''\n      });\n    },\n    isHMACVerified: function isHMACVerified() {\n      if (!this.isAWebWidgetInbox) {\n        return true;\n      }\n\n      return this.chatMetadata.hmac_verified;\n    },\n    currentContact: function currentContact() {\n      return this.$store.getters['contacts/getContact'](this.chat.meta.sender.id);\n    },\n    isSnoozed: function isSnoozed() {\n      return this.currentChat.status === wootConstants.STATUS_TYPE.SNOOZED;\n    },\n    snoozedDisplayText: function snoozedDisplayText() {\n      var snoozedUntil = this.currentChat.snoozed_until;\n\n      if (snoozedUntil) {\n        // When the snooze is applied, it schedules the unsnooze event to next day/week 9AM.\n        // By that logic if the time difference is less than or equal to 24 + 9 hours we can consider it tomorrow.\n        var MAX_TIME_DIFFERENCE = 33;\n        var isSnoozedUntilTomorrow = differenceInHours(new Date(snoozedUntil), new Date()) <= MAX_TIME_DIFFERENCE;\n        return this.$t(isSnoozedUntilTomorrow ? 'CONVERSATION.HEADER.SNOOZED_UNTIL_TOMORROW' : 'CONVERSATION.HEADER.SNOOZED_UNTIL_NEXT_WEEK');\n      }\n\n      return this.$t('CONVERSATION.HEADER.SNOOZED_UNTIL_NEXT_REPLY');\n    },\n    contactPanelToggleText: function contactPanelToggleText() {\n      return \"\".concat(this.isContactPanelOpen ? this.$t('CONVERSATION.HEADER.CLOSE') : this.$t('CONVERSATION.HEADER.OPEN'), \" \").concat(this.$t('CONVERSATION.HEADER.DETAILS'));\n    },\n    inbox: function inbox() {\n      var inboxId = this.chat.inbox_id;\n      return this.$store.getters['inboxes/getInbox'](inboxId);\n    }\n  }),\n  methods: {\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (hasPressedAltAndOKey(e)) {\n        this.$emit('contact-panel-toggle');\n      }\n    }\n  }\n};","map":{"version":3,"sources":["ConversationHeader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"conv-header\">\n    <div class=\"user\">\n      <back-button v-if=\"showBackButton\" :back-url=\"backButtonUrl\" />\n      <Thumbnail\n        :src=\"currentContact.thumbnail\"\n        size=\"40px\"\n        :badge=\"inboxBadge\"\n        :username=\"currentContact.name\"\n        :status=\"currentContact.availability_status\"\n      />\n      <div class=\"user--profile__meta\">\n        <h3 class=\"user--name text-truncate\">\n          <span class=\"margin-right-smaller\">{{ currentContact.name }}</span>\n          <fluent-icon\n            v-if=\"!isHMACVerified\"\n            v-tooltip=\"$t('CONVERSATION.UNVERIFIED_SESSION')\"\n            size=\"14\"\n            class=\"hmac-warning__icon\"\n            icon=\"warning\"\n          />\n        </h3>\n        <div class=\"conversation--header--actions\">\n          <inbox-name :inbox=\"inbox\" class=\"margin-right-small\" />\n          <span\n            v-if=\"isSnoozed\"\n            class=\"snoozed--display-text margin-right-small\"\n          >\n            {{ snoozedDisplayText }}\n          </span>\n          <woot-button\n            class=\"user--profile__button margin-right-small\"\n            size=\"small\"\n            variant=\"link\"\n            @click=\"$emit('contact-panel-toggle')\"\n          >\n            {{ contactPanelToggleText }}\n          </woot-button>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"header-actions-wrap\"\n      :class=\"{ 'has-open-sidebar': isContactPanelOpen }\"\n    >\n      <more-actions :conversation-id=\"currentChat.id\" />\n    </div>\n  </div>\n</template>\n<script>\nimport { hasPressedAltAndOKey } from 'shared/helpers/KeyboardHelpers';\nimport { mapGetters } from 'vuex';\nimport agentMixin from '../../../mixins/agentMixin.js';\nimport BackButton from '../BackButton';\nimport differenceInHours from 'date-fns/differenceInHours';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport InboxName from '../InboxName';\nimport MoreActions from './MoreActions';\nimport Thumbnail from '../Thumbnail';\nimport wootConstants from '../../../constants';\nimport { conversationListPageURL } from 'dashboard/helper/URLHelper';\nexport default {\n  components: {\n    BackButton,\n    InboxName,\n    MoreActions,\n    Thumbnail,\n  },\n  mixins: [inboxMixin, agentMixin, eventListenerMixins],\n  props: {\n    chat: {\n      type: Object,\n      default: () => {},\n    },\n    isContactPanelOpen: {\n      type: Boolean,\n      default: false,\n    },\n    showBackButton: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'inboxAssignableAgents/getUIFlags',\n      currentChat: 'getSelectedChat',\n    }),\n    chatMetadata() {\n      return this.chat.meta;\n    },\n    backButtonUrl() {\n      const {\n        params: { accountId, inbox_id: inboxId, label, teamId },\n        name,\n      } = this.$route;\n      return conversationListPageURL({\n        accountId,\n        inboxId,\n        label,\n        teamId,\n        conversationType: name === 'conversation_mentions' ? 'mention' : '',\n      });\n    },\n    isHMACVerified() {\n      if (!this.isAWebWidgetInbox) {\n        return true;\n      }\n      return this.chatMetadata.hmac_verified;\n    },\n    currentContact() {\n      return this.$store.getters['contacts/getContact'](\n        this.chat.meta.sender.id\n      );\n    },\n    isSnoozed() {\n      return this.currentChat.status === wootConstants.STATUS_TYPE.SNOOZED;\n    },\n    snoozedDisplayText() {\n      const { snoozed_until: snoozedUntil } = this.currentChat;\n      if (snoozedUntil) {\n        // When the snooze is applied, it schedules the unsnooze event to next day/week 9AM.\n        // By that logic if the time difference is less than or equal to 24 + 9 hours we can consider it tomorrow.\n        const MAX_TIME_DIFFERENCE = 33;\n        const isSnoozedUntilTomorrow =\n          differenceInHours(new Date(snoozedUntil), new Date()) <=\n          MAX_TIME_DIFFERENCE;\n        return this.$t(\n          isSnoozedUntilTomorrow\n            ? 'CONVERSATION.HEADER.SNOOZED_UNTIL_TOMORROW'\n            : 'CONVERSATION.HEADER.SNOOZED_UNTIL_NEXT_WEEK'\n        );\n      }\n      return this.$t('CONVERSATION.HEADER.SNOOZED_UNTIL_NEXT_REPLY');\n    },\n    contactPanelToggleText() {\n      return `${\n        this.isContactPanelOpen\n          ? this.$t('CONVERSATION.HEADER.CLOSE')\n          : this.$t('CONVERSATION.HEADER.OPEN')\n      } ${this.$t('CONVERSATION.HEADER.DETAILS')}`;\n    },\n    inbox() {\n      const { inbox_id: inboxId } = this.chat;\n      return this.$store.getters['inboxes/getInbox'](inboxId);\n    },\n  },\n\n  methods: {\n    handleKeyEvents(e) {\n      if (hasPressedAltAndOKey(e)) {\n        this.$emit('contact-panel-toggle');\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.text-truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.conv-header {\n  flex: 0 0 var(--space-jumbo);\n}\n\n.option__desc {\n  display: flex;\n  align-items: center;\n}\n\n.option__desc {\n  &::v-deep .status-badge {\n    margin-right: var(--space-small);\n    min-width: 0;\n    flex-shrink: 0;\n  }\n}\n\n.user--name {\n  display: inline-block;\n  font-size: var(--font-size-medium);\n  line-height: 1.3;\n  margin: 0;\n  text-transform: capitalize;\n  width: 100%;\n}\n\n.conversation--header--actions {\n  align-items: center;\n  display: flex;\n  font-size: var(--font-size-mini);\n\n  .user--profile__button {\n    padding: 0;\n  }\n\n  .snoozed--display-text {\n    font-weight: var(--font-weight-medium);\n    color: var(--y-600);\n  }\n}\n\n.hmac-warning__icon {\n  color: var(--y-600);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}