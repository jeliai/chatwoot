{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Banner from 'dashboard/components/ui/Banner.vue';\nimport { LocalStorage, LOCAL_STORAGE_KEYS } from '../../helper/localStorage';\nimport { mapGetters } from 'vuex';\nimport adminMixin from 'dashboard/mixins/isAdmin';\nimport { hasAnUpdateAvailable } from './versionCheckHelper';\nexport default {\n  components: {\n    Banner: Banner\n  },\n  mixins: [adminMixin],\n  props: {\n    latestChatwootVersion: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      userDismissedBanner: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    updateAvailable: function updateAvailable() {\n      return hasAnUpdateAvailable(this.latestChatwootVersion, this.globalConfig.appVersion);\n    },\n    bannerMessage: function bannerMessage() {\n      return this.$t('GENERAL_SETTINGS.UPDATE_CHATWOOT', {\n        latestChatwootVersion: this.latestChatwootVersion\n      });\n    },\n    shouldShowBanner: function shouldShowBanner() {\n      return !this.userDismissedBanner && this.globalConfig.displayManifest && this.updateAvailable && !this.isVersionNotificationDismissed(this.latestChatwootVersion) && this.isAdmin;\n    }\n  }),\n  methods: {\n    isVersionNotificationDismissed: function isVersionNotificationDismissed(version) {\n      var dismissedVersions = LocalStorage.get(LOCAL_STORAGE_KEYS.DISMISSED_UPDATES) || [];\n      return dismissedVersions.includes(version);\n    },\n    dismissUpdateBanner: function dismissUpdateBanner() {\n      var updatedDismissedItems = LocalStorage.get(LOCAL_STORAGE_KEYS.DISMISSED_UPDATES) || [];\n\n      if (updatedDismissedItems instanceof Array) {\n        updatedDismissedItems.push(this.latestChatwootVersion);\n      } else {\n        updatedDismissedItems = [this.latestChatwootVersion];\n      }\n\n      LocalStorage.set(LOCAL_STORAGE_KEYS.DISMISSED_UPDATES, updatedDismissedItems);\n      this.userDismissedBanner = true;\n    }\n  }\n};","map":{"version":3,"sources":["UpdateBanner.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAA,MAAA,MAAA,oCAAA;AACA,SAAA,YAAA,EAAA,kBAAA,QAAA,2BAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,SAAA,oBAAA,QAAA,sBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,qBAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AADA,GAHA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AAAA,MAAA,mBAAA,EAAA;AAAA,KAAA;AACA,GARA;AASA,EAAA,QAAA,kCACA,UAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,CADA;AAEA,IAAA,eAFA,6BAEA;AACA,aAAA,oBAAA,CACA,KAAA,qBADA,EAEA,KAAA,YAAA,CAAA,UAFA,CAAA;AAIA,KAPA;AAQA,IAAA,aARA,2BAQA;AACA,aAAA,KAAA,EAAA,CAAA,kCAAA,EAAA;AACA,QAAA,qBAAA,EAAA,KAAA;AADA,OAAA,CAAA;AAGA,KAZA;AAaA,IAAA,gBAbA,8BAaA;AACA,aACA,CAAA,KAAA,mBAAA,IACA,KAAA,YAAA,CAAA,eADA,IAEA,KAAA,eAFA,IAGA,CAAA,KAAA,8BAAA,CAAA,KAAA,qBAAA,CAHA,IAIA,KAAA,OALA;AAOA;AArBA,IATA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,8BADA,0CACA,OADA,EACA;AACA,UAAA,iBAAA,GACA,YAAA,CAAA,GAAA,CAAA,kBAAA,CAAA,iBAAA,KAAA,EADA;AAEA,aAAA,iBAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AACA,KALA;AAMA,IAAA,mBANA,iCAMA;AACA,UAAA,qBAAA,GACA,YAAA,CAAA,GAAA,CAAA,kBAAA,CAAA,iBAAA,KAAA,EADA;;AAEA,UAAA,qBAAA,YAAA,KAAA,EAAA;AACA,QAAA,qBAAA,CAAA,IAAA,CAAA,KAAA,qBAAA;AACA,OAFA,MAEA;AACA,QAAA,qBAAA,GAAA,CAAA,KAAA,qBAAA,CAAA;AACA;;AACA,MAAA,YAAA,CAAA,GAAA,CACA,kBAAA,CAAA,iBADA,EAEA,qBAFA;AAIA,WAAA,mBAAA,GAAA,IAAA;AACA;AAnBA;AAhCA,CAAA","sourcesContent":["<template>\n  <banner\n    v-if=\"shouldShowBanner\"\n    class=\"update-banner\"\n    color-scheme=\"primary\"\n    :banner-message=\"bannerMessage\"\n    href-link=\"https://github.com/chatwoot/chatwoot/releases\"\n    :href-link-text=\"$t('GENERAL_SETTINGS.LEARN_MORE')\"\n    has-close-button\n    @close=\"dismissUpdateBanner\"\n  />\n</template>\n<script>\nimport Banner from 'dashboard/components/ui/Banner.vue';\nimport { LocalStorage, LOCAL_STORAGE_KEYS } from '../../helper/localStorage';\nimport { mapGetters } from 'vuex';\nimport adminMixin from 'dashboard/mixins/isAdmin';\nimport { hasAnUpdateAvailable } from './versionCheckHelper';\n\nexport default {\n  components: { Banner },\n  mixins: [adminMixin],\n  props: {\n    latestChatwootVersion: { type: String, default: '' },\n  },\n  data() {\n    return { userDismissedBanner: false };\n  },\n  computed: {\n    ...mapGetters({ globalConfig: 'globalConfig/get' }),\n    updateAvailable() {\n      return hasAnUpdateAvailable(\n        this.latestChatwootVersion,\n        this.globalConfig.appVersion\n      );\n    },\n    bannerMessage() {\n      return this.$t('GENERAL_SETTINGS.UPDATE_CHATWOOT', {\n        latestChatwootVersion: this.latestChatwootVersion,\n      });\n    },\n    shouldShowBanner() {\n      return (\n        !this.userDismissedBanner &&\n        this.globalConfig.displayManifest &&\n        this.updateAvailable &&\n        !this.isVersionNotificationDismissed(this.latestChatwootVersion) &&\n        this.isAdmin\n      );\n    },\n  },\n  methods: {\n    isVersionNotificationDismissed(version) {\n      const dismissedVersions =\n        LocalStorage.get(LOCAL_STORAGE_KEYS.DISMISSED_UPDATES) || [];\n      return dismissedVersions.includes(version);\n    },\n    dismissUpdateBanner() {\n      let updatedDismissedItems =\n        LocalStorage.get(LOCAL_STORAGE_KEYS.DISMISSED_UPDATES) || [];\n      if (updatedDismissedItems instanceof Array) {\n        updatedDismissedItems.push(this.latestChatwootVersion);\n      } else {\n        updatedDismissedItems = [this.latestChatwootVersion];\n      }\n      LocalStorage.set(\n        LOCAL_STORAGE_KEYS.DISMISSED_UPDATES,\n        updatedDismissedItems\n      );\n      this.userDismissedBanner = true;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/components/app"},"metadata":{},"sourceType":"module"}