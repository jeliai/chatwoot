{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ConversationForm from './ConversationForm';\nexport default {\n  components: {\n    ConversationForm: ConversationForm\n  },\n  props: {\n    show: {\n      type: Boolean,\n      default: false\n    },\n    contact: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  watch: {\n    'contact.id': function contactId(id) {\n      this.$store.dispatch('contacts/fetchContactableInbox', id);\n    }\n  },\n  mounted: function mounted() {\n    var id = this.contact.id;\n    this.$store.dispatch('contacts/fetchContactableInbox', id);\n  },\n  methods: {\n    onCancel: function onCancel() {\n      this.$emit('cancel');\n    },\n    onSuccess: function onSuccess() {\n      this.$emit('cancel');\n    },\n    onSubmit: function onSubmit(contactItem) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$store.dispatch('contactConversations/create', contactItem);\n\n              case 2:\n                data = _context.sent;\n                return _context.abrupt(\"return\", data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["NewConversation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,OAAA,gBAAA,MAAA,oBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AALA,GAJA;AAcA,EAAA,KAAA,EAAA;AACA,gBADA,qBACA,EADA,EACA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,gCAAA,EAAA,EAAA;AACA;AAHA,GAdA;AAmBA,EAAA,OAnBA,qBAmBA;AACA,QAAA,EAAA,GAAA,KAAA,OAAA,CAAA,EAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,gCAAA,EAAA,EAAA;AACA,GAtBA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,KAHA;AAIA,IAAA,SAJA,uBAIA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,KANA;AAOA,IAAA,QAPA,oBAOA,WAPA,EAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,MAAA,CAAA,QAAA,CACA,6BADA,EAEA,WAFA,CADA;;AAAA;AACA,gBAAA,IADA;AAAA,iDAKA,IALA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAbA;AAvBA,CAAA","sourcesContent":["<template>\n  <woot-modal :show.sync=\"show\" :on-close=\"onCancel\">\n    <div class=\"column content-box\">\n      <woot-modal-header\n        :header-title=\"$t('NEW_CONVERSATION.TITLE')\"\n        :header-content=\"$t('NEW_CONVERSATION.DESC')\"\n      />\n      <conversation-form\n        :contact=\"contact\"\n        :on-submit=\"onSubmit\"\n        @success=\"onSuccess\"\n        @cancel=\"onCancel\"\n      />\n    </div>\n  </woot-modal>\n</template>\n\n<script>\nimport ConversationForm from './ConversationForm';\n\nexport default {\n  components: {\n    ConversationForm,\n  },\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n    },\n    contact: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  watch: {\n    'contact.id'(id) {\n      this.$store.dispatch('contacts/fetchContactableInbox', id);\n    },\n  },\n  mounted() {\n    const { id } = this.contact;\n    this.$store.dispatch('contacts/fetchContactableInbox', id);\n  },\n  methods: {\n    onCancel() {\n      this.$emit('cancel');\n    },\n    onSuccess() {\n      this.$emit('cancel');\n    },\n    async onSubmit(contactItem) {\n      const data = await this.$store.dispatch(\n        'contactConversations/create',\n        contactItem\n      );\n      return data;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/conversation/contact"},"metadata":{},"sourceType":"module"}