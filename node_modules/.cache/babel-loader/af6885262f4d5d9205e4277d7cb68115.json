{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VeTable, VePagination } from 'vue-easytable';\nimport UserAvatarWithName from 'dashboard/components/widgets/UserAvatarWithName';\nimport { CSAT_RATINGS } from 'shared/constants/messages';\nimport { mapGetters } from 'vuex';\nimport timeMixin from 'dashboard/mixins/time';\nexport default {\n  components: {\n    VeTable: VeTable,\n    VePagination: VePagination\n  },\n  mixins: [timeMixin],\n  props: {\n    pageIndex: {\n      type: Number,\n      default: 1\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'csat/getUIFlags',\n    csatResponses: 'csat/getCSATResponses',\n    metrics: 'csat/getMetrics'\n  })), {}, {\n    columns: function columns() {\n      var h = this.$createElement;\n      return [{\n        field: 'contact',\n        key: 'contact',\n        title: this.$t('CSAT_REPORTS.TABLE.HEADER.CONTACT_NAME'),\n        align: 'left',\n        width: 200,\n        renderBodyCell: function renderBodyCell(_ref) {\n          var row = _ref.row;\n\n          if (row.contact) {\n            return h(UserAvatarWithName, {\n              attrs: {\n                size: \"24px\",\n                user: row.contact\n              }\n            });\n          }\n\n          return '---';\n        }\n      }, {\n        field: 'assignedAgent',\n        key: 'assignedAgent',\n        title: this.$t('CSAT_REPORTS.TABLE.HEADER.AGENT_NAME'),\n        align: 'left',\n        width: 200,\n        renderBodyCell: function renderBodyCell(_ref2) {\n          var row = _ref2.row;\n\n          if (row.assignedAgent) {\n            return h(UserAvatarWithName, {\n              attrs: {\n                size: \"24px\",\n                user: row.assignedAgent\n              }\n            });\n          }\n\n          return '---';\n        }\n      }, {\n        field: 'rating',\n        key: 'rating',\n        title: this.$t('CSAT_REPORTS.TABLE.HEADER.RATING'),\n        align: 'center',\n        width: 80,\n        renderBodyCell: function renderBodyCell(_ref3) {\n          var row = _ref3.row;\n\n          var _CSAT_RATINGS$filter = CSAT_RATINGS.filter(function (rating) {\n            return rating.value === row.rating;\n          }),\n              _CSAT_RATINGS$filter2 = _slicedToArray(_CSAT_RATINGS$filter, 1),\n              _CSAT_RATINGS$filter3 = _CSAT_RATINGS$filter2[0],\n              ratingObject = _CSAT_RATINGS$filter3 === void 0 ? {} : _CSAT_RATINGS$filter3;\n\n          return h(\"span\", {\n            \"class\": \"emoji-response\"\n          }, [ratingObject.emoji || '---']);\n        }\n      }, {\n        field: 'feedbackText',\n        key: 'feedbackText',\n        title: this.$t('CSAT_REPORTS.TABLE.HEADER.FEEDBACK_TEXT'),\n        align: 'left',\n        width: 400\n      }, {\n        field: 'converstionId',\n        key: 'converstionId',\n        title: '',\n        align: 'left',\n        width: 100,\n        renderBodyCell: function renderBodyCell(_ref4) {\n          var row = _ref4.row;\n          var routerParams = {\n            name: 'inbox_conversation',\n            params: {\n              conversation_id: row.conversationId\n            }\n          };\n          return h(\"div\", {\n            \"class\": \"text-right\"\n          }, [h(\"router-link\", {\n            attrs: {\n              to: routerParams\n            }\n          }, [\"#\".concat(row.conversationId)]), h(\"div\", {\n            \"class\": \"csat--timestamp\",\n            directives: [{\n              name: \"tooltip\",\n              value: row.createdAt\n            }]\n          }, [row.createdAgo])]);\n        }\n      }];\n    },\n    tableData: function tableData() {\n      var _this = this;\n\n      return this.csatResponses.map(function (response) {\n        return {\n          contact: response.contact,\n          assignedAgent: response.assigned_agent,\n          rating: response.rating,\n          feedbackText: response.feedback_message || '---',\n          conversationId: response.conversation_id,\n          createdAgo: _this.dynamicTime(response.created_at),\n          createdAt: _this.messageStamp(response.created_at, 'LLL d yyyy, h:mm a')\n        };\n      });\n    }\n  }),\n  methods: {\n    onPageNumberChange: function onPageNumberChange(pageIndex) {\n      this.$emit('page-change', pageIndex);\n    }\n  }\n};","map":{"version":3,"sources":["CsatTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"csat--table-container\">\n    <ve-table\n      max-height=\"calc(100vh - 35rem)\"\n      :fixed-header=\"true\"\n      :columns=\"columns\"\n      :table-data=\"tableData\"\n    />\n    <div v-show=\"!tableData.length\" class=\"csat--empty-records\">\n      {{ $t('CSAT_REPORTS.NO_RECORDS') }}\n    </div>\n    <div v-if=\"metrics.totalResponseCount\" class=\"table-pagination\">\n      <ve-pagination\n        :total=\"metrics.totalResponseCount\"\n        :page-index=\"pageIndex\"\n        :page-size=\"25\"\n        :page-size-option=\"[25]\"\n        @on-page-number-change=\"onPageNumberChange\"\n      />\n    </div>\n  </div>\n</template>\n<script>\nimport { VeTable, VePagination } from 'vue-easytable';\nimport UserAvatarWithName from 'dashboard/components/widgets/UserAvatarWithName';\nimport { CSAT_RATINGS } from 'shared/constants/messages';\nimport { mapGetters } from 'vuex';\nimport timeMixin from 'dashboard/mixins/time';\n\nexport default {\n  components: {\n    VeTable,\n    VePagination,\n  },\n  mixins: [timeMixin],\n  props: {\n    pageIndex: {\n      type: Number,\n      default: 1,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'csat/getUIFlags',\n      csatResponses: 'csat/getCSATResponses',\n      metrics: 'csat/getMetrics',\n    }),\n    columns() {\n      return [\n        {\n          field: 'contact',\n          key: 'contact',\n          title: this.$t('CSAT_REPORTS.TABLE.HEADER.CONTACT_NAME'),\n          align: 'left',\n          width: 200,\n          renderBodyCell: ({ row }) => {\n            if (row.contact) {\n              return <UserAvatarWithName size=\"24px\" user={row.contact} />;\n            }\n            return '---';\n          },\n        },\n        {\n          field: 'assignedAgent',\n          key: 'assignedAgent',\n          title: this.$t('CSAT_REPORTS.TABLE.HEADER.AGENT_NAME'),\n          align: 'left',\n          width: 200,\n          renderBodyCell: ({ row }) => {\n            if (row.assignedAgent) {\n              return (\n                <UserAvatarWithName size=\"24px\" user={row.assignedAgent} />\n              );\n            }\n            return '---';\n          },\n        },\n        {\n          field: 'rating',\n          key: 'rating',\n          title: this.$t('CSAT_REPORTS.TABLE.HEADER.RATING'),\n          align: 'center',\n          width: 80,\n          renderBodyCell: ({ row }) => {\n            const [ratingObject = {}] = CSAT_RATINGS.filter(\n              rating => rating.value === row.rating\n            );\n            return (\n              <span class=\"emoji-response\">{ratingObject.emoji || '---'}</span>\n            );\n          },\n        },\n        {\n          field: 'feedbackText',\n          key: 'feedbackText',\n          title: this.$t('CSAT_REPORTS.TABLE.HEADER.FEEDBACK_TEXT'),\n          align: 'left',\n          width: 400,\n        },\n        {\n          field: 'converstionId',\n          key: 'converstionId',\n          title: '',\n          align: 'left',\n          width: 100,\n          renderBodyCell: ({ row }) => {\n            const routerParams = {\n              name: 'inbox_conversation',\n              params: { conversation_id: row.conversationId },\n            };\n            return (\n              <div class=\"text-right\">\n                <router-link to={routerParams}>\n                  {`#${row.conversationId}`}\n                </router-link>\n                <div class=\"csat--timestamp\" v-tooltip={row.createdAt}>\n                  {row.createdAgo}\n                </div>\n              </div>\n            );\n          },\n        },\n      ];\n    },\n    tableData() {\n      return this.csatResponses.map(response => ({\n        contact: response.contact,\n        assignedAgent: response.assigned_agent,\n        rating: response.rating,\n        feedbackText: response.feedback_message || '---',\n        conversationId: response.conversation_id,\n        createdAgo: this.dynamicTime(response.created_at),\n        createdAt: this.messageStamp(response.created_at, 'LLL d yyyy, h:mm a'),\n      }));\n    },\n  },\n  methods: {\n    onPageNumberChange(pageIndex) {\n      this.$emit('page-change', pageIndex);\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.csat--table-container {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  .ve-table {\n    background: var(--white);\n\n    &::v-deep {\n      .ve-table-container {\n        border-radius: var(--border-radius-normal);\n        border: 1px solid var(--color-border) !important;\n      }\n\n      th.ve-table-header-th {\n        font-size: var(--font-size-mini) !important;\n        padding: var(--space-normal) !important;\n      }\n\n      td.ve-table-body-td {\n        padding: var(--space-small) var(--space-normal) !important;\n      }\n    }\n  }\n\n  &::v-deep .ve-pagination {\n    background-color: transparent;\n  }\n\n  &::v-deep .ve-pagination-select {\n    display: none;\n  }\n\n  .emoji-response {\n    font-size: var(--font-size-large);\n  }\n\n  .table-pagination {\n    margin-top: var(--space-normal);\n    text-align: right;\n  }\n}\n\n.csat--empty-records {\n  align-items: center;\n  background-color: var(--white);\n  border: 1px solid var(--color-border);\n  border-top: 0;\n  color: var(--b-600);\n  display: flex;\n  font-size: var(--font-size-small);\n  height: 20rem;\n  justify-content: center;\n  margin-top: -1px;\n  width: 100%;\n}\n\n.csat--timestamp {\n  color: var(--b-400);\n  font-size: var(--font-size-small);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/reports/components"},"metadata":{},"sourceType":"module"}