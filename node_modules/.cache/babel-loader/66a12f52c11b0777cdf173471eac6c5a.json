{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { decorateProperty as r } from \"./base.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nfunction e(e) {\n  return r({\n    descriptor: function descriptor(r) {\n      return {\n        get: function get() {\n          var _this = this;\n\n          return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n            var r;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _this.updateComplete;\n\n                  case 2:\n                    return _context.abrupt(\"return\", null === (r = _this.renderRoot) || void 0 === r ? void 0 : r.querySelector(e));\n\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }))();\n        },\n        enumerable: !0,\n        configurable: !0\n      };\n    }\n  });\n}\n\nexport { e as queryAsync };","map":null,"metadata":{},"sourceType":"module"}