{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar SIGN_MASK = require('@stdlib/constants-float64-high-word-sign-mask');\n\nvar ABS_MASK = require('@stdlib/constants-float64-high-word-abs-mask');\n\nvar toWords = require('@stdlib/number-float64-base-to-words');\n\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\n\nvar fromWords = require('@stdlib/number-float64-base-from-words'); // VARIABLES //\n// High/low words workspace:\n\n\nvar WORDS = [0, 0]; // MAIN //\n\n/**\n* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.\n*\n* @param {number} x - number from which to derive a magnitude\n* @param {number} y - number from which to derive a sign\n* @returns {number} a double-precision floating-point number\n*\n* @example\n* var z = copysign( -3.14, 10.0 );\n* // returns 3.14\n*\n* @example\n* var z = copysign( 3.14, -1.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( 1.0, -0.0 );\n* // returns -1.0\n*\n* @example\n* var z = copysign( -3.14, -0.0 );\n* // returns -3.14\n*\n* @example\n* var z = copysign( -0.0, 1.0 );\n* // returns 0.0\n*/\n\nfunction copysign(x, y) {\n  var hx;\n  var hy; // Split `x` into higher and lower order words:\n\n  toWords.assign(x, WORDS, 1, 0);\n  hx = WORDS[0]; // Turn off the sign bit of `x`:\n\n  hx &= ABS_MASK; // Extract the higher order word from `y`:\n\n  hy = getHighWord(y); // Leave only the sign bit of `y` turned on:\n\n  hy &= SIGN_MASK; // Copy the sign bit of `y` to `x`:\n\n  hx |= hy; // Return a new value having the same magnitude as `x`, but with the sign of `y`:\n\n  return fromWords(hx, WORDS[1]);\n} // EXPORTS //\n\n\nmodule.exports = copysign;","map":null,"metadata":{},"sourceType":"module"}