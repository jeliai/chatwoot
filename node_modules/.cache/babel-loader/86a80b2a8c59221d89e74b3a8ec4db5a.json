{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, url } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  mixins: [alertMixin],\n  props: {\n    show: {\n      type: Boolean,\n      default: false\n    },\n    mode: {\n      type: String,\n      default: 'create'\n    },\n    selectedAppData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  validations: {\n    app: {\n      title: {\n        required: required\n      },\n      content: {\n        type: {\n          required: required\n        },\n        url: {\n          required: required,\n          url: url\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      isLoading: false,\n      app: {\n        title: '',\n        content: {\n          type: 'frame',\n          url: ''\n        }\n      }\n    };\n  },\n  computed: {\n    header: function header() {\n      return this.$t(\"INTEGRATION_SETTINGS.DASHBOARD_APPS.\".concat(this.mode, \".HEADER\"));\n    },\n    submitButtonLabel: function submitButtonLabel() {\n      return this.$t(\"INTEGRATION_SETTINGS.DASHBOARD_APPS.\".concat(this.mode, \".FORM_SUBMIT\"));\n    }\n  },\n  mounted: function mounted() {\n    if (this.mode === 'UPDATE' && this.selectedAppData) {\n      this.app.title = this.selectedAppData.title;\n      this.app.content = this.selectedAppData.content[0];\n    }\n  },\n  methods: {\n    closeModal: function closeModal() {\n      // Reset the data once closed\n      this.app = {\n        title: '',\n        content: {\n          type: 'frame',\n          url: ''\n        }\n      };\n      this.$emit('close');\n    },\n    submit: function submit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var action, payload;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                _this.$v.$touch();\n\n                if (!_this.$v.$invalid) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                action = _this.mode.toLowerCase();\n                payload = {\n                  title: _this.app.title,\n                  content: [_this.app.content]\n                };\n\n                if (action === 'update') {\n                  payload.id = _this.selectedAppData.id;\n                }\n\n                _this.isLoading = true;\n                _context.next = 10;\n                return _this.$store.dispatch(\"dashboardApps/\".concat(action), payload);\n\n              case 10:\n                _this.showAlert(_this.$t(\"INTEGRATION_SETTINGS.DASHBOARD_APPS.\".concat(_this.mode, \".API_SUCCESS\")));\n\n                _this.closeModal();\n\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t(\"INTEGRATION_SETTINGS.DASHBOARD_APPS.\".concat(_this.mode, \".API_ERROR\")));\n\n              case 17:\n                _context.prev = 17;\n                _this.isLoading = false;\n                return _context.finish(17);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14, 17, 20]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["DashboardAppModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,SAAA,QAAA,EAAA,GAAA,QAAA,0BAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,UAAA,CADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AATA,GAFA;AAgBA,EAAA,WAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,KAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA;AAEA,MAAA,OAAA,EAAA;AACA,QAAA,IAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,SADA;AAEA,QAAA,GAAA,EAAA;AAAA,UAAA,QAAA,EAAA,QAAA;AAAA,UAAA,GAAA,EAAA;AAAA;AAFA;AAFA;AADA,GAhBA;AAyBA,EAAA,IAzBA,kBAyBA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,GAAA,EAAA;AACA,QAAA,KAAA,EAAA,EADA;AAEA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,GAAA,EAAA;AAFA;AAFA;AAFA,KAAA;AAUA,GApCA;AAqCA,EAAA,QAAA,EAAA;AACA,IAAA,MADA,oBACA;AACA,aAAA,KAAA,EAAA,+CAAA,KAAA,IAAA,aAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AACA,aAAA,KAAA,EAAA,+CACA,KAAA,IADA,kBAAA;AAGA;AARA,GArCA;AA+CA,EAAA,OA/CA,qBA+CA;AACA,QAAA,KAAA,IAAA,KAAA,QAAA,IAAA,KAAA,eAAA,EAAA;AACA,WAAA,GAAA,CAAA,KAAA,GAAA,KAAA,eAAA,CAAA,KAAA;AACA,WAAA,GAAA,CAAA,OAAA,GAAA,KAAA,eAAA,CAAA,OAAA,CAAA,CAAA,CAAA;AACA;AACA,GApDA;AAqDA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA;AACA,WAAA,GAAA,GAAA;AACA,QAAA,KAAA,EAAA,EADA;AAEA,QAAA,OAAA,EAAA;AAAA,UAAA,IAAA,EAAA,OAAA;AAAA,UAAA,GAAA,EAAA;AAAA;AAFA,OAAA;AAIA,WAAA,KAAA,CAAA,OAAA;AACA,KARA;AASA,IAAA,MATA,oBASA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,gBAAA,KAAA,CAAA,EAAA,CAAA,MAAA;;AAFA,qBAGA,KAAA,CAAA,EAAA,CAAA,QAHA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOA,gBAAA,MAPA,GAOA,KAAA,CAAA,IAAA,CAAA,WAAA,EAPA;AAQA,gBAAA,OARA,GAQA;AACA,kBAAA,KAAA,EAAA,KAAA,CAAA,GAAA,CAAA,KADA;AAEA,kBAAA,OAAA,EAAA,CAAA,KAAA,CAAA,GAAA,CAAA,OAAA;AAFA,iBARA;;AAaA,oBAAA,MAAA,KAAA,QAAA,EAAA;AACA,kBAAA,OAAA,CAAA,EAAA,GAAA,KAAA,CAAA,eAAA,CAAA,EAAA;AACA;;AAEA,gBAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AAjBA;AAAA,uBAkBA,KAAA,CAAA,MAAA,CAAA,QAAA,yBAAA,MAAA,GAAA,OAAA,CAlBA;;AAAA;AAmBA,gBAAA,KAAA,CAAA,SAAA,CACA,KAAA,CAAA,EAAA,+CACA,KAAA,CAAA,IADA,kBADA;;AAKA,gBAAA,KAAA,CAAA,UAAA;;AAxBA;AAAA;;AAAA;AAAA;AAAA;;AA0BA,gBAAA,KAAA,CAAA,SAAA,CACA,KAAA,CAAA,EAAA,+CAAA,KAAA,CAAA,IAAA,gBADA;;AA1BA;AAAA;AA8BA,gBAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AA9BA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AAzCA;AArDA,CAAA","sourcesContent":["<template>\n  <woot-modal :show=\"show\" :on-close=\"closeModal\">\n    <div class=\"column content-box\">\n      <woot-modal-header :header-title=\"header\" />\n\n      <form class=\"row\" @submit.prevent=\"submit\">\n        <woot-input\n          v-model.trim=\"app.title\"\n          :class=\"{ error: $v.app.title.$error }\"\n          class=\"medium-12 columns\"\n          :label=\"$t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.TITLE_LABEL')\"\n          :placeholder=\"\n            $t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.TITLE_PLACEHOLDER')\n          \"\n          :error=\"\n            $v.app.title.$error\n              ? $t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.TITLE_ERROR')\n              : null\n          \"\n          data-testid=\"app-title\"\n          @input=\"$v.app.title.$touch\"\n        />\n        <woot-input\n          v-model.trim=\"app.content.url\"\n          :class=\"{ error: $v.app.content.url.$error }\"\n          class=\"medium-12 columns app--url_input\"\n          :label=\"$t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.URL_LABEL')\"\n          :placeholder=\"\n            $t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.URL_PLACEHOLDER')\n          \"\n          :error=\"\n            $v.app.content.url.$error\n              ? $t('INTEGRATION_SETTINGS.DASHBOARD_APPS.FORM.URL_ERROR')\n              : null\n          \"\n          data-testid=\"app-url\"\n          @input=\"$v.app.content.url.$touch\"\n        />\n        <div class=\"modal-footer\">\n          <div class=\"medium-12 columns\">\n            <woot-button\n              :is-loading=\"isLoading\"\n              :is-disabled=\"$v.$invalid\"\n              data-testid=\"label-submit\"\n            >\n              {{ submitButtonLabel }}\n            </woot-button>\n            <woot-button class=\"button clear\" @click.prevent=\"closeModal\">\n              {{ $t('INTEGRATION_SETTINGS.DASHBOARD_APPS.CREATE.FORM_CANCEL') }}\n            </woot-button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </woot-modal>\n</template>\n\n<script>\nimport { required, url } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nexport default {\n  mixins: [alertMixin],\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n    },\n    mode: {\n      type: String,\n      default: 'create',\n    },\n    selectedAppData: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  validations: {\n    app: {\n      title: { required },\n      content: {\n        type: { required },\n        url: { required, url },\n      },\n    },\n  },\n  data() {\n    return {\n      isLoading: false,\n      app: {\n        title: '',\n        content: {\n          type: 'frame',\n          url: '',\n        },\n      },\n    };\n  },\n  computed: {\n    header() {\n      return this.$t(`INTEGRATION_SETTINGS.DASHBOARD_APPS.${this.mode}.HEADER`);\n    },\n    submitButtonLabel() {\n      return this.$t(\n        `INTEGRATION_SETTINGS.DASHBOARD_APPS.${this.mode}.FORM_SUBMIT`\n      );\n    },\n  },\n  mounted() {\n    if (this.mode === 'UPDATE' && this.selectedAppData) {\n      this.app.title = this.selectedAppData.title;\n      this.app.content = this.selectedAppData.content[0];\n    }\n  },\n  methods: {\n    closeModal() {\n      // Reset the data once closed\n      this.app = {\n        title: '',\n        content: { type: 'frame', url: '' },\n      };\n      this.$emit('close');\n    },\n    async submit() {\n      try {\n        this.$v.$touch();\n        if (this.$v.$invalid) {\n          return;\n        }\n\n        const action = this.mode.toLowerCase();\n        const payload = {\n          title: this.app.title,\n          content: [this.app.content],\n        };\n\n        if (action === 'update') {\n          payload.id = this.selectedAppData.id;\n        }\n\n        this.isLoading = true;\n        await this.$store.dispatch(`dashboardApps/${action}`, payload);\n        this.showAlert(\n          this.$t(\n            `INTEGRATION_SETTINGS.DASHBOARD_APPS.${this.mode}.API_SUCCESS`\n          )\n        );\n        this.closeModal();\n      } catch (err) {\n        this.showAlert(\n          this.$t(`INTEGRATION_SETTINGS.DASHBOARD_APPS.${this.mode}.API_ERROR`)\n        );\n      } finally {\n        this.isLoading = false;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.content-row {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  .app--url_input {\n    flex: 1;\n  }\n  .app--url_add_btn {\n    margin-left: var(--space-one);\n    margin-top: var(--space-one);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/integrations/DashboardApps"},"metadata":{},"sourceType":"module"}