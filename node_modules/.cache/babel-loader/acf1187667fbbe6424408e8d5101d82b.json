{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nexport default {\n  mixins: [globalConfigMixin],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    items: function items() {\n      var _this = this;\n\n      return this.$t('INBOX_MGMT.CREATE_FLOW').map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          body: _this.useInstallationName(item.body, _this.globalConfig.installationName)\n        });\n      });\n    }\n  })\n};","map":{"version":3,"sources":["InboxChannels.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAYA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,iBAAA,MAAA,iCAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,iBAAA,CADA;AAEA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,YAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,KAJA,mBAIA;AAAA;;AACA,aAAA,KAAA,EAAA,CAAA,wBAAA,EAAA,GAAA,CAAA,UAAA,IAAA;AAAA,+CACA,IADA;AAEA,UAAA,IAAA,EAAA,KAAA,CAAA,mBAAA,CACA,IAAA,CAAA,IADA,EAEA,KAAA,CAAA,YAAA,CAAA,gBAFA;AAFA;AAAA,OAAA,CAAA;AAOA;AAZA;AAFA,CAAA","sourcesContent":["<template>\n  <div class=\"row content-box full-height\">\n    <woot-wizard\n      class=\"hide-for-small-only medium-3 columns\"\n      :global-config=\"globalConfig\"\n      :items=\"items\"\n    />\n    <router-view />\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\n\nexport default {\n  mixins: [globalConfigMixin],\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n    }),\n    items() {\n      return this.$t('INBOX_MGMT.CREATE_FLOW').map(item => ({\n        ...item,\n        body: this.useInstallationName(\n          item.body,\n          this.globalConfig.installationName\n        ),\n      }));\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox"},"metadata":{},"sourceType":"module"}