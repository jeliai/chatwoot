{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nexport default {\n  methods: {\n    setFilterAttributes: function setFilterAttributes() {\n      var _this = this;\n\n      var allCustomAttributes = this.$store.getters['attributes/getAttributesByModel'](this.attributeModel);\n      var customAttributesFormatted = {\n        name: this.$t(\"\".concat(this.filtersFori18n, \".GROUPS.CUSTOM_ATTRIBUTES\")),\n        attributes: allCustomAttributes.map(function (attr) {\n          return {\n            key: attr.attribute_key,\n            name: attr.attribute_display_name\n          };\n        })\n      };\n      var allFilterGroups = this.filterAttributeGroups.map(function (group) {\n        return {\n          name: _this.$t(\"\".concat(_this.filtersFori18n, \".GROUPS.\").concat(group.i18nGroup)),\n          attributes: group.attributes.map(function (attribute) {\n            return {\n              key: attribute.key,\n              name: _this.$t(\"\".concat(_this.filtersFori18n, \".ATTRIBUTES.\").concat(attribute.i18nKey))\n            };\n          })\n        };\n      });\n      var customAttributeTypes = allCustomAttributes.map(function (attr) {\n        return {\n          attributeKey: attr.attribute_key,\n          attributeI18nKey: \"CUSTOM_ATTRIBUTE_\".concat(attr.attribute_display_type.toUpperCase()),\n          inputType: _this.customAttributeInputType(attr.attribute_display_type),\n          filterOperators: _this.getOperatorTypes(attr.attribute_display_type),\n          attributeModel: 'custom_attributes'\n        };\n      });\n      this.filterTypes = [].concat(_toConsumableArray(this.filterTypes), _toConsumableArray(customAttributeTypes));\n      this.filterGroups = [].concat(_toConsumableArray(allFilterGroups), [customAttributesFormatted]);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/mixins/filterMixin.js"],"names":["methods","setFilterAttributes","allCustomAttributes","$store","getters","attributeModel","customAttributesFormatted","name","$t","filtersFori18n","attributes","map","attr","key","attribute_key","attribute_display_name","allFilterGroups","filterAttributeGroups","group","i18nGroup","attribute","i18nKey","customAttributeTypes","attributeKey","attributeI18nKey","attribute_display_type","toUpperCase","inputType","customAttributeInputType","filterOperators","getOperatorTypes","filterTypes","filterGroups"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,eAAe;AACbA,EAAAA,OAAO,EAAE;AACPC,IAAAA,mBADO,iCACe;AAAA;;AACpB,UAAMC,mBAAmB,GAAG,KAAKC,MAAL,CAAYC,OAAZ,CAC1B,iCAD0B,EAE1B,KAAKC,cAFqB,CAA5B;AAGA,UAAMC,yBAAyB,GAAG;AAChCC,QAAAA,IAAI,EAAE,KAAKC,EAAL,WAAW,KAAKC,cAAhB,+BAD0B;AAEhCC,QAAAA,UAAU,EAAER,mBAAmB,CAACS,GAApB,CAAwB,UAAAC,IAAI,EAAI;AAC1C,iBAAO;AACLC,YAAAA,GAAG,EAAED,IAAI,CAACE,aADL;AAELP,YAAAA,IAAI,EAAEK,IAAI,CAACG;AAFN,WAAP;AAID,SALW;AAFoB,OAAlC;AASA,UAAMC,eAAe,GAAG,KAAKC,qBAAL,CAA2BN,GAA3B,CAA+B,UAAAO,KAAK,EAAI;AAC9D,eAAO;AACLX,UAAAA,IAAI,EAAE,KAAI,CAACC,EAAL,WAAW,KAAI,CAACC,cAAhB,qBAAyCS,KAAK,CAACC,SAA/C,EADD;AAELT,UAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,CAAiBC,GAAjB,CAAqB,UAAAS,SAAS,EAAI;AAC5C,mBAAO;AACLP,cAAAA,GAAG,EAAEO,SAAS,CAACP,GADV;AAELN,cAAAA,IAAI,EAAE,KAAI,CAACC,EAAL,WACD,KAAI,CAACC,cADJ,yBACiCW,SAAS,CAACC,OAD3C;AAFD,aAAP;AAMD,WAPW;AAFP,SAAP;AAWD,OAZuB,CAAxB;AAaA,UAAMC,oBAAoB,GAAGpB,mBAAmB,CAACS,GAApB,CAAwB,UAAAC,IAAI,EAAI;AAC3D,eAAO;AACLW,UAAAA,YAAY,EAAEX,IAAI,CAACE,aADd;AAELU,UAAAA,gBAAgB,6BAAsBZ,IAAI,CAACa,sBAAL,CAA4BC,WAA5B,EAAtB,CAFX;AAGLC,UAAAA,SAAS,EAAE,KAAI,CAACC,wBAAL,CAA8BhB,IAAI,CAACa,sBAAnC,CAHN;AAILI,UAAAA,eAAe,EAAE,KAAI,CAACC,gBAAL,CAAsBlB,IAAI,CAACa,sBAA3B,CAJZ;AAKLpB,UAAAA,cAAc,EAAE;AALX,SAAP;AAOD,OAR4B,CAA7B;AASA,WAAK0B,WAAL,gCAAuB,KAAKA,WAA5B,sBAA4CT,oBAA5C;AACA,WAAKU,YAAL,gCAAwBhB,eAAxB,IAAyCV,yBAAzC;AACD;AAtCM;AADI,CAAf","sourcesContent":["export default {\n  methods: {\n    setFilterAttributes() {\n      const allCustomAttributes = this.$store.getters[\n        'attributes/getAttributesByModel'\n      ](this.attributeModel);\n      const customAttributesFormatted = {\n        name: this.$t(`${this.filtersFori18n}.GROUPS.CUSTOM_ATTRIBUTES`),\n        attributes: allCustomAttributes.map(attr => {\n          return {\n            key: attr.attribute_key,\n            name: attr.attribute_display_name,\n          };\n        }),\n      };\n      const allFilterGroups = this.filterAttributeGroups.map(group => {\n        return {\n          name: this.$t(`${this.filtersFori18n}.GROUPS.${group.i18nGroup}`),\n          attributes: group.attributes.map(attribute => {\n            return {\n              key: attribute.key,\n              name: this.$t(\n                `${this.filtersFori18n}.ATTRIBUTES.${attribute.i18nKey}`\n              ),\n            };\n          }),\n        };\n      });\n      const customAttributeTypes = allCustomAttributes.map(attr => {\n        return {\n          attributeKey: attr.attribute_key,\n          attributeI18nKey: `CUSTOM_ATTRIBUTE_${attr.attribute_display_type.toUpperCase()}`,\n          inputType: this.customAttributeInputType(attr.attribute_display_type),\n          filterOperators: this.getOperatorTypes(attr.attribute_display_type),\n          attributeModel: 'custom_attributes',\n        };\n      });\n      this.filterTypes = [...this.filterTypes, ...customAttributeTypes];\n      this.filterGroups = [...allFilterGroups, customAttributesFormatted];\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}