{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport Integration from './Integration';\nimport IntegrationHelpText from './IntegrationHelpText';\nexport default {\n  components: {\n    Integration: Integration,\n    IntegrationHelpText: IntegrationHelpText\n  },\n  mixins: [globalConfigMixin],\n  props: {\n    integrationId: {\n      type: [String, Number],\n      required: true\n    },\n    code: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      integrationLoaded: false\n    };\n  },\n  computed: _objectSpread({\n    integration: function integration() {\n      return this.$store.getters['integrations/getIntegration'](this.integrationId);\n    }\n  }, mapGetters({\n    currentUser: 'getCurrentUser',\n    globalConfig: 'globalConfig/get',\n    accountId: 'getCurrentAccountId'\n  })),\n  mounted: function mounted() {\n    this.intializeSlackIntegration();\n  },\n  methods: {\n    integrationAction: function integrationAction() {\n      if (this.integration.enabled) {\n        return 'disconnect';\n      }\n\n      return this.integration.action;\n    },\n    intializeSlackIntegration: function intializeSlackIntegration() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$store.dispatch('integrations/get', _this.integrationId);\n\n              case 2:\n                if (!_this.code) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return _this.$store.dispatch('integrations/connectSlack', _this.code);\n\n              case 5:\n                // we are clearing code from the path as subsequent request would throw error\n                _this.$router.replace(_this.$route.path);\n\n              case 6:\n                _this.integrationLoaded = true;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["ShowIntegration.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,iBAAA,MAAA,iCAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA,WADA;AAEA,IAAA,mBAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,iBAAA,CALA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,IAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AALA,GAPA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA;AACA,MAAA,iBAAA,EAAA;AADA,KAAA;AAGA,GAlBA;AAmBA,EAAA,QAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,6BAAA,EACA,KAAA,aADA,CAAA;AAGA;AALA,KAMA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA,gBADA;AAEA,IAAA,YAAA,EAAA,kBAFA;AAGA,IAAA,SAAA,EAAA;AAHA,GAAA,CANA,CAnBA;AA+BA,EAAA,OA/BA,qBA+BA;AACA,SAAA,yBAAA;AACA,GAjCA;AAkCA,EAAA,OAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,UAAA,KAAA,WAAA,CAAA,OAAA,EAAA;AACA,eAAA,YAAA;AACA;;AACA,aAAA,KAAA,WAAA,CAAA,MAAA;AACA,KANA;AAOA,IAAA,yBAPA,uCAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,KAAA,CAAA,aAAA,CADA;;AAAA;AAAA,qBAEA,KAAA,CAAA,IAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,2BAAA,EAAA,KAAA,CAAA,IAAA,CAHA;;AAAA;AAIA;AACA,gBAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,MAAA,CAAA,IAAA;;AALA;AAOA,gBAAA,KAAA,CAAA,iBAAA,GAAA,IAAA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAfA;AAlCA,CAAA","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <div class=\"row\">\n      <div class=\"small-12 columns integrations-wrap\">\n        <div class=\"row integrations\">\n          <div v-if=\"integrationLoaded\" class=\"small-12 columns integration\">\n            <integration\n              :integration-id=\"integration.id\"\n              :integration-logo=\"integration.logo\"\n              :integration-name=\"integration.name\"\n              :integration-description=\"integration.description\"\n              :integration-enabled=\"integration.enabled\"\n              :integration-action=\"integrationAction()\"\n            />\n          </div>\n          <div v-if=\"integration.enabled\" class=\"small-12 columns integration\">\n            <IntegrationHelpText />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport Integration from './Integration';\nimport IntegrationHelpText from './IntegrationHelpText';\n\nexport default {\n  components: {\n    Integration,\n    IntegrationHelpText,\n  },\n  mixins: [globalConfigMixin],\n\n  props: {\n    integrationId: {\n      type: [String, Number],\n      required: true,\n    },\n    code: { type: String, default: '' },\n  },\n  data() {\n    return {\n      integrationLoaded: false,\n    };\n  },\n  computed: {\n    integration() {\n      return this.$store.getters['integrations/getIntegration'](\n        this.integrationId\n      );\n    },\n    ...mapGetters({\n      currentUser: 'getCurrentUser',\n      globalConfig: 'globalConfig/get',\n      accountId: 'getCurrentAccountId',\n    }),\n  },\n  mounted() {\n    this.intializeSlackIntegration();\n  },\n  methods: {\n    integrationAction() {\n      if (this.integration.enabled) {\n        return 'disconnect';\n      }\n      return this.integration.action;\n    },\n    async intializeSlackIntegration() {\n      await this.$store.dispatch('integrations/get', this.integrationId);\n      if (this.code) {\n        await this.$store.dispatch('integrations/connectSlack', this.code);\n        // we are clearing code from the path as subsequent request would throw error\n        this.$router.replace(this.$route.path);\n      }\n      this.integrationLoaded = true;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/integrations"},"metadata":{},"sourceType":"module"}