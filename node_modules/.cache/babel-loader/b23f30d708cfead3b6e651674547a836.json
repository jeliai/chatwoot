{"ast":null,"code":"// Vendored directly from https://github.com/vuejs/vue/blob/master/src/core/util/debug.js with types only changes.\nvar classifyRE = /(?:^|[-_])(\\w)/g;\n\nvar classify = function classify(str) {\n  return str.replace(classifyRE, function (c) {\n    return c.toUpperCase();\n  }).replace(/[-_]/g, '');\n};\n\nvar ROOT_COMPONENT_NAME = '<Root>';\nvar ANONYMOUS_COMPONENT_NAME = '<Anonymous>';\n\nvar repeat = function repeat(str, n) {\n  var res = '';\n\n  while (n) {\n    if (n % 2 === 1) {\n      res += str;\n    }\n\n    if (n > 1) {\n      str += str; // eslint-disable-line no-param-reassign\n    }\n\n    n >>= 1; // eslint-disable-line no-bitwise, no-param-reassign\n  }\n\n  return res;\n};\n\nexport var formatComponentName = function formatComponentName(vm, includeFile) {\n  if (!vm) {\n    return ANONYMOUS_COMPONENT_NAME;\n  }\n\n  if (vm.$root === vm) {\n    return ROOT_COMPONENT_NAME;\n  }\n\n  var options = vm.$options;\n  var name = options.name || options._componentTag;\n  var file = options.__file;\n\n  if (!name && file) {\n    var match = file.match(/([^/\\\\]+)\\.vue$/);\n\n    if (match) {\n      name = match[1];\n    }\n  }\n\n  return (name ? \"<\" + classify(name) + \">\" : ANONYMOUS_COMPONENT_NAME) + (file && includeFile !== false ? \" at \" + file : '');\n};\nexport var generateComponentTrace = function generateComponentTrace(vm) {\n  var _a, _b, _c;\n\n  if ((((_a = vm) === null || _a === void 0 ? void 0 : _a._isVue) || ((_b = vm) === null || _b === void 0 ? void 0 : _b.__isVue)) && ((_c = vm) === null || _c === void 0 ? void 0 : _c.$parent)) {\n    var tree = [];\n    var currentRecursiveSequence = 0;\n\n    while (vm) {\n      if (tree.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var last = tree[tree.length - 1]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n        if (last.constructor === vm.constructor) {\n          currentRecursiveSequence += 1;\n          vm = vm.$parent; // eslint-disable-line no-param-reassign\n\n          continue;\n        } else if (currentRecursiveSequence > 0) {\n          tree[tree.length - 1] = [last, currentRecursiveSequence];\n          currentRecursiveSequence = 0;\n        }\n      }\n\n      tree.push(vm);\n      vm = vm.$parent; // eslint-disable-line no-param-reassign\n    }\n\n    var formattedTree = tree.map(function (vm, i) {\n      return \"\" + ((i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + \"... (\" + vm[1] + \" recursive calls)\" : formatComponentName(vm)));\n    }).join('\\n');\n    return \"\\n\\nfound in\\n\\n\" + formattedTree;\n  }\n\n  return \"\\n\\n(found in \" + formatComponentName(vm) + \")\";\n};","map":null,"metadata":{},"sourceType":"module"}