{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport { hasPressedArrowUpKey, hasPressedArrowDownKey } from 'shared/helpers/KeyboardHelpers';\nexport default {\n  name: 'WootDropdownMenu',\n  componentName: 'WootDropdownMenu',\n  mixins: [eventListenerMixins],\n  props: {\n    placement: {\n      type: String,\n      default: 'top'\n    }\n  },\n  methods: {\n    dropdownMenuButtons: function dropdownMenuButtons() {\n      return this.$refs.dropdownMenu.querySelectorAll('ul.dropdown li.dropdown-menu__item .button');\n    },\n    activeElementIndex: function activeElementIndex() {\n      var menuButtons = this.dropdownMenuButtons();\n      var focusedButton = this.$refs.dropdownMenu.querySelector('ul.dropdown li.dropdown-menu__item .button:focus');\n\n      var activeIndex = _toConsumableArray(menuButtons).indexOf(focusedButton);\n\n      return activeIndex;\n    },\n    handleKeyEvents: function handleKeyEvents(e) {\n      var menuButtons = this.dropdownMenuButtons();\n      var lastElementIndex = menuButtons.length - 1;\n      if (menuButtons.length === 0) return;\n\n      if (hasPressedArrowUpKey(e)) {\n        var activeIndex = this.activeElementIndex();\n\n        if (activeIndex >= 1) {\n          menuButtons[activeIndex - 1].focus();\n        } else {\n          menuButtons[lastElementIndex].focus();\n        }\n      }\n\n      if (hasPressedArrowDownKey(e)) {\n        var _activeIndex = this.activeElementIndex();\n\n        if (_activeIndex === lastElementIndex) {\n          menuButtons[0].focus();\n        } else {\n          menuButtons[_activeIndex + 1].focus();\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["DropdownMenu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,OAAA,mBAAA,MAAA,mCAAA;AACA,SACA,oBADA,EAEA,sBAFA,QAGA,gCAHA;AAIA,eAAA;AACA,EAAA,IAAA,EAAA,kBADA;AAEA,EAAA,aAAA,EAAA,kBAFA;AAIA,EAAA,MAAA,EAAA,CAAA,mBAAA,CAJA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GANA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,mBADA,iCACA;AACA,aAAA,KAAA,KAAA,CAAA,YAAA,CAAA,gBAAA,CACA,4CADA,CAAA;AAGA,KALA;AAMA,IAAA,kBANA,gCAMA;AACA,UAAA,WAAA,GAAA,KAAA,mBAAA,EAAA;AACA,UAAA,aAAA,GAAA,KAAA,KAAA,CAAA,YAAA,CAAA,aAAA,CACA,kDADA,CAAA;;AAGA,UAAA,WAAA,GAAA,mBAAA,WAAA,EAAA,OAAA,CAAA,aAAA,CAAA;;AACA,aAAA,WAAA;AACA,KAbA;AAcA,IAAA,eAdA,2BAcA,CAdA,EAcA;AACA,UAAA,WAAA,GAAA,KAAA,mBAAA,EAAA;AACA,UAAA,gBAAA,GAAA,WAAA,CAAA,MAAA,GAAA,CAAA;AAEA,UAAA,WAAA,CAAA,MAAA,KAAA,CAAA,EAAA;;AAEA,UAAA,oBAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,kBAAA,EAAA;;AAEA,YAAA,WAAA,IAAA,CAAA,EAAA;AACA,UAAA,WAAA,CAAA,WAAA,GAAA,CAAA,CAAA,CAAA,KAAA;AACA,SAFA,MAEA;AACA,UAAA,WAAA,CAAA,gBAAA,CAAA,CAAA,KAAA;AACA;AACA;;AACA,UAAA,sBAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,YAAA,GAAA,KAAA,kBAAA,EAAA;;AAEA,YAAA,YAAA,KAAA,gBAAA,EAAA;AACA,UAAA,WAAA,CAAA,CAAA,CAAA,CAAA,KAAA;AACA,SAFA,MAEA;AACA,UAAA,WAAA,CAAA,YAAA,GAAA,CAAA,CAAA,CAAA,KAAA;AACA;AACA;AACA;AAtCA;AAZA,CAAA","sourcesContent":["<template>\n  <ul\n    ref=\"dropdownMenu\"\n    class=\"dropdown menu vertical\"\n    :class=\"[placement && `dropdown--${placement}`]\"\n  >\n    <slot />\n  </ul>\n</template>\n<script>\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport {\n  hasPressedArrowUpKey,\n  hasPressedArrowDownKey,\n} from 'shared/helpers/KeyboardHelpers';\nexport default {\n  name: 'WootDropdownMenu',\n  componentName: 'WootDropdownMenu',\n\n  mixins: [eventListenerMixins],\n\n  props: {\n    placement: {\n      type: String,\n      default: 'top',\n    },\n  },\n  methods: {\n    dropdownMenuButtons() {\n      return this.$refs.dropdownMenu.querySelectorAll(\n        'ul.dropdown li.dropdown-menu__item .button'\n      );\n    },\n    activeElementIndex() {\n      const menuButtons = this.dropdownMenuButtons();\n      const focusedButton = this.$refs.dropdownMenu.querySelector(\n        'ul.dropdown li.dropdown-menu__item .button:focus'\n      );\n      const activeIndex = [...menuButtons].indexOf(focusedButton);\n      return activeIndex;\n    },\n    handleKeyEvents(e) {\n      const menuButtons = this.dropdownMenuButtons();\n      const lastElementIndex = menuButtons.length - 1;\n\n      if (menuButtons.length === 0) return;\n\n      if (hasPressedArrowUpKey(e)) {\n        const activeIndex = this.activeElementIndex();\n\n        if (activeIndex >= 1) {\n          menuButtons[activeIndex - 1].focus();\n        } else {\n          menuButtons[lastElementIndex].focus();\n        }\n      }\n      if (hasPressedArrowDownKey(e)) {\n        const activeIndex = this.activeElementIndex();\n\n        if (activeIndex === lastElementIndex) {\n          menuButtons[0].focus();\n        } else {\n          menuButtons[activeIndex + 1].focus();\n        }\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/shared/components/ui/dropdown"},"metadata":{},"sourceType":"module"}