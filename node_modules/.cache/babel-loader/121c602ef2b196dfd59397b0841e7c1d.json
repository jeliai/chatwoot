{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required, requiredIf } from 'vuelidate/lib/validators';\nimport FilterInputBox from '../FilterInput/Index.vue';\nimport languages from './advancedFilterItems/languages';\nimport countries from 'shared/constants/countries.js';\nimport { mapGetters } from 'vuex';\nimport { filterAttributeGroups } from './advancedFilterItems';\nimport filterMixin from 'shared/mixins/filterMixin';\nimport * as OPERATORS from 'dashboard/components/widgets/FilterInput/FilterOperatorTypes.js';\nexport default {\n  components: {\n    FilterInputBox: FilterInputBox\n  },\n  mixins: [alertMixin, filterMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: function _default() {}\n    },\n    initialFilterTypes: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  validations: {\n    appliedFilters: {\n      required: required,\n      $each: {\n        values: {\n          ensureBetween0to999: function ensureBetween0to999(value, prop) {\n            if (prop.filter_operator === 'days_before') {\n              return parseInt(value, 10) > 0 && parseInt(value, 10) < 999;\n            }\n\n            return true;\n          },\n          required: requiredIf(function (prop) {\n            return !(prop.filter_operator === 'is_present' || prop.filter_operator === 'is_not_present');\n          })\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      show: true,\n      appliedFilters: [],\n      filterTypes: this.initialFilterTypes,\n      filterAttributeGroups: filterAttributeGroups,\n      filterGroups: [],\n      allCustomAttributes: [],\n      attributeModel: 'conversation_attribute',\n      filtersFori18n: 'FILTER'\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    getAppliedConversationFilters: 'getAppliedConversationFilters'\n  })),\n  mounted: function mounted() {\n    this.setFilterAttributes();\n    this.$store.dispatch('campaigns/get');\n\n    if (this.getAppliedConversationFilters.length) {\n      this.appliedFilters = _toConsumableArray(this.getAppliedConversationFilters);\n    } else {\n      this.appliedFilters.push({\n        attribute_key: 'status',\n        filter_operator: 'equal_to',\n        values: '',\n        query_operator: 'and',\n        attribute_model: 'standard'\n      });\n    }\n  },\n  methods: {\n    getOperatorTypes: function getOperatorTypes(key) {\n      switch (key) {\n        case 'list':\n          return OPERATORS.OPERATOR_TYPES_1;\n\n        case 'text':\n          return OPERATORS.OPERATOR_TYPES_3;\n\n        case 'number':\n          return OPERATORS.OPERATOR_TYPES_1;\n\n        case 'link':\n          return OPERATORS.OPERATOR_TYPES_1;\n\n        case 'date':\n          return OPERATORS.OPERATOR_TYPES_4;\n\n        case 'checkbox':\n          return OPERATORS.OPERATOR_TYPES_1;\n\n        default:\n          return OPERATORS.OPERATOR_TYPES_1;\n      }\n    },\n    customAttributeInputType: function customAttributeInputType(key) {\n      switch (key) {\n        case 'date':\n          return 'date';\n\n        case 'text':\n          return 'plain_text';\n\n        case 'list':\n          return 'search_select';\n\n        case 'checkbox':\n          return 'search_select';\n\n        default:\n          return 'plain_text';\n      }\n    },\n    getAttributeModel: function getAttributeModel(key) {\n      var type = this.filterTypes.find(function (filter) {\n        return filter.attributeKey === key;\n      });\n      return type.attributeModel;\n    },\n    getInputType: function getInputType(key, operator) {\n      if (key === 'created_at' || key === 'last_activity_at') if (operator === 'days_before') return 'plain_text';\n      var type = this.filterTypes.find(function (filter) {\n        return filter.attributeKey === key;\n      });\n      return type.inputType;\n    },\n    getOperators: function getOperators(key) {\n      var type = this.filterTypes.find(function (filter) {\n        return filter.attributeKey === key;\n      });\n      return type.filterOperators;\n    },\n    getDropdownValues: function getDropdownValues(type) {\n      var statusFilters = this.$t('CHAT_LIST.CHAT_STATUS_FILTER_ITEMS');\n      var allCustomAttributes = this.$store.getters['attributes/getAttributesByModel'](this.attributeModel);\n      var isCustomAttributeCheckbox = allCustomAttributes.find(function (attr) {\n        return attr.attribute_key === type && attr.attribute_display_type === 'checkbox';\n      });\n\n      if (isCustomAttributeCheckbox) {\n        return [{\n          id: true,\n          name: this.$t('FILTER.ATTRIBUTE_LABELS.TRUE')\n        }, {\n          id: false,\n          name: this.$t('FILTER.ATTRIBUTE_LABELS.FALSE')\n        }];\n      }\n\n      var isCustomAttributeList = allCustomAttributes.find(function (attr) {\n        return attr.attribute_key === type && attr.attribute_display_type === 'list';\n      });\n\n      if (isCustomAttributeList) {\n        return allCustomAttributes.find(function (attr) {\n          return attr.attribute_key === type;\n        }).attribute_values.map(function (item) {\n          return {\n            id: item,\n            name: item\n          };\n        });\n      }\n\n      switch (type) {\n        case 'status':\n          return [].concat(_toConsumableArray(Object.keys(statusFilters).map(function (status) {\n            return {\n              id: status,\n              name: statusFilters[status].TEXT\n            };\n          })), [{\n            id: 'all',\n            name: this.$t('CHAT_LIST.FILTER_ALL')\n          }]);\n\n        case 'assignee_id':\n          return this.$store.getters['agents/getAgents'];\n\n        case 'contact':\n          return this.$store.getters['contacts/getContacts'];\n\n        case 'inbox_id':\n          return this.$store.getters['inboxes/getInboxes'];\n\n        case 'team_id':\n          return this.$store.getters['teams/getTeams'];\n\n        case 'campaign_id':\n          return this.$store.getters['campaigns/getAllCampaigns'].map(function (i) {\n            return {\n              id: i.id,\n              name: i.title\n            };\n          });\n\n        case 'labels':\n          return this.$store.getters['labels/getLabels'].map(function (i) {\n            return {\n              id: i.title,\n              name: i.title\n            };\n          });\n\n        case 'browser_language':\n          return languages;\n\n        case 'country_code':\n          return countries;\n\n        default:\n          return undefined;\n      }\n    },\n    appendNewFilter: function appendNewFilter() {\n      this.appliedFilters.push({\n        attribute_key: 'status',\n        filter_operator: 'equal_to',\n        values: '',\n        query_operator: 'and'\n      });\n    },\n    removeFilter: function removeFilter(index) {\n      if (this.appliedFilters.length <= 1) {\n        this.showAlert(this.$t('FILTER.FILTER_DELETE_ERROR'));\n      } else {\n        this.appliedFilters.splice(index, 1);\n      }\n    },\n    submitFilterQuery: function submitFilterQuery() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      this.$store.dispatch('setConversationFilters', JSON.parse(JSON.stringify(this.appliedFilters)));\n      this.$emit('applyFilter', this.appliedFilters);\n    },\n    resetFilter: function resetFilter(index, currentFilter) {\n      this.appliedFilters[index].filter_operator = this.filterTypes.find(function (filter) {\n        return filter.attributeKey === currentFilter.attribute_key;\n      }).filterOperators[0].value;\n      this.appliedFilters[index].values = '';\n    },\n    showUserInput: function showUserInput(operatorType) {\n      if (operatorType === 'is_present' || operatorType === 'is_not_present') return false;\n      return true;\n    }\n  }\n};","map":{"version":3,"sources":["ConversationAdvancedFilter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,OAAA,UAAA,MAAA,0BAAA;AACA,SAAA,QAAA,EAAA,UAAA,QAAA,0BAAA;AACA,OAAA,cAAA,MAAA,0BAAA;AACA,OAAA,SAAA,MAAA,iCAAA;AACA,OAAA,SAAA,MAAA,+BAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,qBAAA,QAAA,uBAAA;AACA,OAAA,WAAA,MAAA,2BAAA;AACA,OAAA,KAAA,SAAA,MAAA,iEAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GADA;AAIA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,WAAA,CAJA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AALA,GALA;AAeA,EAAA,WAAA,EAAA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,KAAA,EAAA;AACA,QAAA,MAAA,EAAA;AACA,UAAA,mBADA,+BACA,KADA,EACA,IADA,EACA;AACA,gBAAA,IAAA,CAAA,eAAA,KAAA,aAAA,EAAA;AACA,qBAAA,QAAA,CAAA,KAAA,EAAA,EAAA,CAAA,GAAA,CAAA,IAAA,QAAA,CAAA,KAAA,EAAA,EAAA,CAAA,GAAA,GAAA;AACA;;AACA,mBAAA,IAAA;AACA,WANA;AAOA,UAAA,QAAA,EAAA,UAAA,CAAA,UAAA,IAAA,EAAA;AACA,mBAAA,EACA,IAAA,CAAA,eAAA,KAAA,YAAA,IACA,IAAA,CAAA,eAAA,KAAA,gBAFA,CAAA;AAIA,WALA;AAPA;AADA;AAFA;AADA,GAfA;AAoCA,EAAA,IApCA,kBAoCA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IADA;AAEA,MAAA,cAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA,KAAA,kBAHA;AAIA,MAAA,qBAAA,EAAA,qBAJA;AAKA,MAAA,YAAA,EAAA,EALA;AAMA,MAAA,mBAAA,EAAA,EANA;AAOA,MAAA,cAAA,EAAA,wBAPA;AAQA,MAAA,cAAA,EAAA;AARA,KAAA;AAUA,GA/CA;AAgDA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,6BAAA,EAAA;AADA,GAAA,CADA,CAhDA;AAqDA,EAAA,OArDA,qBAqDA;AACA,SAAA,mBAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,eAAA;;AACA,QAAA,KAAA,6BAAA,CAAA,MAAA,EAAA;AACA,WAAA,cAAA,sBAAA,KAAA,6BAAA;AACA,KAFA,MAEA;AACA,WAAA,cAAA,CAAA,IAAA,CAAA;AACA,QAAA,aAAA,EAAA,QADA;AAEA,QAAA,eAAA,EAAA,UAFA;AAGA,QAAA,MAAA,EAAA,EAHA;AAIA,QAAA,cAAA,EAAA,KAJA;AAKA,QAAA,eAAA,EAAA;AALA,OAAA;AAOA;AACA,GAnEA;AAoEA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,4BACA,GADA,EACA;AACA,cAAA,GAAA;AACA,aAAA,MAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA,aAAA,MAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA,aAAA,QAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA,aAAA,MAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA,aAAA,MAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA,aAAA,UAAA;AACA,iBAAA,SAAA,CAAA,gBAAA;;AACA;AACA,iBAAA,SAAA,CAAA,gBAAA;AAdA;AAgBA,KAlBA;AAmBA,IAAA,wBAnBA,oCAmBA,GAnBA,EAmBA;AACA,cAAA,GAAA;AACA,aAAA,MAAA;AACA,iBAAA,MAAA;;AACA,aAAA,MAAA;AACA,iBAAA,YAAA;;AACA,aAAA,MAAA;AACA,iBAAA,eAAA;;AACA,aAAA,UAAA;AACA,iBAAA,eAAA;;AACA;AACA,iBAAA,YAAA;AAVA;AAYA,KAhCA;AAiCA,IAAA,iBAjCA,6BAiCA,GAjCA,EAiCA;AACA,UAAA,IAAA,GAAA,KAAA,WAAA,CAAA,IAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,YAAA,KAAA,GAAA;AAAA,OAAA,CAAA;AACA,aAAA,IAAA,CAAA,cAAA;AACA,KApCA;AAqCA,IAAA,YArCA,wBAqCA,GArCA,EAqCA,QArCA,EAqCA;AACA,UAAA,GAAA,KAAA,YAAA,IAAA,GAAA,KAAA,kBAAA,EACA,IAAA,QAAA,KAAA,aAAA,EAAA,OAAA,YAAA;AACA,UAAA,IAAA,GAAA,KAAA,WAAA,CAAA,IAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,YAAA,KAAA,GAAA;AAAA,OAAA,CAAA;AACA,aAAA,IAAA,CAAA,SAAA;AACA,KA1CA;AA2CA,IAAA,YA3CA,wBA2CA,GA3CA,EA2CA;AACA,UAAA,IAAA,GAAA,KAAA,WAAA,CAAA,IAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,YAAA,KAAA,GAAA;AAAA,OAAA,CAAA;AACA,aAAA,IAAA,CAAA,eAAA;AACA,KA9CA;AA+CA,IAAA,iBA/CA,6BA+CA,IA/CA,EA+CA;AACA,UAAA,aAAA,GAAA,KAAA,EAAA,CAAA,oCAAA,CAAA;AACA,UAAA,mBAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CACA,iCADA,EAEA,KAAA,cAFA,CAAA;AAIA,UAAA,yBAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,eACA,IAAA,CAAA,aAAA,KAAA,IAAA,IACA,IAAA,CAAA,sBAAA,KAAA,UAFA;AAIA,OALA,CAAA;;AAOA,UAAA,yBAAA,EAAA;AACA,eAAA,CACA;AACA,UAAA,EAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,8BAAA;AAFA,SADA,EAKA;AACA,UAAA,EAAA,EAAA,KADA;AAEA,UAAA,IAAA,EAAA,KAAA,EAAA,CAAA,+BAAA;AAFA,SALA,CAAA;AAUA;;AAEA,UAAA,qBAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,eACA,IAAA,CAAA,aAAA,KAAA,IAAA,IAAA,IAAA,CAAA,sBAAA,KAAA,MADA;AAGA,OAJA,CAAA;;AAMA,UAAA,qBAAA,EAAA;AACA,eAAA,mBAAA,CACA,IADA,CACA,UAAA,IAAA;AAAA,iBAAA,IAAA,CAAA,aAAA,KAAA,IAAA;AAAA,SADA,EAEA,gBAFA,CAEA,GAFA,CAEA,UAAA,IAAA,EAAA;AACA,iBAAA;AACA,YAAA,EAAA,EAAA,IADA;AAEA,YAAA,IAAA,EAAA;AAFA,WAAA;AAIA,SAPA,CAAA;AAQA;;AAEA,cAAA,IAAA;AACA,aAAA,QAAA;AACA,8CACA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA,GAAA,CAAA,UAAA,MAAA,EAAA;AACA,mBAAA;AACA,cAAA,EAAA,EAAA,MADA;AAEA,cAAA,IAAA,EAAA,aAAA,CAAA,MAAA,CAAA,CAAA;AAFA,aAAA;AAIA,WALA,CADA,IAOA;AACA,YAAA,EAAA,EAAA,KADA;AAEA,YAAA,IAAA,EAAA,KAAA,EAAA,CAAA,sBAAA;AAFA,WAPA;;AAYA,aAAA,aAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,aAAA,SAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,aAAA,UAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,aAAA,SAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,aAAA,aAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,2BAAA,EAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,mBAAA;AACA,cAAA,EAAA,EAAA,CAAA,CAAA,EADA;AAEA,cAAA,IAAA,EAAA,CAAA,CAAA;AAFA,aAAA;AAIA,WALA,CAAA;;AAMA,aAAA,QAAA;AACA,iBAAA,KAAA,MAAA,CAAA,OAAA,CAAA,kBAAA,EAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,mBAAA;AACA,cAAA,EAAA,EAAA,CAAA,CAAA,KADA;AAEA,cAAA,IAAA,EAAA,CAAA,CAAA;AAFA,aAAA;AAIA,WALA,CAAA;;AAMA,aAAA,kBAAA;AACA,iBAAA,SAAA;;AACA,aAAA,cAAA;AACA,iBAAA,SAAA;;AACA;AACA,iBAAA,SAAA;AAzCA;AA2CA,KArIA;AAsIA,IAAA,eAtIA,6BAsIA;AACA,WAAA,cAAA,CAAA,IAAA,CAAA;AACA,QAAA,aAAA,EAAA,QADA;AAEA,QAAA,eAAA,EAAA,UAFA;AAGA,QAAA,MAAA,EAAA,EAHA;AAIA,QAAA,cAAA,EAAA;AAJA,OAAA;AAMA,KA7IA;AA8IA,IAAA,YA9IA,wBA8IA,KA9IA,EA8IA;AACA,UAAA,KAAA,cAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,aAAA,SAAA,CAAA,KAAA,EAAA,CAAA,4BAAA,CAAA;AACA,OAFA,MAEA;AACA,aAAA,cAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA;AACA,KApJA;AAqJA,IAAA,iBArJA,+BAqJA;AACA,WAAA,EAAA,CAAA,MAAA;AACA,UAAA,KAAA,EAAA,CAAA,QAAA,EAAA;AACA,WAAA,MAAA,CAAA,QAAA,CACA,wBADA,EAEA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,KAAA,cAAA,CAAA,CAFA;AAIA,WAAA,KAAA,CAAA,aAAA,EAAA,KAAA,cAAA;AACA,KA7JA;AA8JA,IAAA,WA9JA,uBA8JA,KA9JA,EA8JA,aA9JA,EA8JA;AACA,WAAA,cAAA,CAAA,KAAA,EAAA,eAAA,GAAA,KAAA,WAAA,CAAA,IAAA,CACA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,YAAA,KAAA,aAAA,CAAA,aAAA;AAAA,OADA,EAEA,eAFA,CAEA,CAFA,EAEA,KAFA;AAGA,WAAA,cAAA,CAAA,KAAA,EAAA,MAAA,GAAA,EAAA;AACA,KAnKA;AAoKA,IAAA,aApKA,yBAoKA,YApKA,EAoKA;AACA,UAAA,YAAA,KAAA,YAAA,IAAA,YAAA,KAAA,gBAAA,EACA,OAAA,KAAA;AACA,aAAA,IAAA;AACA;AAxKA;AApEA,CAAA","sourcesContent":["<template>\n  <div class=\"column\">\n    <woot-modal-header :header-title=\"$t('FILTER.TITLE')\">\n      <p>{{ $t('FILTER.SUBTITLE') }}</p>\n    </woot-modal-header>\n    <div class=\"row modal-content\">\n      <div class=\"medium-12 columns filters-wrap\">\n        <filter-input-box\n          v-for=\"(filter, i) in appliedFilters\"\n          :key=\"i\"\n          v-model=\"appliedFilters[i]\"\n          :filter-groups=\"filterGroups\"\n          :input-type=\"\n            getInputType(\n              appliedFilters[i].attribute_key,\n              appliedFilters[i].filter_operator\n            )\n          \"\n          :operators=\"getOperators(appliedFilters[i].attribute_key)\"\n          :dropdown-values=\"getDropdownValues(appliedFilters[i].attribute_key)\"\n          :show-query-operator=\"i !== appliedFilters.length - 1\"\n          :show-user-input=\"showUserInput(appliedFilters[i].filter_operator)\"\n          :grouped-filters=\"true\"\n          :v=\"$v.appliedFilters.$each[i]\"\n          @resetFilter=\"resetFilter(i, appliedFilters[i])\"\n          @removeFilter=\"removeFilter(i)\"\n        />\n        <div class=\"filter-actions\">\n          <woot-button\n            icon=\"add\"\n            color-scheme=\"success\"\n            variant=\"smooth\"\n            size=\"small\"\n            @click=\"appendNewFilter\"\n          >\n            {{ $t('FILTER.ADD_NEW_FILTER') }}\n          </woot-button>\n        </div>\n      </div>\n      <div class=\"medium-12 columns\">\n        <div class=\"modal-footer justify-content-end w-full\">\n          <woot-button class=\"button clear\" @click.prevent=\"onClose\">\n            {{ $t('FILTER.CANCEL_BUTTON_LABEL') }}\n          </woot-button>\n          <woot-button @click=\"submitFilterQuery\">\n            {{ $t('FILTER.SUBMIT_BUTTON_LABEL') }}\n          </woot-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required, requiredIf } from 'vuelidate/lib/validators';\nimport FilterInputBox from '../FilterInput/Index.vue';\nimport languages from './advancedFilterItems/languages';\nimport countries from 'shared/constants/countries.js';\nimport { mapGetters } from 'vuex';\nimport { filterAttributeGroups } from './advancedFilterItems';\nimport filterMixin from 'shared/mixins/filterMixin';\nimport * as OPERATORS from 'dashboard/components/widgets/FilterInput/FilterOperatorTypes.js';\n\nexport default {\n  components: {\n    FilterInputBox,\n  },\n  mixins: [alertMixin, filterMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: () => {},\n    },\n    initialFilterTypes: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  validations: {\n    appliedFilters: {\n      required,\n      $each: {\n        values: {\n          ensureBetween0to999(value, prop) {\n            if (prop.filter_operator === 'days_before') {\n              return parseInt(value, 10) > 0 && parseInt(value, 10) < 999;\n            }\n            return true;\n          },\n          required: requiredIf(prop => {\n            return !(\n              prop.filter_operator === 'is_present' ||\n              prop.filter_operator === 'is_not_present'\n            );\n          }),\n        },\n      },\n    },\n  },\n  data() {\n    return {\n      show: true,\n      appliedFilters: [],\n      filterTypes: this.initialFilterTypes,\n      filterAttributeGroups,\n      filterGroups: [],\n      allCustomAttributes: [],\n      attributeModel: 'conversation_attribute',\n      filtersFori18n: 'FILTER',\n    };\n  },\n  computed: {\n    ...mapGetters({\n      getAppliedConversationFilters: 'getAppliedConversationFilters',\n    }),\n  },\n  mounted() {\n    this.setFilterAttributes();\n    this.$store.dispatch('campaigns/get');\n    if (this.getAppliedConversationFilters.length) {\n      this.appliedFilters = [...this.getAppliedConversationFilters];\n    } else {\n      this.appliedFilters.push({\n        attribute_key: 'status',\n        filter_operator: 'equal_to',\n        values: '',\n        query_operator: 'and',\n        attribute_model: 'standard',\n      });\n    }\n  },\n  methods: {\n    getOperatorTypes(key) {\n      switch (key) {\n        case 'list':\n          return OPERATORS.OPERATOR_TYPES_1;\n        case 'text':\n          return OPERATORS.OPERATOR_TYPES_3;\n        case 'number':\n          return OPERATORS.OPERATOR_TYPES_1;\n        case 'link':\n          return OPERATORS.OPERATOR_TYPES_1;\n        case 'date':\n          return OPERATORS.OPERATOR_TYPES_4;\n        case 'checkbox':\n          return OPERATORS.OPERATOR_TYPES_1;\n        default:\n          return OPERATORS.OPERATOR_TYPES_1;\n      }\n    },\n    customAttributeInputType(key) {\n      switch (key) {\n        case 'date':\n          return 'date';\n        case 'text':\n          return 'plain_text';\n        case 'list':\n          return 'search_select';\n        case 'checkbox':\n          return 'search_select';\n        default:\n          return 'plain_text';\n      }\n    },\n    getAttributeModel(key) {\n      const type = this.filterTypes.find(filter => filter.attributeKey === key);\n      return type.attributeModel;\n    },\n    getInputType(key, operator) {\n      if (key === 'created_at' || key === 'last_activity_at')\n        if (operator === 'days_before') return 'plain_text';\n      const type = this.filterTypes.find(filter => filter.attributeKey === key);\n      return type.inputType;\n    },\n    getOperators(key) {\n      const type = this.filterTypes.find(filter => filter.attributeKey === key);\n      return type.filterOperators;\n    },\n    getDropdownValues(type) {\n      const statusFilters = this.$t('CHAT_LIST.CHAT_STATUS_FILTER_ITEMS');\n      const allCustomAttributes = this.$store.getters[\n        'attributes/getAttributesByModel'\n      ](this.attributeModel);\n\n      const isCustomAttributeCheckbox = allCustomAttributes.find(attr => {\n        return (\n          attr.attribute_key === type &&\n          attr.attribute_display_type === 'checkbox'\n        );\n      });\n\n      if (isCustomAttributeCheckbox) {\n        return [\n          {\n            id: true,\n            name: this.$t('FILTER.ATTRIBUTE_LABELS.TRUE'),\n          },\n          {\n            id: false,\n            name: this.$t('FILTER.ATTRIBUTE_LABELS.FALSE'),\n          },\n        ];\n      }\n\n      const isCustomAttributeList = allCustomAttributes.find(attr => {\n        return (\n          attr.attribute_key === type && attr.attribute_display_type === 'list'\n        );\n      });\n\n      if (isCustomAttributeList) {\n        return allCustomAttributes\n          .find(attr => attr.attribute_key === type)\n          .attribute_values.map(item => {\n            return {\n              id: item,\n              name: item,\n            };\n          });\n      }\n\n      switch (type) {\n        case 'status':\n          return [\n            ...Object.keys(statusFilters).map(status => {\n              return {\n                id: status,\n                name: statusFilters[status].TEXT,\n              };\n            }),\n            {\n              id: 'all',\n              name: this.$t('CHAT_LIST.FILTER_ALL'),\n            },\n          ];\n        case 'assignee_id':\n          return this.$store.getters['agents/getAgents'];\n        case 'contact':\n          return this.$store.getters['contacts/getContacts'];\n        case 'inbox_id':\n          return this.$store.getters['inboxes/getInboxes'];\n        case 'team_id':\n          return this.$store.getters['teams/getTeams'];\n        case 'campaign_id':\n          return this.$store.getters['campaigns/getAllCampaigns'].map(i => {\n            return {\n              id: i.id,\n              name: i.title,\n            };\n          });\n        case 'labels':\n          return this.$store.getters['labels/getLabels'].map(i => {\n            return {\n              id: i.title,\n              name: i.title,\n            };\n          });\n        case 'browser_language':\n          return languages;\n        case 'country_code':\n          return countries;\n        default:\n          return undefined;\n      }\n    },\n    appendNewFilter() {\n      this.appliedFilters.push({\n        attribute_key: 'status',\n        filter_operator: 'equal_to',\n        values: '',\n        query_operator: 'and',\n      });\n    },\n    removeFilter(index) {\n      if (this.appliedFilters.length <= 1) {\n        this.showAlert(this.$t('FILTER.FILTER_DELETE_ERROR'));\n      } else {\n        this.appliedFilters.splice(index, 1);\n      }\n    },\n    submitFilterQuery() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      this.$store.dispatch(\n        'setConversationFilters',\n        JSON.parse(JSON.stringify(this.appliedFilters))\n      );\n      this.$emit('applyFilter', this.appliedFilters);\n    },\n    resetFilter(index, currentFilter) {\n      this.appliedFilters[index].filter_operator = this.filterTypes.find(\n        filter => filter.attributeKey === currentFilter.attribute_key\n      ).filterOperators[0].value;\n      this.appliedFilters[index].values = '';\n    },\n    showUserInput(operatorType) {\n      if (operatorType === 'is_present' || operatorType === 'is_not_present')\n        return false;\n      return true;\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.filters-wrap {\n  padding: var(--space-normal);\n  border-radius: var(--border-radius-large);\n  border: 1px solid var(--color-border);\n  background: var(--color-background-light);\n  margin-bottom: var(--space-normal);\n}\n\n.filter-actions {\n  margin-top: var(--space-normal);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}