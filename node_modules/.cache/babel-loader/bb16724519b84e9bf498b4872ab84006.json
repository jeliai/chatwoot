{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { isSingleExpression as i } from \"./directive-helpers.js\";\nimport { Directive as t, PartType as s } from \"./directive.js\";\nexport { directive } from \"./directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nvar e = function e(i, t) {\n  var s, o;\n  var n = i._$AN;\n  if (void 0 === n) return !1;\n\n  var _iterator = _createForOfIteratorHelper(n),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _i = _step.value;\n      null === (o = (s = _i)._$AO) || void 0 === o || o.call(s, t, !1), e(_i, t);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return !0;\n},\n    o = function o(i) {\n  var t, s;\n\n  do {\n    if (void 0 === (t = i._$AM)) break;\n    s = t._$AN, s.delete(i), i = t;\n  } while (0 === (null == s ? void 0 : s.size));\n},\n    n = function n(i) {\n  for (var _t; _t = i._$AM; i = _t) {\n    var _s = _t._$AN;\n    if (void 0 === _s) _t._$AN = _s = new Set();else if (_s.has(i)) break;\n    _s.add(i), l(_t);\n  }\n};\n\nfunction r(i) {\n  void 0 !== this._$AN ? (o(this), this._$AM = i, n(this)) : this._$AM = i;\n}\n\nfunction h(i) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var n = this._$AH,\n      r = this._$AN;\n  if (void 0 !== r && 0 !== r.size) if (t) {\n    if (Array.isArray(n)) for (var _i2 = s; _i2 < n.length; _i2++) {\n      e(n[_i2], !1), o(n[_i2]);\n    } else null != n && (e(n, !1), o(n));\n  } else e(this, i);\n}\n\nvar l = function l(i) {\n  var t, e, o, n;\n  i.type == s.CHILD && (null !== (t = (o = i)._$AP) && void 0 !== t || (o._$AP = h), null !== (e = (n = i)._$AQ) && void 0 !== e || (n._$AQ = r));\n};\n\nvar d = /*#__PURE__*/function (_t2) {\n  _inherits(d, _t2);\n\n  var _super = _createSuper(d);\n\n  function d() {\n    var _this;\n\n    _classCallCheck(this, d);\n\n    _this = _super.apply(this, arguments), _this._$AN = void 0;\n    return _this;\n  }\n\n  _createClass(d, [{\n    key: \"_$AT\",\n    value: function _$AT(i, t, s) {\n      _get(_getPrototypeOf(d.prototype), \"_$AT\", this).call(this, i, t, s), n(this), this.isConnected = i._$AU;\n    }\n  }, {\n    key: \"_$AO\",\n    value: function _$AO(i) {\n      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n      var s, n;\n      i !== this.isConnected && (this.isConnected = i, i ? null === (s = this.reconnected) || void 0 === s || s.call(this) : null === (n = this.disconnected) || void 0 === n || n.call(this)), t && (e(this, i), o(this));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(t) {\n      if (i(this._$Ct)) this._$Ct._$AI(t, this);else {\n        var _i3 = _toConsumableArray(this._$Ct._$AH);\n\n        _i3[this._$Ci] = t, this._$Ct._$AI(_i3, this, 0);\n      }\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected() {}\n  }, {\n    key: \"reconnected\",\n    value: function reconnected() {}\n  }]);\n\n  return d;\n}(t);\n\nexport { d as AsyncDirective };","map":null,"metadata":{},"sourceType":"module"}