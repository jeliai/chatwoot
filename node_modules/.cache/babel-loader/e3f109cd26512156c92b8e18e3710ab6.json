{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Writes a text string to the system clipboard.\n *\n * @async\n * @param {string} text text to be written to the clipboard\n * @throws {Error} unable to copy text to clipboard\n */\nexport var copyTextToClipboard = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(text) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return navigator.clipboard.writeText(text);\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error(\"Unable to copy text to clipboard: \".concat(_context.t0.message));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n\n  return function copyTextToClipboard(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/helpers/clipboard.js"],"names":["copyTextToClipboard","text","navigator","clipboard","writeText","Error","message"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,mBAAmB;AAAA,qEAAG,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEzBC,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,IAA9B,CAFyB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAIzB,IAAII,KAAJ,6CAA+C,YAAMC,OAArD,EAJyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBN,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["/**\n * Writes a text string to the system clipboard.\n *\n * @async\n * @param {string} text text to be written to the clipboard\n * @throws {Error} unable to copy text to clipboard\n */\nexport const copyTextToClipboard = async text => {\n  try {\n    await navigator.clipboard.writeText(text);\n  } catch (error) {\n    throw new Error(`Unable to copy text to clipboard: ${error.message}`);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}