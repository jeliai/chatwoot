{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-env browser */\n\n/* global FB */\nimport { required } from 'vuelidate/lib/validators';\nimport LoadingState from 'dashboard/components/widgets/LoadingState';\nimport { mapGetters } from 'vuex';\nimport ChannelApi from '../../../../../api/channels';\nimport PageHeader from '../../SettingsSubPageHeader';\nimport router from '../../../../index';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport accountMixin from '../../../../../mixins/account';\nexport default {\n  components: {\n    LoadingState: LoadingState,\n    PageHeader: PageHeader\n  },\n  mixins: [globalConfigMixin, accountMixin],\n  data: function data() {\n    return {\n      isCreating: false,\n      omniauth_token: '',\n      user_access_token: '',\n      channel: 'facebook',\n      selectedPage: {\n        name: null,\n        id: null\n      },\n      pageName: '',\n      pageList: [],\n      emptyStateMessage: this.$t('INBOX_MGMT.DETAILS.LOADING_FB'),\n      hasLoginStarted: false\n    };\n  },\n  validations: {\n    pageName: {\n      required: required\n    },\n    selectedPage: {\n      isEmpty: function isEmpty() {\n        return this.selectedPage !== null && !!this.selectedPage.name;\n      }\n    }\n  },\n  computed: _objectSpread({\n    showLoader: function showLoader() {\n      return !this.user_access_token || this.isCreating;\n    },\n    getSelectablePages: function getSelectablePages() {\n      return this.pageList.filter(function (item) {\n        return !item.exists;\n      });\n    }\n  }, mapGetters({\n    currentUser: 'getCurrentUser',\n    globalConfig: 'globalConfig/get'\n  })),\n  created: function created() {\n    this.initFB();\n    this.loadFBsdk();\n  },\n  mounted: function mounted() {\n    this.initFB();\n  },\n  methods: {\n    startLogin: function startLogin() {\n      this.hasLoginStarted = true;\n      this.tryFBlogin();\n    },\n    setPageName: function setPageName(_ref) {\n      var name = _ref.name;\n      this.$v.selectedPage.$touch();\n      this.pageName = name;\n    },\n    initChannelAuth: function initChannelAuth(channel) {\n      if (channel === 'facebook') {\n        this.loadFBsdk();\n      }\n    },\n    initFB: function initFB() {\n      if (window.fbSDKLoaded === undefined) {\n        window.fbAsyncInit = function () {\n          FB.init({\n            appId: window.chatwootConfig.fbAppId,\n            xfbml: true,\n            version: window.chatwootConfig.fbApiVersion,\n            status: true\n          });\n          window.fbSDKLoaded = true;\n          FB.AppEvents.logPageView();\n        };\n      }\n    },\n    loadFBsdk: function loadFBsdk() {\n      (function (d, s, id) {\n        var js; // eslint-disable-next-line\n\n        var fjs = js = d.getElementsByTagName(s)[0];\n\n        if (d.getElementById(id)) {\n          return;\n        }\n\n        js = d.createElement(s);\n        js.id = id;\n        js.src = '//connect.facebook.net/en_US/sdk.js';\n        fjs.parentNode.insertBefore(js, fjs);\n      })(document, 'script', 'facebook-jssdk');\n    },\n    tryFBlogin: function tryFBlogin() {\n      var _this = this;\n\n      FB.login(function (response) {\n        if (response.status === 'connected') {\n          _this.fetchPages(response.authResponse.accessToken);\n        } else if (response.status === 'not_authorized') {\n          // The person is logged into Facebook, but not your app.\n          _this.emptyStateMessage = _this.$t('INBOX_MGMT.DETAILS.ERROR_FB_AUTH');\n        } else {\n          // The person is not logged into Facebook, so we're not sure if\n          // they are logged into this app or not.\n          _this.emptyStateMessage = _this.$t('INBOX_MGMT.DETAILS.ERROR_FB_AUTH');\n        }\n      }, {\n        scope: 'pages_manage_metadata,pages_messaging,instagram_basic,pages_show_list,pages_read_engagement,instagram_manage_messages'\n      });\n    },\n    fetchPages: function fetchPages(_token) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response, data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return ChannelApi.fetchFacebookPages(_token, _this2.accountId);\n\n              case 3:\n                response = _context.sent;\n                data = response.data.data;\n                _this2.pageList = data.page_details;\n                _this2.user_access_token = data.user_access_token;\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 9]]);\n      }))();\n    },\n    channelParams: function channelParams() {\n      return {\n        user_access_token: this.user_access_token,\n        page_access_token: this.selectedPage.access_token,\n        page_id: this.selectedPage.id,\n        inbox_name: this.selectedPage.name\n      };\n    },\n    createChannel: function createChannel() {\n      var _this3 = this;\n\n      this.$v.$touch();\n\n      if (!this.$v.$error) {\n        this.emptyStateMessage = this.$t('INBOX_MGMT.DETAILS.CREATING_CHANNEL');\n        this.isCreating = true;\n        this.$store.dispatch('inboxes/createFBChannel', this.channelParams()).then(function (data) {\n          router.replace({\n            name: 'settings_inboxes_add_agents',\n            params: {\n              page: 'new',\n              inbox_id: data.id\n            }\n          });\n        }).catch(function () {\n          _this3.isCreating = false;\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["Facebook.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"wizard-body columns content-box small-9\">\n    <div v-if=\"!hasLoginStarted\" class=\"login-init full-height\">\n      <a href=\"#\" @click=\"startLogin()\">\n        <img\n          src=\"~dashboard/assets/images/channels/facebook_login.png\"\n          alt=\"Facebook-logo\"\n        />\n      </a>\n      <p>\n        {{\n          useInstallationName(\n            $t('INBOX_MGMT.ADD.FB.HELP'),\n            globalConfig.installationName\n          )\n        }}\n      </p>\n    </div>\n    <div v-else>\n      <loading-state v-if=\"showLoader\" :message=\"emptyStateMessage\" />\n      <form v-if=\"!showLoader\" class=\"row\" @submit.prevent=\"createChannel()\">\n        <div class=\"medium-12 columns\">\n          <page-header\n            :header-title=\"$t('INBOX_MGMT.ADD.DETAILS.TITLE')\"\n            :header-content=\"\n              useInstallationName(\n                $t('INBOX_MGMT.ADD.DETAILS.DESC'),\n                globalConfig.installationName\n              )\n            \"\n          />\n        </div>\n        <div class=\"medium-7 columns\">\n          <div class=\"medium-12 columns\">\n            <div class=\"input-wrap\" :class=\"{ error: $v.selectedPage.$error }\">\n              {{ $t('INBOX_MGMT.ADD.FB.CHOOSE_PAGE') }}\n              <multiselect\n                v-model.trim=\"selectedPage\"\n                :close-on-select=\"true\"\n                :allow-empty=\"true\"\n                :options=\"getSelectablePages\"\n                track-by=\"id\"\n                label=\"name\"\n                :select-label=\"$t('FORMS.MULTISELECT.ENTER_TO_SELECT')\"\n                :deselect-label=\"$t('FORMS.MULTISELECT.ENTER_TO_REMOVE')\"\n                :placeholder=\"$t('INBOX_MGMT.ADD.FB.PICK_A_VALUE')\"\n                selected-label\n                @select=\"setPageName\"\n              />\n              <span v-if=\"$v.selectedPage.$error\" class=\"message\">\n                {{ $t('INBOX_MGMT.ADD.FB.CHOOSE_PLACEHOLDER') }}\n              </span>\n            </div>\n          </div>\n          <div class=\"medium-12 columns\">\n            <label :class=\"{ error: $v.pageName.$error }\">\n              {{ $t('INBOX_MGMT.ADD.FB.INBOX_NAME') }}\n              <input\n                v-model.trim=\"pageName\"\n                type=\"text\"\n                :placeholder=\"$t('INBOX_MGMT.ADD.FB.PICK_NAME')\"\n                @input=\"$v.pageName.$touch\"\n              />\n              <span v-if=\"$v.pageName.$error\" class=\"message\">\n                {{ $t('INBOX_MGMT.ADD.FB.ADD_NAME') }}\n              </span>\n            </label>\n          </div>\n          <div class=\"medium-12 columns text-right\">\n            <input type=\"submit\" value=\"Create Inbox\" class=\"button\" />\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\n/* eslint-env browser */\n/* global FB */\nimport { required } from 'vuelidate/lib/validators';\nimport LoadingState from 'dashboard/components/widgets/LoadingState';\nimport { mapGetters } from 'vuex';\nimport ChannelApi from '../../../../../api/channels';\nimport PageHeader from '../../SettingsSubPageHeader';\nimport router from '../../../../index';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport accountMixin from '../../../../../mixins/account';\n\nexport default {\n  components: {\n    LoadingState,\n    PageHeader,\n  },\n  mixins: [globalConfigMixin, accountMixin],\n  data() {\n    return {\n      isCreating: false,\n      omniauth_token: '',\n      user_access_token: '',\n      channel: 'facebook',\n      selectedPage: { name: null, id: null },\n      pageName: '',\n      pageList: [],\n      emptyStateMessage: this.$t('INBOX_MGMT.DETAILS.LOADING_FB'),\n      hasLoginStarted: false,\n    };\n  },\n\n  validations: {\n    pageName: {\n      required,\n    },\n\n    selectedPage: {\n      isEmpty() {\n        return this.selectedPage !== null && !!this.selectedPage.name;\n      },\n    },\n  },\n\n  computed: {\n    showLoader() {\n      return !this.user_access_token || this.isCreating;\n    },\n    getSelectablePages() {\n      return this.pageList.filter(item => !item.exists);\n    },\n    ...mapGetters({\n      currentUser: 'getCurrentUser',\n      globalConfig: 'globalConfig/get',\n    }),\n  },\n\n  created() {\n    this.initFB();\n    this.loadFBsdk();\n  },\n\n  mounted() {\n    this.initFB();\n  },\n\n  methods: {\n    startLogin() {\n      this.hasLoginStarted = true;\n      this.tryFBlogin();\n    },\n\n    setPageName({ name }) {\n      this.$v.selectedPage.$touch();\n      this.pageName = name;\n    },\n\n    initChannelAuth(channel) {\n      if (channel === 'facebook') {\n        this.loadFBsdk();\n      }\n    },\n\n    initFB() {\n      if (window.fbSDKLoaded === undefined) {\n        window.fbAsyncInit = () => {\n          FB.init({\n            appId: window.chatwootConfig.fbAppId,\n            xfbml: true,\n            version: window.chatwootConfig.fbApiVersion,\n            status: true,\n          });\n          window.fbSDKLoaded = true;\n          FB.AppEvents.logPageView();\n        };\n      }\n    },\n\n    loadFBsdk() {\n      ((d, s, id) => {\n        let js;\n        // eslint-disable-next-line\n        const fjs = (js = d.getElementsByTagName(s)[0]);\n        if (d.getElementById(id)) {\n          return;\n        }\n        js = d.createElement(s);\n        js.id = id;\n        js.src = '//connect.facebook.net/en_US/sdk.js';\n        fjs.parentNode.insertBefore(js, fjs);\n      })(document, 'script', 'facebook-jssdk');\n    },\n\n    tryFBlogin() {\n      FB.login(\n        response => {\n          if (response.status === 'connected') {\n            this.fetchPages(response.authResponse.accessToken);\n          } else if (response.status === 'not_authorized') {\n            // The person is logged into Facebook, but not your app.\n            this.emptyStateMessage = this.$t(\n              'INBOX_MGMT.DETAILS.ERROR_FB_AUTH'\n            );\n          } else {\n            // The person is not logged into Facebook, so we're not sure if\n            // they are logged into this app or not.\n            this.emptyStateMessage = this.$t(\n              'INBOX_MGMT.DETAILS.ERROR_FB_AUTH'\n            );\n          }\n        },\n        {\n          scope:\n            'pages_manage_metadata,pages_messaging,instagram_basic,pages_show_list,pages_read_engagement,instagram_manage_messages',\n        }\n      );\n    },\n\n    async fetchPages(_token) {\n      try {\n        const response = await ChannelApi.fetchFacebookPages(\n          _token,\n          this.accountId\n        );\n        const {\n          data: { data },\n        } = response;\n        this.pageList = data.page_details;\n        this.user_access_token = data.user_access_token;\n      } catch (error) {\n        // Ignore error\n      }\n    },\n\n    channelParams() {\n      return {\n        user_access_token: this.user_access_token,\n        page_access_token: this.selectedPage.access_token,\n        page_id: this.selectedPage.id,\n        inbox_name: this.selectedPage.name,\n      };\n    },\n\n    createChannel() {\n      this.$v.$touch();\n      if (!this.$v.$error) {\n        this.emptyStateMessage = this.$t('INBOX_MGMT.DETAILS.CREATING_CHANNEL');\n        this.isCreating = true;\n        this.$store\n          .dispatch('inboxes/createFBChannel', this.channelParams())\n          .then(data => {\n            router.replace({\n              name: 'settings_inboxes_add_agents',\n              params: { page: 'new', inbox_id: data.id },\n            });\n          })\n          .catch(() => {\n            this.isCreating = false;\n          });\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/channels"},"metadata":{},"sourceType":"module"}