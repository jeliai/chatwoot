{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport alertMixin from 'shared/mixins/alertMixin';\nimport PortalSettingsCustomizationForm from 'dashboard/routes/dashboard/helpcenter/components/PortalSettingsCustomizationForm';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    PortalSettingsCustomizationForm: PortalSettingsCustomizationForm\n  },\n  mixins: [alertMixin],\n  data: function data() {\n    return {\n      alertMessage: ''\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'portals/uiFlagsIn'\n  })), {}, {\n    currentPortal: function currentPortal() {\n      var slug = this.$route.params.portalSlug;\n      return this.$store.getters['portals/portalBySlug'](slug);\n    }\n  }),\n  methods: {\n    updatePortalSettings: function updatePortalSettings(portalObj) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var portalSlug;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                portalSlug = _this.$route.params.portalSlug;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.$store.dispatch('portals/update', _objectSpread(_objectSpread({}, portalObj), {}, {\n                  portalSlug: portalSlug\n                }));\n\n              case 4:\n                _this.alertMessage = _this.$t('HELP_CENTER.PORTAL.ADD.API.SUCCESS_MESSAGE_FOR_UPDATE');\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                _this.alertMessage = (_context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message) || _this.$t('HELP_CENTER.PORTAL.ADD.API.ERROR_MESSAGE_FOR_UPDATE');\n\n              case 10:\n                _context.prev = 10;\n\n                _this.showAlert(_this.alertMessage);\n\n                return _context.finish(10);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 7, 10, 13]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["EditPortalCustomization.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAA,UAAA,MAAA,0BAAA;AACA,OAAA,+BAAA,MAAA,kFAAA;AAEA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,+BAAA,EAAA;AADA,GADA;AAIA,EAAA,MAAA,EAAA,CAAA,UAAA,CAJA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,YAAA,EAAA;AADA,KAAA;AAGA,GATA;AAUA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,aAJA,2BAIA;AACA,UAAA,IAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,sBAAA,EAAA,IAAA,CAAA;AACA;AAPA,IAVA;AAmBA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,gCACA,SADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,UADA,GACA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,UADA;AAAA;AAAA;AAAA,uBAGA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,gBAAA,kCACA,SADA;AAEA,kBAAA,UAAA,EAAA;AAFA,mBAHA;;AAAA;AAOA,gBAAA,KAAA,CAAA,YAAA,GAAA,KAAA,CAAA,EAAA,CACA,uDADA,CAAA;AAPA;AAAA;;AAAA;AAAA;AAAA;AAWA,gBAAA,KAAA,CAAA,YAAA,GACA,uEAAA,OAAA,KACA,KAAA,CAAA,EAAA,CAAA,qDAAA,CAFA;;AAXA;AAAA;;AAeA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,YAAA;;AAfA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAlBA;AAnBA,CAAA","sourcesContent":["<template>\n  <portal-settings-customization-form\n    v-if=\"currentPortal\"\n    :portal=\"currentPortal\"\n    :is-submitting=\"uiFlags.isUpdating\"\n    :submit-button-text=\"\n      $t('HELP_CENTER.PORTAL.EDIT.EDIT_BASIC_INFO.BUTTON_TEXT')\n    \"\n    @submit=\"updatePortalSettings\"\n  />\n</template>\n\n<script>\nimport alertMixin from 'shared/mixins/alertMixin';\nimport PortalSettingsCustomizationForm from 'dashboard/routes/dashboard/helpcenter/components/PortalSettingsCustomizationForm';\n\nimport { mapGetters } from 'vuex';\n\nexport default {\n  components: {\n    PortalSettingsCustomizationForm,\n  },\n  mixins: [alertMixin],\n  data() {\n    return {\n      alertMessage: '',\n    };\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'portals/uiFlagsIn',\n    }),\n    currentPortal() {\n      const slug = this.$route.params.portalSlug;\n      return this.$store.getters['portals/portalBySlug'](slug);\n    },\n  },\n  methods: {\n    async updatePortalSettings(portalObj) {\n      const portalSlug = this.$route.params.portalSlug;\n      try {\n        await this.$store.dispatch('portals/update', {\n          ...portalObj,\n          portalSlug,\n        });\n        this.alertMessage = this.$t(\n          'HELP_CENTER.PORTAL.ADD.API.SUCCESS_MESSAGE_FOR_UPDATE'\n        );\n      } catch (error) {\n        this.alertMessage =\n          error?.message ||\n          this.$t('HELP_CENTER.PORTAL.ADD.API.ERROR_MESSAGE_FOR_UPDATE');\n      } finally {\n        this.showAlert(this.alertMessage);\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/helpcenter/pages/portals"},"metadata":{},"sourceType":"module"}