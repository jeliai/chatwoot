{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar eq = require('./eq');\n\nvar neq = require('./neq');\n\nvar gt = require('./gt');\n\nvar gte = require('./gte');\n\nvar lt = require('./lt');\n\nvar lte = require('./lte');\n\nvar cmp = function cmp(a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (_typeof(a) === 'object') a = a.version;\n      if (_typeof(b) === 'object') b = b.version;\n      return a === b;\n\n    case '!==':\n      if (_typeof(a) === 'object') a = a.version;\n      if (_typeof(b) === 'object') b = b.version;\n      return a !== b;\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose);\n\n    case '!=':\n      return neq(a, b, loose);\n\n    case '>':\n      return gt(a, b, loose);\n\n    case '>=':\n      return gte(a, b, loose);\n\n    case '<':\n      return lt(a, b, loose);\n\n    case '<=':\n      return lte(a, b, loose);\n\n    default:\n      throw new TypeError(\"Invalid operator: \".concat(op));\n  }\n};\n\nmodule.exports = cmp;","map":null,"metadata":{},"sourceType":"module"}