{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.from-code-point.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nvar FLAG_OFFSET = 127397;\n/**\n * Gets emoji flag for given locale.\n *\n * @param {string} countryCode locale code\n * @return {string} emoji flag\n *\n * @example\n * getCountryFlag('cz') // 'ðŸ‡¨ðŸ‡¿'\n */\n\nexport var getCountryFlag = function getCountryFlag(countryCode) {\n  var codePoints = countryCode.toUpperCase().split('').map(function (char) {\n    return FLAG_OFFSET + char.charCodeAt();\n  });\n  return String.fromCodePoint.apply(String, _toConsumableArray(codePoints));\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/helper/flag.js"],"names":["FLAG_OFFSET","getCountryFlag","countryCode","codePoints","toUpperCase","split","map","char","charCodeAt","String","fromCodePoint"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,WAAW,GAAG,MAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,WAAW,EAAI;AAC3C,MAAMC,UAAU,GAAGD,WAAW,CAC3BE,WADgB,GAEhBC,KAFgB,CAEV,EAFU,EAGhBC,GAHgB,CAGZ,UAAAC,IAAI;AAAA,WAAIP,WAAW,GAAGO,IAAI,CAACC,UAAL,EAAlB;AAAA,GAHQ,CAAnB;AAKA,SAAOC,MAAM,CAACC,aAAP,OAAAD,MAAM,qBAAkBN,UAAlB,EAAb;AACD,CAPM","sourcesContent":["const FLAG_OFFSET = 127397;\n\n/**\n * Gets emoji flag for given locale.\n *\n * @param {string} countryCode locale code\n * @return {string} emoji flag\n *\n * @example\n * getCountryFlag('cz') // 'ðŸ‡¨ðŸ‡¿'\n */\nexport const getCountryFlag = countryCode => {\n  const codePoints = countryCode\n    .toUpperCase()\n    .split('')\n    .map(char => FLAG_OFFSET + char.charCodeAt());\n\n  return String.fromCodePoint(...codePoints);\n};\n"]},"metadata":{},"sourceType":"module"}