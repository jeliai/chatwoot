{"ast":null,"code":"import \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nexport var findPendingMessageIndex = function findPendingMessageIndex(chat, message) {\n  var tempMessageId = message.echo_id;\n  return chat.messages.findIndex(function (m) {\n    return m.id === message.id || m.id === tempMessageId;\n  });\n};\nexport var filterByStatus = function filterByStatus(chatStatus, filterStatus) {\n  return filterStatus === 'all' ? true : chatStatus === filterStatus;\n};\nexport var filterByInbox = function filterByInbox(shouldFilter, inboxId, chatInboxId) {\n  var isOnInbox = Number(inboxId) === chatInboxId;\n  return inboxId ? isOnInbox && shouldFilter : shouldFilter;\n};\nexport var filterByTeam = function filterByTeam(shouldFilter, teamId, chatTeamId) {\n  var isOnTeam = Number(teamId) === chatTeamId;\n  return teamId ? isOnTeam && shouldFilter : shouldFilter;\n};\nexport var filterByLabel = function filterByLabel(shouldFilter, labels, chatLabels) {\n  var isOnLabel = labels.every(function (label) {\n    return chatLabels.includes(label);\n  });\n  return labels.length ? isOnLabel && shouldFilter : shouldFilter;\n};\nexport var filterByUnattended = function filterByUnattended(shouldFilter, conversationType, firstReplyOn) {\n  return conversationType === 'unattended' ? !firstReplyOn && shouldFilter : shouldFilter;\n};\nexport var applyPageFilters = function applyPageFilters(conversation, filters) {\n  var inboxId = filters.inboxId,\n      status = filters.status,\n      _filters$labels = filters.labels,\n      labels = _filters$labels === void 0 ? [] : _filters$labels,\n      teamId = filters.teamId,\n      conversationType = filters.conversationType;\n  var chatStatus = conversation.status,\n      chatInboxId = conversation.inbox_id,\n      _conversation$labels = conversation.labels,\n      chatLabels = _conversation$labels === void 0 ? [] : _conversation$labels,\n      _conversation$meta = conversation.meta,\n      meta = _conversation$meta === void 0 ? {} : _conversation$meta,\n      firstReplyOn = conversation.first_reply_created_at;\n  var team = meta.team || {};\n  var chatTeamId = team.id;\n  var shouldFilter = filterByStatus(chatStatus, status);\n  shouldFilter = filterByInbox(shouldFilter, inboxId, chatInboxId);\n  shouldFilter = filterByTeam(shouldFilter, teamId, chatTeamId);\n  shouldFilter = filterByLabel(shouldFilter, labels, chatLabels);\n  shouldFilter = filterByUnattended(shouldFilter, conversationType, firstReplyOn);\n  return shouldFilter;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/helpers.js"],"names":["findPendingMessageIndex","chat","message","tempMessageId","echo_id","messages","findIndex","m","id","filterByStatus","chatStatus","filterStatus","filterByInbox","shouldFilter","inboxId","chatInboxId","isOnInbox","Number","filterByTeam","teamId","chatTeamId","isOnTeam","filterByLabel","labels","chatLabels","isOnLabel","every","label","includes","length","filterByUnattended","conversationType","firstReplyOn","applyPageFilters","conversation","filters","status","inbox_id","meta","first_reply_created_at","team"],"mappings":"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","sourcesContent":["export const findPendingMessageIndex = (chat, message) => {\n  const { echo_id: tempMessageId } = message;\n  return chat.messages.findIndex(\n    m => m.id === message.id || m.id === tempMessageId\n  );\n};\n\nexport const filterByStatus = (chatStatus, filterStatus) =>\n  filterStatus === 'all' ? true : chatStatus === filterStatus;\n\nexport const filterByInbox = (shouldFilter, inboxId, chatInboxId) => {\n  const isOnInbox = Number(inboxId) === chatInboxId;\n  return inboxId ? isOnInbox && shouldFilter : shouldFilter;\n};\n\nexport const filterByTeam = (shouldFilter, teamId, chatTeamId) => {\n  const isOnTeam = Number(teamId) === chatTeamId;\n  return teamId ? isOnTeam && shouldFilter : shouldFilter;\n};\n\nexport const filterByLabel = (shouldFilter, labels, chatLabels) => {\n  const isOnLabel = labels.every(label => chatLabels.includes(label));\n  return labels.length ? isOnLabel && shouldFilter : shouldFilter;\n};\nexport const filterByUnattended = (\n  shouldFilter,\n  conversationType,\n  firstReplyOn\n) => {\n  return conversationType === 'unattended'\n    ? !firstReplyOn && shouldFilter\n    : shouldFilter;\n};\n\nexport const applyPageFilters = (conversation, filters) => {\n  const { inboxId, status, labels = [], teamId, conversationType } = filters;\n  const {\n    status: chatStatus,\n    inbox_id: chatInboxId,\n    labels: chatLabels = [],\n    meta = {},\n    first_reply_created_at: firstReplyOn,\n  } = conversation;\n  const team = meta.team || {};\n  const { id: chatTeamId } = team;\n\n  let shouldFilter = filterByStatus(chatStatus, status);\n  shouldFilter = filterByInbox(shouldFilter, inboxId, chatInboxId);\n  shouldFilter = filterByTeam(shouldFilter, teamId, chatTeamId);\n  shouldFilter = filterByLabel(shouldFilter, labels, chatLabels);\n  shouldFilter = filterByUnattended(\n    shouldFilter,\n    conversationType,\n    firstReplyOn\n  );\n\n  return shouldFilter;\n};\n"]},"metadata":{},"sourceType":"module"}