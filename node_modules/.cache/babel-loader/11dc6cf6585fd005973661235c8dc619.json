{"ast":null,"code":"var _mutations;\n\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue';\nimport types from '../../mutation-types';\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_NOTIFICATIONS_UI_FLAG, function ($state, data) {\n  $state.uiFlags = _objectSpread(_objectSpread({}, $state.uiFlags), data);\n}), _defineProperty(_mutations, types.CLEAR_NOTIFICATIONS, function ($state) {\n  Vue.set($state, 'records', {});\n}), _defineProperty(_mutations, types.SET_NOTIFICATIONS_META, function ($state, data) {\n  var count = data.count,\n      currentPage = data.current_page,\n      unreadCount = data.unread_count;\n  Vue.set($state.meta, 'count', count);\n  Vue.set($state.meta, 'currentPage', currentPage);\n  Vue.set($state.meta, 'unreadCount', unreadCount);\n}), _defineProperty(_mutations, types.SET_NOTIFICATIONS_UNREAD_COUNT, function ($state, count) {\n  Vue.set($state.meta, 'unreadCount', count < 0 ? 0 : count);\n}), _defineProperty(_mutations, types.SET_NOTIFICATIONS, function ($state, data) {\n  data.forEach(function (notification) {\n    Vue.set($state.records, notification.id, _objectSpread(_objectSpread({}, $state.records[notification.id] || {}), notification));\n  });\n}), _defineProperty(_mutations, types.UPDATE_NOTIFICATION, function ($state, primaryActorId) {\n  Object.values($state.records).forEach(function (item) {\n    if (item.primary_actor_id === primaryActorId) {\n      Vue.set($state.records[item.id], 'read_at', true);\n    }\n  });\n}), _defineProperty(_mutations, types.UPDATE_ALL_NOTIFICATIONS, function ($state) {\n  Object.values($state.records).forEach(function (item) {\n    Vue.set($state.records[item.id], 'read_at', true);\n  });\n}), _defineProperty(_mutations, types.ADD_NOTIFICATION, function ($state, data) {\n  var notification = data.notification,\n      unreadCount = data.unread_count,\n      count = data.count;\n  Vue.set($state.records, notification.id, _objectSpread(_objectSpread({}, $state.records[notification.id] || {}), notification));\n  Vue.set($state.meta, 'unreadCount', unreadCount);\n  Vue.set($state.meta, 'count', count);\n}), _mutations);","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/notifications/mutations.js"],"names":["Vue","types","mutations","SET_NOTIFICATIONS_UI_FLAG","$state","data","uiFlags","CLEAR_NOTIFICATIONS","set","SET_NOTIFICATIONS_META","count","currentPage","current_page","unreadCount","unread_count","meta","SET_NOTIFICATIONS_UNREAD_COUNT","SET_NOTIFICATIONS","forEach","notification","records","id","UPDATE_NOTIFICATION","primaryActorId","Object","values","item","primary_actor_id","UPDATE_ALL_NOTIFICATIONS","ADD_NOTIFICATION"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport types from '../../mutation-types';\n\nexport const mutations = {\n  [types.SET_NOTIFICATIONS_UI_FLAG]($state, data) {\n    $state.uiFlags = {\n      ...$state.uiFlags,\n      ...data,\n    };\n  },\n  [types.CLEAR_NOTIFICATIONS]: $state => {\n    Vue.set($state, 'records', {});\n  },\n  [types.SET_NOTIFICATIONS_META]: ($state, data) => {\n    const {\n      count,\n      current_page: currentPage,\n      unread_count: unreadCount,\n    } = data;\n\n    Vue.set($state.meta, 'count', count);\n    Vue.set($state.meta, 'currentPage', currentPage);\n    Vue.set($state.meta, 'unreadCount', unreadCount);\n  },\n  [types.SET_NOTIFICATIONS_UNREAD_COUNT]: ($state, count) => {\n    Vue.set($state.meta, 'unreadCount', count < 0 ? 0 : count);\n  },\n  [types.SET_NOTIFICATIONS]: ($state, data) => {\n    data.forEach(notification => {\n      Vue.set($state.records, notification.id, {\n        ...($state.records[notification.id] || {}),\n        ...notification,\n      });\n    });\n  },\n  [types.UPDATE_NOTIFICATION]: ($state, primaryActorId) => {\n    Object.values($state.records).forEach(item => {\n      if (item.primary_actor_id === primaryActorId) {\n        Vue.set($state.records[item.id], 'read_at', true);\n      }\n    });\n  },\n  [types.UPDATE_ALL_NOTIFICATIONS]: $state => {\n    Object.values($state.records).forEach(item => {\n      Vue.set($state.records[item.id], 'read_at', true);\n    });\n  },\n\n  [types.ADD_NOTIFICATION]($state, data) {\n    const { notification, unread_count: unreadCount, count } = data;\n    Vue.set($state.records, notification.id, {\n      ...($state.records[notification.id] || {}),\n      ...notification,\n    });\n    Vue.set($state.meta, 'unreadCount', unreadCount);\n    Vue.set($state.meta, 'count', count);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}