{"ast":null,"code":"import \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport AgentTable from './components/overview/AgentTable';\nimport MetricCard from './components/overview/MetricCard';\nimport { OVERVIEW_METRICS } from './constants';\nexport default {\n  name: 'LiveReports',\n  components: {\n    AgentTable: AgentTable,\n    MetricCard: MetricCard\n  },\n  data: function data() {\n    return {\n      pageIndex: 1\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    agentStatus: 'agents/getAgentStatus',\n    agents: 'agents/getAgents',\n    accountConversationMetric: 'getAccountConversationMetric',\n    agentConversationMetric: 'getAgentConversationMetric',\n    uiFlags: 'getOverviewUIFlags'\n  })), {}, {\n    agentStatusMetrics: function agentStatusMetrics() {\n      var _this = this;\n\n      var metric = {};\n      Object.keys(this.agentStatus).forEach(function (key) {\n        var metricName = _this.$t(\"OVERVIEW_REPORTS.AGENT_STATUS.\".concat(OVERVIEW_METRICS[key]));\n\n        metric[metricName] = _this.agentStatus[key];\n      });\n      return metric;\n    },\n    conversationMetrics: function conversationMetrics() {\n      var _this2 = this;\n\n      var metric = {};\n      Object.keys(this.accountConversationMetric).forEach(function (key) {\n        var metricName = _this2.$t(\"OVERVIEW_REPORTS.ACCOUNT_CONVERSATIONS.\".concat(OVERVIEW_METRICS[key]));\n\n        metric[metricName] = _this2.accountConversationMetric[key];\n      });\n      return metric;\n    }\n  }),\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$store.dispatch('agents/get');\n    this.fetchAllData();\n    bus.$on('fetch_overview_reports', function () {\n      _this3.fetchAllData();\n    });\n  },\n  methods: {\n    fetchAllData: function fetchAllData() {\n      this.fetchAccountConversationMetric();\n      this.fetchAgentConversationMetric();\n    },\n    fetchAccountConversationMetric: function fetchAccountConversationMetric() {\n      this.$store.dispatch('fetchAccountConversationMetric', {\n        type: 'account'\n      });\n    },\n    fetchAgentConversationMetric: function fetchAgentConversationMetric() {\n      this.$store.dispatch('fetchAgentConversationMetric', {\n        type: 'agent',\n        page: this.pageIndex\n      });\n    },\n    onPageNumberChange: function onPageNumberChange(pageIndex) {\n      this.pageIndex = pageIndex;\n      this.fetchAgentConversationMetric();\n    }\n  }\n};","map":{"version":3,"sources":["LiveReports.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,kCAAA;AACA,OAAA,UAAA,MAAA,kCAAA;AACA,SAAA,gBAAA,QAAA,aAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,UAAA,EAAA;AAFA,GAFA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AADA,KAAA;AAGA,GAVA;AAWA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA,uBADA;AAEA,IAAA,MAAA,EAAA,kBAFA;AAGA,IAAA,yBAAA,EAAA,8BAHA;AAIA,IAAA,uBAAA,EAAA,4BAJA;AAKA,IAAA,OAAA,EAAA;AALA,GAAA,CADA;AAQA,IAAA,kBARA,gCAQA;AAAA;;AACA,UAAA,MAAA,GAAA,EAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,WAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,CAAA,EAAA,yCACA,gBAAA,CAAA,GAAA,CADA,EAAA;;AAGA,QAAA,MAAA,CAAA,UAAA,CAAA,GAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAAA;AACA,OALA;AAMA,aAAA,MAAA;AACA,KAjBA;AAkBA,IAAA,mBAlBA,iCAkBA;AAAA;;AACA,UAAA,MAAA,GAAA,EAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,yBAAA,EAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,EAAA,kDACA,gBAAA,CAAA,GAAA,CADA,EAAA;;AAGA,QAAA,MAAA,CAAA,UAAA,CAAA,GAAA,MAAA,CAAA,yBAAA,CAAA,GAAA,CAAA;AACA,OALA;AAMA,aAAA,MAAA;AACA;AA3BA,IAXA;AAwCA,EAAA,OAxCA,qBAwCA;AAAA;;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,YAAA;AACA,SAAA,YAAA;AAEA,IAAA,GAAA,CAAA,GAAA,CAAA,wBAAA,EAAA,YAAA;AACA,MAAA,MAAA,CAAA,YAAA;AACA,KAFA;AAGA,GA/CA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AACA,WAAA,8BAAA;AACA,WAAA,4BAAA;AACA,KAJA;AAKA,IAAA,8BALA,4CAKA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,gCAAA,EAAA;AACA,QAAA,IAAA,EAAA;AADA,OAAA;AAGA,KATA;AAUA,IAAA,4BAVA,0CAUA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,8BAAA,EAAA;AACA,QAAA,IAAA,EAAA,OADA;AAEA,QAAA,IAAA,EAAA,KAAA;AAFA,OAAA;AAIA,KAfA;AAgBA,IAAA,kBAhBA,8BAgBA,SAhBA,EAgBA;AACA,WAAA,SAAA,GAAA,SAAA;AACA,WAAA,4BAAA;AACA;AAnBA;AAhDA,CAAA","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <div class=\"row\">\n      <div class=\"column small-12 medium-8 conversation-metric\">\n        <metric-card\n          :header=\"this.$t('OVERVIEW_REPORTS.ACCOUNT_CONVERSATIONS.HEADER')\"\n          :is-loading=\"uiFlags.isFetchingAccountConversationMetric\"\n          :loading-message=\"\n            $t('OVERVIEW_REPORTS.ACCOUNT_CONVERSATIONS.LOADING_MESSAGE')\n          \"\n        >\n          <div\n            v-for=\"(metric, name, index) in conversationMetrics\"\n            :key=\"index\"\n            class=\"metric-content column\"\n          >\n            <h3 class=\"heading\">\n              {{ name }}\n            </h3>\n            <p class=\"metric\">{{ metric }}</p>\n          </div>\n        </metric-card>\n      </div>\n      <div class=\"column small-12 medium-4\">\n        <metric-card :header=\"this.$t('OVERVIEW_REPORTS.AGENT_STATUS.HEADER')\">\n          <div\n            v-for=\"(metric, name, index) in agentStatusMetrics\"\n            :key=\"index\"\n            class=\"metric-content column\"\n          >\n            <h3 class=\"heading\">\n              {{ name }}\n            </h3>\n            <p class=\"metric\">{{ metric }}</p>\n          </div>\n        </metric-card>\n      </div>\n    </div>\n    <div class=\"row\">\n      <metric-card\n        :header=\"this.$t('OVERVIEW_REPORTS.AGENT_CONVERSATIONS.HEADER')\"\n      >\n        <agent-table\n          :agents=\"agents\"\n          :agent-metrics=\"agentConversationMetric\"\n          :page-index=\"pageIndex\"\n          :is-loading=\"uiFlags.isFetchingAgentConversationMetric\"\n          @page-change=\"onPageNumberChange\"\n        />\n      </metric-card>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport AgentTable from './components/overview/AgentTable';\nimport MetricCard from './components/overview/MetricCard';\nimport { OVERVIEW_METRICS } from './constants';\nexport default {\n  name: 'LiveReports',\n  components: {\n    AgentTable,\n    MetricCard,\n  },\n  data() {\n    return {\n      pageIndex: 1,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      agentStatus: 'agents/getAgentStatus',\n      agents: 'agents/getAgents',\n      accountConversationMetric: 'getAccountConversationMetric',\n      agentConversationMetric: 'getAgentConversationMetric',\n      uiFlags: 'getOverviewUIFlags',\n    }),\n    agentStatusMetrics() {\n      let metric = {};\n      Object.keys(this.agentStatus).forEach(key => {\n        const metricName = this.$t(\n          `OVERVIEW_REPORTS.AGENT_STATUS.${OVERVIEW_METRICS[key]}`\n        );\n        metric[metricName] = this.agentStatus[key];\n      });\n      return metric;\n    },\n    conversationMetrics() {\n      let metric = {};\n      Object.keys(this.accountConversationMetric).forEach(key => {\n        const metricName = this.$t(\n          `OVERVIEW_REPORTS.ACCOUNT_CONVERSATIONS.${OVERVIEW_METRICS[key]}`\n        );\n        metric[metricName] = this.accountConversationMetric[key];\n      });\n      return metric;\n    },\n  },\n  mounted() {\n    this.$store.dispatch('agents/get');\n    this.fetchAllData();\n\n    bus.$on('fetch_overview_reports', () => {\n      this.fetchAllData();\n    });\n  },\n  methods: {\n    fetchAllData() {\n      this.fetchAccountConversationMetric();\n      this.fetchAgentConversationMetric();\n    },\n    fetchAccountConversationMetric() {\n      this.$store.dispatch('fetchAccountConversationMetric', {\n        type: 'account',\n      });\n    },\n    fetchAgentConversationMetric() {\n      this.$store.dispatch('fetchAgentConversationMetric', {\n        type: 'agent',\n        page: this.pageIndex,\n      });\n    },\n    onPageNumberChange(pageIndex) {\n      this.pageIndex = pageIndex;\n      this.fetchAgentConversationMetric();\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/reports"},"metadata":{},"sourceType":"module"}