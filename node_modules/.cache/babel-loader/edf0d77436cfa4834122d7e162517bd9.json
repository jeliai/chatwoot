{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isOffline } from '../../core/connection';\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted';\nimport { toFacade } from '../../lib/to-facade';\nimport batch from './batched-dispatcher';\nimport standard from './fetch-dispatcher';\nimport { normalize } from './normalize';\nimport { scheduleFlush } from './schedule-flush';\n\nfunction onAlias(analytics, json) {\n  var _a, _b, _c, _d;\n\n  var user = analytics.user();\n  json.previousId = (_c = (_b = (_a = json.previousId) !== null && _a !== void 0 ? _a : json.from) !== null && _b !== void 0 ? _b : user.id()) !== null && _c !== void 0 ? _c : user.anonymousId();\n  json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;\n  delete json.from;\n  delete json.to;\n  return json;\n}\n\nexport function segmentio(analytics, settings, integrations) {\n  var _a, _b, _c;\n\n  var buffer = new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, \"dest-Segment.io\");\n  var flushing = false;\n  var apiHost = (_a = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _a !== void 0 ? _a : 'api.june.so/sdk';\n  var remote = apiHost.includes('localhost') ? \"http://\" + apiHost : \"https://\" + apiHost;\n  var client = ((_b = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _b === void 0 ? void 0 : _b.strategy) === 'batching' ? batch(apiHost, (_c = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _c === void 0 ? void 0 : _c.config) : standard();\n\n  function send(ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, json;\n      return __generator(this, function (_a) {\n        if (isOffline()) {\n          buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          return [2\n          /*return*/\n          , ctx];\n        }\n\n        path = ctx.event.type //.charAt(0)\n        ;\n        json = toFacade(ctx.event).json();\n\n        if (ctx.event.type === 'track') {\n          delete json.traits;\n        }\n\n        if (ctx.event.type === 'alias') {\n          json = onAlias(analytics, json);\n        }\n\n        return [2\n        /*return*/\n        , client.dispatch(remote + \"/\" + path, normalize(analytics, json, settings, integrations)).then(function () {\n          return ctx;\n        }).catch(function (err) {\n          if (err.type === 'error' || err.message === 'Failed to fetch') {\n            buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n            scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          }\n\n          return ctx;\n        })];\n      });\n    });\n  }\n\n  var segmentio = {\n    name: 'Segment.io',\n    type: 'after',\n    version: '0.1.0',\n    isLoaded: function isLoaded() {\n      return true;\n    },\n    load: function load() {\n      return Promise.resolve();\n    },\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send\n  };\n  return segmentio;\n}","map":null,"metadata":{},"sourceType":"module"}