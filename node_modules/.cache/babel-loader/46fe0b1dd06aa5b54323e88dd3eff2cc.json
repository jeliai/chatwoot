{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { createConversationAPI, sendMessageAPI, getMessagesAPI, sendAttachmentAPI, toggleTyping, setUserLastSeenAt, toggleStatus } from 'widget/api/conversation';\nimport { createTemporaryMessage, getNonDeletedMessages } from './helpers';\nexport var actions = {\n  createConversation: function () {\n    var _createConversation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, params) {\n      var commit, dispatch, _yield$createConversa, data, messages, _messages, _messages$, message;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit, dispatch = _ref.dispatch;\n              commit('setConversationUIFlag', {\n                isCreating: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return createConversationAPI(params);\n\n            case 5:\n              _yield$createConversa = _context.sent;\n              data = _yield$createConversa.data;\n              messages = data.messages;\n              _messages = _slicedToArray(messages, 1), _messages$ = _messages[0], message = _messages$ === void 0 ? {} : _messages$;\n              commit('pushMessageToConversation', message);\n              dispatch('conversationAttributes/getAttributes', {}, {\n                root: true\n              });\n              _context.next = 15;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 15:\n              _context.prev = 15;\n              commit('setConversationUIFlag', {\n                isCreating: false\n              });\n              return _context.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 13, 15, 18]]);\n    }));\n\n    function createConversation(_x, _x2) {\n      return _createConversation.apply(this, arguments);\n    }\n\n    return createConversation;\n  }(),\n  sendMessage: function () {\n    var _sendMessage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, params) {\n      var dispatch, content, message;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch = _ref2.dispatch;\n              content = params.content;\n              message = createTemporaryMessage({\n                content: content\n              });\n              dispatch('sendMessageWithData', message);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function sendMessage(_x3, _x4) {\n      return _sendMessage.apply(this, arguments);\n    }\n\n    return sendMessage;\n  }(),\n  sendMessageWithData: function () {\n    var _sendMessageWithData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3, message) {\n      var commit, id, content, _message$meta, meta, _yield$sendMessageAPI, data;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              id = message.id, content = message.content, _message$meta = message.meta, meta = _message$meta === void 0 ? {} : _message$meta;\n              commit('pushMessageToConversation', message);\n              commit('updateMessageMeta', {\n                id: id,\n                meta: _objectSpread(_objectSpread({}, meta), {}, {\n                  error: ''\n                })\n              });\n              _context3.prev = 4;\n              _context3.next = 7;\n              return sendMessageAPI(content);\n\n            case 7:\n              _yield$sendMessageAPI = _context3.sent;\n              data = _yield$sendMessageAPI.data;\n              commit('deleteMessage', message.id);\n              commit('pushMessageToConversation', _objectSpread(_objectSpread({}, data), {}, {\n                status: 'sent'\n              }));\n              _context3.next = 17;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](4);\n              commit('pushMessageToConversation', _objectSpread(_objectSpread({}, message), {}, {\n                status: 'failed'\n              }));\n              commit('updateMessageMeta', {\n                id: id,\n                meta: _objectSpread(_objectSpread({}, meta), {}, {\n                  error: ''\n                })\n              });\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[4, 13]]);\n    }));\n\n    function sendMessageWithData(_x5, _x6) {\n      return _sendMessageWithData.apply(this, arguments);\n    }\n\n    return sendMessageWithData;\n  }(),\n  sendAttachment: function () {\n    var _sendAttachment = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref4, params) {\n      var commit, _params$attachment, thumbUrl, fileType, _params$meta, meta, attachment, tempMessage, _yield$sendAttachment, data;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _params$attachment = params.attachment, thumbUrl = _params$attachment.thumbUrl, fileType = _params$attachment.fileType, _params$meta = params.meta, meta = _params$meta === void 0 ? {} : _params$meta;\n              attachment = {\n                thumb_url: thumbUrl,\n                data_url: thumbUrl,\n                file_type: fileType,\n                status: 'in_progress'\n              };\n              tempMessage = createTemporaryMessage({\n                attachments: [attachment]\n              });\n              commit('pushMessageToConversation', tempMessage);\n              _context4.prev = 5;\n              _context4.next = 8;\n              return sendAttachmentAPI(params);\n\n            case 8:\n              _yield$sendAttachment = _context4.sent;\n              data = _yield$sendAttachment.data;\n              commit('updateAttachmentMessageStatus', {\n                message: data,\n                tempId: tempMessage.id\n              });\n              commit('pushMessageToConversation', _objectSpread(_objectSpread({}, data), {}, {\n                status: 'sent'\n              }));\n              _context4.next = 18;\n              break;\n\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](5);\n              commit('pushMessageToConversation', _objectSpread(_objectSpread({}, tempMessage), {}, {\n                status: 'failed'\n              }));\n              commit('updateMessageMeta', {\n                id: tempMessage.id,\n                meta: _objectSpread(_objectSpread({}, meta), {}, {\n                  error: ''\n                })\n              }); // Show error\n\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[5, 14]]);\n    }));\n\n    function sendAttachment(_x7, _x8) {\n      return _sendAttachment.apply(this, arguments);\n    }\n\n    return sendAttachment;\n  }(),\n  fetchOldConversations: function () {\n    var _fetchOldConversations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref5) {\n      var commit,\n          _ref6,\n          before,\n          _yield$getMessagesAPI,\n          _yield$getMessagesAPI2,\n          payload,\n          meta,\n          lastSeen,\n          formattedMessages,\n          _args5 = arguments;\n\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              _ref6 = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {}, before = _ref6.before;\n              _context5.prev = 2;\n              commit('setConversationListLoading', true);\n              _context5.next = 6;\n              return getMessagesAPI({\n                before: before\n              });\n\n            case 6:\n              _yield$getMessagesAPI = _context5.sent;\n              _yield$getMessagesAPI2 = _yield$getMessagesAPI.data;\n              payload = _yield$getMessagesAPI2.payload;\n              meta = _yield$getMessagesAPI2.meta;\n              lastSeen = meta.contact_last_seen_at;\n              formattedMessages = getNonDeletedMessages({\n                messages: payload\n              });\n              commit('conversation/setMetaUserLastSeenAt', lastSeen, {\n                root: true\n              });\n              commit('setMessagesInConversation', formattedMessages);\n              commit('setConversationListLoading', false);\n              _context5.next = 20;\n              break;\n\n            case 17:\n              _context5.prev = 17;\n              _context5.t0 = _context5[\"catch\"](2);\n              commit('setConversationListLoading', false);\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[2, 17]]);\n    }));\n\n    function fetchOldConversations(_x9) {\n      return _fetchOldConversations.apply(this, arguments);\n    }\n\n    return fetchOldConversations;\n  }(),\n  clearConversations: function clearConversations(_ref7) {\n    var commit = _ref7.commit;\n    commit('clearConversations');\n  },\n  addOrUpdateMessage: function () {\n    var _addOrUpdateMessage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref8, data) {\n      var commit, id, content_attributes;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref8.commit;\n              id = data.id, content_attributes = data.content_attributes;\n\n              if (!(content_attributes && content_attributes.deleted)) {\n                _context6.next = 5;\n                break;\n              }\n\n              commit('deleteMessage', id);\n              return _context6.abrupt(\"return\");\n\n            case 5:\n              commit('pushMessageToConversation', data);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function addOrUpdateMessage(_x10, _x11) {\n      return _addOrUpdateMessage.apply(this, arguments);\n    }\n\n    return addOrUpdateMessage;\n  }(),\n  toggleAgentTyping: function toggleAgentTyping(_ref9, data) {\n    var commit = _ref9.commit;\n    commit('toggleAgentTypingStatus', data);\n  },\n  toggleUserTyping: function () {\n    var _toggleUserTyping = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_, data) {\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return toggleTyping(data);\n\n            case 3:\n              _context7.next = 7;\n              break;\n\n            case 5:\n              _context7.prev = 5;\n              _context7.t0 = _context7[\"catch\"](0);\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 5]]);\n    }));\n\n    function toggleUserTyping(_x12, _x13) {\n      return _toggleUserTyping.apply(this, arguments);\n    }\n\n    return toggleUserTyping;\n  }(),\n  setUserLastSeen: function () {\n    var _setUserLastSeen = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref10) {\n      var commit, appGetters, lastSeen;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref10.commit, appGetters = _ref10.getters;\n\n              if (appGetters.getConversationSize) {\n                _context8.next = 3;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 3:\n              lastSeen = Date.now() / 1000;\n              _context8.prev = 4;\n              commit('setMetaUserLastSeenAt', lastSeen);\n              _context8.next = 8;\n              return setUserLastSeenAt({\n                lastSeen: lastSeen\n              });\n\n            case 8:\n              _context8.next = 12;\n              break;\n\n            case 10:\n              _context8.prev = 10;\n              _context8.t0 = _context8[\"catch\"](4);\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[4, 10]]);\n    }));\n\n    function setUserLastSeen(_x14) {\n      return _setUserLastSeen.apply(this, arguments);\n    }\n\n    return setUserLastSeen;\n  }(),\n  resolveConversation: function () {\n    var _resolveConversation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return toggleStatus();\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function resolveConversation() {\n      return _resolveConversation.apply(this, arguments);\n    }\n\n    return resolveConversation;\n  }()\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/conversation/actions.js"],"names":["createConversationAPI","sendMessageAPI","getMessagesAPI","sendAttachmentAPI","toggleTyping","setUserLastSeenAt","toggleStatus","createTemporaryMessage","getNonDeletedMessages","actions","createConversation","params","commit","dispatch","isCreating","data","messages","message","root","sendMessage","content","sendMessageWithData","id","meta","error","status","sendAttachment","attachment","thumbUrl","fileType","thumb_url","data_url","file_type","tempMessage","attachments","tempId","fetchOldConversations","before","payload","lastSeen","contact_last_seen_at","formattedMessages","clearConversations","addOrUpdateMessage","content_attributes","deleted","toggleAgentTyping","toggleUserTyping","_","setUserLastSeen","appGetters","getters","getConversationSize","Date","now","resolveConversation"],"mappings":"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","sourcesContent":["import {\n  createConversationAPI,\n  sendMessageAPI,\n  getMessagesAPI,\n  sendAttachmentAPI,\n  toggleTyping,\n  setUserLastSeenAt,\n  toggleStatus,\n} from 'widget/api/conversation';\n\nimport { createTemporaryMessage, getNonDeletedMessages } from './helpers';\n\nexport const actions = {\n  createConversation: async ({ commit, dispatch }, params) => {\n    commit('setConversationUIFlag', { isCreating: true });\n    try {\n      const { data } = await createConversationAPI(params);\n      const { messages } = data;\n      const [message = {}] = messages;\n      commit('pushMessageToConversation', message);\n      dispatch('conversationAttributes/getAttributes', {}, { root: true });\n    } catch (error) {\n      // Ignore error\n    } finally {\n      commit('setConversationUIFlag', { isCreating: false });\n    }\n  },\n  sendMessage: async ({ dispatch }, params) => {\n    const { content } = params;\n    const message = createTemporaryMessage({ content });\n\n    dispatch('sendMessageWithData', message);\n  },\n  sendMessageWithData: async ({ commit }, message) => {\n    const { id, content, meta = {} } = message;\n\n    commit('pushMessageToConversation', message);\n    commit('updateMessageMeta', { id, meta: { ...meta, error: '' } });\n    try {\n      const { data } = await sendMessageAPI(content);\n\n      commit('deleteMessage', message.id);\n      commit('pushMessageToConversation', { ...data, status: 'sent' });\n    } catch (error) {\n      commit('pushMessageToConversation', { ...message, status: 'failed' });\n      commit('updateMessageMeta', {\n        id,\n        meta: { ...meta, error: '' },\n      });\n    }\n  },\n\n  sendAttachment: async ({ commit }, params) => {\n    const {\n      attachment: { thumbUrl, fileType },\n      meta = {},\n    } = params;\n    const attachment = {\n      thumb_url: thumbUrl,\n      data_url: thumbUrl,\n      file_type: fileType,\n      status: 'in_progress',\n    };\n    const tempMessage = createTemporaryMessage({\n      attachments: [attachment],\n    });\n    commit('pushMessageToConversation', tempMessage);\n    try {\n      const { data } = await sendAttachmentAPI(params);\n      commit('updateAttachmentMessageStatus', {\n        message: data,\n        tempId: tempMessage.id,\n      });\n      commit('pushMessageToConversation', { ...data, status: 'sent' });\n    } catch (error) {\n      commit('pushMessageToConversation', { ...tempMessage, status: 'failed' });\n      commit('updateMessageMeta', {\n        id: tempMessage.id,\n        meta: { ...meta, error: '' },\n      });\n      // Show error\n    }\n  },\n  fetchOldConversations: async ({ commit }, { before } = {}) => {\n    try {\n      commit('setConversationListLoading', true);\n      const {\n        data: { payload, meta },\n      } = await getMessagesAPI({ before });\n      const { contact_last_seen_at: lastSeen } = meta;\n      const formattedMessages = getNonDeletedMessages({ messages: payload });\n      commit('conversation/setMetaUserLastSeenAt', lastSeen, { root: true });\n      commit('setMessagesInConversation', formattedMessages);\n      commit('setConversationListLoading', false);\n    } catch (error) {\n      commit('setConversationListLoading', false);\n    }\n  },\n\n  clearConversations: ({ commit }) => {\n    commit('clearConversations');\n  },\n\n  addOrUpdateMessage: async ({ commit }, data) => {\n    const { id, content_attributes } = data;\n    if (content_attributes && content_attributes.deleted) {\n      commit('deleteMessage', id);\n      return;\n    }\n    commit('pushMessageToConversation', data);\n  },\n\n  toggleAgentTyping({ commit }, data) {\n    commit('toggleAgentTypingStatus', data);\n  },\n\n  toggleUserTyping: async (_, data) => {\n    try {\n      await toggleTyping(data);\n    } catch (error) {\n      // IgnoreError\n    }\n  },\n\n  setUserLastSeen: async ({ commit, getters: appGetters }) => {\n    if (!appGetters.getConversationSize) {\n      return;\n    }\n\n    const lastSeen = Date.now() / 1000;\n    try {\n      commit('setMetaUserLastSeenAt', lastSeen);\n      await setUserLastSeenAt({ lastSeen });\n    } catch (error) {\n      // IgnoreError\n    }\n  },\n\n  resolveConversation: async () => {\n    await toggleStatus();\n  },\n};\n"]},"metadata":{},"sourceType":"module"}