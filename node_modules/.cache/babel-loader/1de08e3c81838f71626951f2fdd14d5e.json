{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validEmailsByComma } from './helpers/emailHeadHelper';\nexport default {\n  props: {\n    ccEmails: {\n      type: String,\n      default: ''\n    },\n    bccEmails: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      showBcc: false,\n      ccEmailsVal: '',\n      bccEmailsVal: ''\n    };\n  },\n  watch: {\n    bccEmails: function bccEmails(newVal) {\n      if (newVal !== this.bccEmailsVal) {\n        this.bccEmailsVal = newVal;\n      }\n    },\n    ccEmails: function ccEmails(newVal) {\n      if (newVal !== this.ccEmailsVal) {\n        this.ccEmailsVal = newVal;\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.ccEmailsVal = this.ccEmails;\n    this.bccEmailsVal = this.bccEmails;\n  },\n  validations: {\n    ccEmailsVal: {\n      hasValidEmails: function hasValidEmails(value) {\n        return validEmailsByComma(value);\n      }\n    },\n    bccEmailsVal: {\n      hasValidEmails: function hasValidEmails(value) {\n        return validEmailsByComma(value);\n      }\n    }\n  },\n  methods: {\n    handleAddBcc: function handleAddBcc() {\n      this.showBcc = true;\n    },\n    onBlur: function onBlur() {\n      this.$v.$touch();\n      this.$emit('update:bccEmails', this.bccEmailsVal);\n      this.$emit('update:ccEmails', this.ccEmailsVal);\n    }\n  }\n};","map":{"version":3,"sources":["ReplyEmailHead.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAAA,kBAAA,QAAA,2BAAA;AACA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GADA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,EAFA;AAGA,MAAA,YAAA,EAAA;AAHA,KAAA;AAKA,GAjBA;AAkBA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,qBACA,MADA,EACA;AACA,UAAA,MAAA,KAAA,KAAA,YAAA,EAAA;AACA,aAAA,YAAA,GAAA,MAAA;AACA;AACA,KALA;AAMA,IAAA,QANA,oBAMA,MANA,EAMA;AACA,UAAA,MAAA,KAAA,KAAA,WAAA,EAAA;AACA,aAAA,WAAA,GAAA,MAAA;AACA;AACA;AAVA,GAlBA;AA8BA,EAAA,OA9BA,qBA8BA;AACA,SAAA,WAAA,GAAA,KAAA,QAAA;AACA,SAAA,YAAA,GAAA,KAAA,SAAA;AACA,GAjCA;AAkCA,EAAA,WAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,cADA,0BACA,KADA,EACA;AACA,eAAA,kBAAA,CAAA,KAAA,CAAA;AACA;AAHA,KADA;AAMA,IAAA,YAAA,EAAA;AACA,MAAA,cADA,0BACA,KADA,EACA;AACA,eAAA,kBAAA,CAAA,KAAA,CAAA;AACA;AAHA;AANA,GAlCA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AACA,WAAA,EAAA,CAAA,MAAA;AACA,WAAA,KAAA,CAAA,kBAAA,EAAA,KAAA,YAAA;AACA,WAAA,KAAA,CAAA,iBAAA,EAAA,KAAA,WAAA;AACA;AARA;AA9CA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"input-group-wrap\">\n      <div class=\"input-group small\" :class=\"{ error: $v.ccEmailsVal.$error }\">\n        <label class=\"input-group-label\">\n          {{ $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.CC.LABEL') }}\n        </label>\n        <div class=\"input-group-field\">\n          <woot-input\n            v-model.trim=\"$v.ccEmailsVal.$model\"\n            type=\"text\"\n            :class=\"{ error: $v.ccEmailsVal.$error }\"\n            :placeholder=\"$t('CONVERSATION.REPLYBOX.EMAIL_HEAD.CC.PLACEHOLDER')\"\n            @blur=\"onBlur\"\n          />\n        </div>\n        <woot-button\n          v-if=\"!showBcc\"\n          variant=\"clear\"\n          size=\"small\"\n          @click=\"handleAddBcc\"\n        >\n          {{ $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.ADD_BCC') }}\n        </woot-button>\n      </div>\n      <span v-if=\"$v.ccEmailsVal.$error\" class=\"message\">\n        {{ $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.CC.ERROR') }}\n      </span>\n    </div>\n    <div v-if=\"showBcc\" class=\"input-group-wrap\">\n      <div class=\"input-group small\" :class=\"{ error: $v.bccEmailsVal.$error }\">\n        <label class=\"input-group-label\">\n          {{ $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.BCC.LABEL') }}\n        </label>\n        <div class=\"input-group-field\">\n          <woot-input\n            v-model.trim=\"$v.bccEmailsVal.$model\"\n            type=\"text\"\n            :class=\"{ error: $v.bccEmailsVal.$error }\"\n            :placeholder=\"\n              $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.BCC.PLACEHOLDER')\n            \"\n            @blur=\"onBlur\"\n          />\n        </div>\n      </div>\n      <span v-if=\"$v.bccEmailsVal.$error\" class=\"message\">\n        {{ $t('CONVERSATION.REPLYBOX.EMAIL_HEAD.BCC.ERROR') }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { validEmailsByComma } from './helpers/emailHeadHelper';\nexport default {\n  props: {\n    ccEmails: {\n      type: String,\n      default: '',\n    },\n    bccEmails: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      showBcc: false,\n      ccEmailsVal: '',\n      bccEmailsVal: '',\n    };\n  },\n  watch: {\n    bccEmails(newVal) {\n      if (newVal !== this.bccEmailsVal) {\n        this.bccEmailsVal = newVal;\n      }\n    },\n    ccEmails(newVal) {\n      if (newVal !== this.ccEmailsVal) {\n        this.ccEmailsVal = newVal;\n      }\n    },\n  },\n  mounted() {\n    this.ccEmailsVal = this.ccEmails;\n    this.bccEmailsVal = this.bccEmails;\n  },\n  validations: {\n    ccEmailsVal: {\n      hasValidEmails(value) {\n        return validEmailsByComma(value);\n      },\n    },\n    bccEmailsVal: {\n      hasValidEmails(value) {\n        return validEmailsByComma(value);\n      },\n    },\n  },\n  methods: {\n    handleAddBcc() {\n      this.showBcc = true;\n    },\n    onBlur() {\n      this.$v.$touch();\n      this.$emit('update:bccEmails', this.bccEmailsVal);\n      this.$emit('update:ccEmails', this.ccEmailsVal);\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.input-group-wrap .message {\n  font-size: var(--font-size-small);\n  color: var(--r-500);\n}\n.input-group {\n  border-bottom: 1px solid var(--color-border);\n  margin-bottom: var(--space-smaller);\n  margin-top: var(--space-smaller);\n\n  .input-group-label {\n    border-color: transparent;\n    background: transparent;\n    font-size: var(--font-size-mini);\n    font-weight: var(--font-weight-bold);\n    padding-left: 0;\n  }\n  .input-group-field::v-deep input {\n    margin-bottom: 0;\n    border-color: transparent;\n  }\n}\n\n.input-group.error {\n  border-bottom-color: var(--r-500);\n  .input-group-label {\n    color: var(--r-500);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}