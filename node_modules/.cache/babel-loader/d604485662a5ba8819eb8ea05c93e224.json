{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, minLength, email } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  mixins: [alertMixin],\n  props: {\n    show: {\n      type: Boolean,\n      default: false\n    },\n    currentChat: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      email: '',\n      selectedType: '',\n      isSubmitting: false\n    };\n  },\n  validations: {\n    email: {\n      required: required,\n      email: email,\n      minLength: minLength(4)\n    }\n  },\n  computed: {\n    sentToOtherEmailAddress: function sentToOtherEmailAddress() {\n      return this.selectedType === 'other_email_address';\n    },\n    isFormValid: function isFormValid() {\n      if (this.selectedType) {\n        if (this.sentToOtherEmailAddress) {\n          return !!this.email && !this.$v.email.$error;\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n    selectedEmailAddress: function selectedEmailAddress() {\n      var meta = this.currentChat.meta;\n\n      switch (this.selectedType) {\n        case 'contact':\n          return meta.sender.email;\n\n        case 'assignee':\n          return meta.assignee.email;\n\n        case 'other_email_address':\n          return this.email;\n\n        default:\n          return '';\n      }\n    }\n  },\n  methods: {\n    onCancel: function onCancel() {\n      this.$emit('cancel');\n    },\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.isSubmitting = false;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.$store.dispatch('sendEmailTranscript', {\n                  email: _this.selectedEmailAddress,\n                  conversationId: _this.currentChat.id\n                });\n\n              case 4:\n                _this.showAlert(_this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_SUCCESS'));\n\n                _this.onCancel();\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n\n                _this.showAlert(_this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_ERROR'));\n\n              case 11:\n                _context.prev = 11;\n                _this.isSubmitting = false;\n                return _context.finish(11);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8, 11, 14]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["EmailTranscriptModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA,SAAA,QAAA,EAAA,SAAA,EAAA,KAAA,QAAA,0BAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,UAAA,CADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AALA,GAFA;AAYA,EAAA,IAZA,kBAYA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,YAAA,EAAA,EAFA;AAGA,MAAA,YAAA,EAAA;AAHA,KAAA;AAKA,GAlBA;AAmBA,EAAA,WAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,KAAA,EAAA,KAFA;AAGA,MAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAHA;AADA,GAnBA;AA0BA,EAAA,QAAA,EAAA;AACA,IAAA,uBADA,qCACA;AACA,aAAA,KAAA,YAAA,KAAA,qBAAA;AACA,KAHA;AAIA,IAAA,WAJA,yBAIA;AACA,UAAA,KAAA,YAAA,EAAA;AACA,YAAA,KAAA,uBAAA,EAAA;AACA,iBAAA,CAAA,CAAA,KAAA,KAAA,IAAA,CAAA,KAAA,EAAA,CAAA,KAAA,CAAA,MAAA;AACA;;AACA,eAAA,IAAA;AACA;;AACA,aAAA,KAAA;AACA,KAZA;AAaA,IAAA,oBAbA,kCAaA;AACA,UAAA,IAAA,GAAA,KAAA,WAAA,CAAA,IAAA;;AACA,cAAA,KAAA,YAAA;AACA,aAAA,SAAA;AACA,iBAAA,IAAA,CAAA,MAAA,CAAA,KAAA;;AACA,aAAA,UAAA;AACA,iBAAA,IAAA,CAAA,QAAA,CAAA,KAAA;;AACA,aAAA,qBAAA;AACA,iBAAA,KAAA,KAAA;;AACA;AACA,iBAAA,EAAA;AARA;AAUA;AAzBA,GA1BA;AAqDA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,WAAA,KAAA,CAAA,QAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AADA;AAAA;AAAA,uBAGA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;AACA,kBAAA,KAAA,EAAA,KAAA,CAAA,oBADA;AAEA,kBAAA,cAAA,EAAA,KAAA,CAAA,WAAA,CAAA;AAFA,iBAAA,CAHA;;AAAA;AAOA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,qCAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,QAAA;;AARA;AAAA;;AAAA;AAAA;AAAA;;AAUA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,mCAAA,CAAA;;AAVA;AAAA;AAYA,gBAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AAZA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAlBA;AArDA,CAAA","sourcesContent":["<template>\n  <woot-modal :show.sync=\"show\" :on-close=\"onCancel\">\n    <div class=\"column content-box\">\n      <woot-modal-header\n        :header-title=\"$t('EMAIL_TRANSCRIPT.TITLE')\"\n        :header-content=\"$t('EMAIL_TRANSCRIPT.DESC')\"\n      />\n      <form @submit.prevent=\"onSubmit\">\n        <div class=\"medium-12 columns\">\n          <div v-if=\"currentChat.meta.sender && currentChat.meta.sender.email\">\n            <input\n              id=\"contact\"\n              v-model=\"selectedType\"\n              type=\"radio\"\n              name=\"selectedType\"\n              value=\"contact\"\n            />\n            <label for=\"contact\">{{\n              $t('EMAIL_TRANSCRIPT.FORM.SEND_TO_CONTACT')\n            }}</label>\n          </div>\n          <div v-if=\"currentChat.meta.assignee\">\n            <input\n              id=\"assignee\"\n              v-model=\"selectedType\"\n              type=\"radio\"\n              name=\"selectedType\"\n              value=\"assignee\"\n            />\n            <label for=\"assignee\">{{\n              $t('EMAIL_TRANSCRIPT.FORM.SEND_TO_AGENT')\n            }}</label>\n          </div>\n          <div>\n            <input\n              id=\"other_email_address\"\n              v-model=\"selectedType\"\n              type=\"radio\"\n              name=\"selectedType\"\n              value=\"other_email_address\"\n            />\n            <label for=\"other_email_address\">{{\n              $t('EMAIL_TRANSCRIPT.FORM.SEND_TO_OTHER_EMAIL_ADDRESS')\n            }}</label>\n          </div>\n          <div v-if=\"sentToOtherEmailAddress\" class=\"medium-6 columns\">\n            <label :class=\"{ error: $v.email.$error }\">\n              <input\n                v-model.trim=\"email\"\n                type=\"text\"\n                :placeholder=\"$t('EMAIL_TRANSCRIPT.FORM.EMAIL.PLACEHOLDER')\"\n                @input=\"$v.email.$touch\"\n              />\n              <span v-if=\"$v.email.$error\" class=\"message\">\n                {{ $t('EMAIL_TRANSCRIPT.FORM.EMAIL.ERROR') }}\n              </span>\n            </label>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <div class=\"medium-12 row\">\n            <woot-submit-button\n              :button-text=\"$t('EMAIL_TRANSCRIPT.SUBMIT')\"\n              :disabled=\"!isFormValid\"\n            />\n            <button class=\"button clear\" @click.prevent=\"onCancel\">\n              {{ $t('EMAIL_TRANSCRIPT.CANCEL') }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </woot-modal>\n</template>\n\n<script>\nimport { required, minLength, email } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  mixins: [alertMixin],\n  props: {\n    show: {\n      type: Boolean,\n      default: false,\n    },\n    currentChat: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      email: '',\n      selectedType: '',\n      isSubmitting: false,\n    };\n  },\n  validations: {\n    email: {\n      required,\n      email,\n      minLength: minLength(4),\n    },\n  },\n  computed: {\n    sentToOtherEmailAddress() {\n      return this.selectedType === 'other_email_address';\n    },\n    isFormValid() {\n      if (this.selectedType) {\n        if (this.sentToOtherEmailAddress) {\n          return !!this.email && !this.$v.email.$error;\n        }\n        return true;\n      }\n      return false;\n    },\n    selectedEmailAddress() {\n      const { meta } = this.currentChat;\n      switch (this.selectedType) {\n        case 'contact':\n          return meta.sender.email;\n        case 'assignee':\n          return meta.assignee.email;\n        case 'other_email_address':\n          return this.email;\n        default:\n          return '';\n      }\n    },\n  },\n  methods: {\n    onCancel() {\n      this.$emit('cancel');\n    },\n    async onSubmit() {\n      this.isSubmitting = false;\n      try {\n        await this.$store.dispatch('sendEmailTranscript', {\n          email: this.selectedEmailAddress,\n          conversationId: this.currentChat.id,\n        });\n        this.showAlert(this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_SUCCESS'));\n        this.onCancel();\n      } catch (error) {\n        this.showAlert(this.$t('EMAIL_TRANSCRIPT.SEND_EMAIL_ERROR'));\n      } finally {\n        this.isSubmitting = false;\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}