{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { asPromise } from '../../lib/as-promise';\nimport { loadScript } from '../../lib/load-script';\nimport { getCDN } from '../../lib/parse-cdn';\n\nfunction validate(pluginLike) {\n  if (!Array.isArray(pluginLike)) {\n    throw new Error('Not a valid list of plugins');\n  }\n\n  var required = ['load', 'isLoaded', 'name', 'version', 'type'];\n  pluginLike.forEach(function (plugin) {\n    required.forEach(function (method) {\n      var _a;\n\n      if (plugin[method] === undefined) {\n        throw new Error(\"Plugin: \" + ((_a = plugin.name) !== null && _a !== void 0 ? _a : 'unknown') + \" missing required function \" + method);\n      }\n    });\n  });\n  return true;\n}\n\nexport function remoteLoader(settings) {\n  var _a, _b, _c;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var allPlugins, cdn, pluginPromises;\n\n    var _this = this;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          allPlugins = [];\n          cdn = (_b = (_a = window.analytics) === null || _a === void 0 ? void 0 : _a._cdn) !== null && _b !== void 0 ? _b : getCDN();\n          pluginPromises = ((_c = settings.remotePlugins) !== null && _c !== void 0 ? _c : []).map(function (remotePlugin) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var libraryName, pluginFactory, plugin, plugins, error_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    _a.trys.push([0, 4,, 5]);\n\n                    return [4\n                    /*yield*/\n                    , loadScript(remotePlugin.url.replace('https://cdn.segment.com', cdn))];\n\n                  case 1:\n                    _a.sent();\n\n                    libraryName = remotePlugin.libraryName;\n                    if (!(typeof window[libraryName] === 'function')) return [3\n                    /*break*/\n                    , 3];\n                    pluginFactory = window[libraryName];\n                    return [4\n                    /*yield*/\n                    , asPromise(pluginFactory(remotePlugin.settings))];\n\n                  case 2:\n                    plugin = _a.sent();\n                    plugins = Array.isArray(plugin) ? plugin : [plugin];\n                    validate(plugins);\n                    allPlugins.push.apply(allPlugins, plugins);\n                    _a.label = 3;\n\n                  case 3:\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 4:\n                    error_1 = _a.sent();\n                    console.warn('Failed to load Remote Plugin', error_1);\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          });\n          return [4\n          /*yield*/\n          , Promise.all(pluginPromises)];\n\n        case 1:\n          _d.sent();\n\n          return [2\n          /*return*/\n          , allPlugins.filter(Boolean)];\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}