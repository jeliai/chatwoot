{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport PortalAPI from 'dashboard/api/helpCenter/portals';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport { types } from './mutations';\nvar portalAPIs = new PortalAPI();\nexport var actions = {\n  index: function () {\n    var _index = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, _yield$portalAPIs$get, payload, portalSlugs;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              commit(types.SET_UI_FLAG, {\n                isFetching: true\n              });\n              _context.next = 5;\n              return portalAPIs.get();\n\n            case 5:\n              _yield$portalAPIs$get = _context.sent;\n              payload = _yield$portalAPIs$get.data.payload;\n              commit(types.CLEAR_PORTALS);\n              portalSlugs = payload.map(function (portal) {\n                return portal.slug;\n              });\n              commit(types.ADD_MANY_PORTALS_ENTRY, payload);\n              commit(types.ADD_MANY_PORTALS_IDS, portalSlugs);\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              throwErrorMessage(_context.t0);\n\n            case 16:\n              _context.prev = 16;\n              commit(types.SET_UI_FLAG, {\n                isFetching: false\n              });\n              return _context.finish(16);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13, 16, 19]]);\n    }));\n\n    function index(_x) {\n      return _index.apply(this, arguments);\n    }\n\n    return index;\n  }(),\n  show: function () {\n    var _show = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, _ref3) {\n      var commit, portalSlug, locale, response, meta;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              portalSlug = _ref3.portalSlug, locale = _ref3.locale;\n              commit(types.SET_UI_FLAG, {\n                isFetchingItem: true\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return portalAPIs.getPortal({\n                portalSlug: portalSlug,\n                locale: locale\n              });\n\n            case 6:\n              response = _context2.sent;\n              meta = response.data.meta;\n              commit(types.SET_PORTALS_META, meta);\n              _context2.next = 13;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](3);\n\n            case 13:\n              _context2.prev = 13;\n              commit(types.SET_UI_FLAG, {\n                isFetchingItem: false\n              });\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 11, 13, 16]]);\n    }));\n\n    function show(_x2, _x3) {\n      return _show.apply(this, arguments);\n    }\n\n    return show;\n  }(),\n  create: function () {\n    var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref4, params) {\n      var commit, _yield$portalAPIs$cre, data, portalSlug;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit;\n              commit(types.SET_UI_FLAG, {\n                isCreating: true\n              });\n              _context3.prev = 2;\n              _context3.next = 5;\n              return portalAPIs.create(params);\n\n            case 5:\n              _yield$portalAPIs$cre = _context3.sent;\n              data = _yield$portalAPIs$cre.data;\n              portalSlug = data.slug;\n              commit(types.ADD_PORTAL_ENTRY, data);\n              commit(types.ADD_PORTAL_ID, portalSlug);\n              _context3.next = 15;\n              break;\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](2);\n              throwErrorMessage(_context3.t0);\n\n            case 15:\n              _context3.prev = 15;\n              commit(types.SET_UI_FLAG, {\n                isCreating: false\n              });\n              return _context3.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 12, 15, 18]]);\n    }));\n\n    function create(_x4, _x5) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref5, _ref6) {\n      var commit, portalSlug, portalObj, _yield$portalAPIs$upd, data;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref5.commit;\n              portalSlug = _ref6.portalSlug, portalObj = _objectWithoutProperties(_ref6, [\"portalSlug\"]);\n              commit(types.SET_HELP_PORTAL_UI_FLAG, {\n                uiFlags: {\n                  isUpdating: true\n                },\n                portalSlug: portalSlug\n              });\n              _context4.prev = 3;\n              _context4.next = 6;\n              return portalAPIs.updatePortal({\n                portalSlug: portalSlug,\n                portalObj: portalObj\n              });\n\n            case 6:\n              _yield$portalAPIs$upd = _context4.sent;\n              data = _yield$portalAPIs$upd.data;\n              commit(types.UPDATE_PORTAL_ENTRY, data);\n              _context4.next = 14;\n              break;\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](3);\n              throwErrorMessage(_context4.t0);\n\n            case 14:\n              _context4.prev = 14;\n              commit(types.SET_HELP_PORTAL_UI_FLAG, {\n                uiFlags: {\n                  isUpdating: false\n                },\n                portalSlug: portalSlug\n              });\n              return _context4.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[3, 11, 14, 17]]);\n    }));\n\n    function update(_x6, _x7) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }(),\n  delete: function () {\n    var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref7, _ref8) {\n      var commit, portalSlug;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref7.commit;\n              portalSlug = _ref8.portalSlug;\n              commit(types.SET_HELP_PORTAL_UI_FLAG, {\n                uiFlags: {\n                  isDeleting: true\n                },\n                portalSlug: portalSlug\n              });\n              _context5.prev = 3;\n              _context5.next = 6;\n              return portalAPIs.delete(portalSlug);\n\n            case 6:\n              commit(types.REMOVE_PORTAL_ENTRY, portalSlug);\n              commit(types.REMOVE_PORTAL_ID, portalSlug);\n              _context5.next = 13;\n              break;\n\n            case 10:\n              _context5.prev = 10;\n              _context5.t0 = _context5[\"catch\"](3);\n              throwErrorMessage(_context5.t0);\n\n            case 13:\n              _context5.prev = 13;\n              commit(types.SET_HELP_PORTAL_UI_FLAG, {\n                uiFlags: {\n                  isDeleting: false\n                },\n                portalSlug: portalSlug\n              });\n              return _context5.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[3, 10, 13, 16]]);\n    }));\n\n    function _delete(_x8, _x9) {\n      return _delete2.apply(this, arguments);\n    }\n\n    return _delete;\n  }(),\n  updatePortal: function () {\n    var _updatePortal = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref9, portal) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref9.commit;\n              commit(types.UPDATE_PORTAL_ENTRY, portal);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function updatePortal(_x10, _x11) {\n      return _updatePortal.apply(this, arguments);\n    }\n\n    return updatePortal;\n  }()\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/helpCenterPortals/actions.js"],"names":["PortalAPI","throwErrorMessage","types","portalAPIs","actions","index","commit","SET_UI_FLAG","isFetching","get","payload","data","CLEAR_PORTALS","portalSlugs","map","portal","slug","ADD_MANY_PORTALS_ENTRY","ADD_MANY_PORTALS_IDS","show","portalSlug","locale","isFetchingItem","getPortal","response","meta","SET_PORTALS_META","create","params","isCreating","ADD_PORTAL_ENTRY","ADD_PORTAL_ID","update","portalObj","SET_HELP_PORTAL_UI_FLAG","uiFlags","isUpdating","updatePortal","UPDATE_PORTAL_ENTRY","delete","isDeleting","REMOVE_PORTAL_ENTRY","REMOVE_PORTAL_ID"],"mappings":"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","sourcesContent":["import PortalAPI from 'dashboard/api/helpCenter/portals';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport { types } from './mutations';\nconst portalAPIs = new PortalAPI();\nexport const actions = {\n  index: async ({ commit }) => {\n    try {\n      commit(types.SET_UI_FLAG, { isFetching: true });\n      const {\n        data: { payload },\n      } = await portalAPIs.get();\n      commit(types.CLEAR_PORTALS);\n      const portalSlugs = payload.map(portal => portal.slug);\n      commit(types.ADD_MANY_PORTALS_ENTRY, payload);\n      commit(types.ADD_MANY_PORTALS_IDS, portalSlugs);\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_UI_FLAG, { isFetching: false });\n    }\n  },\n\n  show: async ({ commit }, { portalSlug, locale }) => {\n    commit(types.SET_UI_FLAG, { isFetchingItem: true });\n    try {\n      const response = await portalAPIs.getPortal({ portalSlug, locale });\n      const {\n        data: { meta },\n      } = response;\n      commit(types.SET_PORTALS_META, meta);\n    } catch (error) {\n      // Ignore error\n    } finally {\n      commit(types.SET_UI_FLAG, { isFetchingItem: false });\n    }\n  },\n\n  create: async ({ commit }, params) => {\n    commit(types.SET_UI_FLAG, { isCreating: true });\n    try {\n      const { data } = await portalAPIs.create(params);\n      const { slug: portalSlug } = data;\n      commit(types.ADD_PORTAL_ENTRY, data);\n      commit(types.ADD_PORTAL_ID, portalSlug);\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_UI_FLAG, { isCreating: false });\n    }\n  },\n\n  update: async ({ commit }, { portalSlug, ...portalObj }) => {\n    commit(types.SET_HELP_PORTAL_UI_FLAG, {\n      uiFlags: { isUpdating: true },\n      portalSlug,\n    });\n    try {\n      const { data } = await portalAPIs.updatePortal({\n        portalSlug,\n        portalObj,\n      });\n      commit(types.UPDATE_PORTAL_ENTRY, data);\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_HELP_PORTAL_UI_FLAG, {\n        uiFlags: { isUpdating: false },\n        portalSlug,\n      });\n    }\n  },\n\n  delete: async ({ commit }, { portalSlug }) => {\n    commit(types.SET_HELP_PORTAL_UI_FLAG, {\n      uiFlags: { isDeleting: true },\n      portalSlug,\n    });\n    try {\n      await portalAPIs.delete(portalSlug);\n      commit(types.REMOVE_PORTAL_ENTRY, portalSlug);\n      commit(types.REMOVE_PORTAL_ID, portalSlug);\n    } catch (error) {\n      throwErrorMessage(error);\n    } finally {\n      commit(types.SET_HELP_PORTAL_UI_FLAG, {\n        uiFlags: { isDeleting: false },\n        portalSlug,\n      });\n    }\n  },\n\n  updatePortal: async ({ commit }, portal) => {\n    commit(types.UPDATE_PORTAL_ENTRY, portal);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}