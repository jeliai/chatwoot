{"ast":null,"code":"import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport alertMixin from 'shared/mixins/alertMixin';\nimport automationMethodsMixin from 'dashboard/mixins/automations/methodsMixin';\nimport automationValidationsMixin from 'dashboard/mixins/automations/validationsMixin';\nimport filterInputBox from 'dashboard/components/widgets/FilterInput/Index.vue';\nimport automationActionInput from 'dashboard/components/widgets/AutomationActionInput.vue';\nimport { AUTOMATION_RULE_EVENTS, AUTOMATION_ACTION_TYPES, AUTOMATIONS } from './constants';\nexport default {\n  components: {\n    filterInputBox: filterInputBox,\n    automationActionInput: automationActionInput\n  },\n  mixins: [alertMixin, automationMethodsMixin, automationValidationsMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: function _default() {}\n    },\n    selectedResponse: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      automationTypes: JSON.parse(JSON.stringify(AUTOMATIONS)),\n      automationRuleEvent: AUTOMATION_RULE_EVENTS[0].key,\n      automationRuleEvents: AUTOMATION_RULE_EVENTS,\n      automationActionTypes: AUTOMATION_ACTION_TYPES,\n      automationMutated: false,\n      show: true,\n      automation: null,\n      showDeleteConfirmationModal: false,\n      allCustomAttributes: [],\n      mode: 'edit'\n    };\n  },\n  computed: {\n    hasAutomationMutated: function hasAutomationMutated() {\n      if (this.automation.conditions[0].values || this.automation.actions[0].action_params.length) return true;\n      return false;\n    }\n  },\n  mounted: function mounted() {\n    this.manifestCustomAttributes();\n    this.allCustomAttributes = this.$store.getters['attributes/getAttributes'];\n    this.formatAutomation(this.selectedResponse);\n  }\n};","map":{"version":3,"sources":["EditAutomationRule.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA,OAAA,UAAA,MAAA,0BAAA;AACA,OAAA,sBAAA,MAAA,2CAAA;AACA,OAAA,0BAAA,MAAA,+CAAA;AACA,OAAA,cAAA,MAAA,oDAAA;AACA,OAAA,qBAAA,MAAA,wDAAA;AAEA,SACA,sBADA,EAEA,uBAFA,EAGA,WAHA,QAIA,aAJA;AAMA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA,cADA;AAEA,IAAA,qBAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,sBAAA,EAAA,0BAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AALA,GANA;AAgBA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,WAAA,CAAA,CADA;AAEA,MAAA,mBAAA,EAAA,sBAAA,CAAA,CAAA,CAAA,CAAA,GAFA;AAGA,MAAA,oBAAA,EAAA,sBAHA;AAIA,MAAA,qBAAA,EAAA,uBAJA;AAKA,MAAA,iBAAA,EAAA,KALA;AAMA,MAAA,IAAA,EAAA,IANA;AAOA,MAAA,UAAA,EAAA,IAPA;AAQA,MAAA,2BAAA,EAAA,KARA;AASA,MAAA,mBAAA,EAAA,EATA;AAUA,MAAA,IAAA,EAAA;AAVA,KAAA;AAYA,GA7BA;AA8BA,EAAA,QAAA,EAAA;AACA,IAAA,oBADA,kCACA;AACA,UACA,KAAA,UAAA,CAAA,UAAA,CAAA,CAAA,EAAA,MAAA,IACA,KAAA,UAAA,CAAA,OAAA,CAAA,CAAA,EAAA,aAAA,CAAA,MAFA,EAIA,OAAA,IAAA;AACA,aAAA,KAAA;AACA;AARA,GA9BA;AAwCA,EAAA,OAxCA,qBAwCA;AACA,SAAA,wBAAA;AACA,SAAA,mBAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,0BAAA,CAAA;AACA,SAAA,gBAAA,CAAA,KAAA,gBAAA;AACA;AA5CA,CAAA","sourcesContent":["<template>\n  <div class=\"column\">\n    <woot-modal-header :header-title=\"$t('AUTOMATION.EDIT.TITLE')\" />\n    <div class=\"row modal-content\">\n      <div v-if=\"automation\" class=\"medium-12 columns\">\n        <woot-input\n          v-model=\"automation.name\"\n          :label=\"$t('AUTOMATION.ADD.FORM.NAME.LABEL')\"\n          type=\"text\"\n          :class=\"{ error: $v.automation.name.$error }\"\n          :error=\"\n            $v.automation.name.$error\n              ? $t('AUTOMATION.ADD.FORM.NAME.ERROR')\n              : ''\n          \"\n          :placeholder=\"$t('AUTOMATION.ADD.FORM.NAME.PLACEHOLDER')\"\n          @blur=\"$v.automation.name.$touch\"\n        />\n        <woot-input\n          v-model=\"automation.description\"\n          :label=\"$t('AUTOMATION.ADD.FORM.DESC.LABEL')\"\n          type=\"text\"\n          :class=\"{ error: $v.automation.description.$error }\"\n          :error=\"\n            $v.automation.description.$error\n              ? $t('AUTOMATION.ADD.FORM.DESC.ERROR')\n              : ''\n          \"\n          :placeholder=\"$t('AUTOMATION.ADD.FORM.DESC.PLACEHOLDER')\"\n          @blur=\"$v.automation.description.$touch\"\n        />\n        <div class=\"event_wrapper\">\n          <label :class=\"{ error: $v.automation.event_name.$error }\">\n            {{ $t('AUTOMATION.ADD.FORM.EVENT.LABEL') }}\n            <select v-model=\"automation.event_name\" @change=\"onEventChange()\">\n              <option\n                v-for=\"event in automationRuleEvents\"\n                :key=\"event.key\"\n                :value=\"event.key\"\n              >\n                {{ event.value }}\n              </option>\n            </select>\n            <span v-if=\"$v.automation.event_name.$error\" class=\"message\">\n              {{ $t('AUTOMATION.ADD.FORM.EVENT.ERROR') }}\n            </span>\n          </label>\n        </div>\n        <!-- // Conditions Start -->\n        <section>\n          <label>\n            {{ $t('AUTOMATION.ADD.FORM.CONDITIONS.LABEL') }}\n          </label>\n          <div class=\"medium-12 columns filters-wrap\">\n            <filter-input-box\n              v-for=\"(condition, i) in automation.conditions\"\n              :key=\"i\"\n              v-model=\"automation.conditions[i]\"\n              :filter-attributes=\"getAttributes(automation.event_name)\"\n              :input-type=\"getInputType(automation.conditions[i].attribute_key)\"\n              :operators=\"getOperators(automation.conditions[i].attribute_key)\"\n              :dropdown-values=\"\n                getConditionDropdownValues(\n                  automation.conditions[i].attribute_key\n                )\n              \"\n              :custom-attribute-type=\"\n                getCustomAttributeType(automation.conditions[i].attribute_key)\n              \"\n              :show-query-operator=\"i !== automation.conditions.length - 1\"\n              :v=\"$v.automation.conditions.$each[i]\"\n              @resetFilter=\"resetFilter(i, automation.conditions[i])\"\n              @removeFilter=\"removeFilter(i)\"\n            />\n            <div class=\"filter-actions\">\n              <woot-button\n                icon=\"add\"\n                color-scheme=\"success\"\n                variant=\"smooth\"\n                size=\"small\"\n                @click=\"appendNewCondition\"\n              >\n                {{ $t('AUTOMATION.ADD.CONDITION_BUTTON_LABEL') }}\n              </woot-button>\n            </div>\n          </div>\n        </section>\n        <!-- // Conditions End -->\n        <!-- // Actions Start -->\n        <section>\n          <label>\n            {{ $t('AUTOMATION.ADD.FORM.ACTIONS.LABEL') }}\n          </label>\n          <div class=\"medium-12 columns filters-wrap\">\n            <automation-action-input\n              v-for=\"(action, i) in automation.actions\"\n              :key=\"i\"\n              v-model=\"automation.actions[i]\"\n              :action-types=\"automationActionTypes\"\n              :dropdown-values=\"getActionDropdownValues(action.action_name)\"\n              :show-action-input=\"showActionInput(action.action_name)\"\n              :v=\"$v.automation.actions.$each[i]\"\n              :initial-file-name=\"getFileName(action, automation.files)\"\n              @resetAction=\"resetAction(i)\"\n              @removeAction=\"removeAction(i)\"\n            />\n            <div class=\"filter-actions\">\n              <woot-button\n                icon=\"add\"\n                color-scheme=\"success\"\n                variant=\"smooth\"\n                size=\"small\"\n                @click=\"appendNewAction\"\n              >\n                {{ $t('AUTOMATION.ADD.ACTION_BUTTON_LABEL') }}\n              </woot-button>\n            </div>\n          </div>\n        </section>\n        <!-- // Actions End -->\n        <div class=\"medium-12 columns\">\n          <div class=\"modal-footer justify-content-end w-full\">\n            <woot-button\n              class=\"button\"\n              variant=\"clear\"\n              @click.prevent=\"onClose\"\n            >\n              {{ $t('AUTOMATION.EDIT.CANCEL_BUTTON_TEXT') }}\n            </woot-button>\n            <woot-button @click=\"submitAutomation\">\n              {{ $t('AUTOMATION.EDIT.SUBMIT') }}\n            </woot-button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport alertMixin from 'shared/mixins/alertMixin';\nimport automationMethodsMixin from 'dashboard/mixins/automations/methodsMixin';\nimport automationValidationsMixin from 'dashboard/mixins/automations/validationsMixin';\nimport filterInputBox from 'dashboard/components/widgets/FilterInput/Index.vue';\nimport automationActionInput from 'dashboard/components/widgets/AutomationActionInput.vue';\n\nimport {\n  AUTOMATION_RULE_EVENTS,\n  AUTOMATION_ACTION_TYPES,\n  AUTOMATIONS,\n} from './constants';\n\nexport default {\n  components: {\n    filterInputBox,\n    automationActionInput,\n  },\n  mixins: [alertMixin, automationMethodsMixin, automationValidationsMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: () => {},\n    },\n    selectedResponse: {\n      type: Object,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      automationTypes: JSON.parse(JSON.stringify(AUTOMATIONS)),\n      automationRuleEvent: AUTOMATION_RULE_EVENTS[0].key,\n      automationRuleEvents: AUTOMATION_RULE_EVENTS,\n      automationActionTypes: AUTOMATION_ACTION_TYPES,\n      automationMutated: false,\n      show: true,\n      automation: null,\n      showDeleteConfirmationModal: false,\n      allCustomAttributes: [],\n      mode: 'edit',\n    };\n  },\n  computed: {\n    hasAutomationMutated() {\n      if (\n        this.automation.conditions[0].values ||\n        this.automation.actions[0].action_params.length\n      )\n        return true;\n      return false;\n    },\n  },\n  mounted() {\n    this.manifestCustomAttributes();\n    this.allCustomAttributes = this.$store.getters['attributes/getAttributes'];\n    this.formatAutomation(this.selectedResponse);\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.filters-wrap {\n  padding: var(--space-normal);\n  border-radius: var(--border-radius-large);\n  border: 1px solid var(--color-border);\n  background: var(--color-background-light);\n  margin-bottom: var(--space-normal);\n}\n\n.filter-actions {\n  margin-top: var(--space-normal);\n}\n.event_wrapper {\n  select {\n    margin: var(--space-zero);\n  }\n  .info-message {\n    font-size: var(--font-size-mini);\n    color: var(--s-500);\n    text-align: right;\n  }\n  margin-bottom: var(--space-medium);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/automation"},"metadata":{},"sourceType":"module"}