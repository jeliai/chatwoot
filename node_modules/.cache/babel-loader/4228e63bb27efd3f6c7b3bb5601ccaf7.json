{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetch from 'unfetch';\nimport { version } from '../../generated/version';\nimport { getVersionType } from '../../plugins/segmentio/normalize';\n\nvar RemoteMetrics =\n/** @class */\nfunction () {\n  function RemoteMetrics(options) {\n    var _this = this;\n\n    var _a, _b, _c, _d; // This works only in the browser.\n\n\n    this.host = (_a = options === null || options === void 0 ? void 0 : options.host) !== null && _a !== void 0 ? _a : 'api.june.so/sdk';\n    this.sampleRate = (_b = options === null || options === void 0 ? void 0 : options.sampleRate) !== null && _b !== void 0 ? _b : 1;\n    this.flushTimer = (_c = options === null || options === void 0 ? void 0 : options.flushTimer) !== null && _c !== void 0 ? _c : 30 * 1000;\n    /* 30s */\n\n    this.maxQueueSize = (_d = options === null || options === void 0 ? void 0 : options.maxQueueSize) !== null && _d !== void 0 ? _d : 20;\n    this.queue = [];\n\n    if (this.sampleRate > 0) {\n      var flushing_1 = false;\n\n      var run_1 = function run_1() {\n        if (flushing_1) {\n          return;\n        }\n\n        flushing_1 = true;\n\n        _this.flush().catch(function (err) {\n          console.error(err);\n        });\n\n        flushing_1 = false;\n        setTimeout(run_1, _this.flushTimer);\n      };\n\n      run_1();\n    }\n  }\n\n  RemoteMetrics.prototype.increment = function (metric, tags) {\n    // All metrics are part of an allow list in Tracking API\n    if (!metric.includes('analytics_js.')) {\n      return;\n    } // /m doesn't like empty tags\n\n\n    if (tags.length === 0) {\n      return;\n    }\n\n    if (Math.random() > this.sampleRate) {\n      return;\n    }\n\n    if (this.queue.length >= this.maxQueueSize) {\n      return;\n    }\n\n    var formatted = tags.reduce(function (acc, t) {\n      var _a = t.split(':'),\n          k = _a[0],\n          v = _a[1];\n\n      acc[k] = v;\n      return acc;\n    }, {});\n    formatted['library'] = 'analytics.js';\n    var type = getVersionType();\n\n    if (type === 'web') {\n      formatted['library_version'] = \"next-\" + version;\n    } else {\n      formatted['library_version'] = \"npm:next-\" + version;\n    }\n\n    this.queue.push({\n      type: 'Counter',\n      metric: metric,\n      value: 1,\n      tags: formatted\n    });\n\n    if (metric.includes('error')) {\n      this.flush().catch(function (err) {\n        return console.error(err);\n      });\n    }\n  };\n\n  RemoteMetrics.prototype.flush = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.queue.length <= 0) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [4\n            /*yield*/\n            , this.send().catch(function (error) {\n              console.error(error);\n              _this.sampleRate = 0;\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RemoteMetrics.prototype.send = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, headers, url;\n      return __generator(this, function (_a) {\n        payload = {\n          series: this.queue\n        };\n        this.queue = [];\n        headers = {\n          'Content-Type': 'application/json'\n        };\n        url = \"https://\" + this.host + \"/m\"; // @ts-ignore\n\n        return [2\n        /*return*/\n        , fetch(url, {\n          headers: headers,\n          body: JSON.stringify(payload),\n          method: 'POST'\n        })];\n      });\n    });\n  };\n\n  return RemoteMetrics;\n}();\n\nexport { RemoteMetrics };","map":null,"metadata":{},"sourceType":"module"}