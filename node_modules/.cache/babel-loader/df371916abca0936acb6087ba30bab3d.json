{"ast":null,"code":"/**\n * Get the current page's canonical URL.\n *\n * @return {string|undefined}\n */\nfunction canonical() {\n  var tags = document.getElementsByTagName('link');\n  var canon = '';\n  Array.prototype.slice.call(tags).forEach(function (tag) {\n    if (tag.getAttribute('rel') === 'canonical') {\n      canon = tag.getAttribute('href');\n    }\n  });\n  return canon;\n}\n/**\n * Return the canonical path for the page.\n */\n\n\nfunction canonicalPath() {\n  var canon = canonical();\n\n  if (!canon) {\n    return window.location.pathname;\n  }\n\n  var a = document.createElement('a');\n  a.href = canon;\n  var pathname = !a.pathname.startsWith('/') ? '/' + a.pathname : a.pathname;\n  return pathname;\n}\n/**\n * Return the canonical URL for the page concat the given `search`\n * and strip the hash.\n */\n\n\nexport function canonicalUrl(search) {\n  if (search === void 0) {\n    search = '';\n  }\n\n  var canon = canonical();\n\n  if (canon) {\n    return canon.includes('?') ? canon : \"\" + canon + search;\n  }\n\n  var url = window.location.href;\n  var i = url.indexOf('#');\n  return i === -1 ? url : url.slice(0, i);\n}\n/**\n * Return a default `options.context.page` object.\n *\n * https://segment.com/docs/spec/page/#properties\n */\n\nexport function pageDefaults() {\n  return {\n    path: canonicalPath(),\n    referrer: document.referrer,\n    search: location.search,\n    title: document.title,\n    url: canonicalUrl(location.search)\n  };\n}\n\nfunction enrichPageContext(ctx) {\n  var _a;\n\n  var event = ctx.event;\n  event.context = event.context || {};\n  var pageContext = pageDefaults();\n  var pageProps = (_a = event.properties) !== null && _a !== void 0 ? _a : {};\n  Object.keys(pageContext).forEach(function (key) {\n    if (pageProps[key]) {\n      pageContext[key] = pageProps[key];\n    }\n  });\n\n  if (event.context.page) {\n    pageContext = Object.assign({}, pageContext, event.context.page);\n  }\n\n  event.context = Object.assign({}, event.context, {\n    page: pageContext\n  });\n  ctx.event = event;\n  return ctx;\n}\n\nexport var pageEnrichment = {\n  name: 'Page Enrichment',\n  version: '0.1.0',\n  isLoaded: function isLoaded() {\n    return true;\n  },\n  load: function load() {\n    return Promise.resolve();\n  },\n  type: 'before',\n  page: function page(ctx) {\n    ctx.event.properties = Object.assign({}, pageDefaults(), ctx.event.properties);\n\n    if (ctx.event.name) {\n      ctx.event.properties.name = ctx.event.name;\n    }\n\n    return enrichPageContext(ctx);\n  },\n  alias: enrichPageContext,\n  track: enrichPageContext,\n  identify: enrichPageContext,\n  group: enrichPageContext\n};","map":null,"metadata":{},"sourceType":"module"}