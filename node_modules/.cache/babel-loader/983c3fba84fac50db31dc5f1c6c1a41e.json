{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport HeaderActions from './HeaderActions';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\nexport default {\n  name: 'ChatHeaderExpanded',\n  components: {\n    HeaderActions: HeaderActions\n  },\n  mixins: [darkModeMixin],\n  props: {\n    avatarUrl: {\n      type: String,\n      default: ''\n    },\n    introHeading: {\n      type: String,\n      default: ''\n    },\n    introBody: {\n      type: String,\n      default: ''\n    },\n    showPopoutButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    widgetColor: 'appConfig/getWidgetColor'\n  }))\n};","map":{"version":3,"sources":["ChatHeaderExpanded.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA;AADA,GAFA;AAKA,EAAA,MAAA,EAAA,CAAA,aAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAbA,GANA;AAwBA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA;AADA,GAAA,CADA;AAxBA,CAAA","sourcesContent":["<template>\n  <header\n    class=\"header-expanded py-6 px-5 relative box-border w-full\"\n    :class=\"$dm('bg-white', 'dark:bg-slate-900')\"\n  >\n    <div\n      class=\"flex items-start\"\n      :class=\"[avatarUrl ? 'justify-between' : 'justify-end']\"\n    >\n      <img\n        v-if=\"avatarUrl\"\n        class=\"h-12 rounded-full\"\n        :src=\"avatarUrl\"\n        alt=\"Avatar\"\n      />\n      <header-actions :show-popout-button=\"showPopoutButton\" />\n    </div>\n    <h2\n      v-dompurify-html=\"introHeading\"\n      class=\"mt-5 text-3xl mb-3 font-normal\"\n      :class=\"$dm('text-slate-900', 'dark:text-slate-50')\"\n    />\n    <p\n      v-dompurify-html=\"introBody\"\n      class=\"text-lg leading-normal\"\n      :class=\"$dm('text-slate-700', 'dark:text-slate-200')\"\n    />\n  </header>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport HeaderActions from './HeaderActions';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\n\nexport default {\n  name: 'ChatHeaderExpanded',\n  components: {\n    HeaderActions,\n  },\n  mixins: [darkModeMixin],\n  props: {\n    avatarUrl: {\n      type: String,\n      default: '',\n    },\n    introHeading: {\n      type: String,\n      default: '',\n    },\n    introBody: {\n      type: String,\n      default: '',\n    },\n    showPopoutButton: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n    }),\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/widget/components"},"metadata":{},"sourceType":"module"}