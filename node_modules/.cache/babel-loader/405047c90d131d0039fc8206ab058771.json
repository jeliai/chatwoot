{"ast":null,"code":"var _a, _b;\n\nimport { __awaiter, __generator, __spreadArrays } from \"tslib\";\nimport { getCDN } from '../../lib/parse-cdn';\nimport { loadScript, unloadScript } from '../../lib/load-script';\nvar cdn = (_b = (_a = window.analytics) === null || _a === void 0 ? void 0 : _a._cdn) !== null && _b !== void 0 ? _b : getCDN();\nvar path = cdn + '/next-integrations';\n\nfunction normalizeName(name) {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-');\n}\n\nfunction recordLoadMetrics(fullPath, ctx, name) {\n  var _a, _b, _c;\n\n  try {\n    var metric = ((_c = (_b = (_a = global.window) === null || _a === void 0 ? void 0 : _a.performance) === null || _b === void 0 ? void 0 : _b.getEntriesByName(fullPath, 'resource')) !== null && _c !== void 0 ? _c : [])[0]; // we assume everything that took under 100ms is cached\n\n    metric && ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), __spreadArrays([name], metric.duration < 100 ? ['cached'] : []));\n  } catch (_) {// not available\n  }\n}\n\nexport function loadIntegration(ctx, analyticsInstance, name, version, settings) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pathName, fullPath, err_1, deps, integrationBuilder, analyticsStub, integration;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          pathName = normalizeName(name);\n          fullPath = path + \"/integrations/\" + pathName + \"/\" + version + \"/\" + pathName + \".dynamic.js.gz\";\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , loadScript(fullPath)];\n\n        case 2:\n          _a.sent();\n\n          recordLoadMetrics(fullPath, ctx, name);\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          err_1 = _a.sent();\n          ctx.stats.gauge('legacy_destination_time', -1, [\"plugin:\" + name, \"failed\"]);\n          throw err_1;\n\n        case 4:\n          deps = window[pathName + \"Deps\"];\n          return [4\n          /*yield*/\n          , Promise.all(deps.map(function (dep) {\n            return loadScript(path + dep + '.gz');\n          })) // @ts-ignore\n          ];\n\n        case 5:\n          _a.sent(); // @ts-ignore\n\n\n          window[pathName + \"Loader\"]();\n          integrationBuilder = window[pathName + \"Integration\"]; // GA and Appcues use a different interface to instantiating integrations\n\n          if (integrationBuilder.Integration) {\n            analyticsStub = {\n              user: function user() {\n                return analyticsInstance.user();\n              },\n              addIntegration: function addIntegration() {}\n            };\n            integrationBuilder(analyticsStub);\n            integrationBuilder = integrationBuilder.Integration;\n          }\n\n          integration = new integrationBuilder(settings);\n          integration.analytics = analyticsInstance;\n          return [2\n          /*return*/\n          , integration];\n      }\n    });\n  });\n}\nexport function unloadIntegration(name, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var pathName;\n    return __generator(this, function (_a) {\n      pathName = normalizeName(name);\n      return [2\n      /*return*/\n      , unloadScript(path + \"/integrations/\" + pathName + \"/\" + version + \"/\" + pathName + \".dynamic.js.gz\")];\n    });\n  });\n}\nexport function resolveVersion(settings) {\n  var _a, _b, _c, _d;\n\n  return (_d = (_b = (_a = settings.versionSettings) === null || _a === void 0 ? void 0 : _a.override) !== null && _b !== void 0 ? _b : (_c = settings.versionSettings) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : 'latest';\n}","map":null,"metadata":{},"sourceType":"module"}