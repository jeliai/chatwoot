{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport languages from 'dashboard/components/widgets/conversation/advancedFilterItems/languages';\nimport countries from 'shared/constants/countries';\nimport { generateCustomAttributeTypes, getActionOptions, getConditionOptions, getCustomAttributeInputType, getOperatorTypes, isACustomAttribute, getFileName, getDefaultConditions, getDefaultActions, filterCustomAttributes, generateAutomationPayload, getStandardAttributeInputType, isCustomAttribute, generateCustomAttributes } from 'dashboard/helper/automationHelper';\nimport { mapGetters } from 'vuex';\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    agents: 'agents/getAgents',\n    campaigns: 'campaigns/getAllCampaigns',\n    contacts: 'contacts/getContacts',\n    inboxes: 'inboxes/getInboxes',\n    labels: 'labels/getLabels',\n    teams: 'teams/getTeams'\n  })), {}, {\n    booleanFilterOptions: function booleanFilterOptions() {\n      return [{\n        id: true,\n        name: this.$t('FILTER.ATTRIBUTE_LABELS.TRUE')\n      }, {\n        id: false,\n        name: this.$t('FILTER.ATTRIBUTE_LABELS.FALSE')\n      }];\n    },\n    statusFilterOptions: function statusFilterOptions() {\n      var statusFilters = this.$t('CHAT_LIST.CHAT_STATUS_FILTER_ITEMS');\n      return [].concat(_toConsumableArray(Object.keys(statusFilters).map(function (status) {\n        return {\n          id: status,\n          name: statusFilters[status].TEXT\n        };\n      })), [{\n        id: 'all',\n        name: this.$t('CHAT_LIST.FILTER_ALL')\n      }]);\n    }\n  }),\n  methods: {\n    getFileName: getFileName,\n    onEventChange: function onEventChange() {\n      this.automation.conditions = getDefaultConditions(this.automation.event_name);\n      this.automation.actions = getDefaultActions();\n    },\n    getAttributes: function getAttributes(key) {\n      return this.automationTypes[key].conditions;\n    },\n    getInputType: function getInputType(key) {\n      var customAttribute = isACustomAttribute(this.allCustomAttributes, key);\n\n      if (customAttribute) {\n        return getCustomAttributeInputType(customAttribute.attribute_display_type);\n      }\n\n      var type = this.getAutomationType(key);\n      return type.inputType;\n    },\n    getOperators: function getOperators(key) {\n      if (this.mode === 'edit') {\n        var customAttribute = isACustomAttribute(this.allCustomAttributes, key);\n\n        if (customAttribute) {\n          return getOperatorTypes(customAttribute.attribute_display_type);\n        }\n      }\n\n      var type = this.getAutomationType(key);\n      return type.filterOperators;\n    },\n    getAutomationType: function getAutomationType(key) {\n      return this.automationTypes[this.automation.event_name].conditions.find(function (condition) {\n        return condition.key === key;\n      });\n    },\n    getCustomAttributeType: function getCustomAttributeType(key) {\n      var type = this.automationTypes[this.automation.event_name].conditions.find(function (i) {\n        return i.key === key;\n      }).customAttributeType;\n      return type;\n    },\n    getConditionDropdownValues: function getConditionDropdownValues(type) {\n      var agents = this.agents,\n          customAttributes = this.allCustomAttributes,\n          booleanFilterOptions = this.booleanFilterOptions,\n          campaigns = this.campaigns,\n          contacts = this.contacts,\n          inboxes = this.inboxes,\n          statusFilterOptions = this.statusFilterOptions,\n          teams = this.teams;\n      return getConditionOptions({\n        agents: agents,\n        booleanFilterOptions: booleanFilterOptions,\n        campaigns: campaigns,\n        contacts: contacts,\n        customAttributes: customAttributes,\n        inboxes: inboxes,\n        statusFilterOptions: statusFilterOptions,\n        teams: teams,\n        languages: languages,\n        countries: countries,\n        type: type\n      });\n    },\n    appendNewCondition: function appendNewCondition() {\n      var _this$automation$cond;\n\n      (_this$automation$cond = this.automation.conditions).push.apply(_this$automation$cond, _toConsumableArray(getDefaultConditions(this.automation.event_name)));\n    },\n    appendNewAction: function appendNewAction() {\n      var _this$automation$acti;\n\n      (_this$automation$acti = this.automation.actions).push.apply(_this$automation$acti, _toConsumableArray(getDefaultActions()));\n    },\n    removeFilter: function removeFilter(index) {\n      if (this.automation.conditions.length <= 1) {\n        this.showAlert(this.$t('AUTOMATION.CONDITION.DELETE_MESSAGE'));\n      } else {\n        this.automation.conditions.splice(index, 1);\n      }\n    },\n    removeAction: function removeAction(index) {\n      if (this.automation.actions.length <= 1) {\n        this.showAlert(this.$t('AUTOMATION.ACTION.DELETE_MESSAGE'));\n      } else {\n        this.automation.actions.splice(index, 1);\n      }\n    },\n    submitAutomation: function submitAutomation() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      var automation = generateAutomationPayload(this.automation);\n      this.$emit('saveAutomation', automation, this.mode);\n    },\n    resetFilter: function resetFilter(index, currentCondition) {\n      this.automation.conditions[index].filter_operator = this.automationTypes[this.automation.event_name].conditions.find(function (condition) {\n        return condition.key === currentCondition.attribute_key;\n      }).filterOperators[0].value;\n      this.automation.conditions[index].values = '';\n    },\n    showUserInput: function showUserInput(type) {\n      return !(type === 'is_present' || type === 'is_not_present');\n    },\n    showActionInput: function showActionInput(action) {\n      if (action === 'send_email_to_team' || action === 'send_message') return false;\n      var type = this.automationActionTypes.find(function (i) {\n        return i.key === action;\n      }).inputType;\n      return !!type;\n    },\n    resetAction: function resetAction(index) {\n      this.automation.actions[index].action_params = [];\n    },\n    manifestConditions: function manifestConditions(automation) {\n      var _this = this;\n\n      var customAttributes = filterCustomAttributes(this.allCustomAttributes);\n      var conditions = automation.conditions.map(function (condition) {\n        var customAttr = isCustomAttribute(customAttributes, condition.attribute_key);\n        var inputType = 'plain_text';\n\n        if (customAttr) {\n          inputType = getCustomAttributeInputType(customAttr.type);\n        } else {\n          inputType = getStandardAttributeInputType(_this.automationTypes, automation.event_name, condition.attribute_key);\n        }\n\n        if (inputType === 'plain_text' || inputType === 'date') {\n          return _objectSpread(_objectSpread({}, condition), {}, {\n            values: condition.values[0]\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, condition), {}, {\n          query_operator: condition.query_operator || 'and',\n          values: _toConsumableArray(_this.getConditionDropdownValues(condition.attribute_key)).filter(function (item) {\n            return _toConsumableArray(condition.values).includes(item.id);\n          })\n        });\n      });\n      return conditions;\n    },\n    generateActionsArray: function generateActionsArray(action) {\n      var params = action.action_params;\n      var actionParams = [];\n      var inputType = this.automationActionTypes.find(function (item) {\n        return item.key === action.action_name;\n      }).inputType;\n\n      if (inputType === 'multi_select' || inputType === 'search_select') {\n        actionParams = _toConsumableArray(this.getActionDropdownValues(action.action_name)).filter(function (item) {\n          return _toConsumableArray(params).includes(item.id);\n        });\n      } else if (inputType === 'team_message') {\n        actionParams = {\n          team_ids: _toConsumableArray(this.getActionDropdownValues(action.action_name)).filter(function (item) {\n            return _toConsumableArray(params[0].team_ids).includes(item.id);\n          }),\n          message: params[0].message\n        };\n      } else actionParams = _toConsumableArray(params);\n\n      return actionParams;\n    },\n    manifestActions: function manifestActions(automation) {\n      var _this2 = this;\n\n      var actionParams = [];\n      var actions = automation.actions.map(function (action) {\n        if (action.action_params.length) {\n          actionParams = _this2.generateActionsArray(action);\n        }\n\n        return _objectSpread(_objectSpread({}, action), {}, {\n          action_params: actionParams\n        });\n      });\n      return actions;\n    },\n    formatAutomation: function formatAutomation(automation) {\n      this.automation = _objectSpread(_objectSpread({}, automation), {}, {\n        conditions: this.manifestConditions(automation),\n        actions: this.manifestActions(automation)\n      });\n    },\n    getActionDropdownValues: function getActionDropdownValues(type) {\n      var labels = this.labels,\n          teams = this.teams;\n      return getActionOptions({\n        labels: labels,\n        teams: teams,\n        type: type\n      });\n    },\n    manifestCustomAttributes: function manifestCustomAttributes() {\n      var _this$automationTypes, _this$automationTypes2, _this$automationTypes3;\n\n      var conversationCustomAttributesRaw = this.$store.getters['attributes/getAttributesByModel']('conversation_attribute');\n      var contactCustomAttributesRaw = this.$store.getters['attributes/getAttributesByModel']('contact_attribute');\n      var conversationCustomAttributeTypes = generateCustomAttributeTypes(conversationCustomAttributesRaw, 'conversation_attribute');\n      var contactCustomAttributeTypes = generateCustomAttributeTypes(contactCustomAttributesRaw, 'contact_attribute');\n      var manifestedCustomAttributes = generateCustomAttributes(conversationCustomAttributeTypes, contactCustomAttributeTypes, this.$t('AUTOMATION.CONDITION.CONVERSATION_CUSTOM_ATTR_LABEL'), this.$t('AUTOMATION.CONDITION.CONTACT_CUSTOM_ATTR_LABEL'));\n\n      (_this$automationTypes = this.automationTypes.message_created.conditions).push.apply(_this$automationTypes, _toConsumableArray(manifestedCustomAttributes));\n\n      (_this$automationTypes2 = this.automationTypes.conversation_created.conditions).push.apply(_this$automationTypes2, _toConsumableArray(manifestedCustomAttributes));\n\n      (_this$automationTypes3 = this.automationTypes.conversation_updated.conditions).push.apply(_this$automationTypes3, _toConsumableArray(manifestedCustomAttributes));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/automations/methodsMixin.js"],"names":["languages","countries","generateCustomAttributeTypes","getActionOptions","getConditionOptions","getCustomAttributeInputType","getOperatorTypes","isACustomAttribute","getFileName","getDefaultConditions","getDefaultActions","filterCustomAttributes","generateAutomationPayload","getStandardAttributeInputType","isCustomAttribute","generateCustomAttributes","mapGetters","computed","agents","campaigns","contacts","inboxes","labels","teams","booleanFilterOptions","id","name","$t","statusFilterOptions","statusFilters","Object","keys","map","status","TEXT","methods","onEventChange","automation","conditions","event_name","actions","getAttributes","key","automationTypes","getInputType","customAttribute","allCustomAttributes","attribute_display_type","type","getAutomationType","inputType","getOperators","mode","filterOperators","find","condition","getCustomAttributeType","i","customAttributeType","getConditionDropdownValues","customAttributes","appendNewCondition","push","appendNewAction","removeFilter","index","length","showAlert","splice","removeAction","submitAutomation","$v","$touch","$invalid","$emit","resetFilter","currentCondition","filter_operator","attribute_key","value","values","showUserInput","showActionInput","action","automationActionTypes","resetAction","action_params","manifestConditions","customAttr","query_operator","filter","item","includes","generateActionsArray","params","actionParams","action_name","getActionDropdownValues","team_ids","message","manifestActions","formatAutomation","manifestCustomAttributes","conversationCustomAttributesRaw","$store","getters","contactCustomAttributesRaw","conversationCustomAttributeTypes","contactCustomAttributeTypes","manifestedCustomAttributes","message_created","conversation_created","conversation_updated"],"mappings":"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","sourcesContent":["import languages from 'dashboard/components/widgets/conversation/advancedFilterItems/languages';\nimport countries from 'shared/constants/countries';\nimport {\n  generateCustomAttributeTypes,\n  getActionOptions,\n  getConditionOptions,\n  getCustomAttributeInputType,\n  getOperatorTypes,\n  isACustomAttribute,\n  getFileName,\n  getDefaultConditions,\n  getDefaultActions,\n  filterCustomAttributes,\n  generateAutomationPayload,\n  getStandardAttributeInputType,\n  isCustomAttribute,\n  generateCustomAttributes,\n} from 'dashboard/helper/automationHelper';\nimport { mapGetters } from 'vuex';\n\nexport default {\n  computed: {\n    ...mapGetters({\n      agents: 'agents/getAgents',\n      campaigns: 'campaigns/getAllCampaigns',\n      contacts: 'contacts/getContacts',\n      inboxes: 'inboxes/getInboxes',\n      labels: 'labels/getLabels',\n      teams: 'teams/getTeams',\n    }),\n    booleanFilterOptions() {\n      return [\n        {\n          id: true,\n          name: this.$t('FILTER.ATTRIBUTE_LABELS.TRUE'),\n        },\n        {\n          id: false,\n          name: this.$t('FILTER.ATTRIBUTE_LABELS.FALSE'),\n        },\n      ];\n    },\n\n    statusFilterOptions() {\n      const statusFilters = this.$t('CHAT_LIST.CHAT_STATUS_FILTER_ITEMS');\n      return [\n        ...Object.keys(statusFilters).map(status => {\n          return {\n            id: status,\n            name: statusFilters[status].TEXT,\n          };\n        }),\n        {\n          id: 'all',\n          name: this.$t('CHAT_LIST.FILTER_ALL'),\n        },\n      ];\n    },\n  },\n  methods: {\n    getFileName,\n    onEventChange() {\n      this.automation.conditions = getDefaultConditions(\n        this.automation.event_name\n      );\n      this.automation.actions = getDefaultActions();\n    },\n    getAttributes(key) {\n      return this.automationTypes[key].conditions;\n    },\n    getInputType(key) {\n      const customAttribute = isACustomAttribute(this.allCustomAttributes, key);\n      if (customAttribute) {\n        return getCustomAttributeInputType(\n          customAttribute.attribute_display_type\n        );\n      }\n      const type = this.getAutomationType(key);\n      return type.inputType;\n    },\n    getOperators(key) {\n      if (this.mode === 'edit') {\n        const customAttribute = isACustomAttribute(\n          this.allCustomAttributes,\n          key\n        );\n        if (customAttribute) {\n          return getOperatorTypes(customAttribute.attribute_display_type);\n        }\n      }\n      const type = this.getAutomationType(key);\n      return type.filterOperators;\n    },\n    getAutomationType(key) {\n      return this.automationTypes[this.automation.event_name].conditions.find(\n        condition => condition.key === key\n      );\n    },\n    getCustomAttributeType(key) {\n      const type = this.automationTypes[\n        this.automation.event_name\n      ].conditions.find(i => i.key === key).customAttributeType;\n      return type;\n    },\n    getConditionDropdownValues(type) {\n      const {\n        agents,\n        allCustomAttributes: customAttributes,\n        booleanFilterOptions,\n        campaigns,\n        contacts,\n        inboxes,\n        statusFilterOptions,\n        teams,\n      } = this;\n      return getConditionOptions({\n        agents,\n        booleanFilterOptions,\n        campaigns,\n        contacts,\n        customAttributes,\n        inboxes,\n        statusFilterOptions,\n        teams,\n        languages,\n        countries,\n        type,\n      });\n    },\n    appendNewCondition() {\n      this.automation.conditions.push(\n        ...getDefaultConditions(this.automation.event_name)\n      );\n    },\n    appendNewAction() {\n      this.automation.actions.push(...getDefaultActions());\n    },\n    removeFilter(index) {\n      if (this.automation.conditions.length <= 1) {\n        this.showAlert(this.$t('AUTOMATION.CONDITION.DELETE_MESSAGE'));\n      } else {\n        this.automation.conditions.splice(index, 1);\n      }\n    },\n    removeAction(index) {\n      if (this.automation.actions.length <= 1) {\n        this.showAlert(this.$t('AUTOMATION.ACTION.DELETE_MESSAGE'));\n      } else {\n        this.automation.actions.splice(index, 1);\n      }\n    },\n    submitAutomation() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      const automation = generateAutomationPayload(this.automation);\n      this.$emit('saveAutomation', automation, this.mode);\n    },\n    resetFilter(index, currentCondition) {\n      this.automation.conditions[index].filter_operator = this.automationTypes[\n        this.automation.event_name\n      ].conditions.find(\n        condition => condition.key === currentCondition.attribute_key\n      ).filterOperators[0].value;\n      this.automation.conditions[index].values = '';\n    },\n    showUserInput(type) {\n      return !(type === 'is_present' || type === 'is_not_present');\n    },\n    showActionInput(action) {\n      if (action === 'send_email_to_team' || action === 'send_message')\n        return false;\n      const type = this.automationActionTypes.find(i => i.key === action)\n        .inputType;\n      return !!type;\n    },\n    resetAction(index) {\n      this.automation.actions[index].action_params = [];\n    },\n    manifestConditions(automation) {\n      const customAttributes = filterCustomAttributes(this.allCustomAttributes);\n      const conditions = automation.conditions.map(condition => {\n        const customAttr = isCustomAttribute(\n          customAttributes,\n          condition.attribute_key\n        );\n        let inputType = 'plain_text';\n        if (customAttr) {\n          inputType = getCustomAttributeInputType(customAttr.type);\n        } else {\n          inputType = getStandardAttributeInputType(\n            this.automationTypes,\n            automation.event_name,\n            condition.attribute_key\n          );\n        }\n        if (inputType === 'plain_text' || inputType === 'date') {\n          return {\n            ...condition,\n            values: condition.values[0],\n          };\n        }\n        return {\n          ...condition,\n          query_operator: condition.query_operator || 'and',\n          values: [\n            ...this.getConditionDropdownValues(condition.attribute_key),\n          ].filter(item => [...condition.values].includes(item.id)),\n        };\n      });\n      return conditions;\n    },\n    generateActionsArray(action) {\n      const params = action.action_params;\n      let actionParams = [];\n      const inputType = this.automationActionTypes.find(\n        item => item.key === action.action_name\n      ).inputType;\n      if (inputType === 'multi_select' || inputType === 'search_select') {\n        actionParams = [\n          ...this.getActionDropdownValues(action.action_name),\n        ].filter(item => [...params].includes(item.id));\n      } else if (inputType === 'team_message') {\n        actionParams = {\n          team_ids: [\n            ...this.getActionDropdownValues(action.action_name),\n          ].filter(item => [...params[0].team_ids].includes(item.id)),\n          message: params[0].message,\n        };\n      } else actionParams = [...params];\n      return actionParams;\n    },\n    manifestActions(automation) {\n      let actionParams = [];\n      const actions = automation.actions.map(action => {\n        if (action.action_params.length) {\n          actionParams = this.generateActionsArray(action);\n        }\n        return {\n          ...action,\n          action_params: actionParams,\n        };\n      });\n      return actions;\n    },\n    formatAutomation(automation) {\n      this.automation = {\n        ...automation,\n        conditions: this.manifestConditions(automation),\n        actions: this.manifestActions(automation),\n      };\n    },\n    getActionDropdownValues(type) {\n      const { labels, teams } = this;\n      return getActionOptions({ labels, teams, type });\n    },\n    manifestCustomAttributes() {\n      const conversationCustomAttributesRaw = this.$store.getters[\n        'attributes/getAttributesByModel'\n      ]('conversation_attribute');\n\n      const contactCustomAttributesRaw = this.$store.getters[\n        'attributes/getAttributesByModel'\n      ]('contact_attribute');\n      const conversationCustomAttributeTypes = generateCustomAttributeTypes(\n        conversationCustomAttributesRaw,\n        'conversation_attribute'\n      );\n      const contactCustomAttributeTypes = generateCustomAttributeTypes(\n        contactCustomAttributesRaw,\n        'contact_attribute'\n      );\n      let manifestedCustomAttributes = generateCustomAttributes(\n        conversationCustomAttributeTypes,\n        contactCustomAttributeTypes,\n        this.$t('AUTOMATION.CONDITION.CONVERSATION_CUSTOM_ATTR_LABEL'),\n        this.$t('AUTOMATION.CONDITION.CONTACT_CUSTOM_ATTR_LABEL')\n      );\n      this.automationTypes.message_created.conditions.push(\n        ...manifestedCustomAttributes\n      );\n      this.automationTypes.conversation_created.conditions.push(\n        ...manifestedCustomAttributes\n      );\n      this.automationTypes.conversation_updated.conditions.push(\n        ...manifestedCustomAttributes\n      );\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}