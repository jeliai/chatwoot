{"ast":null,"code":"'use strict';\n/**\n * Matcher, slightly modified from:\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n */\n\nvar matcher = /^(\\d{4})(?:-?(\\d{2})(?:-?(\\d{2}))?)?(?:([ T])(\\d{2}):?(\\d{2})(?::?(\\d{2})(?:[,\\.](\\d{1,}))?)?(?:(Z)|([+\\-])(\\d{2})(?::?(\\d{2}))?)?)?$/;\n/**\n * Convert an ISO date string to a date. Fallback to native `Date.parse`.\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n *\n * @param {String} iso\n * @return {Date}\n */\n\nexports.parse = function (iso) {\n  var numericKeys = [1, 5, 6, 7, 11, 12];\n  var arr = matcher.exec(iso);\n  var offset = 0; // fallback to native parsing\n\n  if (!arr) {\n    return new Date(iso);\n  }\n  /* eslint-disable no-cond-assign */\n  // remove undefined values\n\n\n  for (var i = 0, val; val = numericKeys[i]; i++) {\n    arr[val] = parseInt(arr[val], 10) || 0;\n  }\n  /* eslint-enable no-cond-assign */\n  // allow undefined days and months\n\n\n  arr[2] = parseInt(arr[2], 10) || 1;\n  arr[3] = parseInt(arr[3], 10) || 1; // month is 0-11\n\n  arr[2]--; // allow abitrary sub-second precision\n\n  arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0; // apply timezone if one exists\n\n  if (arr[4] === ' ') {\n    offset = new Date().getTimezoneOffset();\n  } else if (arr[9] !== 'Z' && arr[10]) {\n    offset = arr[11] * 60 + arr[12];\n\n    if (arr[10] === '+') {\n      offset = 0 - offset;\n    }\n  }\n\n  var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);\n  return new Date(millis);\n};\n/**\n * Checks whether a `string` is an ISO date string. `strict` mode requires that\n * the date string at least have a year, month and date.\n *\n * @param {String} string\n * @param {Boolean} strict\n * @return {Boolean}\n */\n\n\nexports.is = function (string, strict) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  if (strict && /^\\d{4}-\\d{2}-\\d{2}/.test(string) === false) {\n    return false;\n  }\n\n  return matcher.test(string);\n};","map":null,"metadata":{},"sourceType":"module"}