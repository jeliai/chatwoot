{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport TableFooter from 'dashboard/components/widgets/TableFooter';\nimport NotificationTable from './NotificationTable';\nexport default {\n  components: {\n    NotificationTable: NotificationTable,\n    TableFooter: TableFooter\n  },\n  computed: _objectSpread({}, mapGetters({\n    accountId: 'getCurrentAccountId',\n    meta: 'notifications/getMeta',\n    records: 'notifications/getNotifications',\n    uiFlags: 'notifications/getUIFlags'\n  })),\n  mounted: function mounted() {\n    this.$store.dispatch('notifications/get', {\n      page: 1\n    });\n  },\n  methods: {\n    onPageChange: function onPageChange(page) {\n      window.history.pushState({}, null, \"\".concat(this.$route.path, \"?page=\").concat(page));\n      this.$store.dispatch('notifications/get', {\n        page: page\n      });\n    },\n    openConversation: function openConversation(notification) {\n      var primaryActorId = notification.primary_actor_id,\n          primaryActorType = notification.primary_actor_type,\n          conversationId = notification.primary_actor.id;\n      this.$store.dispatch('notifications/read', {\n        primaryActorId: primaryActorId,\n        primaryActorType: primaryActorType,\n        unreadCount: this.meta.unreadCount\n      });\n      this.$router.push(\"/app/accounts/\".concat(this.accountId, \"/conversations/\").concat(conversationId));\n    },\n    onMarkAllDoneClick: function onMarkAllDoneClick() {\n      this.$store.dispatch('notifications/readAll');\n    }\n  }\n};","map":{"version":3,"sources":["NotificationsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,WAAA,MAAA,0CAAA;AAEA,OAAA,iBAAA,MAAA,qBAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,iBAAA,EAAA,iBADA;AAEA,IAAA,WAAA,EAAA;AAFA,GADA;AAKA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,SAAA,EAAA,qBADA;AAEA,IAAA,IAAA,EAAA,uBAFA;AAGA,IAAA,OAAA,EAAA,gCAHA;AAIA,IAAA,OAAA,EAAA;AAJA,GAAA,CADA,CALA;AAaA,EAAA,OAbA,qBAaA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AACA,GAfA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,IADA,EACA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,IAAA,YAAA,KAAA,MAAA,CAAA,IAAA,mBAAA,IAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AACA,KAJA;AAKA,IAAA,gBALA,4BAKA,YALA,EAKA;AACA,UACA,cADA,GAIA,YAJA,CACA,gBADA;AAAA,UAEA,gBAFA,GAIA,YAJA,CAEA,kBAFA;AAAA,UAGA,cAHA,GAIA,YAJA,CAGA,aAHA,CAGA,EAHA;AAMA,WAAA,MAAA,CAAA,QAAA,CAAA,oBAAA,EAAA;AACA,QAAA,cAAA,EAAA,cADA;AAEA,QAAA,gBAAA,EAAA,gBAFA;AAGA,QAAA,WAAA,EAAA,KAAA,IAAA,CAAA;AAHA,OAAA;AAMA,WAAA,OAAA,CAAA,IAAA,yBACA,KAAA,SADA,4BACA,cADA;AAGA,KArBA;AAsBA,IAAA,kBAtBA,gCAsBA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,uBAAA;AACA;AAxBA;AAhBA,CAAA","sourcesContent":["<template>\n  <div class=\"columns notification--page\">\n    <div class=\"notification--content medium-12\">\n      <notification-table\n        :notifications=\"records\"\n        :is-loading=\"uiFlags.isFetching\"\n        :is-updating=\"uiFlags.isUpdating\"\n        :on-click-notification=\"openConversation\"\n        :on-mark-all-done-click=\"onMarkAllDoneClick\"\n      />\n      <table-footer\n        :current-page=\"Number(meta.currentPage)\"\n        :total-count=\"meta.count\"\n        @page-change=\"onPageChange\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport TableFooter from 'dashboard/components/widgets/TableFooter';\n\nimport NotificationTable from './NotificationTable';\nexport default {\n  components: {\n    NotificationTable,\n    TableFooter,\n  },\n  computed: {\n    ...mapGetters({\n      accountId: 'getCurrentAccountId',\n      meta: 'notifications/getMeta',\n      records: 'notifications/getNotifications',\n      uiFlags: 'notifications/getUIFlags',\n    }),\n  },\n  mounted() {\n    this.$store.dispatch('notifications/get', { page: 1 });\n  },\n  methods: {\n    onPageChange(page) {\n      window.history.pushState({}, null, `${this.$route.path}?page=${page}`);\n      this.$store.dispatch('notifications/get', { page });\n    },\n    openConversation(notification) {\n      const {\n        primary_actor_id: primaryActorId,\n        primary_actor_type: primaryActorType,\n        primary_actor: { id: conversationId },\n      } = notification;\n\n      this.$store.dispatch('notifications/read', {\n        primaryActorId,\n        primaryActorType,\n        unreadCount: this.meta.unreadCount,\n      });\n\n      this.$router.push(\n        `/app/accounts/${this.accountId}/conversations/${conversationId}`\n      );\n    },\n    onMarkAllDoneClick() {\n      this.$store.dispatch('notifications/readAll');\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.notification--page {\n  background: var(--white);\n  overflow-y: auto;\n  width: 100%;\n}\n\n.notification--content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/notifications/components"},"metadata":{},"sourceType":"module"}