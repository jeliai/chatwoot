{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport Spinner from 'shared/components/Spinner.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from '../../../../mixins/time';\nexport default {\n  components: {\n    Thumbnail: Thumbnail,\n    Spinner: Spinner,\n    EmptyState: EmptyState\n  },\n  mixins: [timeMixin],\n  props: {\n    notifications: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    isLoading: {\n      type: Boolean,\n      default: true\n    },\n    onClickNotification: {\n      type: Function,\n      default: function _default() {}\n    },\n    inLastPage: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    notificationMetadata: 'notifications/getMeta'\n  })), {}, {\n    showEmptyResult: function showEmptyResult() {\n      return !this.isLoading && this.notifications.length === 0;\n    }\n  }),\n  methods: {\n    openNotificationPage: function openNotificationPage() {\n      if (this.$route.name !== 'notifications_index') {\n        this.$router.push({\n          name: 'notifications_index'\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["NotificationPanelList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,SAAA,UAAA,QAAA,MAAA;AAEA,OAAA,SAAA,MAAA,4CAAA;AACA,OAAA,OAAA,MAAA,+BAAA;AACA,OAAA,UAAA,MAAA,6CAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,UAAA,EAAA;AAHA,GADA;AAMA,EAAA,MAAA,EAAA,CAAA,SAAA,CANA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,mBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KATA;AAaA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAbA,GAPA;AAyBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,oBAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,eAJA,6BAIA;AACA,aAAA,CAAA,KAAA,SAAA,IAAA,KAAA,aAAA,CAAA,MAAA,KAAA,CAAA;AACA;AANA,IAzBA;AAiCA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AACA,UAAA,KAAA,MAAA,CAAA,IAAA,KAAA,qBAAA,EAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,EAAA;AADA,SAAA;AAGA;AACA;AAPA;AAjCA,CAAA","sourcesContent":["<template>\n  <div class=\"notification-list-item--wrap h-full flex-view \">\n    <woot-button\n      v-for=\"notificationItem in notifications\"\n      v-show=\"!isLoading\"\n      :key=\"notificationItem.id\"\n      size=\"expanded\"\n      color-scheme=\"secondary\"\n      variant=\"link\"\n      @click=\"() => onClickNotification(notificationItem)\"\n    >\n      <div class=\"notification-list--wrap flex-view w-full\">\n        <div\n          v-if=\"!notificationItem.read_at\"\n          class=\"notification-unread--indicator\"\n        />\n        <div v-else class=\"empty flex-view\" />\n        <div class=\"notification-content--wrap w-full flex-space-between\">\n          <div class=\"flex-space-between\">\n            <div class=\"title-wrap flex-view \">\n              <span class=\"notification-title\">\n                {{\n                  `#${\n                    notificationItem.primary_actor\n                      ? notificationItem.primary_actor.id\n                      : $t(`NOTIFICATIONS_PAGE.DELETE_TITLE`)\n                  }`\n                }}\n              </span>\n              <span class=\"notification-type\">\n                {{\n                  $t(\n                    `NOTIFICATIONS_PAGE.TYPE_LABEL.${notificationItem.notification_type}`\n                  )\n                }}\n              </span>\n            </div>\n            <div>\n              <thumbnail\n                v-if=\"notificationItem.primary_actor.meta.assignee\"\n                :src=\"notificationItem.primary_actor.meta.assignee.thumbnail\"\n                size=\"16px\"\n                :username=\"notificationItem.primary_actor.meta.assignee.name\"\n              />\n            </div>\n          </div>\n          <div class=\"w-full flex-view \">\n            <span class=\"notification-message text-truncate\">\n              {{ notificationItem.push_message_title }}\n            </span>\n          </div>\n          <span class=\"timestamp flex-view\">\n            {{ dynamicTime(notificationItem.created_at) }}\n          </span>\n        </div>\n      </div>\n    </woot-button>\n    <empty-state\n      v-if=\"showEmptyResult\"\n      :title=\"$t('NOTIFICATIONS_PAGE.UNREAD_NOTIFICATION.EMPTY_MESSAGE')\"\n    />\n    <woot-button\n      v-if=\"!isLoading && inLastPage\"\n      size=\"medium\"\n      variant=\"clear\"\n      color-scheme=\"primary\"\n      class-names=\"action-button\"\n      @click=\"openNotificationPage\"\n    >\n      {{ $t('NOTIFICATIONS_PAGE.UNREAD_NOTIFICATION.ALL_NOTIFICATIONS') }}\n    </woot-button>\n    <div v-if=\"isLoading\" class=\"notifications-loader flex-view\">\n      <spinner />\n      <span>{{\n        $t('NOTIFICATIONS_PAGE.UNREAD_NOTIFICATION.LOADING_UNREAD_MESSAGE')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nimport Thumbnail from 'dashboard/components/widgets/Thumbnail.vue';\nimport Spinner from 'shared/components/Spinner.vue';\nimport EmptyState from 'dashboard/components/widgets/EmptyState.vue';\nimport timeMixin from '../../../../mixins/time';\n\nexport default {\n  components: {\n    Thumbnail,\n    Spinner,\n    EmptyState,\n  },\n  mixins: [timeMixin],\n  props: {\n    notifications: {\n      type: Array,\n      default: () => [],\n    },\n    isLoading: {\n      type: Boolean,\n      default: true,\n    },\n    onClickNotification: {\n      type: Function,\n      default: () => {},\n    },\n    inLastPage: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      notificationMetadata: 'notifications/getMeta',\n    }),\n    showEmptyResult() {\n      return !this.isLoading && this.notifications.length === 0;\n    },\n  },\n  methods: {\n    openNotificationPage() {\n      if (this.$route.name !== 'notifications_index') {\n        this.$router.push({\n          name: 'notifications_index',\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.flex-view {\n  display: flex;\n}\n\n.flex-space-between {\n  display: flex;\n  justify-content: space-between;\n}\n\n.notification-list-item--wrap {\n  flex-direction: column;\n  padding: var(--space-small) var(--space-slab);\n  overflow: auto;\n}\n\n.empty {\n  width: var(--space-small);\n}\n\n.notification-list--wrap {\n  flex-direction: row;\n  align-items: center;\n  padding: var(--space-slab);\n  line-height: 1.4;\n  border-bottom: 1px solid var(--b-50);\n}\n\n.notification-list--wrap:hover {\n  background: var(--b-100);\n  border-radius: var(--border-radius-normal);\n}\n\n.notification-content--wrap {\n  flex-direction: column;\n  margin-left: var(--space-slab);\n  overflow: hidden;\n}\n\n.title-wrap {\n  align-items: center;\n}\n\n.notification-title {\n  font-weight: var(--font-weight-black);\n}\n\n.notification-type {\n  font-size: var(--font-size-micro);\n  padding: var(--space-micro) var(--space-smaller);\n  margin-left: var(--space-small);\n  background: var(--s-50);\n  border-radius: var(--border-radius-normal);\n}\n\n.notification-message {\n  color: var(--color-body);\n  font-weight: var(--font-weight-normal);\n}\n\n.timestamp {\n  margin-top: var(--space-smaller);\n  color: var(--b-500);\n  font-size: var(--font-size-micro);\n  font-weight: var(--font-weight-bold);\n}\n\n.notification-unread--indicator {\n  width: var(--space-small);\n  height: var(--space-small);\n  border-radius: var(--border-radius-rounded);\n  background: var(--color-woot);\n}\n\n.action-button {\n  margin-top: var(--space-slab);\n}\n\n.notifications-loader {\n  align-items: center;\n  justify-content: center;\n  margin: var(--space-larger) var(--space-small);\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-medium);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/notifications/components"},"metadata":{},"sourceType":"module"}