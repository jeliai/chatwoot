{"ast":null,"code":"import fromUnixTime from 'date-fns/fromUnixTime';\nimport format from 'date-fns/format';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nexport var formatUnixDate = function formatUnixDate(date) {\n  var dateFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MMM dd, yyyy';\n  var unixDate = fromUnixTime(date);\n  return format(unixDate, dateFormat);\n};\nexport var formatDate = function formatDate(_ref) {\n  var date = _ref.date,\n      todayText = _ref.todayText,\n      yesterdayText = _ref.yesterdayText;\n  var dateValue = new Date(date);\n  if (isToday(dateValue)) return todayText;\n  if (isYesterday(dateValue)) return yesterdayText;\n  return date;\n};\nexport var formatDigitToString = function formatDigitToString(val) {\n  return val > 9 ? \"\".concat(val) : \"0\".concat(val);\n};\nexport var isTimeAfter = function isTimeAfter(h1, m1, h2, m2) {\n  if (h1 < h2) {\n    return false;\n  }\n\n  if (h1 === h2) {\n    return m1 >= m2;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/helpers/DateHelper.js"],"names":["fromUnixTime","format","isToday","isYesterday","formatUnixDate","date","dateFormat","unixDate","formatDate","todayText","yesterdayText","dateValue","Date","formatDigitToString","val","isTimeAfter","h1","m1","h2","m2"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,uBAAzB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAuC;AAAA,MAAhCC,UAAgC,uEAAnB,cAAmB;AACnE,MAAMC,QAAQ,GAAGP,YAAY,CAACK,IAAD,CAA7B;AACA,SAAOJ,MAAM,CAACM,QAAD,EAAWD,UAAX,CAAb;AACD,CAHM;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,OAAwC;AAAA,MAArCH,IAAqC,QAArCA,IAAqC;AAAA,MAA/BI,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AAChE,MAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASP,IAAT,CAAlB;AACA,MAAIH,OAAO,CAACS,SAAD,CAAX,EAAwB,OAAOF,SAAP;AACxB,MAAIN,WAAW,CAACQ,SAAD,CAAf,EAA4B,OAAOD,aAAP;AAC5B,SAAOL,IAAP;AACD,CALM;AAOP,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,GAAG,EAAI;AACxC,SAAOA,GAAG,GAAG,CAAN,aAAaA,GAAb,eAAyBA,GAAzB,CAAP;AACD,CAFM;AAIP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAoB;AAC7C,MAAIH,EAAE,GAAGE,EAAT,EAAa;AACX,WAAO,KAAP;AACD;;AAED,MAAIF,EAAE,KAAKE,EAAX,EAAe;AACb,WAAOD,EAAE,IAAIE,EAAb;AACD;;AAED,SAAO,IAAP;AACD,CAVM","sourcesContent":["import fromUnixTime from 'date-fns/fromUnixTime';\nimport format from 'date-fns/format';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n\nexport const formatUnixDate = (date, dateFormat = 'MMM dd, yyyy') => {\n  const unixDate = fromUnixTime(date);\n  return format(unixDate, dateFormat);\n};\n\nexport const formatDate = ({ date, todayText, yesterdayText }) => {\n  const dateValue = new Date(date);\n  if (isToday(dateValue)) return todayText;\n  if (isYesterday(dateValue)) return yesterdayText;\n  return date;\n};\n\nexport const formatDigitToString = val => {\n  return val > 9 ? `${val}` : `0${val}`;\n};\n\nexport const isTimeAfter = (h1, m1, h2, m2) => {\n  if (h1 < h2) {\n    return false;\n  }\n\n  if (h1 === h2) {\n    return m1 >= m2;\n  }\n\n  return true;\n};\n"]},"metadata":{},"sourceType":"module"}