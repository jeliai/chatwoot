{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport MessageAPI from '../../api/message';\nvar state = {\n  uiFlags: {\n    isUpdating: false\n  }\n};\nexport var getters = {\n  getUIFlags: function getUIFlags($state) {\n    return $state.uiFlags;\n  }\n};\nexport var actions = {\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n      var commit, dispatch, email, messageId, submittedValues;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit, dispatch = _ref.dispatch;\n              email = _ref2.email, messageId = _ref2.messageId, submittedValues = _ref2.submittedValues;\n              commit('toggleUpdateStatus', true);\n              _context.prev = 3;\n              _context.next = 6;\n              return MessageAPI.update({\n                email: email,\n                messageId: messageId,\n                values: submittedValues\n              });\n\n            case 6:\n              commit('conversation/updateMessage', {\n                id: messageId,\n                content_attributes: {\n                  submitted_email: email,\n                  submitted_values: email ? null : submittedValues\n                }\n              }, {\n                root: true\n              });\n              dispatch('contacts/get', {}, {\n                root: true\n              });\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n\n            case 12:\n              commit('toggleUpdateStatus', false);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 10]]);\n    }));\n\n    function update(_x, _x2) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }()\n};\nexport var mutations = {\n  toggleUpdateStatus: function toggleUpdateStatus($state, status) {\n    $state.uiFlags.isUpdating = status;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/message.js"],"names":["MessageAPI","state","uiFlags","isUpdating","getters","getUIFlags","$state","actions","update","commit","dispatch","email","messageId","submittedValues","values","id","content_attributes","submitted_email","submitted_values","root","mutations","toggleUpdateStatus","status","namespaced"],"mappings":";;;;;;;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL;AADG,CAAd;AAMA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,UAAU,EAAE,oBAAAC,MAAM;AAAA,WAAIA,MAAM,CAACJ,OAAX;AAAA;AADG,CAAhB;AAIP,OAAO,IAAMK,OAAO,GAAG;AACrBC,EAAAA,MAAM;AAAA,0EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,cAAAA,MADI,QACJA,MADI,EACIC,QADJ,QACIA,QADJ;AAEJC,cAAAA,KAFI,SAEJA,KAFI,EAEGC,SAFH,SAEGA,SAFH,EAEcC,eAFd,SAEcA,eAFd;AAINJ,cAAAA,MAAM,CAAC,oBAAD,EAAuB,IAAvB,CAAN;AAJM;AAAA;AAAA,qBAMET,UAAU,CAACQ,MAAX,CAAkB;AACtBG,gBAAAA,KAAK,EAALA,KADsB;AAEtBC,gBAAAA,SAAS,EAATA,SAFsB;AAGtBE,gBAAAA,MAAM,EAAED;AAHc,eAAlB,CANF;;AAAA;AAWJJ,cAAAA,MAAM,CACJ,4BADI,EAEJ;AACEM,gBAAAA,EAAE,EAAEH,SADN;AAEEI,gBAAAA,kBAAkB,EAAE;AAClBC,kBAAAA,eAAe,EAAEN,KADC;AAElBO,kBAAAA,gBAAgB,EAAEP,KAAK,GAAG,IAAH,GAAUE;AAFf;AAFtB,eAFI,EASJ;AAAEM,gBAAAA,IAAI,EAAE;AAAR,eATI,CAAN;AAWAT,cAAAA,QAAQ,CAAC,cAAD,EAAiB,EAAjB,EAAqB;AAAES,gBAAAA,IAAI,EAAE;AAAR,eAArB,CAAR;AAtBI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA0BNV,cAAAA,MAAM,CAAC,oBAAD,EAAuB,KAAvB,CAAN;;AA1BM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADe,CAAhB;AA+BP,OAAO,IAAMW,SAAS,GAAG;AACvBC,EAAAA,kBADuB,8BACJf,MADI,EACIgB,MADJ,EACY;AACjChB,IAAAA,MAAM,CAACJ,OAAP,CAAeC,UAAf,GAA4BmB,MAA5B;AACD;AAHsB,CAAlB;AAMP,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbtB,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbG,EAAAA,OAAO,EAAPA,OAJa;AAKba,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import MessageAPI from '../../api/message';\n\nconst state = {\n  uiFlags: {\n    isUpdating: false,\n  },\n};\n\nexport const getters = {\n  getUIFlags: $state => $state.uiFlags,\n};\n\nexport const actions = {\n  update: async (\n    { commit, dispatch },\n    { email, messageId, submittedValues }\n  ) => {\n    commit('toggleUpdateStatus', true);\n    try {\n      await MessageAPI.update({\n        email,\n        messageId,\n        values: submittedValues,\n      });\n      commit(\n        'conversation/updateMessage',\n        {\n          id: messageId,\n          content_attributes: {\n            submitted_email: email,\n            submitted_values: email ? null : submittedValues,\n          },\n        },\n        { root: true }\n      );\n      dispatch('contacts/get', {}, { root: true });\n    } catch (error) {\n      // Ignore error\n    }\n    commit('toggleUpdateStatus', false);\n  },\n};\n\nexport const mutations = {\n  toggleUpdateStatus($state, status) {\n    $state.uiFlags.isUpdating = status;\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}