{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport timeMixin from '../../../mixins/time';\nimport BubbleMailHead from './bubble/MailHead';\nimport BubbleText from './bubble/Text';\nimport BubbleImage from './bubble/Image';\nimport BubbleFile from './bubble/File';\nimport BubbleVideo from './bubble/Video.vue';\nimport BubbleActions from './bubble/Actions';\nimport BubbleLocation from './bubble/Location';\nimport Spinner from 'shared/components/Spinner';\nimport ContextMenu from 'dashboard/modules/conversations/components/MessageContextMenu';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport contentTypeMixin from 'shared/mixins/contentTypeMixin';\nimport { MESSAGE_TYPE, MESSAGE_STATUS } from 'shared/constants/messages';\nimport { generateBotMessageContent } from './helpers/botMessageContentHelper';\nexport default {\n  components: {\n    BubbleActions: BubbleActions,\n    BubbleText: BubbleText,\n    BubbleImage: BubbleImage,\n    BubbleFile: BubbleFile,\n    BubbleVideo: BubbleVideo,\n    BubbleMailHead: BubbleMailHead,\n    BubbleLocation: BubbleLocation,\n    ContextMenu: ContextMenu,\n    Spinner: Spinner\n  },\n  mixins: [alertMixin, timeMixin, messageFormatterMixin, contentTypeMixin],\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    isATweet: {\n      type: Boolean,\n      default: false\n    },\n    isAWhatsAppChannel: {\n      type: Boolean,\n      default: false\n    },\n    hasInstagramStory: {\n      type: Boolean,\n      default: false\n    },\n    hasUserReadMessage: {\n      type: Boolean,\n      default: false\n    },\n    isWebWidgetInbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      showContextMenu: false,\n      hasImageError: false\n    };\n  },\n  computed: {\n    emailMessageContent: function emailMessageContent() {\n      var _ref = this.contentAttributes.email || {},\n          _ref$html_content = _ref.html_content;\n\n      _ref$html_content = _ref$html_content === void 0 ? {} : _ref$html_content;\n      var fullHTMLContent = _ref$html_content.full,\n          _ref$text_content = _ref.text_content;\n      _ref$text_content = _ref$text_content === void 0 ? {} : _ref$text_content;\n      var fullTextContent = _ref$text_content.full;\n      return fullHTMLContent || fullTextContent || '';\n    },\n    displayQuotedButton: function displayQuotedButton() {\n      if (!this.isIncoming) {\n        return false;\n      }\n\n      if (this.emailMessageContent.includes('<blockquote')) {\n        return true;\n      }\n\n      return false;\n    },\n    message: function message() {\n      if (this.contentType === 'input_csat') {\n        return this.$t('CONVERSATION.CSAT_REPLY_MESSAGE');\n      } // If the message is an email, emailMessageContent would be present\n      // In that case, we would use letter package to render the email\n\n\n      if (this.emailMessageContent && this.isIncoming) {\n        return this.emailMessageContent;\n      }\n\n      var botMessageContent = generateBotMessageContent(this.contentType, this.contentAttributes, {\n        noResponseText: this.$t('CONVERSATION.NO_RESPONSE'),\n        csat: {\n          ratingTitle: this.$t('CONVERSATION.RATING_TITLE'),\n          feedbackTitle: this.$t('CONVERSATION.FEEDBACK_TITLE')\n        }\n      });\n      return this.formatMessage(this.data.content, this.isATweet, this.data.private) + botMessageContent;\n    },\n    contentAttributes: function contentAttributes() {\n      return this.data.content_attributes || {};\n    },\n    sender: function sender() {\n      return this.data.sender || {};\n    },\n    status: function status() {\n      return this.data.status;\n    },\n    storySender: function storySender() {\n      return this.contentAttributes.story_sender || null;\n    },\n    storyId: function storyId() {\n      return this.contentAttributes.story_id || null;\n    },\n    contentType: function contentType() {\n      var contentType = this.data.content_type;\n      return contentType;\n    },\n    twitterProfileLink: function twitterProfileLink() {\n      var additionalAttributes = this.sender.additional_attributes || {};\n      var screenName = additionalAttributes.screen_name;\n      return \"https://twitter.com/\".concat(screenName);\n    },\n    alignBubble: function alignBubble() {\n      var messageType = this.data.message_type;\n      var isCentered = messageType === MESSAGE_TYPE.ACTIVITY;\n      var isLeftAligned = messageType === MESSAGE_TYPE.INCOMING;\n      var isRightAligned = messageType === MESSAGE_TYPE.OUTGOING || messageType === MESSAGE_TYPE.TEMPLATE;\n      return {\n        center: isCentered,\n        left: isLeftAligned,\n        right: isRightAligned,\n        'has-context-menu': this.showContextMenu,\n        'has-tweet-menu': this.isATweet\n      };\n    },\n    readableTime: function readableTime() {\n      return this.messageStamp(this.contentAttributes.external_created_at || this.data.created_at, 'LLL d, h:mm a');\n    },\n    isBubble: function isBubble() {\n      return [0, 1, 3].includes(this.data.message_type);\n    },\n    isIncoming: function isIncoming() {\n      return this.data.message_type === MESSAGE_TYPE.INCOMING;\n    },\n    isOutgoing: function isOutgoing() {\n      return this.data.message_type === MESSAGE_TYPE.OUTGOING;\n    },\n    showReadTicks: function showReadTicks() {\n      return (this.isOutgoing || this.isTemplate) && this.hasUserReadMessage && this.isWebWidgetInbox && !this.data.private;\n    },\n    isTemplate: function isTemplate() {\n      return this.data.message_type === MESSAGE_TYPE.TEMPLATE;\n    },\n    emailHeadAttributes: function emailHeadAttributes() {\n      return {\n        email: this.contentAttributes.email,\n        cc: this.contentAttributes.cc_emails,\n        bcc: this.contentAttributes.bcc_emails\n      };\n    },\n    hasAttachments: function hasAttachments() {\n      return !!(this.data.attachments && this.data.attachments.length > 0);\n    },\n    isMessageDeleted: function isMessageDeleted() {\n      return this.contentAttributes.deleted;\n    },\n    hasText: function hasText() {\n      return !!this.data.content;\n    },\n    tooltipForSender: function tooltipForSender() {\n      var name = this.senderNameForAvatar;\n      var messageType = this.data.message_type;\n      var showTooltip = messageType === MESSAGE_TYPE.OUTGOING || messageType === MESSAGE_TYPE.TEMPLATE;\n      return showTooltip ? {\n        content: \"\".concat(this.$t('CONVERSATION.SENT_BY'), \" \").concat(name)\n      } : false;\n    },\n    messageToolTip: function messageToolTip() {\n      if (this.isMessageDeleted) {\n        return false;\n      }\n\n      if (this.isFailed) {\n        return this.$t(\"CONVERSATION.SEND_FAILED\");\n      }\n\n      return false;\n    },\n    wrapClass: function wrapClass() {\n      return {\n        wrap: this.isBubble,\n        'activity-wrap': !this.isBubble,\n        'is-pending': this.isPending,\n        'is-failed': this.isFailed,\n        'is-email': this.isEmailContentType\n      };\n    },\n    bubbleClass: function bubbleClass() {\n      return {\n        bubble: this.isBubble,\n        'is-private': this.data.private,\n        'is-image': this.hasMediaAttachment('image'),\n        'is-video': this.hasMediaAttachment('video'),\n        'is-text': this.hasText,\n        'is-from-bot': this.isSentByBot,\n        'is-failed': this.isFailed,\n        'is-email': this.isEmailContentType\n      };\n    },\n    isPending: function isPending() {\n      return this.data.status === MESSAGE_STATUS.PROGRESS;\n    },\n    isFailed: function isFailed() {\n      return this.data.status === MESSAGE_STATUS.FAILED;\n    },\n    isSentByBot: function isSentByBot() {\n      if (this.isPending || this.isFailed) return false;\n      return !this.sender.type || this.sender.type === 'agent_bot';\n    },\n    contextMenuPosition: function contextMenuPosition() {\n      var messageType = this.data.message_type;\n      return messageType ? 'right' : 'left';\n    },\n    shouldShowContextMenu: function shouldShowContextMenu() {\n      return !(this.isFailed || this.isPending);\n    },\n    errorMessage: function errorMessage() {\n      var meta = this.data.meta;\n      return meta ? meta.error : '';\n    },\n    showAvatar: function showAvatar() {\n      if (this.isOutgoing || this.isTemplate) {\n        return true;\n      }\n\n      return this.isATweet && this.isIncoming && this.sender;\n    },\n    senderNameForAvatar: function senderNameForAvatar() {\n      if (this.isOutgoing || this.isTemplate) {\n        var _ref2 = this.sender || {},\n            _ref2$name = _ref2.name,\n            name = _ref2$name === void 0 ? this.$t('CONVERSATION.BOT') : _ref2$name;\n\n        return name;\n      }\n\n      return '';\n    }\n  },\n  watch: {\n    data: function data() {\n      this.hasImageError = false;\n    }\n  },\n  mounted: function mounted() {\n    this.hasImageError = false;\n  },\n  methods: {\n    hasMediaAttachment: function hasMediaAttachment(type) {\n      if (this.hasAttachments && this.data.attachments.length > 0) {\n        var _this$data$attachment = this.data.attachments,\n            attachments = _this$data$attachment === void 0 ? [{}] : _this$data$attachment;\n        var fileType = attachments[0].file_type;\n        return fileType === type && !this.hasImageError;\n      }\n\n      return false;\n    },\n    handleContextMenuClick: function handleContextMenuClick() {\n      this.showContextMenu = !this.showContextMenu;\n    },\n    handleDelete: function handleDelete() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$data, conversationId, messageId;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$data = _this.data, conversationId = _this$data.conversation_id, messageId = _this$data.id;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.$store.dispatch('deleteMessage', {\n                  conversationId: conversationId,\n                  messageId: messageId\n                });\n\n              case 4:\n                _this.showAlert(_this.$t('CONVERSATION.SUCCESS_DELETE_MESSAGE'));\n\n                _this.showContextMenu = false;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n\n                _this.showAlert(_this.$t('CONVERSATION.FAIL_DELETE_MESSSAGE'));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }))();\n    },\n    retrySendMessage: function retrySendMessage() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.$store.dispatch('sendMessageWithData', _this2.data);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    onImageLoadError: function onImageLoadError() {\n      this.hasImageError = true;\n    }\n  }\n};","map":{"version":3,"sources":["Message.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <li\n    v-if=\"hasAttachments || data.content || isEmailContentType\"\n    :class=\"alignBubble\"\n  >\n    <div :class=\"wrapClass\">\n      <div v-tooltip.top-start=\"messageToolTip\" :class=\"bubbleClass\">\n        <bubble-mail-head\n          :email-attributes=\"contentAttributes.email\"\n          :cc=\"emailHeadAttributes.cc\"\n          :bcc=\"emailHeadAttributes.bcc\"\n          :is-incoming=\"isIncoming\"\n        />\n        <bubble-text\n          v-if=\"data.content\"\n          :message=\"message\"\n          :is-email=\"isEmailContentType\"\n          :readable-time=\"readableTime\"\n          :display-quoted-button=\"displayQuotedButton\"\n        />\n        <span\n          v-if=\"isPending && hasAttachments\"\n          class=\"chat-bubble has-attachment agent\"\n        >\n          {{ $t('CONVERSATION.UPLOADING_ATTACHMENTS') }}\n        </span>\n        <div v-if=\"!isPending && hasAttachments\">\n          <div v-for=\"attachment in data.attachments\" :key=\"attachment.id\">\n            <bubble-image\n              v-if=\"attachment.file_type === 'image' && !hasImageError\"\n              :url=\"attachment.data_url\"\n              :readable-time=\"readableTime\"\n              @error=\"onImageLoadError\"\n            />\n            <audio v-else-if=\"attachment.file_type === 'audio'\" controls>\n              <source :src=\"attachment.data_url\" />\n            </audio>\n            <bubble-video\n              v-else-if=\"attachment.file_type === 'video'\"\n              :url=\"attachment.data_url\"\n              :readable-time=\"readableTime\"\n            />\n            <bubble-location\n              v-else-if=\"attachment.file_type === 'location'\"\n              :latitude=\"attachment.coordinates_lat\"\n              :longitude=\"attachment.coordinates_long\"\n              :name=\"attachment.fallback_title\"\n            />\n            <bubble-file\n              v-else\n              :url=\"attachment.data_url\"\n              :readable-time=\"readableTime\"\n            />\n          </div>\n        </div>\n        <bubble-actions\n          :id=\"data.id\"\n          :sender=\"data.sender\"\n          :story-sender=\"storySender\"\n          :story-id=\"storyId\"\n          :is-a-tweet=\"isATweet\"\n          :is-a-whatsapp-channel=\"isAWhatsAppChannel\"\n          :has-instagram-story=\"hasInstagramStory\"\n          :is-email=\"isEmailContentType\"\n          :is-private=\"data.private\"\n          :message-type=\"data.message_type\"\n          :message-status=\"status\"\n          :readable-time=\"readableTime\"\n          :source-id=\"data.source_id\"\n          :inbox-id=\"data.inbox_id\"\n          :message-read=\"showReadTicks\"\n        />\n      </div>\n      <spinner v-if=\"isPending\" size=\"tiny\" />\n      <div\n        v-if=\"showAvatar\"\n        v-tooltip.left=\"tooltipForSender\"\n        class=\"sender--info\"\n      >\n        <woot-thumbnail\n          :src=\"sender.thumbnail\"\n          :username=\"senderNameForAvatar\"\n          size=\"16px\"\n        />\n        <a\n          v-if=\"isATweet && isIncoming\"\n          class=\"sender--available-name\"\n          :href=\"twitterProfileLink\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer nofollow\"\n        >\n          {{ sender.name }}\n        </a>\n      </div>\n      <div v-if=\"isFailed\" class=\"message-failed--alert\">\n        <woot-button\n          v-tooltip.top-end=\"$t('CONVERSATION.TRY_AGAIN')\"\n          size=\"tiny\"\n          color-scheme=\"alert\"\n          variant=\"clear\"\n          icon=\"arrow-clockwise\"\n          @click=\"retrySendMessage\"\n        />\n      </div>\n    </div>\n    <div v-if=\"shouldShowContextMenu\" class=\"context-menu-wrap\">\n      <context-menu\n        v-if=\"isBubble && !isMessageDeleted\"\n        :is-open=\"showContextMenu\"\n        :show-copy=\"hasText\"\n        :show-canned-response-option=\"isOutgoing\"\n        :menu-position=\"contextMenuPosition\"\n        :message-content=\"data.content\"\n        @toggle=\"handleContextMenuClick\"\n        @delete=\"handleDelete\"\n      />\n    </div>\n  </li>\n</template>\n<script>\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport timeMixin from '../../../mixins/time';\n\nimport BubbleMailHead from './bubble/MailHead';\nimport BubbleText from './bubble/Text';\nimport BubbleImage from './bubble/Image';\nimport BubbleFile from './bubble/File';\nimport BubbleVideo from './bubble/Video.vue';\nimport BubbleActions from './bubble/Actions';\nimport BubbleLocation from './bubble/Location';\n\nimport Spinner from 'shared/components/Spinner';\nimport ContextMenu from 'dashboard/modules/conversations/components/MessageContextMenu';\n\nimport alertMixin from 'shared/mixins/alertMixin';\nimport contentTypeMixin from 'shared/mixins/contentTypeMixin';\nimport { MESSAGE_TYPE, MESSAGE_STATUS } from 'shared/constants/messages';\nimport { generateBotMessageContent } from './helpers/botMessageContentHelper';\n\nexport default {\n  components: {\n    BubbleActions,\n    BubbleText,\n    BubbleImage,\n    BubbleFile,\n    BubbleVideo,\n    BubbleMailHead,\n    BubbleLocation,\n    ContextMenu,\n    Spinner,\n  },\n  mixins: [alertMixin, timeMixin, messageFormatterMixin, contentTypeMixin],\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n    isATweet: {\n      type: Boolean,\n      default: false,\n    },\n    isAWhatsAppChannel: {\n      type: Boolean,\n      default: false,\n    },\n    hasInstagramStory: {\n      type: Boolean,\n      default: false,\n    },\n    hasUserReadMessage: {\n      type: Boolean,\n      default: false,\n    },\n    isWebWidgetInbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      showContextMenu: false,\n      hasImageError: false,\n    };\n  },\n  computed: {\n    emailMessageContent() {\n      const {\n        html_content: { full: fullHTMLContent } = {},\n        text_content: { full: fullTextContent } = {},\n      } = this.contentAttributes.email || {};\n      return fullHTMLContent || fullTextContent || '';\n    },\n    displayQuotedButton() {\n      if (!this.isIncoming) {\n        return false;\n      }\n\n      if (this.emailMessageContent.includes('<blockquote')) {\n        return true;\n      }\n\n      return false;\n    },\n    message() {\n      if (this.contentType === 'input_csat') {\n        return this.$t('CONVERSATION.CSAT_REPLY_MESSAGE');\n      }\n\n      // If the message is an email, emailMessageContent would be present\n      // In that case, we would use letter package to render the email\n      if (this.emailMessageContent && this.isIncoming) {\n        return this.emailMessageContent;\n      }\n\n      const botMessageContent = generateBotMessageContent(\n        this.contentType,\n        this.contentAttributes,\n        {\n          noResponseText: this.$t('CONVERSATION.NO_RESPONSE'),\n          csat: {\n            ratingTitle: this.$t('CONVERSATION.RATING_TITLE'),\n            feedbackTitle: this.$t('CONVERSATION.FEEDBACK_TITLE'),\n          },\n        }\n      );\n      return (\n        this.formatMessage(\n          this.data.content,\n          this.isATweet,\n          this.data.private\n        ) + botMessageContent\n      );\n    },\n    contentAttributes() {\n      return this.data.content_attributes || {};\n    },\n    sender() {\n      return this.data.sender || {};\n    },\n    status() {\n      return this.data.status;\n    },\n    storySender() {\n      return this.contentAttributes.story_sender || null;\n    },\n    storyId() {\n      return this.contentAttributes.story_id || null;\n    },\n    contentType() {\n      const {\n        data: { content_type: contentType },\n      } = this;\n      return contentType;\n    },\n    twitterProfileLink() {\n      const additionalAttributes = this.sender.additional_attributes || {};\n      const { screen_name: screenName } = additionalAttributes;\n      return `https://twitter.com/${screenName}`;\n    },\n    alignBubble() {\n      const { message_type: messageType } = this.data;\n      const isCentered = messageType === MESSAGE_TYPE.ACTIVITY;\n      const isLeftAligned = messageType === MESSAGE_TYPE.INCOMING;\n      const isRightAligned =\n        messageType === MESSAGE_TYPE.OUTGOING ||\n        messageType === MESSAGE_TYPE.TEMPLATE;\n\n      return {\n        center: isCentered,\n        left: isLeftAligned,\n        right: isRightAligned,\n        'has-context-menu': this.showContextMenu,\n        'has-tweet-menu': this.isATweet,\n      };\n    },\n    readableTime() {\n      return this.messageStamp(\n        this.contentAttributes.external_created_at || this.data.created_at,\n        'LLL d, h:mm a'\n      );\n    },\n    isBubble() {\n      return [0, 1, 3].includes(this.data.message_type);\n    },\n    isIncoming() {\n      return this.data.message_type === MESSAGE_TYPE.INCOMING;\n    },\n    isOutgoing() {\n      return this.data.message_type === MESSAGE_TYPE.OUTGOING;\n    },\n    showReadTicks() {\n      return (\n        (this.isOutgoing || this.isTemplate) &&\n        this.hasUserReadMessage &&\n        this.isWebWidgetInbox &&\n        !this.data.private\n      );\n    },\n    isTemplate() {\n      return this.data.message_type === MESSAGE_TYPE.TEMPLATE;\n    },\n    emailHeadAttributes() {\n      return {\n        email: this.contentAttributes.email,\n        cc: this.contentAttributes.cc_emails,\n        bcc: this.contentAttributes.bcc_emails,\n      };\n    },\n    hasAttachments() {\n      return !!(this.data.attachments && this.data.attachments.length > 0);\n    },\n    isMessageDeleted() {\n      return this.contentAttributes.deleted;\n    },\n    hasText() {\n      return !!this.data.content;\n    },\n    tooltipForSender() {\n      const name = this.senderNameForAvatar;\n      const { message_type: messageType } = this.data;\n      const showTooltip =\n        messageType === MESSAGE_TYPE.OUTGOING ||\n        messageType === MESSAGE_TYPE.TEMPLATE;\n      return showTooltip\n        ? {\n            content: `${this.$t('CONVERSATION.SENT_BY')} ${name}`,\n          }\n        : false;\n    },\n    messageToolTip() {\n      if (this.isMessageDeleted) {\n        return false;\n      }\n      if (this.isFailed) {\n        return this.$t(`CONVERSATION.SEND_FAILED`);\n      }\n      return false;\n    },\n    wrapClass() {\n      return {\n        wrap: this.isBubble,\n        'activity-wrap': !this.isBubble,\n        'is-pending': this.isPending,\n        'is-failed': this.isFailed,\n        'is-email': this.isEmailContentType,\n      };\n    },\n    bubbleClass() {\n      return {\n        bubble: this.isBubble,\n        'is-private': this.data.private,\n        'is-image': this.hasMediaAttachment('image'),\n        'is-video': this.hasMediaAttachment('video'),\n        'is-text': this.hasText,\n        'is-from-bot': this.isSentByBot,\n        'is-failed': this.isFailed,\n        'is-email': this.isEmailContentType,\n      };\n    },\n    isPending() {\n      return this.data.status === MESSAGE_STATUS.PROGRESS;\n    },\n    isFailed() {\n      return this.data.status === MESSAGE_STATUS.FAILED;\n    },\n    isSentByBot() {\n      if (this.isPending || this.isFailed) return false;\n      return !this.sender.type || this.sender.type === 'agent_bot';\n    },\n    contextMenuPosition() {\n      const { message_type: messageType } = this.data;\n      return messageType ? 'right' : 'left';\n    },\n    shouldShowContextMenu() {\n      return !(this.isFailed || this.isPending);\n    },\n    errorMessage() {\n      const { meta } = this.data;\n      return meta ? meta.error : '';\n    },\n    showAvatar() {\n      if (this.isOutgoing || this.isTemplate) {\n        return true;\n      }\n      return this.isATweet && this.isIncoming && this.sender;\n    },\n    senderNameForAvatar() {\n      if (this.isOutgoing || this.isTemplate) {\n        const { name = this.$t('CONVERSATION.BOT') } = this.sender || {};\n        return name;\n      }\n      return '';\n    },\n  },\n  watch: {\n    data() {\n      this.hasImageError = false;\n    },\n  },\n  mounted() {\n    this.hasImageError = false;\n  },\n  methods: {\n    hasMediaAttachment(type) {\n      if (this.hasAttachments && this.data.attachments.length > 0) {\n        const { attachments = [{}] } = this.data;\n        const { file_type: fileType } = attachments[0];\n        return fileType === type && !this.hasImageError;\n      }\n      return false;\n    },\n    handleContextMenuClick() {\n      this.showContextMenu = !this.showContextMenu;\n    },\n    async handleDelete() {\n      const { conversation_id: conversationId, id: messageId } = this.data;\n      try {\n        await this.$store.dispatch('deleteMessage', {\n          conversationId,\n          messageId,\n        });\n        this.showAlert(this.$t('CONVERSATION.SUCCESS_DELETE_MESSAGE'));\n        this.showContextMenu = false;\n      } catch (error) {\n        this.showAlert(this.$t('CONVERSATION.FAIL_DELETE_MESSSAGE'));\n      }\n    },\n    async retrySendMessage() {\n      await this.$store.dispatch('sendMessageWithData', this.data);\n    },\n    onImageLoadError() {\n      this.hasImageError = true;\n    },\n  },\n};\n</script>\n<style lang=\"scss\">\n.wrap {\n  > .bubble {\n    min-width: 128px;\n\n    &.is-image,\n    &.is-video {\n      padding: 0;\n      overflow: hidden;\n\n      .image,\n      .video {\n        max-width: 32rem;\n        padding: var(--space-micro);\n\n        > img,\n        > video {\n          border-radius: var(--border-radius-medium);\n        }\n        > video {\n          height: 100%;\n          object-fit: cover;\n          width: 100%;\n        }\n      }\n      .video {\n        height: 18rem;\n      }\n    }\n\n    &.is-image.is-text > .message-text__wrap {\n      max-width: 32rem;\n      padding: var(--space-small) var(--space-normal);\n    }\n\n    &.is-private .file.message-text__wrap {\n      .file--icon {\n        color: var(--w-400);\n      }\n      .text-block-title {\n        color: #3c4858;\n      }\n      .download.button {\n        color: var(--w-400);\n      }\n    }\n\n    &.is-private.is-text > .message-text__wrap .link {\n      color: var(--w-700);\n    }\n    &.is-private.is-text > .message-text__wrap .prosemirror-mention-node {\n      font-weight: var(--font-weight-black);\n      background: none;\n      border-radius: var(--border-radius-small);\n      padding: 0;\n      color: var(--color-body);\n      text-decoration: underline;\n    }\n\n    &.is-from-bot {\n      background: var(--v-400);\n      .message-text--metadata .time {\n        color: var(--v-50);\n      }\n      &.is-private .message-text--metadata .time {\n        color: var(--s-400);\n      }\n    }\n\n    &.is-failed {\n      background: var(--r-200);\n\n      .message-text--metadata .time {\n        color: var(--r-50);\n      }\n    }\n  }\n\n  &.is-pending {\n    position: relative;\n    opacity: 0.8;\n\n    .spinner {\n      position: absolute;\n      bottom: var(--space-smaller);\n      right: var(--space-smaller);\n    }\n\n    > .is-image.is-text.bubble > .message-text__wrap {\n      padding: 0;\n    }\n  }\n}\n\n.wrap.is-email {\n  --bubble-max-width: 84% !important;\n}\n\n.sender--info {\n  align-items: center;\n  color: var(--b-700);\n  display: inline-flex;\n  padding: var(--space-smaller) 0;\n\n  .sender--available-name {\n    font-size: var(--font-size-mini);\n    margin-left: var(--space-smaller);\n  }\n}\n\n.message-failed--alert {\n  color: var(--r-900);\n  flex-grow: 1;\n  text-align: right;\n  margin-top: var(--space-smaller) var(--space-smaller) 0 0;\n}\n\n.button--delete-message {\n  visibility: hidden;\n}\n\nli.left,\nli.right {\n  display: flex;\n  align-items: flex-end;\n\n  &:hover .button--delete-message {\n    visibility: visible;\n  }\n}\n\nli.left.has-tweet-menu .context-menu {\n  margin-bottom: var(--space-medium);\n}\n\nli.right .context-menu-wrap {\n  margin-left: auto;\n}\n\nli.right {\n  flex-direction: row-reverse;\n  justify-content: flex-end;\n\n  .wrap.is-pending {\n    margin-left: auto;\n  }\n\n  .wrap.is-failed {\n    display: flex;\n    flex-direction: row-reverse;\n    align-items: flex-end;\n    margin-left: auto;\n  }\n}\n\n.has-context-menu {\n  background: var(--color-background);\n  .button--delete-message {\n    visibility: visible;\n  }\n}\n\n.context-menu {\n  position: relative;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}