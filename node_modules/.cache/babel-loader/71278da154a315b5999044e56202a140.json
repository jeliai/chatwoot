{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport Thumbnail from '../Thumbnail';\nimport conversationMixin from '../../../mixins/conversations';\nimport timeMixin from '../../../mixins/time';\nimport router from '../../../routes';\nimport { frontendURL, conversationUrl } from '../../../helper/URLHelper';\nimport InboxName from '../InboxName';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport ConversationContextMenu from './contextMenu/Index.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport timeAgo from 'dashboard/components/ui/TimeAgo';\nvar ATTACHMENT_ICONS = {\n  image: 'image',\n  audio: 'headphones-sound-wave',\n  video: 'video',\n  file: 'document',\n  location: 'location',\n  fallback: 'link'\n};\nexport default {\n  components: {\n    InboxName: InboxName,\n    Thumbnail: Thumbnail,\n    ConversationContextMenu: ConversationContextMenu,\n    timeAgo: timeAgo\n  },\n  mixins: [inboxMixin, timeMixin, conversationMixin, messageFormatterMixin, alertMixin],\n  props: {\n    activeLabel: {\n      type: String,\n      default: ''\n    },\n    chat: {\n      type: Object,\n      default: function _default() {}\n    },\n    hideInboxName: {\n      type: Boolean,\n      default: false\n    },\n    hideThumbnail: {\n      type: Boolean,\n      default: false\n    },\n    teamId: {\n      type: [String, Number],\n      default: 0\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0\n    },\n    showAssignee: {\n      type: Boolean,\n      default: false\n    },\n    conversationType: {\n      type: String,\n      default: ''\n    },\n    selected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      hovered: false,\n      showContextMenu: false,\n      contextMenu: {\n        x: null,\n        y: null\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    inboxesList: 'inboxes/getInboxes',\n    activeInbox: 'getSelectedInbox',\n    currentUser: 'getCurrentUser',\n    accountId: 'getCurrentAccountId'\n  })), {}, {\n    bulkActionCheck: function bulkActionCheck() {\n      return !this.hideThumbnail && !this.hovered && !this.selected;\n    },\n    chatMetadata: function chatMetadata() {\n      return this.chat.meta || {};\n    },\n    assignee: function assignee() {\n      return this.chatMetadata.assignee || {};\n    },\n    currentContact: function currentContact() {\n      return this.$store.getters['contacts/getContact'](this.chatMetadata.sender.id);\n    },\n    lastMessageFileType: function lastMessageFileType() {\n      var lastMessage = this.lastMessageInChat;\n\n      var _lastMessage$attachme = _slicedToArray(lastMessage.attachments, 1),\n          _lastMessage$attachme2 = _lastMessage$attachme[0];\n\n      _lastMessage$attachme2 = _lastMessage$attachme2 === void 0 ? {} : _lastMessage$attachme2;\n      var fileType = _lastMessage$attachme2.file_type;\n      return fileType;\n    },\n    attachmentIcon: function attachmentIcon() {\n      return ATTACHMENT_ICONS[this.lastMessageFileType];\n    },\n    attachmentMessageContent: function attachmentMessageContent() {\n      return \"CHAT_LIST.ATTACHMENTS.\".concat(this.lastMessageFileType, \".CONTENT\");\n    },\n    isActiveChat: function isActiveChat() {\n      return this.currentChat.id === this.chat.id;\n    },\n    unreadCount: function unreadCount() {\n      return this.chat.unread_count;\n    },\n    hasUnread: function hasUnread() {\n      return this.unreadCount > 0;\n    },\n    isInboxNameVisible: function isInboxNameVisible() {\n      return !this.activeInbox;\n    },\n    lastMessageInChat: function lastMessageInChat() {\n      return this.lastMessage(this.chat);\n    },\n    messageByAgent: function messageByAgent() {\n      var lastMessage = this.lastMessageInChat;\n      var messageType = lastMessage.message_type;\n      return messageType === MESSAGE_TYPE.OUTGOING;\n    },\n    isMessageAnActivity: function isMessageAnActivity() {\n      var lastMessage = this.lastMessageInChat;\n      var messageType = lastMessage.message_type;\n      return messageType === MESSAGE_TYPE.ACTIVITY;\n    },\n    isMessagePrivate: function isMessagePrivate() {\n      var lastMessage = this.lastMessageInChat;\n      var isPrivate = lastMessage.private;\n      return isPrivate;\n    },\n    parsedLastMessage: function parsedLastMessage() {\n      var contentAttributes = this.lastMessageInChat.content_attributes;\n\n      var _ref = contentAttributes || {},\n          _ref$email = _ref.email;\n\n      _ref$email = _ref$email === void 0 ? {} : _ref$email;\n      var subject = _ref$email.subject;\n      return this.getPlainText(subject || this.lastMessageInChat.content);\n    },\n    inbox: function inbox() {\n      var inboxId = this.chat.inbox_id;\n      var stateInbox = this.$store.getters['inboxes/getInbox'](inboxId);\n      return stateInbox;\n    },\n    showInboxName: function showInboxName() {\n      return !this.hideInboxName && this.isInboxNameVisible && this.inboxesList.length > 1;\n    },\n    inboxName: function inboxName() {\n      var stateInbox = this.inbox;\n      return stateInbox.name || '';\n    }\n  }),\n  methods: {\n    cardClick: function cardClick(chat) {\n      var activeInbox = this.activeInbox;\n      var path = conversationUrl({\n        accountId: this.accountId,\n        activeInbox: activeInbox,\n        id: chat.id,\n        label: this.activeLabel,\n        teamId: this.teamId,\n        foldersId: this.foldersId,\n        conversationType: this.conversationType\n      });\n\n      if (this.isActiveChat) {\n        return;\n      }\n\n      router.push({\n        path: frontendURL(path)\n      });\n    },\n    onCardHover: function onCardHover() {\n      this.hovered = !this.hideThumbnail;\n    },\n    onCardLeave: function onCardLeave() {\n      this.hovered = false;\n    },\n    onSelectConversation: function onSelectConversation(checked) {\n      var action = checked ? 'select-conversation' : 'de-select-conversation';\n      this.$emit(action, this.chat.id, this.inbox.id);\n    },\n    openContextMenu: function openContextMenu(e) {\n      e.preventDefault();\n      this.$emit('context-menu-toggle', true);\n      this.contextMenu.x = e.pageX || e.clientX;\n      this.contextMenu.y = e.pageY || e.clientY;\n      this.showContextMenu = true;\n    },\n    closeContextMenu: function closeContextMenu() {\n      this.$emit('context-menu-toggle', false);\n      this.showContextMenu = false;\n      this.contextMenu.x = null;\n      this.contextMenu.y = null;\n    },\n    onUpdateConversation: function onUpdateConversation(status, snoozedUntil) {\n      this.closeContextMenu();\n      this.$emit('update-conversation-status', this.chat.id, status, snoozedUntil);\n    },\n    onAssignAgent: function onAssignAgent(agent) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.$emit('assign-agent', agent, [_this.chat.id]);\n\n                _this.closeContextMenu();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    onAssignLabel: function onAssignLabel(label) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this2.$emit('assign-label', [label.title], [_this2.chat.id]);\n\n                _this2.closeContextMenu();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    onAssignTeam: function onAssignTeam(team) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this3.$emit('assign-team', team, _this3.chat.id);\n\n                _this3.closeContextMenu();\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    markAsUnread: function markAsUnread() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this4.$emit('mark-as-unread', _this4.chat.id);\n\n                _this4.closeContextMenu();\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["ConversationCard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"conversation\"\n    :class=\"{\n      active: isActiveChat,\n      'unread-chat': hasUnread,\n      'has-inbox-name': showInboxName,\n      'conversation-selected': selected,\n    }\"\n    @mouseenter=\"onCardHover\"\n    @mouseleave=\"onCardLeave\"\n    @click=\"cardClick(chat)\"\n    @contextmenu=\"openContextMenu($event)\"\n  >\n    <label v-if=\"hovered || selected\" class=\"checkbox-wrapper\" @click.stop>\n      <input\n        :value=\"selected\"\n        :checked=\"selected\"\n        class=\"checkbox\"\n        type=\"checkbox\"\n        @change=\"onSelectConversation($event.target.checked)\"\n      />\n    </label>\n    <thumbnail\n      v-if=\"bulkActionCheck\"\n      :src=\"currentContact.thumbnail\"\n      :badge=\"inboxBadge\"\n      class=\"columns\"\n      :username=\"currentContact.name\"\n      :status=\"currentContact.availability_status\"\n      size=\"40px\"\n    />\n    <div class=\"conversation--details columns\">\n      <div class=\"conversation--metadata\">\n        <inbox-name v-if=\"showInboxName\" :inbox=\"inbox\" />\n        <span\n          v-if=\"showAssignee && assignee.name\"\n          class=\"label assignee-label text-truncate\"\n        >\n          <fluent-icon icon=\"person\" size=\"12\" />\n          {{ assignee.name }}\n        </span>\n      </div>\n      <h4 class=\"conversation--user\">\n        {{ currentContact.name }}\n      </h4>\n      <p v-if=\"lastMessageInChat\" class=\"conversation--message\">\n        <fluent-icon\n          v-if=\"isMessagePrivate\"\n          size=\"16\"\n          class=\"message--attachment-icon last-message-icon\"\n          icon=\"lock-closed\"\n        />\n        <fluent-icon\n          v-else-if=\"messageByAgent\"\n          size=\"16\"\n          class=\"message--attachment-icon last-message-icon\"\n          icon=\"arrow-reply\"\n        />\n        <fluent-icon\n          v-else-if=\"isMessageAnActivity\"\n          size=\"16\"\n          class=\"message--attachment-icon last-message-icon\"\n          icon=\"info\"\n        />\n        <span v-if=\"lastMessageInChat.content\">\n          {{ parsedLastMessage }}\n        </span>\n        <span v-else-if=\"lastMessageInChat.attachments\">\n          <fluent-icon\n            v-if=\"attachmentIcon\"\n            size=\"16\"\n            class=\"message--attachment-icon\"\n            :icon=\"attachmentIcon\"\n          />\n          {{ this.$t(`${attachmentMessageContent}`) }}\n        </span>\n        <span v-else>\n          {{ $t('CHAT_LIST.NO_CONTENT') }}\n        </span>\n      </p>\n      <p v-else class=\"conversation--message\">\n        <fluent-icon size=\"16\" class=\"message--attachment-icon\" icon=\"info\" />\n        <span>\n          {{ this.$t(`CHAT_LIST.NO_MESSAGES`) }}\n        </span>\n      </p>\n      <div class=\"conversation--meta\">\n        <span class=\"timestamp\">\n          <time-ago :timestamp=\"chat.timestamp\" />\n        </span>\n        <span class=\"unread\">{{ unreadCount > 9 ? '9+' : unreadCount }}</span>\n      </div>\n    </div>\n    <woot-context-menu\n      v-if=\"showContextMenu\"\n      ref=\"menu\"\n      :x=\"contextMenu.x\"\n      :y=\"contextMenu.y\"\n      @close=\"closeContextMenu\"\n    >\n      <conversation-context-menu\n        :status=\"chat.status\"\n        :inbox-id=\"inbox.id\"\n        :has-unread-messages=\"hasUnread\"\n        @update-conversation=\"onUpdateConversation\"\n        @assign-agent=\"onAssignAgent\"\n        @assign-label=\"onAssignLabel\"\n        @assign-team=\"onAssignTeam\"\n        @mark-as-unread=\"markAsUnread\"\n      />\n    </woot-context-menu>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport Thumbnail from '../Thumbnail';\nimport conversationMixin from '../../../mixins/conversations';\nimport timeMixin from '../../../mixins/time';\nimport router from '../../../routes';\nimport { frontendURL, conversationUrl } from '../../../helper/URLHelper';\nimport InboxName from '../InboxName';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport ConversationContextMenu from './contextMenu/Index.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport timeAgo from 'dashboard/components/ui/TimeAgo';\n\nconst ATTACHMENT_ICONS = {\n  image: 'image',\n  audio: 'headphones-sound-wave',\n  video: 'video',\n  file: 'document',\n  location: 'location',\n  fallback: 'link',\n};\n\nexport default {\n  components: {\n    InboxName,\n    Thumbnail,\n    ConversationContextMenu,\n    timeAgo,\n  },\n\n  mixins: [\n    inboxMixin,\n    timeMixin,\n    conversationMixin,\n    messageFormatterMixin,\n    alertMixin,\n  ],\n  props: {\n    activeLabel: {\n      type: String,\n      default: '',\n    },\n    chat: {\n      type: Object,\n      default: () => {},\n    },\n    hideInboxName: {\n      type: Boolean,\n      default: false,\n    },\n    hideThumbnail: {\n      type: Boolean,\n      default: false,\n    },\n    teamId: {\n      type: [String, Number],\n      default: 0,\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0,\n    },\n    showAssignee: {\n      type: Boolean,\n      default: false,\n    },\n    conversationType: {\n      type: String,\n      default: '',\n    },\n    selected: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      hovered: false,\n      showContextMenu: false,\n      contextMenu: {\n        x: null,\n        y: null,\n      },\n    };\n  },\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      inboxesList: 'inboxes/getInboxes',\n      activeInbox: 'getSelectedInbox',\n      currentUser: 'getCurrentUser',\n      accountId: 'getCurrentAccountId',\n    }),\n    bulkActionCheck() {\n      return !this.hideThumbnail && !this.hovered && !this.selected;\n    },\n    chatMetadata() {\n      return this.chat.meta || {};\n    },\n\n    assignee() {\n      return this.chatMetadata.assignee || {};\n    },\n\n    currentContact() {\n      return this.$store.getters['contacts/getContact'](\n        this.chatMetadata.sender.id\n      );\n    },\n\n    lastMessageFileType() {\n      const lastMessage = this.lastMessageInChat;\n      const [{ file_type: fileType } = {}] = lastMessage.attachments;\n      return fileType;\n    },\n\n    attachmentIcon() {\n      return ATTACHMENT_ICONS[this.lastMessageFileType];\n    },\n\n    attachmentMessageContent() {\n      return `CHAT_LIST.ATTACHMENTS.${this.lastMessageFileType}.CONTENT`;\n    },\n\n    isActiveChat() {\n      return this.currentChat.id === this.chat.id;\n    },\n\n    unreadCount() {\n      return this.chat.unread_count;\n    },\n\n    hasUnread() {\n      return this.unreadCount > 0;\n    },\n\n    isInboxNameVisible() {\n      return !this.activeInbox;\n    },\n\n    lastMessageInChat() {\n      return this.lastMessage(this.chat);\n    },\n\n    messageByAgent() {\n      const lastMessage = this.lastMessageInChat;\n      const { message_type: messageType } = lastMessage;\n      return messageType === MESSAGE_TYPE.OUTGOING;\n    },\n\n    isMessageAnActivity() {\n      const lastMessage = this.lastMessageInChat;\n      const { message_type: messageType } = lastMessage;\n      return messageType === MESSAGE_TYPE.ACTIVITY;\n    },\n\n    isMessagePrivate() {\n      const lastMessage = this.lastMessageInChat;\n      const { private: isPrivate } = lastMessage;\n      return isPrivate;\n    },\n\n    parsedLastMessage() {\n      const { content_attributes: contentAttributes } = this.lastMessageInChat;\n      const { email: { subject } = {} } = contentAttributes || {};\n      return this.getPlainText(subject || this.lastMessageInChat.content);\n    },\n\n    inbox() {\n      const { inbox_id: inboxId } = this.chat;\n      const stateInbox = this.$store.getters['inboxes/getInbox'](inboxId);\n      return stateInbox;\n    },\n\n    showInboxName() {\n      return (\n        !this.hideInboxName &&\n        this.isInboxNameVisible &&\n        this.inboxesList.length > 1\n      );\n    },\n    inboxName() {\n      const stateInbox = this.inbox;\n      return stateInbox.name || '';\n    },\n  },\n  methods: {\n    cardClick(chat) {\n      const { activeInbox } = this;\n      const path = conversationUrl({\n        accountId: this.accountId,\n        activeInbox,\n        id: chat.id,\n        label: this.activeLabel,\n        teamId: this.teamId,\n        foldersId: this.foldersId,\n        conversationType: this.conversationType,\n      });\n      if (this.isActiveChat) {\n        return;\n      }\n      router.push({ path: frontendURL(path) });\n    },\n    onCardHover() {\n      this.hovered = !this.hideThumbnail;\n    },\n    onCardLeave() {\n      this.hovered = false;\n    },\n    onSelectConversation(checked) {\n      const action = checked ? 'select-conversation' : 'de-select-conversation';\n      this.$emit(action, this.chat.id, this.inbox.id);\n    },\n    openContextMenu(e) {\n      e.preventDefault();\n      this.$emit('context-menu-toggle', true);\n      this.contextMenu.x = e.pageX || e.clientX;\n      this.contextMenu.y = e.pageY || e.clientY;\n      this.showContextMenu = true;\n    },\n    closeContextMenu() {\n      this.$emit('context-menu-toggle', false);\n      this.showContextMenu = false;\n      this.contextMenu.x = null;\n      this.contextMenu.y = null;\n    },\n    onUpdateConversation(status, snoozedUntil) {\n      this.closeContextMenu();\n      this.$emit(\n        'update-conversation-status',\n        this.chat.id,\n        status,\n        snoozedUntil\n      );\n    },\n    async onAssignAgent(agent) {\n      this.$emit('assign-agent', agent, [this.chat.id]);\n      this.closeContextMenu();\n    },\n    async onAssignLabel(label) {\n      this.$emit('assign-label', [label.title], [this.chat.id]);\n      this.closeContextMenu();\n    },\n    async onAssignTeam(team) {\n      this.$emit('assign-team', team, this.chat.id);\n      this.closeContextMenu();\n    },\n    async markAsUnread() {\n      this.$emit('mark-as-unread', this.chat.id);\n      this.closeContextMenu();\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.conversation {\n  align-items: center;\n\n  &:hover {\n    background: var(--color-background-light);\n  }\n}\n\n.conversation-selected {\n  background: var(--color-background-light);\n}\n\n.has-inbox-name {\n  &::v-deep .user-thumbnail-box {\n    margin-top: var(--space-normal);\n    align-items: flex-start;\n  }\n  .conversation--meta {\n    margin-top: var(--space-normal);\n  }\n}\n\n.conversation--details {\n  .conversation--user {\n    padding-top: var(--space-micro);\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    width: 60%;\n  }\n}\n\n.last-message-icon {\n  color: var(--s-600);\n}\n\n.conversation--metadata {\n  display: flex;\n  justify-content: space-between;\n  padding-right: var(--space-normal);\n\n  .label {\n    background: none;\n    color: var(--s-500);\n    font-size: var(--font-size-mini);\n    font-weight: var(--font-weight-medium);\n    line-height: var(--space-slab);\n    padding: var(--space-micro) 0 var(--space-micro) 0;\n  }\n\n  .assignee-label {\n    display: inline-flex;\n    max-width: 50%;\n  }\n}\n\n.message--attachment-icon {\n  margin-top: var(--space-minus-micro);\n  vertical-align: middle;\n}\n.checkbox-wrapper {\n  height: 40px;\n  width: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 100%;\n  margin-top: var(--space-normal);\n  cursor: pointer;\n  &:hover {\n    background-color: var(--w-100);\n  }\n\n  input[type='checkbox'] {\n    margin: var(--space-zero);\n    cursor: pointer;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}