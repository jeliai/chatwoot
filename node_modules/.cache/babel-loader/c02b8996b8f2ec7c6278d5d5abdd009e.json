{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isodate = require('@segment/isodate');\n/**\n * Expose `traverse`.\n */\n\n\nmodule.exports = traverse;\n/**\n * Recursively traverse an object or array, and convert\n * all ISO date strings parse into Date objects.\n *\n * @param {Object} input - object, array, or string to convert\n * @param {Boolean} strict - only convert strings with year, month, and date\n * @return {Object}\n */\n\nfunction traverse(input, strict) {\n  if (strict === undefined) strict = true;\n\n  if (input && _typeof(input) === 'object') {\n    return traverseObject(input, strict);\n  } else if (Array.isArray(input)) {\n    return traverseArray(input, strict);\n  } else if (isodate.is(input, strict)) {\n    return isodate.parse(input);\n  }\n\n  return input;\n}\n/**\n * Object traverser helper function.\n *\n * @param {Object} obj - object to traverse\n * @param {Boolean} strict - only convert strings with year, month, and date\n * @return {Object}\n */\n\n\nfunction traverseObject(obj, strict) {\n  Object.keys(obj).forEach(function (key) {\n    obj[key] = traverse(obj[key], strict);\n  });\n  return obj;\n}\n/**\n * Array traverser helper function\n *\n * @param {Array} arr - array to traverse\n * @param {Boolean} strict - only convert strings with year, month, and date\n * @return {Array}\n */\n\n\nfunction traverseArray(arr, strict) {\n  arr.forEach(function (value, index) {\n    arr[index] = traverse(value, strict);\n  });\n  return arr;\n}","map":null,"metadata":{},"sourceType":"module"}