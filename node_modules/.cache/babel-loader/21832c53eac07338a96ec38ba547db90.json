{"ast":null,"code":"var _mutations;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Vue from 'vue';\nimport types from '../../mutation-types';\nimport getters, { getSelectedChatConversation } from './getters';\nimport actions from './actions';\nimport { findPendingMessageIndex } from './helpers';\nimport wootConstants from '../../../constants';\nimport { BUS_EVENTS } from '../../../../shared/constants/busEvents';\nvar state = {\n  allConversations: [],\n  listLoadingStatus: true,\n  chatStatusFilter: wootConstants.STATUS_TYPE.OPEN,\n  currentInbox: null,\n  selectedChatId: null,\n  appliedFilters: []\n}; // mutations\n\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.SET_ALL_CONVERSATION, function (_state, conversationList) {\n  var newAllConversations = _toConsumableArray(_state.allConversations);\n\n  conversationList.forEach(function (conversation) {\n    var indexInCurrentList = newAllConversations.findIndex(function (c) {\n      return c.id === conversation.id;\n    });\n\n    if (indexInCurrentList < 0) {\n      newAllConversations.push(conversation);\n    }\n  });\n  _state.allConversations = newAllConversations;\n}), _defineProperty(_mutations, types.EMPTY_ALL_CONVERSATION, function (_state) {\n  _state.allConversations = [];\n  _state.selectedChatId = null;\n}), _defineProperty(_mutations, types.SET_ALL_MESSAGES_LOADED, function (_state) {\n  var _getSelectedChatConve = getSelectedChatConversation(_state),\n      _getSelectedChatConve2 = _slicedToArray(_getSelectedChatConve, 1),\n      chat = _getSelectedChatConve2[0];\n\n  Vue.set(chat, 'allMessagesLoaded', true);\n}), _defineProperty(_mutations, types.CLEAR_ALL_MESSAGES_LOADED, function (_state) {\n  var _getSelectedChatConve3 = getSelectedChatConversation(_state),\n      _getSelectedChatConve4 = _slicedToArray(_getSelectedChatConve3, 1),\n      chat = _getSelectedChatConve4[0];\n\n  Vue.set(chat, 'allMessagesLoaded', false);\n}), _defineProperty(_mutations, types.CLEAR_CURRENT_CHAT_WINDOW, function (_state) {\n  _state.selectedChatId = null;\n}), _defineProperty(_mutations, types.SET_PREVIOUS_CONVERSATIONS, function (_state, _ref) {\n  var id = _ref.id,\n      data = _ref.data;\n\n  if (data.length) {\n    var _chat$messages;\n\n    var _state$allConversatio = _state.allConversations.filter(function (c) {\n      return c.id === id;\n    }),\n        _state$allConversatio2 = _slicedToArray(_state$allConversatio, 1),\n        chat = _state$allConversatio2[0];\n\n    (_chat$messages = chat.messages).unshift.apply(_chat$messages, _toConsumableArray(data));\n  }\n}), _defineProperty(_mutations, types.SET_CURRENT_CHAT_WINDOW, function (_state, activeChat) {\n  if (activeChat) {\n    _state.selectedChatId = activeChat.id;\n  }\n}), _defineProperty(_mutations, types.ASSIGN_AGENT, function (_state, assignee) {\n  var _getSelectedChatConve5 = getSelectedChatConversation(_state),\n      _getSelectedChatConve6 = _slicedToArray(_getSelectedChatConve5, 1),\n      chat = _getSelectedChatConve6[0];\n\n  Vue.set(chat.meta, 'assignee', assignee);\n}), _defineProperty(_mutations, types.ASSIGN_TEAM, function (_state, _ref2) {\n  var team = _ref2.team,\n      conversationId = _ref2.conversationId;\n\n  var _state$allConversatio3 = _state.allConversations.filter(function (c) {\n    return c.id === conversationId;\n  }),\n      _state$allConversatio4 = _slicedToArray(_state$allConversatio3, 1),\n      chat = _state$allConversatio4[0];\n\n  Vue.set(chat.meta, 'team', team);\n}), _defineProperty(_mutations, types.UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES, function (_state, custom_attributes) {\n  var _getSelectedChatConve7 = getSelectedChatConversation(_state),\n      _getSelectedChatConve8 = _slicedToArray(_getSelectedChatConve7, 1),\n      chat = _getSelectedChatConve8[0];\n\n  Vue.set(chat, 'custom_attributes', custom_attributes);\n}), _defineProperty(_mutations, types.CHANGE_CONVERSATION_STATUS, function (_state, _ref3) {\n  var conversationId = _ref3.conversationId,\n      status = _ref3.status,\n      snoozedUntil = _ref3.snoozedUntil;\n  var conversation = getters.getConversationById(_state)(conversationId) || {};\n  Vue.set(conversation, 'snoozed_until', snoozedUntil);\n  Vue.set(conversation, 'status', status);\n}), _defineProperty(_mutations, types.MUTE_CONVERSATION, function (_state) {\n  var _getSelectedChatConve9 = getSelectedChatConversation(_state),\n      _getSelectedChatConve10 = _slicedToArray(_getSelectedChatConve9, 1),\n      chat = _getSelectedChatConve10[0];\n\n  Vue.set(chat, 'muted', true);\n}), _defineProperty(_mutations, types.UNMUTE_CONVERSATION, function (_state) {\n  var _getSelectedChatConve11 = getSelectedChatConversation(_state),\n      _getSelectedChatConve12 = _slicedToArray(_getSelectedChatConve11, 1),\n      chat = _getSelectedChatConve12[0];\n\n  Vue.set(chat, 'muted', false);\n}), _defineProperty(_mutations, types.ADD_MESSAGE, function (_ref4, message) {\n  var allConversations = _ref4.allConversations,\n      selectedChatId = _ref4.selectedChatId;\n  var conversationId = message.conversation_id;\n\n  var _getSelectedChatConve13 = getSelectedChatConversation({\n    allConversations: allConversations,\n    selectedChatId: conversationId\n  }),\n      _getSelectedChatConve14 = _slicedToArray(_getSelectedChatConve13, 1),\n      chat = _getSelectedChatConve14[0];\n\n  if (!chat) return;\n  var pendingMessageIndex = findPendingMessageIndex(chat, message);\n\n  if (pendingMessageIndex !== -1) {\n    Vue.set(chat.messages, pendingMessageIndex, message);\n  } else {\n    chat.messages.push(message);\n    chat.timestamp = message.created_at;\n\n    if (selectedChatId === conversationId) {\n      window.bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n    }\n  }\n}), _defineProperty(_mutations, types.ADD_CONVERSATION, function (_state, conversation) {\n  _state.allConversations.push(conversation);\n}), _defineProperty(_mutations, types.UPDATE_CONVERSATION, function (_state, conversation) {\n  var allConversations = _state.allConversations;\n  var currentConversationIndex = allConversations.findIndex(function (c) {\n    return c.id === conversation.id;\n  });\n\n  if (currentConversationIndex > -1) {\n    var messages = conversation.messages,\n        conversationAttributes = _objectWithoutProperties(conversation, [\"messages\"]);\n\n    var currentConversation = _objectSpread(_objectSpread({}, allConversations[currentConversationIndex]), conversationAttributes);\n\n    Vue.set(allConversations, currentConversationIndex, currentConversation);\n\n    if (_state.selectedChatId === conversation.id) {\n      window.bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n    }\n  } else {\n    _state.allConversations.push(conversation);\n  }\n}), _defineProperty(_mutations, types.SET_LIST_LOADING_STATUS, function (_state) {\n  _state.listLoadingStatus = true;\n}), _defineProperty(_mutations, types.CLEAR_LIST_LOADING_STATUS, function (_state) {\n  _state.listLoadingStatus = false;\n}), _defineProperty(_mutations, types.UPDATE_MESSAGE_UNREAD_COUNT, function (_state, _ref5) {\n  var id = _ref5.id,\n      lastSeen = _ref5.lastSeen,\n      _ref5$unreadCount = _ref5.unreadCount,\n      unreadCount = _ref5$unreadCount === void 0 ? 0 : _ref5$unreadCount;\n\n  var _state$allConversatio5 = _state.allConversations.filter(function (c) {\n    return c.id === id;\n  }),\n      _state$allConversatio6 = _slicedToArray(_state$allConversatio5, 1),\n      chat = _state$allConversatio6[0];\n\n  if (chat) {\n    Vue.set(chat, 'agent_last_seen_at', lastSeen);\n    Vue.set(chat, 'unread_count', unreadCount);\n  }\n}), _defineProperty(_mutations, types.CHANGE_CHAT_STATUS_FILTER, function (_state, data) {\n  _state.chatStatusFilter = data;\n}), _defineProperty(_mutations, types.UPDATE_ASSIGNEE, function (_state, payload) {\n  var _state$allConversatio7 = _state.allConversations.filter(function (c) {\n    return c.id === payload.id;\n  }),\n      _state$allConversatio8 = _slicedToArray(_state$allConversatio7, 1),\n      chat = _state$allConversatio8[0];\n\n  Vue.set(chat.meta, 'assignee', payload.assignee);\n}), _defineProperty(_mutations, types.UPDATE_CONVERSATION_CONTACT, function (_state, _ref6) {\n  var conversationId = _ref6.conversationId,\n      payload = _objectWithoutProperties(_ref6, [\"conversationId\"]);\n\n  var _state$allConversatio9 = _state.allConversations.filter(function (c) {\n    return c.id === conversationId;\n  }),\n      _state$allConversatio10 = _slicedToArray(_state$allConversatio9, 1),\n      chat = _state$allConversatio10[0];\n\n  if (chat) {\n    Vue.set(chat.meta, 'sender', payload);\n  }\n}), _defineProperty(_mutations, types.SET_ACTIVE_INBOX, function (_state, inboxId) {\n  _state.currentInbox = inboxId ? parseInt(inboxId, 10) : null;\n}), _defineProperty(_mutations, types.SET_CONVERSATION_CAN_REPLY, function (_state, _ref7) {\n  var conversationId = _ref7.conversationId,\n      canReply = _ref7.canReply;\n\n  var _state$allConversatio11 = _state.allConversations.filter(function (c) {\n    return c.id === conversationId;\n  }),\n      _state$allConversatio12 = _slicedToArray(_state$allConversatio11, 1),\n      chat = _state$allConversatio12[0];\n\n  if (chat) {\n    Vue.set(chat, 'can_reply', canReply);\n  }\n}), _defineProperty(_mutations, types.CLEAR_CONTACT_CONVERSATIONS, function (_state, contactId) {\n  var chats = _state.allConversations.filter(function (c) {\n    return c.meta.sender.id !== contactId;\n  });\n\n  Vue.set(_state, 'allConversations', chats);\n}), _defineProperty(_mutations, types.SET_CONVERSATION_FILTERS, function (_state, data) {\n  _state.appliedFilters = data;\n}), _defineProperty(_mutations, types.CLEAR_CONVERSATION_FILTERS, function (_state) {\n  _state.appliedFilters = [];\n}), _mutations);\nexport default {\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/index.js"],"names":["Vue","types","getters","getSelectedChatConversation","actions","findPendingMessageIndex","wootConstants","BUS_EVENTS","state","allConversations","listLoadingStatus","chatStatusFilter","STATUS_TYPE","OPEN","currentInbox","selectedChatId","appliedFilters","mutations","SET_ALL_CONVERSATION","_state","conversationList","newAllConversations","forEach","conversation","indexInCurrentList","findIndex","c","id","push","EMPTY_ALL_CONVERSATION","SET_ALL_MESSAGES_LOADED","chat","set","CLEAR_ALL_MESSAGES_LOADED","CLEAR_CURRENT_CHAT_WINDOW","SET_PREVIOUS_CONVERSATIONS","data","length","filter","messages","unshift","SET_CURRENT_CHAT_WINDOW","activeChat","ASSIGN_AGENT","assignee","meta","ASSIGN_TEAM","team","conversationId","UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES","custom_attributes","CHANGE_CONVERSATION_STATUS","status","snoozedUntil","getConversationById","MUTE_CONVERSATION","UNMUTE_CONVERSATION","ADD_MESSAGE","message","conversation_id","pendingMessageIndex","timestamp","created_at","window","bus","$emit","SCROLL_TO_MESSAGE","ADD_CONVERSATION","UPDATE_CONVERSATION","currentConversationIndex","conversationAttributes","currentConversation","SET_LIST_LOADING_STATUS","CLEAR_LIST_LOADING_STATUS","UPDATE_MESSAGE_UNREAD_COUNT","lastSeen","unreadCount","CHANGE_CHAT_STATUS_FILTER","UPDATE_ASSIGNEE","payload","UPDATE_CONVERSATION_CONTACT","SET_ACTIVE_INBOX","inboxId","parseInt","SET_CONVERSATION_CAN_REPLY","canReply","CLEAR_CONTACT_CONVERSATIONS","contactId","chats","sender","SET_CONVERSATION_FILTERS","CLEAR_CONVERSATION_FILTERS"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport types from '../../mutation-types';\nimport getters, { getSelectedChatConversation } from './getters';\nimport actions from './actions';\nimport { findPendingMessageIndex } from './helpers';\nimport wootConstants from '../../../constants';\nimport { BUS_EVENTS } from '../../../../shared/constants/busEvents';\n\nconst state = {\n  allConversations: [],\n  listLoadingStatus: true,\n  chatStatusFilter: wootConstants.STATUS_TYPE.OPEN,\n  currentInbox: null,\n  selectedChatId: null,\n  appliedFilters: [],\n};\n\n// mutations\nexport const mutations = {\n  [types.SET_ALL_CONVERSATION](_state, conversationList) {\n    const newAllConversations = [..._state.allConversations];\n    conversationList.forEach(conversation => {\n      const indexInCurrentList = newAllConversations.findIndex(\n        c => c.id === conversation.id\n      );\n      if (indexInCurrentList < 0) {\n        newAllConversations.push(conversation);\n      }\n    });\n    _state.allConversations = newAllConversations;\n  },\n  [types.EMPTY_ALL_CONVERSATION](_state) {\n    _state.allConversations = [];\n    _state.selectedChatId = null;\n  },\n  [types.SET_ALL_MESSAGES_LOADED](_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat, 'allMessagesLoaded', true);\n  },\n\n  [types.CLEAR_ALL_MESSAGES_LOADED](_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat, 'allMessagesLoaded', false);\n  },\n  [types.CLEAR_CURRENT_CHAT_WINDOW](_state) {\n    _state.selectedChatId = null;\n  },\n\n  [types.SET_PREVIOUS_CONVERSATIONS](_state, { id, data }) {\n    if (data.length) {\n      const [chat] = _state.allConversations.filter(c => c.id === id);\n      chat.messages.unshift(...data);\n    }\n  },\n\n  [types.SET_CURRENT_CHAT_WINDOW](_state, activeChat) {\n    if (activeChat) {\n      _state.selectedChatId = activeChat.id;\n    }\n  },\n\n  [types.ASSIGN_AGENT](_state, assignee) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat.meta, 'assignee', assignee);\n  },\n\n  [types.ASSIGN_TEAM](_state, { team, conversationId }) {\n    const [chat] = _state.allConversations.filter(c => c.id === conversationId);\n    Vue.set(chat.meta, 'team', team);\n  },\n\n  [types.UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES](_state, custom_attributes) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat, 'custom_attributes', custom_attributes);\n  },\n\n  [types.CHANGE_CONVERSATION_STATUS](\n    _state,\n    { conversationId, status, snoozedUntil }\n  ) {\n    const conversation =\n      getters.getConversationById(_state)(conversationId) || {};\n    Vue.set(conversation, 'snoozed_until', snoozedUntil);\n    Vue.set(conversation, 'status', status);\n  },\n\n  [types.MUTE_CONVERSATION](_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat, 'muted', true);\n  },\n\n  [types.UNMUTE_CONVERSATION](_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    Vue.set(chat, 'muted', false);\n  },\n\n  [types.ADD_MESSAGE]({ allConversations, selectedChatId }, message) {\n    const { conversation_id: conversationId } = message;\n    const [chat] = getSelectedChatConversation({\n      allConversations,\n      selectedChatId: conversationId,\n    });\n    if (!chat) return;\n\n    const pendingMessageIndex = findPendingMessageIndex(chat, message);\n    if (pendingMessageIndex !== -1) {\n      Vue.set(chat.messages, pendingMessageIndex, message);\n    } else {\n      chat.messages.push(message);\n      chat.timestamp = message.created_at;\n      if (selectedChatId === conversationId) {\n        window.bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n      }\n    }\n  },\n\n  [types.ADD_CONVERSATION](_state, conversation) {\n    _state.allConversations.push(conversation);\n  },\n\n  [types.UPDATE_CONVERSATION](_state, conversation) {\n    const { allConversations } = _state;\n    const currentConversationIndex = allConversations.findIndex(\n      c => c.id === conversation.id\n    );\n    if (currentConversationIndex > -1) {\n      const { messages, ...conversationAttributes } = conversation;\n      const currentConversation = {\n        ...allConversations[currentConversationIndex],\n        ...conversationAttributes,\n      };\n      Vue.set(allConversations, currentConversationIndex, currentConversation);\n      if (_state.selectedChatId === conversation.id) {\n        window.bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n      }\n    } else {\n      _state.allConversations.push(conversation);\n    }\n  },\n\n  [types.SET_LIST_LOADING_STATUS](_state) {\n    _state.listLoadingStatus = true;\n  },\n\n  [types.CLEAR_LIST_LOADING_STATUS](_state) {\n    _state.listLoadingStatus = false;\n  },\n\n  [types.UPDATE_MESSAGE_UNREAD_COUNT](\n    _state,\n    { id, lastSeen, unreadCount = 0 }\n  ) {\n    const [chat] = _state.allConversations.filter(c => c.id === id);\n    if (chat) {\n      Vue.set(chat, 'agent_last_seen_at', lastSeen);\n      Vue.set(chat, 'unread_count', unreadCount);\n    }\n  },\n  [types.CHANGE_CHAT_STATUS_FILTER](_state, data) {\n    _state.chatStatusFilter = data;\n  },\n\n  // Update assignee on action cable message\n  [types.UPDATE_ASSIGNEE](_state, payload) {\n    const [chat] = _state.allConversations.filter(c => c.id === payload.id);\n    Vue.set(chat.meta, 'assignee', payload.assignee);\n  },\n\n  [types.UPDATE_CONVERSATION_CONTACT](_state, { conversationId, ...payload }) {\n    const [chat] = _state.allConversations.filter(c => c.id === conversationId);\n    if (chat) {\n      Vue.set(chat.meta, 'sender', payload);\n    }\n  },\n\n  [types.SET_ACTIVE_INBOX](_state, inboxId) {\n    _state.currentInbox = inboxId ? parseInt(inboxId, 10) : null;\n  },\n\n  [types.SET_CONVERSATION_CAN_REPLY](_state, { conversationId, canReply }) {\n    const [chat] = _state.allConversations.filter(c => c.id === conversationId);\n    if (chat) {\n      Vue.set(chat, 'can_reply', canReply);\n    }\n  },\n\n  [types.CLEAR_CONTACT_CONVERSATIONS](_state, contactId) {\n    const chats = _state.allConversations.filter(\n      c => c.meta.sender.id !== contactId\n    );\n    Vue.set(_state, 'allConversations', chats);\n  },\n\n  [types.SET_CONVERSATION_FILTERS](_state, data) {\n    _state.appliedFilters = data;\n  },\n\n  [types.CLEAR_CONVERSATION_FILTERS](_state) {\n    _state.appliedFilters = [];\n  },\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}