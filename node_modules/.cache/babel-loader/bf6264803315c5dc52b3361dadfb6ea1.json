{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vue from 'vue';\nimport types from '../../mutation-types';\nimport ConversationApi from '../../../api/inbox/conversation';\nimport MessageApi from '../../../api/inbox/message';\nimport { MESSAGE_STATUS, MESSAGE_TYPE } from 'shared/constants/messages';\nimport { createPendingMessage } from 'dashboard/helper/commons';\nimport { buildConversationList, isOnMentionsView, isOnUnattendedView } from './helpers/actionHelpers';\nimport messageReadActions from './actions/messageReadActions';\nimport AnalyticsHelper, { ANALYTICS_EVENTS } from '../../../helper/AnalyticsHelper'; // actions\n\nvar actions = _objectSpread({\n  getConversation: function () {\n    var _getConversation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, conversationId) {\n      var commit, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return ConversationApi.show(conversationId);\n\n            case 4:\n              response = _context.sent;\n              commit(types.UPDATE_CONVERSATION, response.data);\n              commit(\"contacts/\".concat(types.SET_CONTACT_ITEM), response.data.meta.sender);\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function getConversation(_x, _x2) {\n      return _getConversation.apply(this, arguments);\n    }\n\n    return getConversation;\n  }(),\n  fetchAllConversations: function () {\n    var _fetchAllConversations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, params) {\n      var commit, dispatch, _yield$ConversationAp, data;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit, dispatch = _ref2.dispatch;\n              commit(types.SET_LIST_LOADING_STATUS);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return ConversationApi.get(params);\n\n            case 5:\n              _yield$ConversationAp = _context2.sent;\n              data = _yield$ConversationAp.data.data;\n              buildConversationList({\n                commit: commit,\n                dispatch: dispatch\n              }, params, data, params.assigneeType);\n              _context2.next = 12;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 10]]);\n    }));\n\n    function fetchAllConversations(_x3, _x4) {\n      return _fetchAllConversations.apply(this, arguments);\n    }\n\n    return fetchAllConversations;\n  }(),\n  fetchFilteredConversations: function () {\n    var _fetchFilteredConversations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3, params) {\n      var commit, dispatch, _yield$ConversationAp2, data;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit, dispatch = _ref3.dispatch;\n              commit(types.SET_LIST_LOADING_STATUS);\n              _context3.prev = 2;\n              _context3.next = 5;\n              return ConversationApi.filter(params);\n\n            case 5:\n              _yield$ConversationAp2 = _context3.sent;\n              data = _yield$ConversationAp2.data;\n              buildConversationList({\n                commit: commit,\n                dispatch: dispatch\n              }, params, data, 'appliedFilters');\n              _context3.next = 12;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](2);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 10]]);\n    }));\n\n    function fetchFilteredConversations(_x5, _x6) {\n      return _fetchFilteredConversations.apply(this, arguments);\n    }\n\n    return fetchFilteredConversations;\n  }(),\n  emptyAllConversations: function emptyAllConversations(_ref4) {\n    var commit = _ref4.commit;\n    commit(types.EMPTY_ALL_CONVERSATION);\n  },\n  clearSelectedState: function clearSelectedState(_ref5) {\n    var commit = _ref5.commit;\n    commit(types.CLEAR_CURRENT_CHAT_WINDOW);\n  },\n  fetchPreviousMessages: function () {\n    var _fetchPreviousMessages = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref6, data) {\n      var commit, _yield$MessageApi$get, _yield$MessageApi$get2, meta, payload;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref6.commit;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return MessageApi.getPreviousMessages(data);\n\n            case 4:\n              _yield$MessageApi$get = _context4.sent;\n              _yield$MessageApi$get2 = _yield$MessageApi$get.data;\n              meta = _yield$MessageApi$get2.meta;\n              payload = _yield$MessageApi$get2.payload;\n              commit(\"conversationMetadata/\".concat(types.SET_CONVERSATION_METADATA), {\n                id: data.conversationId,\n                data: meta\n              });\n              commit(types.SET_PREVIOUS_CONVERSATIONS, {\n                id: data.conversationId,\n                data: payload\n              });\n\n              if (payload.length < 20) {\n                commit(types.SET_ALL_MESSAGES_LOADED);\n              }\n\n              _context4.next = 15;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 13]]);\n    }));\n\n    function fetchPreviousMessages(_x7, _x8) {\n      return _fetchPreviousMessages.apply(this, arguments);\n    }\n\n    return fetchPreviousMessages;\n  }(),\n  setActiveChat: function setActiveChat(_ref7, data) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n      var commit, dispatch;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref7.commit, dispatch = _ref7.dispatch;\n              commit(types.SET_CURRENT_CHAT_WINDOW, data);\n              commit(types.CLEAR_ALL_MESSAGES_LOADED);\n\n              if (!(data.dataFetched === undefined)) {\n                _context5.next = 12;\n                break;\n              }\n\n              _context5.prev = 4;\n              _context5.next = 7;\n              return dispatch('fetchPreviousMessages', {\n                conversationId: data.id,\n                before: data.messages[0].id\n              });\n\n            case 7:\n              Vue.set(data, 'dataFetched', true);\n              _context5.next = 12;\n              break;\n\n            case 10:\n              _context5.prev = 10;\n              _context5.t0 = _context5[\"catch\"](4);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[4, 10]]);\n    }))();\n  },\n  assignAgent: function () {\n    var _assignAgent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(_ref8, _ref9) {\n      var dispatch, conversationId, agentId, response;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dispatch = _ref8.dispatch;\n              conversationId = _ref9.conversationId, agentId = _ref9.agentId;\n              _context6.prev = 2;\n              _context6.next = 5;\n              return ConversationApi.assignAgent({\n                conversationId: conversationId,\n                agentId: agentId\n              });\n\n            case 5:\n              response = _context6.sent;\n              dispatch('setCurrentChatAssignee', response.data);\n              _context6.next = 11;\n              break;\n\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](2);\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[2, 9]]);\n    }));\n\n    function assignAgent(_x9, _x10) {\n      return _assignAgent.apply(this, arguments);\n    }\n\n    return assignAgent;\n  }(),\n  setCurrentChatAssignee: function setCurrentChatAssignee(_ref10, assignee) {\n    var commit = _ref10.commit;\n    commit(types.ASSIGN_AGENT, assignee);\n  },\n  assignTeam: function () {\n    var _assignTeam = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref11, _ref12) {\n      var dispatch, conversationId, teamId, response;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              dispatch = _ref11.dispatch;\n              conversationId = _ref12.conversationId, teamId = _ref12.teamId;\n              _context7.prev = 2;\n              _context7.next = 5;\n              return ConversationApi.assignTeam({\n                conversationId: conversationId,\n                teamId: teamId\n              });\n\n            case 5:\n              response = _context7.sent;\n              dispatch('setCurrentChatTeam', {\n                team: response.data,\n                conversationId: conversationId\n              });\n              _context7.next = 11;\n              break;\n\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](2);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[2, 9]]);\n    }));\n\n    function assignTeam(_x11, _x12) {\n      return _assignTeam.apply(this, arguments);\n    }\n\n    return assignTeam;\n  }(),\n  setCurrentChatTeam: function setCurrentChatTeam(_ref13, _ref14) {\n    var commit = _ref13.commit;\n    var team = _ref14.team,\n        conversationId = _ref14.conversationId;\n    commit(types.ASSIGN_TEAM, {\n      team: team,\n      conversationId: conversationId\n    });\n  },\n  toggleStatus: function () {\n    var _toggleStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref15, _ref16) {\n      var commit, conversationId, status, _ref16$snoozedUntil, snoozedUntil, _yield$ConversationAp3, _yield$ConversationAp4, _yield$ConversationAp5, updatedStatus, updatedSnoozedUntil;\n\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref15.commit;\n              conversationId = _ref16.conversationId, status = _ref16.status, _ref16$snoozedUntil = _ref16.snoozedUntil, snoozedUntil = _ref16$snoozedUntil === void 0 ? null : _ref16$snoozedUntil;\n              _context8.prev = 2;\n              _context8.next = 5;\n              return ConversationApi.toggleStatus({\n                conversationId: conversationId,\n                status: status,\n                snoozedUntil: snoozedUntil\n              });\n\n            case 5:\n              _yield$ConversationAp3 = _context8.sent;\n              _yield$ConversationAp4 = _yield$ConversationAp3.data;\n              _yield$ConversationAp4 = _yield$ConversationAp4 === void 0 ? {} : _yield$ConversationAp4;\n              _yield$ConversationAp5 = _yield$ConversationAp4.payload;\n              _yield$ConversationAp5 = _yield$ConversationAp5 === void 0 ? {} : _yield$ConversationAp5;\n              updatedStatus = _yield$ConversationAp5.current_status, updatedSnoozedUntil = _yield$ConversationAp5.snoozed_until;\n              commit(types.CHANGE_CONVERSATION_STATUS, {\n                conversationId: conversationId,\n                status: updatedStatus,\n                snoozedUntil: updatedSnoozedUntil\n              });\n              _context8.next = 16;\n              break;\n\n            case 14:\n              _context8.prev = 14;\n              _context8.t0 = _context8[\"catch\"](2);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[2, 14]]);\n    }));\n\n    function toggleStatus(_x13, _x14) {\n      return _toggleStatus.apply(this, arguments);\n    }\n\n    return toggleStatus;\n  }(),\n  createPendingMessageAndSend: function () {\n    var _createPendingMessageAndSend = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(_ref17, data) {\n      var dispatch, pendingMessage;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              dispatch = _ref17.dispatch;\n              pendingMessage = createPendingMessage(data);\n              dispatch('sendMessageWithData', pendingMessage);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function createPendingMessageAndSend(_x15, _x16) {\n      return _createPendingMessageAndSend.apply(this, arguments);\n    }\n\n    return createPendingMessageAndSend;\n  }(),\n  sendMessageWithData: function () {\n    var _sendMessageWithData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(_ref18, pendingMessage) {\n      var commit, response, errorMessage;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              commit = _ref18.commit;\n              _context10.prev = 1;\n              commit(types.ADD_MESSAGE, _objectSpread(_objectSpread({}, pendingMessage), {}, {\n                status: MESSAGE_STATUS.PROGRESS\n              }));\n              _context10.next = 5;\n              return MessageApi.create(pendingMessage);\n\n            case 5:\n              response = _context10.sent;\n              AnalyticsHelper.track(pendingMessage.private ? ANALYTICS_EVENTS.SENT_PRIVATE_NOTE : ANALYTICS_EVENTS.SENT_MESSAGE);\n              commit(types.ADD_MESSAGE, _objectSpread(_objectSpread({}, response.data), {}, {\n                status: MESSAGE_STATUS.SENT\n              }));\n              _context10.next = 15;\n              break;\n\n            case 10:\n              _context10.prev = 10;\n              _context10.t0 = _context10[\"catch\"](1);\n              errorMessage = _context10.t0.response ? _context10.t0.response.data.error : undefined;\n              commit(types.ADD_MESSAGE, _objectSpread(_objectSpread({}, pendingMessage), {}, {\n                meta: {\n                  error: errorMessage\n                },\n                status: MESSAGE_STATUS.FAILED\n              }));\n              throw _context10.t0;\n\n            case 15:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[1, 10]]);\n    }));\n\n    function sendMessageWithData(_x17, _x18) {\n      return _sendMessageWithData.apply(this, arguments);\n    }\n\n    return sendMessageWithData;\n  }(),\n  addMessage: function addMessage(_ref19, message) {\n    var commit = _ref19.commit;\n    commit(types.ADD_MESSAGE, message);\n\n    if (message.message_type === MESSAGE_TYPE.INCOMING) {\n      commit(types.SET_CONVERSATION_CAN_REPLY, {\n        conversationId: message.conversation_id,\n        canReply: true\n      });\n    }\n  },\n  updateMessage: function updateMessage(_ref20, message) {\n    var commit = _ref20.commit;\n    commit(types.ADD_MESSAGE, message);\n  },\n  deleteMessage: function () {\n    var _deleteLabels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(_ref21, _ref22) {\n      var commit, conversationId, messageId, response, data;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              commit = _ref21.commit;\n              conversationId = _ref22.conversationId, messageId = _ref22.messageId;\n              _context11.prev = 2;\n              _context11.next = 5;\n              return MessageApi.delete(conversationId, messageId);\n\n            case 5:\n              response = _context11.sent;\n              data = response.data; // The delete message is actually deleting the content.\n\n              commit(types.ADD_MESSAGE, data);\n              _context11.next = 13;\n              break;\n\n            case 10:\n              _context11.prev = 10;\n              _context11.t0 = _context11[\"catch\"](2);\n              throw new Error(_context11.t0);\n\n            case 13:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[2, 10]]);\n    }));\n\n    function deleteLabels(_x19, _x20) {\n      return _deleteLabels.apply(this, arguments);\n    }\n\n    return deleteLabels;\n  }(),\n  addConversation: function addConversation(_ref23, conversation) {\n    var commit = _ref23.commit,\n        state = _ref23.state,\n        dispatch = _ref23.dispatch,\n        rootState = _ref23.rootState;\n    var currentInbox = state.currentInbox,\n        appliedFilters = state.appliedFilters;\n    var inboxId = conversation.inbox_id,\n        sender = conversation.meta.sender;\n    var hasAppliedFilters = !!appliedFilters.length;\n    var isMatchingInboxFilter = !currentInbox || Number(currentInbox) === inboxId;\n\n    if (!hasAppliedFilters && !isOnMentionsView(rootState) && !isOnUnattendedView(rootState) && isMatchingInboxFilter) {\n      commit(types.ADD_CONVERSATION, conversation);\n      dispatch('contacts/setContact', sender);\n    }\n  },\n  addMentions: function addMentions(_ref24, conversation) {\n    var dispatch = _ref24.dispatch,\n        rootState = _ref24.rootState;\n\n    if (isOnMentionsView(rootState)) {\n      dispatch('updateConversation', conversation);\n    }\n  },\n  addUnattended: function addUnattended(_ref25, conversation) {\n    var dispatch = _ref25.dispatch,\n        rootState = _ref25.rootState;\n\n    if (isOnUnattendedView(rootState)) {\n      dispatch('updateConversation', conversation);\n    }\n  },\n  updateConversation: function updateConversation(_ref26, conversation) {\n    var commit = _ref26.commit,\n        dispatch = _ref26.dispatch;\n    var sender = conversation.meta.sender;\n    commit(types.UPDATE_CONVERSATION, conversation);\n    dispatch('conversationLabels/setConversationLabel', {\n      id: conversation.id,\n      data: conversation.labels\n    });\n    dispatch('contacts/setContact', sender);\n  },\n  setChatFilter: function setChatFilter(_ref27, data) {\n    var commit = _ref27.commit;\n    commit(types.CHANGE_CHAT_STATUS_FILTER, data);\n  },\n  updateAssignee: function updateAssignee(_ref28, data) {\n    var commit = _ref28.commit;\n    commit(types.UPDATE_ASSIGNEE, data);\n  },\n  updateConversationContact: function updateConversationContact(_ref29, data) {\n    var commit = _ref29.commit;\n\n    if (data.id) {\n      commit(\"contacts/\".concat(types.SET_CONTACT_ITEM), data);\n    }\n\n    commit(types.UPDATE_CONVERSATION_CONTACT, data);\n  },\n  setActiveInbox: function setActiveInbox(_ref30, inboxId) {\n    var commit = _ref30.commit;\n    commit(types.SET_ACTIVE_INBOX, inboxId);\n  },\n  muteConversation: function () {\n    var _muteConversation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(_ref31, conversationId) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref31.commit;\n              _context12.prev = 1;\n              _context12.next = 4;\n              return ConversationApi.mute(conversationId);\n\n            case 4:\n              commit(types.MUTE_CONVERSATION);\n              _context12.next = 9;\n              break;\n\n            case 7:\n              _context12.prev = 7;\n              _context12.t0 = _context12[\"catch\"](1);\n\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 7]]);\n    }));\n\n    function muteConversation(_x21, _x22) {\n      return _muteConversation.apply(this, arguments);\n    }\n\n    return muteConversation;\n  }(),\n  unmuteConversation: function () {\n    var _unmuteConversation = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(_ref32, conversationId) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              commit = _ref32.commit;\n              _context13.prev = 1;\n              _context13.next = 4;\n              return ConversationApi.unmute(conversationId);\n\n            case 4:\n              commit(types.UNMUTE_CONVERSATION);\n              _context13.next = 9;\n              break;\n\n            case 7:\n              _context13.prev = 7;\n              _context13.t0 = _context13[\"catch\"](1);\n\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[1, 7]]);\n    }));\n\n    function unmuteConversation(_x23, _x24) {\n      return _unmuteConversation.apply(this, arguments);\n    }\n\n    return unmuteConversation;\n  }(),\n  sendEmailTranscript: function () {\n    var _sendEmailTranscript = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(_, _ref33) {\n      var conversationId, email;\n      return regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              conversationId = _ref33.conversationId, email = _ref33.email;\n              _context14.prev = 1;\n              _context14.next = 4;\n              return ConversationApi.sendEmailTranscript({\n                conversationId: conversationId,\n                email: email\n              });\n\n            case 4:\n              _context14.next = 9;\n              break;\n\n            case 6:\n              _context14.prev = 6;\n              _context14.t0 = _context14[\"catch\"](1);\n              throw new Error(_context14.t0);\n\n            case 9:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, null, [[1, 6]]);\n    }));\n\n    function sendEmailTranscript(_x25, _x26) {\n      return _sendEmailTranscript.apply(this, arguments);\n    }\n\n    return sendEmailTranscript;\n  }(),\n  updateCustomAttributes: function () {\n    var _updateCustomAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(_ref34, _ref35) {\n      var commit, conversationId, customAttributes, response, custom_attributes;\n      return regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              commit = _ref34.commit;\n              conversationId = _ref35.conversationId, customAttributes = _ref35.customAttributes;\n              _context15.prev = 2;\n              _context15.next = 5;\n              return ConversationApi.updateCustomAttributes({\n                conversationId: conversationId,\n                customAttributes: customAttributes\n              });\n\n            case 5:\n              response = _context15.sent;\n              custom_attributes = response.data.custom_attributes;\n              commit(types.UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES, custom_attributes);\n              _context15.next = 12;\n              break;\n\n            case 10:\n              _context15.prev = 10;\n              _context15.t0 = _context15[\"catch\"](2);\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, null, [[2, 10]]);\n    }));\n\n    function updateCustomAttributes(_x27, _x28) {\n      return _updateCustomAttributes.apply(this, arguments);\n    }\n\n    return updateCustomAttributes;\n  }(),\n  setConversationFilters: function setConversationFilters(_ref36, data) {\n    var commit = _ref36.commit;\n    commit(types.SET_CONVERSATION_FILTERS, data);\n  },\n  clearConversationFilters: function clearConversationFilters(_ref37) {\n    var commit = _ref37.commit;\n    commit(types.CLEAR_CONVERSATION_FILTERS);\n  }\n}, messageReadActions);\n\nexport default actions;","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/actions.js"],"names":["Vue","types","ConversationApi","MessageApi","MESSAGE_STATUS","MESSAGE_TYPE","createPendingMessage","buildConversationList","isOnMentionsView","isOnUnattendedView","messageReadActions","AnalyticsHelper","ANALYTICS_EVENTS","actions","getConversation","conversationId","commit","show","response","UPDATE_CONVERSATION","data","SET_CONTACT_ITEM","meta","sender","fetchAllConversations","params","dispatch","SET_LIST_LOADING_STATUS","get","assigneeType","fetchFilteredConversations","filter","emptyAllConversations","EMPTY_ALL_CONVERSATION","clearSelectedState","CLEAR_CURRENT_CHAT_WINDOW","fetchPreviousMessages","getPreviousMessages","payload","SET_CONVERSATION_METADATA","id","SET_PREVIOUS_CONVERSATIONS","length","SET_ALL_MESSAGES_LOADED","setActiveChat","SET_CURRENT_CHAT_WINDOW","CLEAR_ALL_MESSAGES_LOADED","dataFetched","undefined","before","messages","set","assignAgent","agentId","setCurrentChatAssignee","assignee","ASSIGN_AGENT","assignTeam","teamId","team","setCurrentChatTeam","ASSIGN_TEAM","toggleStatus","status","snoozedUntil","updatedStatus","current_status","updatedSnoozedUntil","snoozed_until","CHANGE_CONVERSATION_STATUS","createPendingMessageAndSend","pendingMessage","sendMessageWithData","ADD_MESSAGE","PROGRESS","create","track","private","SENT_PRIVATE_NOTE","SENT_MESSAGE","SENT","errorMessage","error","FAILED","addMessage","message","message_type","INCOMING","SET_CONVERSATION_CAN_REPLY","conversation_id","canReply","updateMessage","deleteMessage","messageId","delete","Error","deleteLabels","addConversation","conversation","state","rootState","currentInbox","appliedFilters","inboxId","inbox_id","hasAppliedFilters","isMatchingInboxFilter","Number","ADD_CONVERSATION","addMentions","addUnattended","updateConversation","labels","setChatFilter","CHANGE_CHAT_STATUS_FILTER","updateAssignee","UPDATE_ASSIGNEE","updateConversationContact","UPDATE_CONVERSATION_CONTACT","setActiveInbox","SET_ACTIVE_INBOX","muteConversation","mute","MUTE_CONVERSATION","unmuteConversation","unmute","UNMUTE_CONVERSATION","sendEmailTranscript","_","email","updateCustomAttributes","customAttributes","custom_attributes","UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES","setConversationFilters","SET_CONVERSATION_FILTERS","clearConversationFilters","CLEAR_CONVERSATION_FILTERS"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport types from '../../mutation-types';\nimport ConversationApi from '../../../api/inbox/conversation';\nimport MessageApi from '../../../api/inbox/message';\nimport { MESSAGE_STATUS, MESSAGE_TYPE } from 'shared/constants/messages';\nimport { createPendingMessage } from 'dashboard/helper/commons';\nimport {\n  buildConversationList,\n  isOnMentionsView,\n  isOnUnattendedView,\n} from './helpers/actionHelpers';\nimport messageReadActions from './actions/messageReadActions';\nimport AnalyticsHelper, {\n  ANALYTICS_EVENTS,\n} from '../../../helper/AnalyticsHelper';\n// actions\nconst actions = {\n  getConversation: async ({ commit }, conversationId) => {\n    try {\n      const response = await ConversationApi.show(conversationId);\n      commit(types.UPDATE_CONVERSATION, response.data);\n      commit(`contacts/${types.SET_CONTACT_ITEM}`, response.data.meta.sender);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n\n  fetchAllConversations: async ({ commit, dispatch }, params) => {\n    commit(types.SET_LIST_LOADING_STATUS);\n    try {\n      const {\n        data: { data },\n      } = await ConversationApi.get(params);\n      buildConversationList(\n        { commit, dispatch },\n        params,\n        data,\n        params.assigneeType\n      );\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  fetchFilteredConversations: async ({ commit, dispatch }, params) => {\n    commit(types.SET_LIST_LOADING_STATUS);\n    try {\n      const { data } = await ConversationApi.filter(params);\n      buildConversationList(\n        { commit, dispatch },\n        params,\n        data,\n        'appliedFilters'\n      );\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  emptyAllConversations({ commit }) {\n    commit(types.EMPTY_ALL_CONVERSATION);\n  },\n\n  clearSelectedState({ commit }) {\n    commit(types.CLEAR_CURRENT_CHAT_WINDOW);\n  },\n\n  fetchPreviousMessages: async ({ commit }, data) => {\n    try {\n      const {\n        data: { meta, payload },\n      } = await MessageApi.getPreviousMessages(data);\n      commit(`conversationMetadata/${types.SET_CONVERSATION_METADATA}`, {\n        id: data.conversationId,\n        data: meta,\n      });\n      commit(types.SET_PREVIOUS_CONVERSATIONS, {\n        id: data.conversationId,\n        data: payload,\n      });\n      if (payload.length < 20) {\n        commit(types.SET_ALL_MESSAGES_LOADED);\n      }\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  async setActiveChat({ commit, dispatch }, data) {\n    commit(types.SET_CURRENT_CHAT_WINDOW, data);\n    commit(types.CLEAR_ALL_MESSAGES_LOADED);\n\n    if (data.dataFetched === undefined) {\n      try {\n        await dispatch('fetchPreviousMessages', {\n          conversationId: data.id,\n          before: data.messages[0].id,\n        });\n        Vue.set(data, 'dataFetched', true);\n      } catch (error) {\n        // Ignore error\n      }\n    }\n  },\n\n  assignAgent: async ({ dispatch }, { conversationId, agentId }) => {\n    try {\n      const response = await ConversationApi.assignAgent({\n        conversationId,\n        agentId,\n      });\n      dispatch('setCurrentChatAssignee', response.data);\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  setCurrentChatAssignee({ commit }, assignee) {\n    commit(types.ASSIGN_AGENT, assignee);\n  },\n\n  assignTeam: async ({ dispatch }, { conversationId, teamId }) => {\n    try {\n      const response = await ConversationApi.assignTeam({\n        conversationId,\n        teamId,\n      });\n      dispatch('setCurrentChatTeam', { team: response.data, conversationId });\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  setCurrentChatTeam({ commit }, { team, conversationId }) {\n    commit(types.ASSIGN_TEAM, { team, conversationId });\n  },\n\n  toggleStatus: async (\n    { commit },\n    { conversationId, status, snoozedUntil = null }\n  ) => {\n    try {\n      const {\n        data: {\n          payload: {\n            current_status: updatedStatus,\n            snoozed_until: updatedSnoozedUntil,\n          } = {},\n        } = {},\n      } = await ConversationApi.toggleStatus({\n        conversationId,\n        status,\n        snoozedUntil,\n      });\n      commit(types.CHANGE_CONVERSATION_STATUS, {\n        conversationId,\n        status: updatedStatus,\n        snoozedUntil: updatedSnoozedUntil,\n      });\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  createPendingMessageAndSend: async ({ dispatch }, data) => {\n    const pendingMessage = createPendingMessage(data);\n    dispatch('sendMessageWithData', pendingMessage);\n  },\n\n  sendMessageWithData: async ({ commit }, pendingMessage) => {\n    try {\n      commit(types.ADD_MESSAGE, {\n        ...pendingMessage,\n        status: MESSAGE_STATUS.PROGRESS,\n      });\n      const response = await MessageApi.create(pendingMessage);\n      AnalyticsHelper.track(\n        pendingMessage.private\n          ? ANALYTICS_EVENTS.SENT_PRIVATE_NOTE\n          : ANALYTICS_EVENTS.SENT_MESSAGE\n      );\n      commit(types.ADD_MESSAGE, {\n        ...response.data,\n        status: MESSAGE_STATUS.SENT,\n      });\n    } catch (error) {\n      const errorMessage = error.response\n        ? error.response.data.error\n        : undefined;\n      commit(types.ADD_MESSAGE, {\n        ...pendingMessage,\n        meta: {\n          error: errorMessage,\n        },\n        status: MESSAGE_STATUS.FAILED,\n      });\n      throw error;\n    }\n  },\n\n  addMessage({ commit }, message) {\n    commit(types.ADD_MESSAGE, message);\n    if (message.message_type === MESSAGE_TYPE.INCOMING) {\n      commit(types.SET_CONVERSATION_CAN_REPLY, {\n        conversationId: message.conversation_id,\n        canReply: true,\n      });\n    }\n  },\n\n  updateMessage({ commit }, message) {\n    commit(types.ADD_MESSAGE, message);\n  },\n\n  deleteMessage: async function deleteLabels(\n    { commit },\n    { conversationId, messageId }\n  ) {\n    try {\n      const response = await MessageApi.delete(conversationId, messageId);\n      const { data } = response;\n      // The delete message is actually deleting the content.\n      commit(types.ADD_MESSAGE, data);\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n\n  addConversation({ commit, state, dispatch, rootState }, conversation) {\n    const { currentInbox, appliedFilters } = state;\n    const {\n      inbox_id: inboxId,\n      meta: { sender },\n    } = conversation;\n\n    const hasAppliedFilters = !!appliedFilters.length;\n    const isMatchingInboxFilter =\n      !currentInbox || Number(currentInbox) === inboxId;\n    if (\n      !hasAppliedFilters &&\n      !isOnMentionsView(rootState) &&\n      !isOnUnattendedView(rootState) &&\n      isMatchingInboxFilter\n    ) {\n      commit(types.ADD_CONVERSATION, conversation);\n      dispatch('contacts/setContact', sender);\n    }\n  },\n\n  addMentions({ dispatch, rootState }, conversation) {\n    if (isOnMentionsView(rootState)) {\n      dispatch('updateConversation', conversation);\n    }\n  },\n\n  addUnattended({ dispatch, rootState }, conversation) {\n    if (isOnUnattendedView(rootState)) {\n      dispatch('updateConversation', conversation);\n    }\n  },\n\n  updateConversation({ commit, dispatch }, conversation) {\n    const {\n      meta: { sender },\n    } = conversation;\n    commit(types.UPDATE_CONVERSATION, conversation);\n\n    dispatch('conversationLabels/setConversationLabel', {\n      id: conversation.id,\n      data: conversation.labels,\n    });\n\n    dispatch('contacts/setContact', sender);\n  },\n\n  setChatFilter({ commit }, data) {\n    commit(types.CHANGE_CHAT_STATUS_FILTER, data);\n  },\n\n  updateAssignee({ commit }, data) {\n    commit(types.UPDATE_ASSIGNEE, data);\n  },\n\n  updateConversationContact({ commit }, data) {\n    if (data.id) {\n      commit(`contacts/${types.SET_CONTACT_ITEM}`, data);\n    }\n    commit(types.UPDATE_CONVERSATION_CONTACT, data);\n  },\n\n  setActiveInbox({ commit }, inboxId) {\n    commit(types.SET_ACTIVE_INBOX, inboxId);\n  },\n\n  muteConversation: async ({ commit }, conversationId) => {\n    try {\n      await ConversationApi.mute(conversationId);\n      commit(types.MUTE_CONVERSATION);\n    } catch (error) {\n      //\n    }\n  },\n\n  unmuteConversation: async ({ commit }, conversationId) => {\n    try {\n      await ConversationApi.unmute(conversationId);\n      commit(types.UNMUTE_CONVERSATION);\n    } catch (error) {\n      //\n    }\n  },\n\n  sendEmailTranscript: async (_, { conversationId, email }) => {\n    try {\n      await ConversationApi.sendEmailTranscript({ conversationId, email });\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n\n  updateCustomAttributes: async (\n    { commit },\n    { conversationId, customAttributes }\n  ) => {\n    try {\n      const response = await ConversationApi.updateCustomAttributes({\n        conversationId,\n        customAttributes,\n      });\n      const { custom_attributes } = response.data;\n      commit(types.UPDATE_CONVERSATION_CUSTOM_ATTRIBUTES, custom_attributes);\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  setConversationFilters({ commit }, data) {\n    commit(types.SET_CONVERSATION_FILTERS, data);\n  },\n\n  clearConversationFilters({ commit }) {\n    commit(types.CLEAR_CONVERSATION_FILTERS);\n  },\n  ...messageReadActions,\n};\n\nexport default actions;\n"]},"metadata":{},"sourceType":"module"}