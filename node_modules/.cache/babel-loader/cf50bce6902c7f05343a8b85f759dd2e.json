{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport AddAccountModal from '../dashboard/components/layout/sidebarComponents/AddAccountModal';\nimport LoadingState from './components/widgets/LoadingState.vue';\nimport NetworkNotification from './components/NetworkNotification';\nimport UpdateBanner from './components/app/UpdateBanner.vue';\nimport vueActionCable from './helper/actionCable';\nimport WootSnackbarBox from './components/SnackbarContainer';\nimport { registerSubscription, verifyServiceWorkerExistence } from './helper/pushHelper';\nexport default {\n  name: 'App',\n  components: {\n    AddAccountModal: AddAccountModal,\n    LoadingState: LoadingState,\n    NetworkNotification: NetworkNotification,\n    UpdateBanner: UpdateBanner,\n    WootSnackbarBox: WootSnackbarBox\n  },\n  data: function data() {\n    return {\n      showAddAccountModal: false,\n      latestChatwootVersion: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    getAccount: 'accounts/getAccount',\n    currentUser: 'getCurrentUser',\n    globalConfig: 'globalConfig/get',\n    authUIFlags: 'getAuthUIFlags',\n    currentAccountId: 'getCurrentAccountId'\n  })), {}, {\n    hasAccounts: function hasAccounts() {\n      var _ref = this.currentUser || {},\n          _ref$accounts = _ref.accounts,\n          accounts = _ref$accounts === void 0 ? [] : _ref$accounts;\n\n      return accounts.length > 0;\n    }\n  }),\n  watch: {\n    currentUser: function currentUser() {\n      if (!this.hasAccounts) {\n        this.showAddAccountModal = true;\n      }\n\n      verifyServiceWorkerExistence(function (registration) {\n        return registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            registerSubscription();\n          }\n        });\n      });\n    },\n    currentAccountId: function currentAccountId() {\n      if (this.currentAccountId) {\n        this.initializeAccount();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.setLocale(window.chatwootConfig.selectedLocale);\n  },\n  methods: {\n    setLocale: function setLocale(locale) {\n      this.$root.$i18n.locale = locale;\n    },\n    initializeAccount: function initializeAccount() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this$getAccount, locale, latestChatwootVersion, _ref2, pubsubToken;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$store.dispatch('accounts/get');\n\n              case 2:\n                _this.$store.dispatch('setActiveAccount', {\n                  accountId: _this.currentAccountId\n                });\n\n                _this$getAccount = _this.getAccount(_this.currentAccountId), locale = _this$getAccount.locale, latestChatwootVersion = _this$getAccount.latest_chatwoot_version;\n                _ref2 = _this.currentUser || {}, pubsubToken = _ref2.pubsub_token;\n\n                _this.setLocale(locale);\n\n                _this.latestChatwootVersion = latestChatwootVersion;\n                vueActionCable.init(pubsubToken);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,eAAA,MAAA,kEAAA;AACA,OAAA,YAAA,MAAA,uCAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AACA,OAAA,YAAA,MAAA,mCAAA;AACA,OAAA,cAAA,MAAA,sBAAA;AACA,OAAA,eAAA,MAAA,gCAAA;AACA,SACA,oBADA,EAEA,4BAFA,QAGA,qBAHA;AAKA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,eAAA,EAAA,eADA;AAEA,IAAA,YAAA,EAAA,YAFA;AAGA,IAAA,mBAAA,EAAA,mBAHA;AAIA,IAAA,YAAA,EAAA,YAJA;AAKA,IAAA,eAAA,EAAA;AALA,GAHA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,mBAAA,EAAA,KADA;AAEA,MAAA,qBAAA,EAAA;AAFA,KAAA;AAIA,GAhBA;AAkBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,UAAA,EAAA,qBADA;AAEA,IAAA,WAAA,EAAA,gBAFA;AAGA,IAAA,YAAA,EAAA,kBAHA;AAIA,IAAA,WAAA,EAAA,gBAJA;AAKA,IAAA,gBAAA,EAAA;AALA,GAAA,CADA;AAQA,IAAA,WARA,yBAQA;AACA,iBAAA,KAAA,WAAA,IAAA,EAAA;AAAA,+BAAA,QAAA;AAAA,UAAA,QAAA,8BAAA,EAAA;;AACA,aAAA,QAAA,CAAA,MAAA,GAAA,CAAA;AACA;AAXA,IAlBA;AAgCA,EAAA,KAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,CAAA,KAAA,WAAA,EAAA;AACA,aAAA,mBAAA,GAAA,IAAA;AACA;;AACA,MAAA,4BAAA,CAAA,UAAA,YAAA;AAAA,eACA,YAAA,CAAA,WAAA,CAAA,eAAA,GAAA,IAAA,CAAA,UAAA,YAAA,EAAA;AACA,cAAA,YAAA,EAAA;AACA,YAAA,oBAAA;AACA;AACA,SAJA,CADA;AAAA,OAAA,CAAA;AAOA,KAZA;AAaA,IAAA,gBAbA,8BAaA;AACA,UAAA,KAAA,gBAAA,EAAA;AACA,aAAA,iBAAA;AACA;AACA;AAjBA,GAhCA;AAmDA,EAAA,OAnDA,qBAmDA;AACA,SAAA,SAAA,CAAA,MAAA,CAAA,cAAA,CAAA,cAAA;AACA,GArDA;AAsDA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,MADA,EACA;AACA,WAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,cAAA,CADA;;AAAA;AAEA,gBAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA;AACA,kBAAA,SAAA,EAAA,KAAA,CAAA;AADA,iBAAA;;AAFA,mCAQA,KAAA,CAAA,UAAA,CAAA,KAAA,CAAA,gBAAA,CARA,EAMA,MANA,oBAMA,MANA,EAOA,qBAPA,oBAOA,uBAPA;AAAA,wBASA,KAAA,CAAA,WAAA,IAAA,EATA,EASA,WATA,SASA,YATA;;AAUA,gBAAA,KAAA,CAAA,SAAA,CAAA,MAAA;;AACA,gBAAA,KAAA,CAAA,qBAAA,GAAA,qBAAA;AACA,gBAAA,cAAA,CAAA,IAAA,CAAA,WAAA;;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAjBA;AAtDA,CAAA","sourcesContent":["<template>\n  <div v-if=\"!authUIFlags.isFetching\" id=\"app\" class=\"app-wrapper app-root\">\n    <update-banner :latest-chatwoot-version=\"latestChatwootVersion\" />\n    <transition name=\"fade\" mode=\"out-in\">\n      <router-view />\n    </transition>\n    <add-account-modal\n      :show=\"showAddAccountModal\"\n      :has-accounts=\"hasAccounts\"\n    />\n    <woot-snackbar-box />\n    <network-notification />\n  </div>\n  <loading-state v-else />\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport AddAccountModal from '../dashboard/components/layout/sidebarComponents/AddAccountModal';\nimport LoadingState from './components/widgets/LoadingState.vue';\nimport NetworkNotification from './components/NetworkNotification';\nimport UpdateBanner from './components/app/UpdateBanner.vue';\nimport vueActionCable from './helper/actionCable';\nimport WootSnackbarBox from './components/SnackbarContainer';\nimport {\n  registerSubscription,\n  verifyServiceWorkerExistence,\n} from './helper/pushHelper';\n\nexport default {\n  name: 'App',\n\n  components: {\n    AddAccountModal,\n    LoadingState,\n    NetworkNotification,\n    UpdateBanner,\n    WootSnackbarBox,\n  },\n\n  data() {\n    return {\n      showAddAccountModal: false,\n      latestChatwootVersion: null,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      getAccount: 'accounts/getAccount',\n      currentUser: 'getCurrentUser',\n      globalConfig: 'globalConfig/get',\n      authUIFlags: 'getAuthUIFlags',\n      currentAccountId: 'getCurrentAccountId',\n    }),\n    hasAccounts() {\n      const { accounts = [] } = this.currentUser || {};\n      return accounts.length > 0;\n    },\n  },\n\n  watch: {\n    currentUser() {\n      if (!this.hasAccounts) {\n        this.showAddAccountModal = true;\n      }\n      verifyServiceWorkerExistence(registration =>\n        registration.pushManager.getSubscription().then(subscription => {\n          if (subscription) {\n            registerSubscription();\n          }\n        })\n      );\n    },\n    currentAccountId() {\n      if (this.currentAccountId) {\n        this.initializeAccount();\n      }\n    },\n  },\n  mounted() {\n    this.setLocale(window.chatwootConfig.selectedLocale);\n  },\n  methods: {\n    setLocale(locale) {\n      this.$root.$i18n.locale = locale;\n    },\n    async initializeAccount() {\n      await this.$store.dispatch('accounts/get');\n      this.$store.dispatch('setActiveAccount', {\n        accountId: this.currentAccountId,\n      });\n      const {\n        locale,\n        latest_chatwoot_version: latestChatwootVersion,\n      } = this.getAccount(this.currentAccountId);\n      const { pubsub_token: pubsubToken } = this.currentUser || {};\n      this.setLocale(locale);\n      this.latestChatwootVersion = latestChatwootVersion;\n      vueActionCable.init(pubsubToken);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import './assets/scss/app';\n.update-banner {\n  height: var(--space-larger);\n  align-items: center;\n  font-size: var(--font-size-small) !important;\n}\n</style>\n\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>\n"],"sourceRoot":"app/javascript/dashboard"},"metadata":{},"sourceType":"module"}