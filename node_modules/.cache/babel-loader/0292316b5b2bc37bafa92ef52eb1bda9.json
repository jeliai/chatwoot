{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { __assign } from \"tslib\";\n/**\n * Merge legacy settings and initialized Integration option overrides.\n *\n * This will merge any options that were passed from initialization into\n * overrides for settings that are returned by the Segment CDN.\n *\n * i.e. this allows for passing options directly into destinations from\n * the Analytics constructor.\n */\n\nexport function mergedOptions(settings, options) {\n  var _a;\n\n  var optionOverrides = Object.entries((_a = options.integrations) !== null && _a !== void 0 ? _a : {}).reduce(function (overrides, _a) {\n    var _b, _c;\n\n    var integration = _a[0],\n        options = _a[1];\n\n    if (_typeof(options) === 'object') {\n      return __assign(__assign({}, overrides), (_b = {}, _b[integration] = options, _b));\n    }\n\n    return __assign(__assign({}, overrides), (_c = {}, _c[integration] = {}, _c));\n  }, {});\n  return Object.entries(settings.integrations).reduce(function (integrationSettings, _a) {\n    var _b;\n\n    var integration = _a[0],\n        settings = _a[1];\n    return __assign(__assign({}, integrationSettings), (_b = {}, _b[integration] = __assign(__assign({}, settings), optionOverrides[integration]), _b));\n  }, {});\n}","map":null,"metadata":{},"sourceType":"module"}