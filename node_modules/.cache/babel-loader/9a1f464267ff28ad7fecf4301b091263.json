{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { minValue } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport SettingsSection from '../../../../../components/SettingsSection';\nexport default {\n  components: {\n    SettingsSection: SettingsSection\n  },\n  mixins: [alertMixin, configMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedAgents: [],\n      isAgentListUpdating: false,\n      enableAutoAssignment: false,\n      maxAssignmentLimit: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    agentList: 'agents/getAgents'\n  })), {}, {\n    maxAssignmentLimitErrors: function maxAssignmentLimitErrors() {\n      if (this.$v.maxAssignmentLimit.$error) {\n        return this.$t('INBOX_MGMT.AUTO_ASSIGNMENT.MAX_ASSIGNMENT_LIMIT_RANGE_ERROR');\n      }\n\n      return '';\n    }\n  }),\n  watch: {\n    inbox: function inbox() {\n      this.setDefaults();\n    }\n  },\n  mounted: function mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults: function setDefaults() {\n      this.enableAutoAssignment = this.inbox.enable_auto_assignment;\n      this.maxAssignmentLimit = this.inbox.auto_assignment_config.max_assignment_limit || null;\n      this.fetchAttachedAgents();\n    },\n    fetchAttachedAgents: function fetchAttachedAgents() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response, inboxMembers;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('inboxMembers/get', {\n                  inboxId: _this.inbox.id\n                });\n\n              case 3:\n                response = _context.sent;\n                inboxMembers = response.data.payload;\n                _this.selectedAgents = inboxMembers;\n                _context.next = 10;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }))();\n    },\n    handleEnableAutoAssignment: function handleEnableAutoAssignment() {\n      this.updateInbox();\n    },\n    updateAgents: function updateAgents() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var agentList;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                agentList = _this2.selectedAgents.map(function (el) {\n                  return el.id;\n                });\n                _this2.isAgentListUpdating = true;\n                _context2.prev = 2;\n                _context2.next = 5;\n                return _this2.$store.dispatch('inboxMembers/create', {\n                  inboxId: _this2.inbox.id,\n                  agentList: agentList\n                });\n\n              case 5:\n                _this2.showAlert(_this2.$t('AGENT_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                _this2.showAlert(_this2.$t('AGENT_MGMT.EDIT.API.ERROR_MESSAGE'));\n\n              case 11:\n                _this2.isAgentListUpdating = false;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 8]]);\n      }))();\n    },\n    updateInbox: function updateInbox() {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var payload;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                payload = {\n                  id: _this3.inbox.id,\n                  formData: false,\n                  enable_auto_assignment: _this3.enableAutoAssignment,\n                  auto_assignment_config: {\n                    max_assignment_limit: _this3.maxAssignmentLimit\n                  }\n                };\n                _context3.next = 4;\n                return _this3.$store.dispatch('inboxes/updateInbox', payload);\n\n              case 4:\n                _this3.showAlert(_this3.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                _this3.showAlert(_this3.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }))();\n    }\n  },\n  validations: {\n    selectedAgents: {\n      isEmpty: function isEmpty() {\n        return !!this.selectedAgents.length;\n      }\n    },\n    maxAssignmentLimit: {\n      minValue: minValue(1)\n    }\n  }\n};","map":{"version":3,"sources":["CollaboratorsPage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <settings-section\n      :title=\"$t('INBOX_MGMT.SETTINGS_POPUP.INBOX_AGENTS')\"\n      :sub-title=\"$t('INBOX_MGMT.SETTINGS_POPUP.INBOX_AGENTS_SUB_TEXT')\"\n    >\n      <multiselect\n        v-model=\"selectedAgents\"\n        :options=\"agentList\"\n        track-by=\"id\"\n        label=\"name\"\n        :multiple=\"true\"\n        :close-on-select=\"false\"\n        :clear-on-select=\"false\"\n        :hide-selected=\"true\"\n        placeholder=\"Pick some\"\n        selected-label\n        :select-label=\"$t('FORMS.MULTISELECT.ENTER_TO_SELECT')\"\n        :deselect-label=\"$t('FORMS.MULTISELECT.ENTER_TO_REMOVE')\"\n        @select=\"$v.selectedAgents.$touch\"\n      />\n\n      <woot-submit-button\n        :button-text=\"$t('INBOX_MGMT.SETTINGS_POPUP.UPDATE')\"\n        :loading=\"isAgentListUpdating\"\n        @click=\"updateAgents\"\n      />\n    </settings-section>\n\n    <settings-section\n      :title=\"$t('INBOX_MGMT.SETTINGS_POPUP.AGENT_ASSIGNMENT')\"\n      :sub-title=\"$t('INBOX_MGMT.SETTINGS_POPUP.AGENT_ASSIGNMENT_SUB_TEXT')\"\n    >\n      <label class=\"medium-9 columns settings-item\">\n        <div class=\"enter-to-send--checkbox\">\n          <input\n            id=\"enableAutoAssignment\"\n            v-model=\"enableAutoAssignment\"\n            type=\"checkbox\"\n            @change=\"handleEnableAutoAssignment\"\n          />\n          <label for=\"enableAutoAssignment\">\n            {{ $t('INBOX_MGMT.SETTINGS_POPUP.AUTO_ASSIGNMENT') }}\n          </label>\n        </div>\n\n        <p class=\"help-text\">\n          {{ $t('INBOX_MGMT.SETTINGS_POPUP.AUTO_ASSIGNMENT_SUB_TEXT') }}\n        </p>\n      </label>\n\n      <div\n        v-if=\"enableAutoAssignment && isEnterprise\"\n        class=\"max-assignment-container\"\n      >\n        <woot-input\n          v-model.trim=\"maxAssignmentLimit\"\n          type=\"number\"\n          :class=\"{ error: $v.maxAssignmentLimit.$error }\"\n          :error=\"maxAssignmentLimitErrors\"\n          :label=\"$t('INBOX_MGMT.AUTO_ASSIGNMENT.MAX_ASSIGNMENT_LIMIT')\"\n          @blur=\"$v.maxAssignmentLimit.$touch\"\n        />\n\n        <p class=\"help-text\">\n          {{ $t('INBOX_MGMT.AUTO_ASSIGNMENT.MAX_ASSIGNMENT_LIMIT_SUB_TEXT') }}\n        </p>\n\n        <woot-submit-button\n          :button-text=\"$t('INBOX_MGMT.SETTINGS_POPUP.UPDATE')\"\n          :disabled=\"$v.maxAssignmentLimit.$invalid\"\n          @click=\"updateInbox\"\n        />\n      </div>\n    </settings-section>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { minValue } from 'vuelidate/lib/validators';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport SettingsSection from '../../../../../components/SettingsSection';\n\nexport default {\n  components: {\n    SettingsSection,\n  },\n  mixins: [alertMixin, configMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      selectedAgents: [],\n      isAgentListUpdating: false,\n      enableAutoAssignment: false,\n      maxAssignmentLimit: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      agentList: 'agents/getAgents',\n    }),\n    maxAssignmentLimitErrors() {\n      if (this.$v.maxAssignmentLimit.$error) {\n        return this.$t(\n          'INBOX_MGMT.AUTO_ASSIGNMENT.MAX_ASSIGNMENT_LIMIT_RANGE_ERROR'\n        );\n      }\n      return '';\n    },\n  },\n  watch: {\n    inbox() {\n      this.setDefaults();\n    },\n  },\n  mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults() {\n      this.enableAutoAssignment = this.inbox.enable_auto_assignment;\n      this.maxAssignmentLimit =\n        this.inbox.auto_assignment_config.max_assignment_limit || null;\n      this.fetchAttachedAgents();\n    },\n    async fetchAttachedAgents() {\n      try {\n        const response = await this.$store.dispatch('inboxMembers/get', {\n          inboxId: this.inbox.id,\n        });\n        const {\n          data: { payload: inboxMembers },\n        } = response;\n        this.selectedAgents = inboxMembers;\n      } catch (error) {\n        //  Handle error\n      }\n    },\n    handleEnableAutoAssignment() {\n      this.updateInbox();\n    },\n    async updateAgents() {\n      const agentList = this.selectedAgents.map(el => el.id);\n      this.isAgentListUpdating = true;\n      try {\n        await this.$store.dispatch('inboxMembers/create', {\n          inboxId: this.inbox.id,\n          agentList,\n        });\n        this.showAlert(this.$t('AGENT_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('AGENT_MGMT.EDIT.API.ERROR_MESSAGE'));\n      }\n      this.isAgentListUpdating = false;\n    },\n    async updateInbox() {\n      try {\n        const payload = {\n          id: this.inbox.id,\n          formData: false,\n          enable_auto_assignment: this.enableAutoAssignment,\n          auto_assignment_config: {\n            max_assignment_limit: this.maxAssignmentLimit,\n          },\n        };\n        await this.$store.dispatch('inboxes/updateInbox', payload);\n        this.showAlert(this.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n      }\n    },\n  },\n  validations: {\n    selectedAgents: {\n      isEmpty() {\n        return !!this.selectedAgents.length;\n      },\n    },\n    maxAssignmentLimit: {\n      minValue: minValue(1),\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '~dashboard/assets/scss/variables';\n@import '~dashboard/assets/scss/mixins';\n\n.max-assignment-container {\n  padding-top: var(--space-slab);\n  padding-bottom: var(--space-slab);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/settingsPage"},"metadata":{},"sourceType":"module"}