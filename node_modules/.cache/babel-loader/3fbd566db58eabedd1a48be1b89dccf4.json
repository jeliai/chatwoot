{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nimport { isValidURL } from '../helper/URLHelper';\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    accountId: 'getCurrentAccountId'\n  })), {}, {\n    attributes: function attributes() {\n      return this.$store.getters['attributes/getAttributesByModel'](this.attributeType);\n    },\n    customAttributes: function customAttributes() {\n      if (this.attributeType === 'conversation_attribute') return this.currentChat.custom_attributes || {};\n      return this.contact.custom_attributes || {};\n    },\n    contactIdentifier: function contactIdentifier() {\n      var _this$currentChat$met, _this$currentChat$met2;\n\n      return ((_this$currentChat$met = this.currentChat.meta) === null || _this$currentChat$met === void 0 ? void 0 : (_this$currentChat$met2 = _this$currentChat$met.sender) === null || _this$currentChat$met2 === void 0 ? void 0 : _this$currentChat$met2.id) || this.$route.params.contactId || this.contactId;\n    },\n    contact: function contact() {\n      return this.$store.getters['contacts/getContact'](this.contactIdentifier);\n    },\n    conversationId: function conversationId() {\n      return this.currentChat.id;\n    },\n    filteredAttributes: function filteredAttributes() {\n      var _this = this;\n\n      return Object.keys(this.customAttributes).map(function (key) {\n        var item = _this.attributes.find(function (attribute) {\n          return attribute.attribute_key === key;\n        });\n\n        if (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            value: _this.customAttributes[key]\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, item), {}, {\n          value: _this.customAttributes[key],\n          attribute_description: key,\n          attribute_display_name: key,\n          attribute_display_type: _this.attributeDisplayType(_this.customAttributes[key]),\n          attribute_key: key,\n          attribute_model: _this.attributeType,\n          id: Math.random()\n        });\n      });\n    }\n  }),\n  methods: {\n    isAttributeNumber: function isAttributeNumber(attributeValue) {\n      return Number.isInteger(Number(attributeValue)) && Number(attributeValue) > 0;\n    },\n    attributeDisplayType: function attributeDisplayType(attributeValue) {\n      if (this.isAttributeNumber(attributeValue)) {\n        return 'number';\n      }\n\n      if (isValidURL(attributeValue)) {\n        return 'link';\n      }\n\n      return 'text';\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/attributeMixin.js"],"names":["mapGetters","isValidURL","computed","currentChat","accountId","attributes","$store","getters","attributeType","customAttributes","custom_attributes","contact","contactIdentifier","meta","sender","id","$route","params","contactId","conversationId","filteredAttributes","Object","keys","map","key","item","find","attribute","attribute_key","value","attribute_description","attribute_display_name","attribute_display_type","attributeDisplayType","attribute_model","Math","random","methods","isAttributeNumber","attributeValue","Number","isInteger"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,eAAe;AACbC,EAAAA,QAAQ,kCACHF,UAAU,CAAC;AACZG,IAAAA,WAAW,EAAE,iBADD;AAEZC,IAAAA,SAAS,EAAE;AAFC,GAAD,CADP;AAKNC,IAAAA,UALM,wBAKO;AACX,aAAO,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,iCAApB,EACL,KAAKC,aADA,CAAP;AAGD,KATK;AAUNC,IAAAA,gBAVM,8BAUa;AACjB,UAAI,KAAKD,aAAL,KAAuB,wBAA3B,EACE,OAAO,KAAKL,WAAL,CAAiBO,iBAAjB,IAAsC,EAA7C;AACF,aAAO,KAAKC,OAAL,CAAaD,iBAAb,IAAkC,EAAzC;AACD,KAdK;AAeNE,IAAAA,iBAfM,+BAec;AAAA;;AAClB,aACE,+BAAKT,WAAL,CAAiBU,IAAjB,0GAAuBC,MAAvB,kFAA+BC,EAA/B,KACA,KAAKC,MAAL,CAAYC,MAAZ,CAAmBC,SADnB,IAEA,KAAKA,SAHP;AAKD,KArBK;AAsBNP,IAAAA,OAtBM,qBAsBI;AACR,aAAO,KAAKL,MAAL,CAAYC,OAAZ,CAAoB,qBAApB,EAA2C,KAAKK,iBAAhD,CAAP;AACD,KAxBK;AAyBNO,IAAAA,cAzBM,4BAyBW;AACf,aAAO,KAAKhB,WAAL,CAAiBY,EAAxB;AACD,KA3BK;AA6BNK,IAAAA,kBA7BM,gCA6Be;AAAA;;AACnB,aAAOC,MAAM,CAACC,IAAP,CAAY,KAAKb,gBAAjB,EAAmCc,GAAnC,CAAuC,UAAAC,GAAG,EAAI;AACnD,YAAMC,IAAI,GAAG,KAAI,CAACpB,UAAL,CAAgBqB,IAAhB,CACX,UAAAC,SAAS;AAAA,iBAAIA,SAAS,CAACC,aAAV,KAA4BJ,GAAhC;AAAA,SADE,CAAb;;AAGA,YAAIC,IAAJ,EAAU;AACR,iDACKA,IADL;AAEEI,YAAAA,KAAK,EAAE,KAAI,CAACpB,gBAAL,CAAsBe,GAAtB;AAFT;AAID;;AAED,+CACKC,IADL;AAEEI,UAAAA,KAAK,EAAE,KAAI,CAACpB,gBAAL,CAAsBe,GAAtB,CAFT;AAGEM,UAAAA,qBAAqB,EAAEN,GAHzB;AAIEO,UAAAA,sBAAsB,EAAEP,GAJ1B;AAKEQ,UAAAA,sBAAsB,EAAE,KAAI,CAACC,oBAAL,CACtB,KAAI,CAACxB,gBAAL,CAAsBe,GAAtB,CADsB,CAL1B;AAQEI,UAAAA,aAAa,EAAEJ,GARjB;AASEU,UAAAA,eAAe,EAAE,KAAI,CAAC1B,aATxB;AAUEO,UAAAA,EAAE,EAAEoB,IAAI,CAACC,MAAL;AAVN;AAYD,OAvBM,CAAP;AAwBD;AAtDK,IADK;AAyDbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,iBADO,6BACWC,cADX,EAC2B;AAChC,aACEC,MAAM,CAACC,SAAP,CAAiBD,MAAM,CAACD,cAAD,CAAvB,KAA4CC,MAAM,CAACD,cAAD,CAAN,GAAyB,CADvE;AAGD,KALM;AAMPN,IAAAA,oBANO,gCAMcM,cANd,EAM8B;AACnC,UAAI,KAAKD,iBAAL,CAAuBC,cAAvB,CAAJ,EAA4C;AAC1C,eAAO,QAAP;AACD;;AACD,UAAItC,UAAU,CAACsC,cAAD,CAAd,EAAgC;AAC9B,eAAO,MAAP;AACD;;AACD,aAAO,MAAP;AACD;AAdM;AAzDI,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\nimport { isValidURL } from '../helper/URLHelper';\nexport default {\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      accountId: 'getCurrentAccountId',\n    }),\n    attributes() {\n      return this.$store.getters['attributes/getAttributesByModel'](\n        this.attributeType\n      );\n    },\n    customAttributes() {\n      if (this.attributeType === 'conversation_attribute')\n        return this.currentChat.custom_attributes || {};\n      return this.contact.custom_attributes || {};\n    },\n    contactIdentifier() {\n      return (\n        this.currentChat.meta?.sender?.id ||\n        this.$route.params.contactId ||\n        this.contactId\n      );\n    },\n    contact() {\n      return this.$store.getters['contacts/getContact'](this.contactIdentifier);\n    },\n    conversationId() {\n      return this.currentChat.id;\n    },\n\n    filteredAttributes() {\n      return Object.keys(this.customAttributes).map(key => {\n        const item = this.attributes.find(\n          attribute => attribute.attribute_key === key\n        );\n        if (item) {\n          return {\n            ...item,\n            value: this.customAttributes[key],\n          };\n        }\n\n        return {\n          ...item,\n          value: this.customAttributes[key],\n          attribute_description: key,\n          attribute_display_name: key,\n          attribute_display_type: this.attributeDisplayType(\n            this.customAttributes[key]\n          ),\n          attribute_key: key,\n          attribute_model: this.attributeType,\n          id: Math.random(),\n        };\n      });\n    },\n  },\n  methods: {\n    isAttributeNumber(attributeValue) {\n      return (\n        Number.isInteger(Number(attributeValue)) && Number(attributeValue) > 0\n      );\n    },\n    attributeDisplayType(attributeValue) {\n      if (this.isAttributeNumber(attributeValue)) {\n        return 'number';\n      }\n      if (isValidURL(attributeValue)) {\n        return 'link';\n      }\n      return 'text';\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}