{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ChatList from '../../../components/ChatList';\nimport ConversationBox from '../../../components/widgets/conversation/ConversationBox';\nimport PopOverSearch from './search/PopOverSearch';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport wootConstants from 'dashboard/constants';\nexport default {\n  components: {\n    ChatList: ChatList,\n    ConversationBox: ConversationBox,\n    PopOverSearch: PopOverSearch\n  },\n  mixins: [uiSettingsMixin],\n  props: {\n    inboxId: {\n      type: [String, Number],\n      default: 0\n    },\n    conversationId: {\n      type: [String, Number],\n      default: 0\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    teamId: {\n      type: String,\n      default: ''\n    },\n    conversationType: {\n      type: String,\n      default: ''\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      showSearchModal: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    chatList: 'getAllConversations',\n    currentChat: 'getSelectedChat'\n  })), {}, {\n    showConversationList: function showConversationList() {\n      return this.isOnExpandedLayout ? !this.conversationId : true;\n    },\n    showMessageView: function showMessageView() {\n      return this.conversationId ? true : !this.isOnExpandedLayout;\n    },\n    isOnExpandedLayout: function isOnExpandedLayout() {\n      var CONDENSED = wootConstants.LAYOUT_TYPES.CONDENSED;\n      var _this$uiSettings$conv = this.uiSettings.conversation_display_type,\n          conversationDisplayType = _this$uiSettings$conv === void 0 ? CONDENSED : _this$uiSettings$conv;\n      return conversationDisplayType !== CONDENSED;\n    },\n    isContactPanelOpen: function isContactPanelOpen() {\n      if (this.currentChat.id) {\n        var isContactSidebarOpen = this.uiSettings.is_contact_sidebar_open;\n        return isContactSidebarOpen;\n      }\n\n      return false;\n    }\n  }),\n  watch: {\n    conversationId: function conversationId() {\n      this.fetchConversationIfUnavailable();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$store.dispatch('agents/get');\n    this.initialize();\n    this.$watch('$store.state.route', function () {\n      return _this.initialize();\n    });\n    this.$watch('chatList.length', function () {\n      _this.setActiveChat();\n    });\n  },\n  methods: {\n    onConversationLoad: function onConversationLoad() {\n      this.fetchConversationIfUnavailable();\n    },\n    initialize: function initialize() {\n      this.$store.dispatch('setActiveInbox', this.inboxId);\n      this.setActiveChat();\n    },\n    toggleConversationLayout: function toggleConversationLayout() {\n      var LAYOUT_TYPES = wootConstants.LAYOUT_TYPES;\n      var _this$uiSettings$conv2 = this.uiSettings.conversation_display_type,\n          conversationDisplayType = _this$uiSettings$conv2 === void 0 ? LAYOUT_TYPES.CONDENSED : _this$uiSettings$conv2;\n      var newViewType = conversationDisplayType === LAYOUT_TYPES.CONDENSED ? LAYOUT_TYPES.EXPANDED : LAYOUT_TYPES.CONDENSED;\n      this.updateUISettings({\n        conversation_display_type: newViewType\n      });\n    },\n    fetchConversationIfUnavailable: function fetchConversationIfUnavailable() {\n      if (!this.conversationId) {\n        return;\n      }\n\n      var chat = this.findConversation();\n\n      if (!chat) {\n        this.$store.dispatch('getConversation', this.conversationId);\n      }\n    },\n    findConversation: function findConversation() {\n      var conversationId = parseInt(this.conversationId, 10);\n\n      var _this$chatList$filter = this.chatList.filter(function (c) {\n        return c.id === conversationId;\n      }),\n          _this$chatList$filter2 = _slicedToArray(_this$chatList$filter, 1),\n          chat = _this$chatList$filter2[0];\n\n      return chat;\n    },\n    setActiveChat: function setActiveChat() {\n      if (this.conversationId) {\n        var selectedConversation = this.findConversation(); // If conversation doesn't exist or selected conversation is same as the active\n        // conversation, don't set active conversation.\n\n        if (!selectedConversation || selectedConversation.id === this.currentChat.id) {\n          return;\n        }\n\n        this.$store.dispatch('setActiveChat', selectedConversation).then(function () {\n          bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n        });\n      } else {\n        this.$store.dispatch('clearSelectedState');\n      }\n    },\n    onToggleContactPanel: function onToggleContactPanel() {\n      this.updateUISettings({\n        is_contact_sidebar_open: !this.isContactPanelOpen\n      });\n    },\n    onSearch: function onSearch() {\n      this.showSearchModal = true;\n    },\n    closeSearch: function closeSearch() {\n      this.showSearchModal = false;\n    }\n  }\n};","map":{"version":3,"sources":["ConversationView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <section class=\"conversation-page\">\n    <chat-list\n      :show-conversation-list=\"showConversationList\"\n      :conversation-inbox=\"inboxId\"\n      :label=\"label\"\n      :team-id=\"teamId\"\n      :conversation-type=\"conversationType\"\n      :folders-id=\"foldersId\"\n      :is-on-expanded-layout=\"isOnExpandedLayout\"\n      @conversation-load=\"onConversationLoad\"\n    >\n      <pop-over-search\n        :is-on-expanded-layout=\"isOnExpandedLayout\"\n        @toggle-conversation-layout=\"toggleConversationLayout\"\n      />\n    </chat-list>\n    <conversation-box\n      v-if=\"showMessageView\"\n      :inbox-id=\"inboxId\"\n      :is-contact-panel-open=\"isContactPanelOpen\"\n      :is-on-expanded-layout=\"isOnExpandedLayout\"\n      @contact-panel-toggle=\"onToggleContactPanel\"\n    />\n  </section>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport ChatList from '../../../components/ChatList';\nimport ConversationBox from '../../../components/widgets/conversation/ConversationBox';\nimport PopOverSearch from './search/PopOverSearch';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport wootConstants from 'dashboard/constants';\n\nexport default {\n  components: {\n    ChatList,\n    ConversationBox,\n    PopOverSearch,\n  },\n  mixins: [uiSettingsMixin],\n  props: {\n    inboxId: {\n      type: [String, Number],\n      default: 0,\n    },\n    conversationId: {\n      type: [String, Number],\n      default: 0,\n    },\n    label: {\n      type: String,\n      default: '',\n    },\n    teamId: {\n      type: String,\n      default: '',\n    },\n    conversationType: {\n      type: String,\n      default: '',\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      showSearchModal: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      chatList: 'getAllConversations',\n      currentChat: 'getSelectedChat',\n    }),\n    showConversationList() {\n      return this.isOnExpandedLayout ? !this.conversationId : true;\n    },\n    showMessageView() {\n      return this.conversationId ? true : !this.isOnExpandedLayout;\n    },\n    isOnExpandedLayout() {\n      const {\n        LAYOUT_TYPES: { CONDENSED },\n      } = wootConstants;\n      const {\n        conversation_display_type: conversationDisplayType = CONDENSED,\n      } = this.uiSettings;\n      return conversationDisplayType !== CONDENSED;\n    },\n    isContactPanelOpen() {\n      if (this.currentChat.id) {\n        const {\n          is_contact_sidebar_open: isContactSidebarOpen,\n        } = this.uiSettings;\n        return isContactSidebarOpen;\n      }\n      return false;\n    },\n  },\n  watch: {\n    conversationId() {\n      this.fetchConversationIfUnavailable();\n    },\n  },\n  mounted() {\n    this.$store.dispatch('agents/get');\n    this.initialize();\n    this.$watch('$store.state.route', () => this.initialize());\n    this.$watch('chatList.length', () => {\n      this.setActiveChat();\n    });\n  },\n\n  methods: {\n    onConversationLoad() {\n      this.fetchConversationIfUnavailable();\n    },\n    initialize() {\n      this.$store.dispatch('setActiveInbox', this.inboxId);\n      this.setActiveChat();\n    },\n    toggleConversationLayout() {\n      const { LAYOUT_TYPES } = wootConstants;\n      const {\n        conversation_display_type: conversationDisplayType = LAYOUT_TYPES.CONDENSED,\n      } = this.uiSettings;\n      const newViewType =\n        conversationDisplayType === LAYOUT_TYPES.CONDENSED\n          ? LAYOUT_TYPES.EXPANDED\n          : LAYOUT_TYPES.CONDENSED;\n      this.updateUISettings({ conversation_display_type: newViewType });\n    },\n    fetchConversationIfUnavailable() {\n      if (!this.conversationId) {\n        return;\n      }\n      const chat = this.findConversation();\n      if (!chat) {\n        this.$store.dispatch('getConversation', this.conversationId);\n      }\n    },\n    findConversation() {\n      const conversationId = parseInt(this.conversationId, 10);\n      const [chat] = this.chatList.filter(c => c.id === conversationId);\n      return chat;\n    },\n    setActiveChat() {\n      if (this.conversationId) {\n        const selectedConversation = this.findConversation();\n        // If conversation doesn't exist or selected conversation is same as the active\n        // conversation, don't set active conversation.\n        if (\n          !selectedConversation ||\n          selectedConversation.id === this.currentChat.id\n        ) {\n          return;\n        }\n        this.$store.dispatch('setActiveChat', selectedConversation).then(() => {\n          bus.$emit(BUS_EVENTS.SCROLL_TO_MESSAGE);\n        });\n      } else {\n        this.$store.dispatch('clearSelectedState');\n      }\n    },\n    onToggleContactPanel() {\n      this.updateUISettings({\n        is_contact_sidebar_open: !this.isContactPanelOpen,\n      });\n    },\n    onSearch() {\n      this.showSearchModal = true;\n    },\n    closeSearch() {\n      this.showSearchModal = false;\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.conversation-page {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/conversation"},"metadata":{},"sourceType":"module"}