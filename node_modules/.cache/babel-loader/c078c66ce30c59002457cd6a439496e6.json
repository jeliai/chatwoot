{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {},\n  props: {\n    action: {\n      type: Object,\n      default: function _default() {}\n    },\n    isSelected: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    widgetColor: 'appConfig/getWidgetColor'\n  })),\n  methods: {\n    onClick: function onClick() {\n      this.$emit('click', this.action);\n    }\n  }\n};","map":{"version":3,"sources":["ChatOption.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAaA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA,EADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA,KADA;AAKA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GAFA;AAYA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA;AADA,GAAA,CADA,CAZA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,KAAA,MAAA;AACA;AAHA;AAjBA,CAAA","sourcesContent":["<template>\n  <li\n    class=\"option\"\n    :class=\"{ 'is-selected': isSelected }\"\n    :style=\"{ borderColor: widgetColor }\"\n  >\n    <button class=\"option-button button\" @click=\"onClick\">\n      <span :style=\"{ color: widgetColor }\">{{ action.title }}</span>\n    </button>\n  </li>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nexport default {\n  components: {},\n  props: {\n    action: {\n      type: Object,\n      default: () => {},\n    },\n    isSelected: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n    }),\n  },\n  methods: {\n    onClick() {\n      this.$emit('click', this.action);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '~widget/assets/scss/variables.scss';\n\n.option {\n  border-radius: $space-jumbo;\n  border: 1px solid $color-woot;\n  float: left;\n  margin: $space-smaller;\n  max-width: 100%;\n\n  .option-button {\n    background: transparent;\n    border-radius: $space-large;\n    border: 0;\n    cursor: pointer;\n    height: auto;\n    line-height: 1.5;\n    min-height: $space-two * 2;\n    text-align: left;\n    white-space: normal;\n\n    span {\n      display: inline-block;\n      vertical-align: middle;\n    }\n\n    > .icon {\n      margin-right: $space-smaller;\n      font-size: $font-size-medium;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/shared/components"},"metadata":{},"sourceType":"module"}