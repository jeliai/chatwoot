{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Spinner from 'shared/components/Spinner';\nimport CsmlBotEditor from '../components/CSMLBotEditor.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    Spinner: Spinner,\n    CsmlBotEditor: CsmlBotEditor\n  },\n  mixins: [alertMixin],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'agentBots/uiFlags'\n  })), {}, {\n    agentBot: function agentBot() {\n      return this.$store.getters['agentBots/getBot'](this.$route.params.botId);\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('agentBots/show', this.$route.params.botId);\n  },\n  methods: {\n    updateBot: function updateBot(bot) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('agentBots/update', {\n                  id: bot.id,\n                  name: bot.name,\n                  description: bot.description,\n                  bot_type: 'csml',\n                  bot_config: {\n                    csml_content: bot.csmlContent\n                  }\n                });\n\n              case 3:\n                _this.showAlert(_this.$t('AGENT_BOTS.EDIT.API.SUCCESS_MESSAGE'));\n\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('AGENT_BOTS.CSML_BOT_EDITOR.BOT_CONFIG.API_ERROR'));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,OAAA,OAAA,MAAA,2BAAA;AACA,OAAA,aAAA,MAAA,iCAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AAEA,SAAA,UAAA,QAAA,MAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,OAAA,EAAA,OAAA;AAAA,IAAA,aAAA,EAAA;AAAA,GADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,QAAA,kCACA,UAAA,CAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA,CADA;AAEA,IAAA,QAFA,sBAEA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,kBAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA;AAJA,IAHA;AASA,EAAA,OATA,qBASA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,gBAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA;AACA,GAXA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,GADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA;AACA,kBAAA,EAAA,EAAA,GAAA,CAAA,EADA;AAEA,kBAAA,IAAA,EAAA,GAAA,CAAA,IAFA;AAGA,kBAAA,WAAA,EAAA,GAAA,CAAA,WAHA;AAIA,kBAAA,QAAA,EAAA,MAJA;AAKA,kBAAA,UAAA,EAAA;AAAA,oBAAA,YAAA,EAAA,GAAA,CAAA;AAAA;AALA,iBAAA,CAFA;;AAAA;AASA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,qCAAA,CAAA;;AATA;AAAA;;AAAA;AAAA;AAAA;;AAWA,gBAAA,KAAA,CAAA,SAAA,CACA,KAAA,CAAA,EAAA,CAAA,iDAAA,CADA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAhBA;AAZA,CAAA","sourcesContent":["<template>\n  <csml-bot-editor\n    v-if=\"agentBot.id\"\n    :agent-bot=\"agentBot\"\n    @submit=\"updateBot\"\n  />\n  <div v-else class=\"column content-box no-padding\">\n    <spinner />\n  </div>\n</template>\n<script>\nimport Spinner from 'shared/components/Spinner';\nimport CsmlBotEditor from '../components/CSMLBotEditor.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nimport { mapGetters } from 'vuex';\nexport default {\n  components: { Spinner, CsmlBotEditor },\n  mixins: [alertMixin],\n  computed: {\n    ...mapGetters({ uiFlags: 'agentBots/uiFlags' }),\n    agentBot() {\n      return this.$store.getters['agentBots/getBot'](this.$route.params.botId);\n    },\n  },\n  mounted() {\n    this.$store.dispatch('agentBots/show', this.$route.params.botId);\n  },\n  methods: {\n    async updateBot(bot) {\n      try {\n        await this.$store.dispatch('agentBots/update', {\n          id: bot.id,\n          name: bot.name,\n          description: bot.description,\n          bot_type: 'csml',\n          bot_config: { csml_content: bot.csmlContent },\n        });\n        this.showAlert(this.$t('AGENT_BOTS.EDIT.API.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(\n          this.$t('AGENT_BOTS.CSML_BOT_EDITOR.BOT_CONFIG.API_ERROR')\n        );\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/agentBots/csml"},"metadata":{},"sourceType":"module"}