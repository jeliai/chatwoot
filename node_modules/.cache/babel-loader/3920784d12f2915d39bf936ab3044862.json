{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * Thumbnail Component\n * Src - source for round image\n * Size - Size of the thumbnail\n * Badge - Chat source indication { fb / telegram }\n * Username - Username for avatar\n */\nimport Avatar from './Avatar';\nimport { removeEmoji } from 'shared/helpers/emoji';\nexport default {\n  components: {\n    Avatar: Avatar\n  },\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n    size: {\n      type: String,\n      default: '40px'\n    },\n    badge: {\n      type: String,\n      default: ''\n    },\n    username: {\n      type: String,\n      default: ''\n    },\n    status: {\n      type: String,\n      default: ''\n    },\n    hasBorder: {\n      type: Boolean,\n      default: false\n    },\n    shouldShowStatusAlways: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    variant: {\n      type: String,\n      default: 'circle'\n    }\n  },\n  data: function data() {\n    return {\n      hasImageLoaded: false,\n      imgError: false\n    };\n  },\n  computed: {\n    userNameWithoutEmoji: function userNameWithoutEmoji() {\n      return removeEmoji(this.username);\n    },\n    showStatusIndicator: function showStatusIndicator() {\n      if (this.shouldShowStatusAlways) return true;\n      return this.status === 'online' || this.status === 'busy';\n    },\n    avatarSize: function avatarSize() {\n      return Number(this.size.replace(/\\D+/g, ''));\n    },\n    badgeSrc: function badgeSrc() {\n      return {\n        instagram_direct_message: 'instagram-dm',\n        facebook: 'messenger',\n        'twitter-tweet': 'twitter-tweet',\n        'twitter-dm': 'twitter-dm',\n        whatsapp: 'whatsapp',\n        sms: 'sms',\n        'Channel::Line': 'line',\n        'Channel::Telegram': 'telegram',\n        'Channel::WebWidget': ''\n      }[this.badge];\n    },\n    badgeStyle: function badgeStyle() {\n      var size = Math.floor(this.avatarSize / 3);\n      var badgeSize = \"\".concat(size + 2, \"px\");\n      var borderRadius = \"\".concat(size / 2, \"px\");\n      return {\n        width: badgeSize,\n        height: badgeSize,\n        borderRadius: borderRadius\n      };\n    },\n    statusStyle: function statusStyle() {\n      var statusSize = \"\".concat(this.avatarSize / 4, \"px\");\n      return {\n        width: statusSize,\n        height: statusSize\n      };\n    },\n    thumbnailClass: function thumbnailClass() {\n      var classname = this.hasBorder ? 'border' : '';\n      var variant = this.variant === 'circle' ? 'thumbnail-rounded' : 'thumbnail-square';\n      return \"user-thumbnail \".concat(classname, \" \").concat(variant);\n    },\n    thumbnailBoxClass: function thumbnailBoxClass() {\n      var boxClass = this.variant === 'circle' ? 'is-rounded' : '';\n      return \"user-thumbnail-box \".concat(boxClass);\n    },\n    shouldShowImage: function shouldShowImage() {\n      if (!this.src) {\n        return false;\n      }\n\n      if (this.hasImageLoaded) {\n        return !this.imgError;\n      }\n\n      return false;\n    }\n  },\n  watch: {\n    src: function src(value, oldValue) {\n      if (value !== oldValue && this.imgError) {\n        this.imgError = false;\n      }\n    }\n  },\n  methods: {\n    onImgError: function onImgError() {\n      this.imgError = true;\n    },\n    onImgLoad: function onImgLoad() {\n      this.hasImageLoaded = true;\n    }\n  }\n};","map":{"version":3,"sources":["Thumbnail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    :class=\"thumbnailBoxClass\"\n    :style=\"{ height: size, width: size }\"\n    :title=\"title\"\n  >\n    <!-- Using v-show instead of v-if to avoid flickering as v-if removes dom elements.  -->\n    <img\n      v-show=\"shouldShowImage\"\n      :src=\"src\"\n      :class=\"thumbnailClass\"\n      @load=\"onImgLoad\"\n      @error=\"onImgError\"\n    />\n    <Avatar\n      v-show=\"!shouldShowImage\"\n      :username=\"userNameWithoutEmoji\"\n      :class=\"thumbnailClass\"\n      :size=\"avatarSize\"\n    />\n    <img\n      v-if=\"badgeSrc\"\n      class=\"source-badge\"\n      :style=\"badgeStyle\"\n      :src=\"`/integrations/channels/badges/${badgeSrc}.png`\"\n      alt=\"Badge\"\n    />\n    <div\n      v-if=\"showStatusIndicator\"\n      :class=\"`source-badge user-online-status user-online-status--${status}`\"\n      :style=\"statusStyle\"\n    />\n  </div>\n</template>\n<script>\n/**\n * Thumbnail Component\n * Src - source for round image\n * Size - Size of the thumbnail\n * Badge - Chat source indication { fb / telegram }\n * Username - Username for avatar\n */\nimport Avatar from './Avatar';\nimport { removeEmoji } from 'shared/helpers/emoji';\n\nexport default {\n  components: {\n    Avatar,\n  },\n  props: {\n    src: {\n      type: String,\n      default: '',\n    },\n    size: {\n      type: String,\n      default: '40px',\n    },\n    badge: {\n      type: String,\n      default: '',\n    },\n    username: {\n      type: String,\n      default: '',\n    },\n    status: {\n      type: String,\n      default: '',\n    },\n    hasBorder: {\n      type: Boolean,\n      default: false,\n    },\n    shouldShowStatusAlways: {\n      type: Boolean,\n      default: false,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    variant: {\n      type: String,\n      default: 'circle',\n    },\n  },\n  data() {\n    return {\n      hasImageLoaded: false,\n      imgError: false,\n    };\n  },\n  computed: {\n    userNameWithoutEmoji() {\n      return removeEmoji(this.username);\n    },\n    showStatusIndicator() {\n      if (this.shouldShowStatusAlways) return true;\n      return this.status === 'online' || this.status === 'busy';\n    },\n    avatarSize() {\n      return Number(this.size.replace(/\\D+/g, ''));\n    },\n    badgeSrc() {\n      return {\n        instagram_direct_message: 'instagram-dm',\n        facebook: 'messenger',\n        'twitter-tweet': 'twitter-tweet',\n        'twitter-dm': 'twitter-dm',\n        whatsapp: 'whatsapp',\n        sms: 'sms',\n        'Channel::Line': 'line',\n        'Channel::Telegram': 'telegram',\n        'Channel::WebWidget': '',\n      }[this.badge];\n    },\n    badgeStyle() {\n      const size = Math.floor(this.avatarSize / 3);\n      const badgeSize = `${size + 2}px`;\n      const borderRadius = `${size / 2}px`;\n      return { width: badgeSize, height: badgeSize, borderRadius };\n    },\n    statusStyle() {\n      const statusSize = `${this.avatarSize / 4}px`;\n      return { width: statusSize, height: statusSize };\n    },\n    thumbnailClass() {\n      const classname = this.hasBorder ? 'border' : '';\n      const variant =\n        this.variant === 'circle' ? 'thumbnail-rounded' : 'thumbnail-square';\n      return `user-thumbnail ${classname} ${variant}`;\n    },\n    thumbnailBoxClass() {\n      const boxClass = this.variant === 'circle' ? 'is-rounded' : '';\n      return `user-thumbnail-box ${boxClass}`;\n    },\n    shouldShowImage() {\n      if (!this.src) {\n        return false;\n      }\n      if (this.hasImageLoaded) {\n        return !this.imgError;\n      }\n      return false;\n    },\n  },\n  watch: {\n    src(value, oldValue) {\n      if (value !== oldValue && this.imgError) {\n        this.imgError = false;\n      }\n    },\n  },\n  methods: {\n    onImgError() {\n      this.imgError = true;\n    },\n    onImgLoad() {\n      this.hasImageLoaded = true;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.user-thumbnail-box {\n  flex: 0 0 auto;\n  max-width: 100%;\n  position: relative;\n\n  &.is-rounded {\n    border-radius: 50%;\n  }\n\n  .user-thumbnail {\n    border-radius: 50%;\n    &.thumbnail-square {\n      border-radius: var(--border-radius-large);\n    }\n    height: 100%;\n    width: 100%;\n    box-sizing: border-box;\n    object-fit: cover;\n    vertical-align: initial;\n\n    &.border {\n      border: 1px solid white;\n    }\n  }\n\n  .source-badge {\n    background: white;\n    border-radius: var(--border-radius-small);\n    bottom: var(--space-minus-micro);\n    box-shadow: var(--shadow-small);\n    height: var(--space-slab);\n    padding: var(--space-micro);\n    position: absolute;\n    right: 0;\n    width: var(--space-slab);\n  }\n\n  .user-online-status {\n    border-radius: 50%;\n    bottom: var(--space-micro);\n\n    &:after {\n      content: ' ';\n    }\n  }\n\n  .user-online-status--online {\n    background: var(--g-400);\n  }\n\n  .user-online-status--busy {\n    background: var(--y-500);\n  }\n\n  .user-online-status--offline {\n    background: var(--s-500);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets"},"metadata":{},"sourceType":"module"}