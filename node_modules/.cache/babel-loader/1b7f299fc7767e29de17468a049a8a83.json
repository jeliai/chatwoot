{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { decorateProperty as o } from \"./base.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nfunction i(i, n) {\n  return o({\n    descriptor: function descriptor(o) {\n      var t = {\n        get: function get() {\n          var o, n;\n          return null !== (n = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(i)) && void 0 !== n ? n : null;\n        },\n        enumerable: !0,\n        configurable: !0\n      };\n\n      if (n) {\n        var _n = \"symbol\" == _typeof(o) ? Symbol() : \"__\" + o;\n\n        t.get = function () {\n          var o, t;\n          return void 0 === this[_n] && (this[_n] = null !== (t = null === (o = this.renderRoot) || void 0 === o ? void 0 : o.querySelector(i)) && void 0 !== t ? t : null), this[_n];\n        };\n      }\n\n      return t;\n    }\n  });\n}\n\nexport { i as query };","map":null,"metadata":{},"sourceType":"module"}