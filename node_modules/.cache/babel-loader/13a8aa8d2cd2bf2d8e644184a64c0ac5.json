{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    accountLabels: 'labels/getLabels'\n  })), {}, {\n    savedLabels: function savedLabels() {\n      return this.$store.getters['conversationLabels/getConversationLabels'](this.conversationId);\n    },\n    activeLabels: function activeLabels() {\n      var _this = this;\n\n      return this.accountLabels.filter(function (_ref) {\n        var title = _ref.title;\n        return _this.savedLabels.includes(title);\n      });\n    },\n    inactiveLabels: function inactiveLabels() {\n      var _this2 = this;\n\n      return this.accountLabels.filter(function (_ref2) {\n        var title = _ref2.title;\n        return !_this2.savedLabels.includes(title);\n      });\n    }\n  }),\n  methods: {\n    addLabelToConversation: function addLabelToConversation(value) {\n      var result = this.activeLabels.map(function (item) {\n        return item.title;\n      });\n      result.push(value.title);\n      this.onUpdateLabels(result);\n    },\n    removeLabelFromConversation: function removeLabelFromConversation(value) {\n      var result = this.activeLabels.map(function (label) {\n        return label.title;\n      }).filter(function (label) {\n        return label !== value;\n      });\n      this.onUpdateLabels(result);\n    },\n    onUpdateLabels: function onUpdateLabels(selectedLabels) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this3.$store.dispatch('conversationLabels/update', {\n                  conversationId: _this3.conversationId,\n                  labels: selectedLabels\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/conversation/labelMixin.js"],"names":["mapGetters","computed","accountLabels","savedLabels","$store","getters","conversationId","activeLabels","filter","title","includes","inactiveLabels","methods","addLabelToConversation","value","result","map","item","push","onUpdateLabels","removeLabelFromConversation","label","selectedLabels","dispatch","labels"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACbC,EAAAA,QAAQ,kCACHD,UAAU,CAAC;AAAEE,IAAAA,aAAa,EAAE;AAAjB,GAAD,CADP;AAENC,IAAAA,WAFM,yBAEQ;AACZ,aAAO,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,0CAApB,EACL,KAAKC,cADA,CAAP;AAGD,KANK;AAONC,IAAAA,YAPM,0BAOS;AAAA;;AACb,aAAO,KAAKL,aAAL,CAAmBM,MAAnB,CAA0B;AAAA,YAAGC,KAAH,QAAGA,KAAH;AAAA,eAC/B,KAAI,CAACN,WAAL,CAAiBO,QAAjB,CAA0BD,KAA1B,CAD+B;AAAA,OAA1B,CAAP;AAGD,KAXK;AAYNE,IAAAA,cAZM,4BAYW;AAAA;;AACf,aAAO,KAAKT,aAAL,CAAmBM,MAAnB,CACL;AAAA,YAAGC,KAAH,SAAGA,KAAH;AAAA,eAAe,CAAC,MAAI,CAACN,WAAL,CAAiBO,QAAjB,CAA0BD,KAA1B,CAAhB;AAAA,OADK,CAAP;AAGD;AAhBK,IADK;AAmBbG,EAAAA,OAAO,EAAE;AACPC,IAAAA,sBADO,kCACgBC,KADhB,EACuB;AAC5B,UAAMC,MAAM,GAAG,KAAKR,YAAL,CAAkBS,GAAlB,CAAsB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACR,KAAT;AAAA,OAA1B,CAAf;AACAM,MAAAA,MAAM,CAACG,IAAP,CAAYJ,KAAK,CAACL,KAAlB;AACA,WAAKU,cAAL,CAAoBJ,MAApB;AACD,KALM;AAMPK,IAAAA,2BANO,uCAMqBN,KANrB,EAM4B;AACjC,UAAMC,MAAM,GAAG,KAAKR,YAAL,CACZS,GADY,CACR,UAAAK,KAAK;AAAA,eAAIA,KAAK,CAACZ,KAAV;AAAA,OADG,EAEZD,MAFY,CAEL,UAAAa,KAAK;AAAA,eAAIA,KAAK,KAAKP,KAAd;AAAA,OAFA,CAAf;AAGA,WAAKK,cAAL,CAAoBJ,MAApB;AACD,KAXM;AAYDI,IAAAA,cAZC,0BAYcG,cAZd,EAY8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnC,gBAAA,MAAI,CAAClB,MAAL,CAAYmB,QAAZ,CAAqB,2BAArB,EAAkD;AAChDjB,kBAAAA,cAAc,EAAE,MAAI,CAACA,cAD2B;AAEhDkB,kBAAAA,MAAM,EAAEF;AAFwC,iBAAlD;;AADmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpC;AAjBM;AAnBI,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\n\nexport default {\n  computed: {\n    ...mapGetters({ accountLabels: 'labels/getLabels' }),\n    savedLabels() {\n      return this.$store.getters['conversationLabels/getConversationLabels'](\n        this.conversationId\n      );\n    },\n    activeLabels() {\n      return this.accountLabels.filter(({ title }) =>\n        this.savedLabels.includes(title)\n      );\n    },\n    inactiveLabels() {\n      return this.accountLabels.filter(\n        ({ title }) => !this.savedLabels.includes(title)\n      );\n    },\n  },\n  methods: {\n    addLabelToConversation(value) {\n      const result = this.activeLabels.map(item => item.title);\n      result.push(value.title);\n      this.onUpdateLabels(result);\n    },\n    removeLabelFromConversation(value) {\n      const result = this.activeLabels\n        .map(label => label.title)\n        .filter(label => label !== value);\n      this.onUpdateLabels(result);\n    },\n    async onUpdateLabels(selectedLabels) {\n      this.$store.dispatch('conversationLabels/update', {\n        conversationId: this.conversationId,\n        labels: selectedLabels,\n      });\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}