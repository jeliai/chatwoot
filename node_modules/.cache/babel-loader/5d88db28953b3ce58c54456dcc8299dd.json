{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport WootDateRangePicker from 'dashboard/components/ui/DateRangePicker.vue';\nvar CUSTOM_DATE_RANGE_ID = 5;\nimport subDays from 'date-fns/subDays';\nimport startOfDay from 'date-fns/startOfDay';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport { GROUP_BY_FILTER } from '../constants';\nimport endOfDay from 'date-fns/endOfDay';\nexport default {\n  components: {\n    WootDateRangePicker: WootDateRangePicker\n  },\n  props: {\n    filterItemsList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    agentsFilterItemsList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    selectedGroupByFilter: {\n      type: Object,\n      default: function _default() {}\n    },\n    groupByFilter: {\n      type: Boolean,\n      default: false\n    },\n    agentsFilter: {\n      type: Boolean,\n      default: false\n    },\n    showBusinessHoursSwitch: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      currentDateRangeSelection: this.$t('REPORT.DATE_RANGE')[0],\n      dateRange: this.$t('REPORT.DATE_RANGE'),\n      customDateRange: [new Date(), new Date()],\n      currentSelectedFilter: null,\n      selectedAgents: [],\n      businessHoursSelected: false\n    };\n  },\n  computed: {\n    isDateRangeSelected: function isDateRangeSelected() {\n      return this.currentDateRangeSelection.id === CUSTOM_DATE_RANGE_ID;\n    },\n    to: function to() {\n      if (this.isDateRangeSelected) {\n        return this.toCustomDate(this.customDateRange[1]);\n      }\n\n      return this.toCustomDate(new Date());\n    },\n    from: function from() {\n      if (this.isDateRangeSelected) {\n        return this.fromCustomDate(this.customDateRange[0]);\n      }\n\n      var dateRange = {\n        0: 6,\n        1: 29,\n        2: 89,\n        3: 179,\n        4: 364\n      };\n      var diff = dateRange[this.currentDateRangeSelection.id];\n      var fromDate = subDays(new Date(), diff);\n      return this.fromCustomDate(fromDate);\n    },\n    groupBy: function groupBy() {\n      if (this.isDateRangeSelected) {\n        return GROUP_BY_FILTER[4].period;\n      }\n\n      var groupRange = {\n        0: GROUP_BY_FILTER[1].period,\n        1: GROUP_BY_FILTER[2].period,\n        2: GROUP_BY_FILTER[3].period,\n        3: GROUP_BY_FILTER[3].period,\n        4: GROUP_BY_FILTER[3].period\n      };\n      return groupRange[this.currentDateRangeSelection.id];\n    },\n    notLast7Days: function notLast7Days() {\n      return this.groupBy !== GROUP_BY_FILTER[1].period;\n    }\n  },\n  watch: {\n    filterItemsList: function filterItemsList() {\n      this.currentSelectedFilter = this.selectedGroupByFilter;\n    },\n    businessHoursSelected: function businessHoursSelected() {\n      this.$emit('business-hours-toggle', this.businessHoursSelected);\n    }\n  },\n  mounted: function mounted() {\n    this.onDateRangeChange();\n  },\n  methods: {\n    onDateRangeChange: function onDateRangeChange() {\n      this.$emit('date-range-change', {\n        from: this.from,\n        to: this.to,\n        groupBy: this.groupBy\n      });\n    },\n    fromCustomDate: function fromCustomDate(date) {\n      return getUnixTime(startOfDay(date));\n    },\n    toCustomDate: function toCustomDate(date) {\n      return getUnixTime(endOfDay(date));\n    },\n    changeDateSelection: function changeDateSelection(selectedRange) {\n      this.currentDateRangeSelection = selectedRange;\n      this.onDateRangeChange();\n    },\n    onChange: function onChange(value) {\n      this.customDateRange = value;\n      this.onDateRangeChange();\n    },\n    changeFilterSelection: function changeFilterSelection() {\n      this.$emit('filter-change', this.currentSelectedFilter);\n    },\n    handleAgentsFilterSelection: function handleAgentsFilterSelection() {\n      this.$emit('agents-filter-change', this.selectedAgents);\n    }\n  }\n};","map":{"version":3,"sources":["FilterSelector.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"flex-container flex-dir-column medium-flex-dir-row\">\n    <div class=\"small-12 medium-3 pull-right\">\n      <multiselect\n        v-model=\"currentDateRangeSelection\"\n        track-by=\"name\"\n        label=\"name\"\n        :placeholder=\"$t('FORMS.MULTISELECT.SELECT_ONE')\"\n        selected-label\n        :select-label=\"$t('FORMS.MULTISELECT.ENTER_TO_SELECT')\"\n        deselect-label=\"\"\n        :options=\"dateRange\"\n        :searchable=\"false\"\n        :allow-empty=\"false\"\n        @select=\"changeDateSelection\"\n      />\n    </div>\n    <woot-date-range-picker\n      v-if=\"isDateRangeSelected\"\n      show-range\n      :value=\"customDateRange\"\n      :confirm-text=\"$t('REPORT.CUSTOM_DATE_RANGE.CONFIRM')\"\n      :placeholder=\"$t('REPORT.CUSTOM_DATE_RANGE.PLACEHOLDER')\"\n      @change=\"onChange\"\n    />\n    <div\n      v-if=\"notLast7Days && groupByFilter\"\n      class=\"small-12 medium-3 pull-right margin-left-small\"\n    >\n      <p aria-hidden=\"true\" class=\"hide\">\n        {{ $t('REPORT.GROUP_BY_FILTER_DROPDOWN_LABEL') }}\n      </p>\n      <multiselect\n        v-model=\"currentSelectedFilter\"\n        track-by=\"id\"\n        label=\"groupBy\"\n        :placeholder=\"$t('REPORT.GROUP_BY_FILTER_DROPDOWN_LABEL')\"\n        :options=\"filterItemsList\"\n        :allow-empty=\"false\"\n        :show-labels=\"false\"\n        @input=\"changeFilterSelection\"\n      />\n    </div>\n    <div\n      v-if=\"agentsFilter\"\n      class=\"small-12 medium-3 pull-right margin-left-small\"\n    >\n      <multiselect\n        v-model=\"selectedAgents\"\n        :options=\"agentsFilterItemsList\"\n        track-by=\"id\"\n        label=\"name\"\n        :multiple=\"true\"\n        :close-on-select=\"false\"\n        :clear-on-select=\"false\"\n        :hide-selected=\"true\"\n        :placeholder=\"$t('CSAT_REPORTS.FILTERS.AGENTS.PLACEHOLDER')\"\n        selected-label\n        :select-label=\"$t('FORMS.MULTISELECT.ENTER_TO_SELECT')\"\n        :deselect-label=\"$t('FORMS.MULTISELECT.ENTER_TO_REMOVE')\"\n        @input=\"handleAgentsFilterSelection\"\n      />\n    </div>\n    <div\n      v-if=\"showBusinessHoursSwitch\"\n      class=\"small-12 medium-3 business-hours\"\n    >\n      <span class=\"business-hours-text margin-right-small\">\n        {{ $t('REPORT.BUSINESS_HOURS') }}\n      </span>\n      <span>\n        <woot-switch v-model=\"businessHoursSelected\" />\n      </span>\n    </div>\n  </div>\n</template>\n<script>\nimport WootDateRangePicker from 'dashboard/components/ui/DateRangePicker.vue';\nconst CUSTOM_DATE_RANGE_ID = 5;\nimport subDays from 'date-fns/subDays';\nimport startOfDay from 'date-fns/startOfDay';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport { GROUP_BY_FILTER } from '../constants';\nimport endOfDay from 'date-fns/endOfDay';\n\nexport default {\n  components: {\n    WootDateRangePicker,\n  },\n  props: {\n    filterItemsList: {\n      type: Array,\n      default: () => [],\n    },\n    agentsFilterItemsList: {\n      type: Array,\n      default: () => [],\n    },\n    selectedGroupByFilter: {\n      type: Object,\n      default: () => {},\n    },\n    groupByFilter: {\n      type: Boolean,\n      default: false,\n    },\n    agentsFilter: {\n      type: Boolean,\n      default: false,\n    },\n    showBusinessHoursSwitch: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return {\n      currentDateRangeSelection: this.$t('REPORT.DATE_RANGE')[0],\n      dateRange: this.$t('REPORT.DATE_RANGE'),\n      customDateRange: [new Date(), new Date()],\n      currentSelectedFilter: null,\n      selectedAgents: [],\n      businessHoursSelected: false,\n    };\n  },\n  computed: {\n    isDateRangeSelected() {\n      return this.currentDateRangeSelection.id === CUSTOM_DATE_RANGE_ID;\n    },\n    to() {\n      if (this.isDateRangeSelected) {\n        return this.toCustomDate(this.customDateRange[1]);\n      }\n      return this.toCustomDate(new Date());\n    },\n    from() {\n      if (this.isDateRangeSelected) {\n        return this.fromCustomDate(this.customDateRange[0]);\n      }\n      const dateRange = {\n        0: 6,\n        1: 29,\n        2: 89,\n        3: 179,\n        4: 364,\n      };\n      const diff = dateRange[this.currentDateRangeSelection.id];\n      const fromDate = subDays(new Date(), diff);\n      return this.fromCustomDate(fromDate);\n    },\n    groupBy() {\n      if (this.isDateRangeSelected) {\n        return GROUP_BY_FILTER[4].period;\n      }\n      const groupRange = {\n        0: GROUP_BY_FILTER[1].period,\n        1: GROUP_BY_FILTER[2].period,\n        2: GROUP_BY_FILTER[3].period,\n        3: GROUP_BY_FILTER[3].period,\n        4: GROUP_BY_FILTER[3].period,\n      };\n      return groupRange[this.currentDateRangeSelection.id];\n    },\n    notLast7Days() {\n      return this.groupBy !== GROUP_BY_FILTER[1].period;\n    },\n  },\n  watch: {\n    filterItemsList() {\n      this.currentSelectedFilter = this.selectedGroupByFilter;\n    },\n    businessHoursSelected() {\n      this.$emit('business-hours-toggle', this.businessHoursSelected);\n    },\n  },\n  mounted() {\n    this.onDateRangeChange();\n  },\n  methods: {\n    onDateRangeChange() {\n      this.$emit('date-range-change', {\n        from: this.from,\n        to: this.to,\n        groupBy: this.groupBy,\n      });\n    },\n    fromCustomDate(date) {\n      return getUnixTime(startOfDay(date));\n    },\n    toCustomDate(date) {\n      return getUnixTime(endOfDay(date));\n    },\n    changeDateSelection(selectedRange) {\n      this.currentDateRangeSelection = selectedRange;\n      this.onDateRangeChange();\n    },\n    onChange(value) {\n      this.customDateRange = value;\n      this.onDateRangeChange();\n    },\n    changeFilterSelection() {\n      this.$emit('filter-change', this.currentSelectedFilter);\n    },\n    handleAgentsFilterSelection() {\n      this.$emit('agents-filter-change', this.selectedAgents);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.date-picker {\n  margin-left: var(--space-smaller);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/reports/components"},"metadata":{},"sourceType":"module"}