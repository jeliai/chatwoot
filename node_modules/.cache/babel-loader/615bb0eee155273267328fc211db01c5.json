{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { ContextCancelation } from '../context';\n\nfunction tryOperation(op) {\n  return __awaiter(this, void 0, void 0, function () {\n    var err_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , op()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 2:\n          err_1 = _a.sent();\n          return [2\n          /*return*/\n          , Promise.reject(err_1)];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexport function attempt(ctx, plugin) {\n  ctx.log('debug', 'plugin', {\n    plugin: plugin.name\n  });\n  var start = new Date().getTime();\n  var hook = plugin[ctx.event.type];\n\n  if (hook === undefined) {\n    return Promise.resolve(ctx);\n  }\n\n  var newCtx = tryOperation(function () {\n    return hook.apply(plugin, [ctx]);\n  }).then(function (ctx) {\n    var done = new Date().getTime() - start;\n    ctx.stats.gauge('plugin_time', done, [\"plugin:\" + plugin.name]);\n    return ctx;\n  }).catch(function (err) {\n    if (err instanceof ContextCancelation && err.type === 'middleware_cancellation') {\n      throw err;\n    }\n\n    if (err instanceof ContextCancelation) {\n      ctx.log('warn', err.type, {\n        plugin: plugin.name,\n        error: err\n      });\n      return;\n    }\n\n    ctx.log('error', 'plugin Error', {\n      plugin: plugin.name,\n      error: err\n    });\n    ctx.stats.increment('plugin_error', 1, [\"plugin:\" + plugin.name]);\n    return err;\n  });\n  return newCtx;\n}\nexport function ensure(ctx, plugin) {\n  return attempt(ctx, plugin).then(function (newContext) {\n    if (newContext === undefined || newContext instanceof Error) {\n      ctx.log('debug', 'Context canceled');\n      ctx.stats.increment('context_canceled');\n      ctx.cancel(newContext);\n      return undefined;\n    }\n\n    return newContext;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}