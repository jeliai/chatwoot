{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * vuex v2.1.2\n * (c) 2017 Evan You\n * @license MIT\n */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Vuex = factory();\n})(this, function () {\n  'use strict';\n\n  var devtoolHook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n  function devtoolPlugin(store) {\n    if (!devtoolHook) {\n      return;\n    }\n\n    store._devtoolHook = devtoolHook;\n    devtoolHook.emit('vuex:init', store);\n    devtoolHook.on('vuex:travel-to-state', function (targetState) {\n      store.replaceState(targetState);\n    });\n    store.subscribe(function (mutation, state) {\n      devtoolHook.emit('vuex:mutation', mutation, state);\n    });\n  }\n\n  var applyMixin = function applyMixin(Vue) {\n    var version = Number(Vue.version.split('.')[0]);\n\n    if (version >= 2) {\n      var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n      Vue.mixin(usesInit ? {\n        init: vuexInit\n      } : {\n        beforeCreate: vuexInit\n      });\n    } else {\n      // override init and inject vuex init procedure\n      // for 1.x backwards compatibility.\n      var _init = Vue.prototype._init;\n\n      Vue.prototype._init = function (options) {\n        if (options === void 0) options = {};\n        options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;\n\n        _init.call(this, options);\n      };\n    }\n    /**\n     * Vuex init hook, injected into each instances init hooks list.\n     */\n\n\n    function vuexInit() {\n      var options = this.$options; // store injection\n\n      if (options.store) {\n        this.$store = options.store;\n      } else if (options.parent && options.parent.$store) {\n        this.$store = options.parent.$store;\n      }\n    }\n  };\n\n  var mapState = normalizeNamespace(function (namespace, states) {\n    var res = {};\n    normalizeMap(states).forEach(function (ref) {\n      var key = ref.key;\n      var val = ref.val;\n\n      res[key] = function mappedState() {\n        var state = this.$store.state;\n        var getters = this.$store.getters;\n\n        if (namespace) {\n          var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n\n          if (!module) {\n            return;\n          }\n\n          state = module.context.state;\n          getters = module.context.getters;\n        }\n\n        return typeof val === 'function' ? val.call(this, state, getters) : state[val];\n      };\n    });\n    return res;\n  });\n  var mapMutations = normalizeNamespace(function (namespace, mutations) {\n    var res = {};\n    normalizeMap(mutations).forEach(function (ref) {\n      var key = ref.key;\n      var val = ref.val;\n      val = namespace + val;\n\n      res[key] = function mappedMutation() {\n        var args = [],\n            len = arguments.length;\n\n        while (len--) {\n          args[len] = arguments[len];\n        }\n\n        if (namespace && !getModuleByNamespace(this.$store, 'mapMutations', namespace)) {\n          return;\n        }\n\n        return this.$store.commit.apply(this.$store, [val].concat(args));\n      };\n    });\n    return res;\n  });\n  var mapGetters = normalizeNamespace(function (namespace, getters) {\n    var res = {};\n    normalizeMap(getters).forEach(function (ref) {\n      var key = ref.key;\n      var val = ref.val;\n      val = namespace + val;\n\n      res[key] = function mappedGetter() {\n        if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n          return;\n        }\n\n        if (!(val in this.$store.getters)) {\n          console.error(\"[vuex] unknown getter: \" + val);\n          return;\n        }\n\n        return this.$store.getters[val];\n      };\n    });\n    return res;\n  });\n  var mapActions = normalizeNamespace(function (namespace, actions) {\n    var res = {};\n    normalizeMap(actions).forEach(function (ref) {\n      var key = ref.key;\n      var val = ref.val;\n      val = namespace + val;\n\n      res[key] = function mappedAction() {\n        var args = [],\n            len = arguments.length;\n\n        while (len--) {\n          args[len] = arguments[len];\n        }\n\n        if (namespace && !getModuleByNamespace(this.$store, 'mapActions', namespace)) {\n          return;\n        }\n\n        return this.$store.dispatch.apply(this.$store, [val].concat(args));\n      };\n    });\n    return res;\n  });\n\n  function normalizeMap(map) {\n    return Array.isArray(map) ? map.map(function (key) {\n      return {\n        key: key,\n        val: key\n      };\n    }) : Object.keys(map).map(function (key) {\n      return {\n        key: key,\n        val: map[key]\n      };\n    });\n  }\n\n  function normalizeNamespace(fn) {\n    return function (namespace, map) {\n      if (typeof namespace !== 'string') {\n        map = namespace;\n        namespace = '';\n      } else if (namespace.charAt(namespace.length - 1) !== '/') {\n        namespace += '/';\n      }\n\n      return fn(namespace, map);\n    };\n  }\n\n  function getModuleByNamespace(store, helper, namespace) {\n    var module = store._modulesNamespaceMap[namespace];\n\n    if (!module) {\n      console.error(\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace);\n    }\n\n    return module;\n  }\n  /**\n   * Get the first item that pass the test\n   * by second argument function\n   *\n   * @param {Array} list\n   * @param {Function} f\n   * @return {*}\n   */\n\n  /**\n   * Deep copy the given object considering circular structure.\n   * This function caches all nested objects and its copies.\n   * If it detects circular structure, use cached copy to avoid infinite loop.\n   *\n   * @param {*} obj\n   * @param {Array<Object>} cache\n   * @return {*}\n   */\n\n  /**\n   * forEach for object\n   */\n\n\n  function forEachValue(obj, fn) {\n    Object.keys(obj).forEach(function (key) {\n      return fn(obj[key], key);\n    });\n  }\n\n  function isObject(obj) {\n    return obj !== null && _typeof(obj) === 'object';\n  }\n\n  function isPromise(val) {\n    return val && typeof val.then === 'function';\n  }\n\n  function assert(condition, msg) {\n    if (!condition) {\n      throw new Error(\"[vuex] \" + msg);\n    }\n  }\n\n  var Module = function Module(rawModule, runtime) {\n    this.runtime = runtime;\n    this._children = Object.create(null);\n    this._rawModule = rawModule;\n  };\n\n  var prototypeAccessors$1 = {\n    state: {},\n    namespaced: {}\n  };\n\n  prototypeAccessors$1.state.get = function () {\n    return this._rawModule.state || {};\n  };\n\n  prototypeAccessors$1.namespaced.get = function () {\n    return !!this._rawModule.namespaced;\n  };\n\n  Module.prototype.addChild = function addChild(key, module) {\n    this._children[key] = module;\n  };\n\n  Module.prototype.removeChild = function removeChild(key) {\n    delete this._children[key];\n  };\n\n  Module.prototype.getChild = function getChild(key) {\n    return this._children[key];\n  };\n\n  Module.prototype.update = function update(rawModule) {\n    this._rawModule.namespaced = rawModule.namespaced;\n\n    if (rawModule.actions) {\n      this._rawModule.actions = rawModule.actions;\n    }\n\n    if (rawModule.mutations) {\n      this._rawModule.mutations = rawModule.mutations;\n    }\n\n    if (rawModule.getters) {\n      this._rawModule.getters = rawModule.getters;\n    }\n  };\n\n  Module.prototype.forEachChild = function forEachChild(fn) {\n    forEachValue(this._children, fn);\n  };\n\n  Module.prototype.forEachGetter = function forEachGetter(fn) {\n    if (this._rawModule.getters) {\n      forEachValue(this._rawModule.getters, fn);\n    }\n  };\n\n  Module.prototype.forEachAction = function forEachAction(fn) {\n    if (this._rawModule.actions) {\n      forEachValue(this._rawModule.actions, fn);\n    }\n  };\n\n  Module.prototype.forEachMutation = function forEachMutation(fn) {\n    if (this._rawModule.mutations) {\n      forEachValue(this._rawModule.mutations, fn);\n    }\n  };\n\n  Object.defineProperties(Module.prototype, prototypeAccessors$1);\n\n  var ModuleCollection = function ModuleCollection(rawRootModule) {\n    var this$1 = this; // register root module (Vuex.Store options)\n\n    this.root = new Module(rawRootModule, false); // register all nested modules\n\n    if (rawRootModule.modules) {\n      forEachValue(rawRootModule.modules, function (rawModule, key) {\n        this$1.register([key], rawModule, false);\n      });\n    }\n  };\n\n  ModuleCollection.prototype.get = function get(path) {\n    return path.reduce(function (module, key) {\n      return module.getChild(key);\n    }, this.root);\n  };\n\n  ModuleCollection.prototype.getNamespace = function getNamespace(path) {\n    var module = this.root;\n    return path.reduce(function (namespace, key) {\n      module = module.getChild(key);\n      return namespace + (module.namespaced ? key + '/' : '');\n    }, '');\n  };\n\n  ModuleCollection.prototype.update = function update$1(rawRootModule) {\n    update(this.root, rawRootModule);\n  };\n\n  ModuleCollection.prototype.register = function register(path, rawModule, runtime) {\n    var this$1 = this;\n    if (runtime === void 0) runtime = true;\n    var parent = this.get(path.slice(0, -1));\n    var newModule = new Module(rawModule, runtime);\n    parent.addChild(path[path.length - 1], newModule); // register nested modules\n\n    if (rawModule.modules) {\n      forEachValue(rawModule.modules, function (rawChildModule, key) {\n        this$1.register(path.concat(key), rawChildModule, runtime);\n      });\n    }\n  };\n\n  ModuleCollection.prototype.unregister = function unregister(path) {\n    var parent = this.get(path.slice(0, -1));\n    var key = path[path.length - 1];\n\n    if (!parent.getChild(key).runtime) {\n      return;\n    }\n\n    parent.removeChild(key);\n  };\n\n  function update(targetModule, newModule) {\n    // update target module\n    targetModule.update(newModule); // update nested modules\n\n    if (newModule.modules) {\n      for (var key in newModule.modules) {\n        if (!targetModule.getChild(key)) {\n          console.warn(\"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" + 'manual reload is needed');\n          return;\n        }\n\n        update(targetModule.getChild(key), newModule.modules[key]);\n      }\n    }\n  }\n\n  var Vue; // bind on install\n\n  var Store = function Store(options) {\n    var this$1 = this;\n    if (options === void 0) options = {};\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    var state = options.state;\n    if (state === void 0) state = {};\n    var plugins = options.plugins;\n    if (plugins === void 0) plugins = [];\n    var strict = options.strict;\n    if (strict === void 0) strict = false; // store internal state\n\n    this._committing = false;\n    this._actions = Object.create(null);\n    this._mutations = Object.create(null);\n    this._wrappedGetters = Object.create(null);\n    this._modules = new ModuleCollection(options);\n    this._modulesNamespaceMap = Object.create(null);\n    this._subscribers = [];\n    this._watcherVM = new Vue(); // bind commit and dispatch to self\n\n    var store = this;\n    var ref = this;\n    var dispatch = ref.dispatch;\n    var commit = ref.commit;\n\n    this.dispatch = function boundDispatch(type, payload) {\n      return dispatch.call(store, type, payload);\n    };\n\n    this.commit = function boundCommit(type, payload, options) {\n      return commit.call(store, type, payload, options);\n    }; // strict mode\n\n\n    this.strict = strict; // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n\n    installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n\n    resetStoreVM(this, state); // apply plugins\n\n    plugins.concat(devtoolPlugin).forEach(function (plugin) {\n      return plugin(this$1);\n    });\n  };\n\n  var prototypeAccessors = {\n    state: {}\n  };\n\n  prototypeAccessors.state.get = function () {\n    return this._vm.$data.state;\n  };\n\n  prototypeAccessors.state.set = function (v) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  };\n\n  Store.prototype.commit = function commit(_type, _payload, _options) {\n    var this$1 = this; // check object-style commit\n\n    var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n    var mutation = {\n      type: type,\n      payload: payload\n    };\n    var entry = this._mutations[type];\n\n    if (!entry) {\n      console.error(\"[vuex] unknown mutation type: \" + type);\n      return;\n    }\n\n    this._withCommit(function () {\n      entry.forEach(function commitIterator(handler) {\n        handler(payload);\n      });\n    });\n\n    this._subscribers.forEach(function (sub) {\n      return sub(mutation, this$1.state);\n    });\n\n    if (options && options.silent) {\n      console.warn(\"[vuex] mutation type: \" + type + \". Silent option has been removed. \" + 'Use the filter functionality in the vue-devtools');\n    }\n  };\n\n  Store.prototype.dispatch = function dispatch(_type, _payload) {\n    // check object-style dispatch\n    var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n    var entry = this._actions[type];\n\n    if (!entry) {\n      console.error(\"[vuex] unknown action type: \" + type);\n      return;\n    }\n\n    return entry.length > 1 ? Promise.all(entry.map(function (handler) {\n      return handler(payload);\n    })) : entry[0](payload);\n  };\n\n  Store.prototype.subscribe = function subscribe(fn) {\n    var subs = this._subscribers;\n\n    if (subs.indexOf(fn) < 0) {\n      subs.push(fn);\n    }\n\n    return function () {\n      var i = subs.indexOf(fn);\n\n      if (i > -1) {\n        subs.splice(i, 1);\n      }\n    };\n  };\n\n  Store.prototype.watch = function watch(getter, cb, options) {\n    var this$1 = this;\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n    return this._watcherVM.$watch(function () {\n      return getter(this$1.state, this$1.getters);\n    }, cb, options);\n  };\n\n  Store.prototype.replaceState = function replaceState(state) {\n    var this$1 = this;\n\n    this._withCommit(function () {\n      this$1._vm.state = state;\n    });\n  };\n\n  Store.prototype.registerModule = function registerModule(path, rawModule) {\n    if (typeof path === 'string') {\n      path = [path];\n    }\n\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n\n    this._modules.register(path, rawModule);\n\n    installModule(this, this.state, path, this._modules.get(path)); // reset store to update getters...\n\n    resetStoreVM(this, this.state);\n  };\n\n  Store.prototype.unregisterModule = function unregisterModule(path) {\n    var this$1 = this;\n\n    if (typeof path === 'string') {\n      path = [path];\n    }\n\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n\n    this._modules.unregister(path);\n\n    this._withCommit(function () {\n      var parentState = getNestedState(this$1.state, path.slice(0, -1));\n      Vue.delete(parentState, path[path.length - 1]);\n    });\n\n    resetStore(this);\n  };\n\n  Store.prototype.hotUpdate = function hotUpdate(newOptions) {\n    this._modules.update(newOptions);\n\n    resetStore(this, true);\n  };\n\n  Store.prototype._withCommit = function _withCommit(fn) {\n    var committing = this._committing;\n    this._committing = true;\n    fn();\n    this._committing = committing;\n  };\n\n  Object.defineProperties(Store.prototype, prototypeAccessors);\n\n  function resetStore(store, hot) {\n    store._actions = Object.create(null);\n    store._mutations = Object.create(null);\n    store._wrappedGetters = Object.create(null);\n    store._modulesNamespaceMap = Object.create(null);\n    var state = store.state; // init all modules\n\n    installModule(store, state, [], store._modules.root, true); // reset vm\n\n    resetStoreVM(store, state, hot);\n  }\n\n  function resetStoreVM(store, state, hot) {\n    var oldVm = store._vm; // bind store public getters\n\n    store.getters = {};\n    var wrappedGetters = store._wrappedGetters;\n    var computed = {};\n    forEachValue(wrappedGetters, function (fn, key) {\n      // use computed to leverage its lazy-caching mechanism\n      computed[key] = function () {\n        return fn(store);\n      };\n\n      Object.defineProperty(store.getters, key, {\n        get: function get() {\n          return store._vm[key];\n        },\n        enumerable: true // for local getters\n\n      });\n    }); // use a Vue instance to store the state tree\n    // suppress warnings just in case the user has added\n    // some funky global mixins\n\n    var silent = Vue.config.silent;\n    Vue.config.silent = true;\n    store._vm = new Vue({\n      data: {\n        state: state\n      },\n      computed: computed\n    });\n    Vue.config.silent = silent; // enable strict mode for new vm\n\n    if (store.strict) {\n      enableStrictMode(store);\n    }\n\n    if (oldVm) {\n      if (hot) {\n        // dispatch changes in all subscribed watchers\n        // to force getter re-evaluation for hot reloading.\n        store._withCommit(function () {\n          oldVm.state = null;\n        });\n      }\n\n      Vue.nextTick(function () {\n        return oldVm.$destroy();\n      });\n    }\n  }\n\n  function installModule(store, rootState, path, module, hot) {\n    var isRoot = !path.length;\n\n    var namespace = store._modules.getNamespace(path); // register in namespace map\n\n\n    if (namespace) {\n      store._modulesNamespaceMap[namespace] = module;\n    } // set state\n\n\n    if (!isRoot && !hot) {\n      var parentState = getNestedState(rootState, path.slice(0, -1));\n      var moduleName = path[path.length - 1];\n\n      store._withCommit(function () {\n        Vue.set(parentState, moduleName, module.state);\n      });\n    }\n\n    var local = module.context = makeLocalContext(store, namespace, path);\n    module.forEachMutation(function (mutation, key) {\n      var namespacedType = namespace + key;\n      registerMutation(store, namespacedType, mutation, local);\n    });\n    module.forEachAction(function (action, key) {\n      var namespacedType = namespace + key;\n      registerAction(store, namespacedType, action, local);\n    });\n    module.forEachGetter(function (getter, key) {\n      var namespacedType = namespace + key;\n      registerGetter(store, namespacedType, getter, local);\n    });\n    module.forEachChild(function (child, key) {\n      installModule(store, rootState, path.concat(key), child, hot);\n    });\n  }\n  /**\n   * make localized dispatch, commit, getters and state\n   * if there is no namespace, just use root ones\n   */\n\n\n  function makeLocalContext(store, namespace, path) {\n    var noNamespace = namespace === '';\n    var local = {\n      dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n        var args = unifyObjectStyle(_type, _payload, _options);\n        var payload = args.payload;\n        var options = args.options;\n        var type = args.type;\n\n        if (!options || !options.root) {\n          type = namespace + type;\n\n          if (!store._actions[type]) {\n            console.error(\"[vuex] unknown local action type: \" + args.type + \", global type: \" + type);\n            return;\n          }\n        }\n\n        return store.dispatch(type, payload);\n      },\n      commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n        var args = unifyObjectStyle(_type, _payload, _options);\n        var payload = args.payload;\n        var options = args.options;\n        var type = args.type;\n\n        if (!options || !options.root) {\n          type = namespace + type;\n\n          if (!store._mutations[type]) {\n            console.error(\"[vuex] unknown local mutation type: \" + args.type + \", global type: \" + type);\n            return;\n          }\n        }\n\n        store.commit(type, payload, options);\n      }\n    }; // getters and state object must be gotten lazily\n    // because they will be changed by vm update\n\n    Object.defineProperties(local, {\n      getters: {\n        get: noNamespace ? function () {\n          return store.getters;\n        } : function () {\n          return makeLocalGetters(store, namespace);\n        }\n      },\n      state: {\n        get: function get() {\n          return getNestedState(store.state, path);\n        }\n      }\n    });\n    return local;\n  }\n\n  function makeLocalGetters(store, namespace) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) {\n        return;\n      } // extract local getter type\n\n\n      var localType = type.slice(splitPos); // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n\n      Object.defineProperty(gettersProxy, localType, {\n        get: function get() {\n          return store.getters[type];\n        },\n        enumerable: true\n      });\n    });\n    return gettersProxy;\n  }\n\n  function registerMutation(store, type, handler, local) {\n    var entry = store._mutations[type] || (store._mutations[type] = []);\n    entry.push(function wrappedMutationHandler(payload) {\n      handler(local.state, payload);\n    });\n  }\n\n  function registerAction(store, type, handler, local) {\n    var entry = store._actions[type] || (store._actions[type] = []);\n    entry.push(function wrappedActionHandler(payload, cb) {\n      var res = handler({\n        dispatch: local.dispatch,\n        commit: local.commit,\n        getters: local.getters,\n        state: local.state,\n        rootGetters: store.getters,\n        rootState: store.state\n      }, payload, cb);\n\n      if (!isPromise(res)) {\n        res = Promise.resolve(res);\n      }\n\n      if (store._devtoolHook) {\n        return res.catch(function (err) {\n          store._devtoolHook.emit('vuex:error', err);\n\n          throw err;\n        });\n      } else {\n        return res;\n      }\n    });\n  }\n\n  function registerGetter(store, type, rawGetter, local) {\n    if (store._wrappedGetters[type]) {\n      console.error(\"[vuex] duplicate getter key: \" + type);\n      return;\n    }\n\n    store._wrappedGetters[type] = function wrappedGetter(store) {\n      return rawGetter(local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n      );\n    };\n  }\n\n  function enableStrictMode(store) {\n    store._vm.$watch('state', function () {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }, {\n      deep: true,\n      sync: true\n    });\n  }\n\n  function getNestedState(state, path) {\n    return path.length ? path.reduce(function (state, key) {\n      return state[key];\n    }, state) : state;\n  }\n\n  function unifyObjectStyle(type, payload, options) {\n    if (isObject(type) && type.type) {\n      options = payload;\n      payload = type;\n      type = type.type;\n    }\n\n    assert(typeof type === 'string', \"Expects string as the type, but found \" + _typeof(type) + \".\");\n    return {\n      type: type,\n      payload: payload,\n      options: options\n    };\n  }\n\n  function install(_Vue) {\n    if (Vue) {\n      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');\n      return;\n    }\n\n    Vue = _Vue;\n    applyMixin(Vue);\n  } // auto install in dist mode\n\n\n  if (typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  var index = {\n    Store: Store,\n    install: install,\n    version: '2.1.2',\n    mapState: mapState,\n    mapMutations: mapMutations,\n    mapGetters: mapGetters,\n    mapActions: mapActions\n  };\n  return index;\n});","map":null,"metadata":{},"sourceType":"module"}