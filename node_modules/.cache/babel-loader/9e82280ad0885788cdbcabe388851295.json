{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\nimport 'video.js/dist/video-js.css';\nimport 'videojs-record/dist/css/videojs.record.css';\nimport videojs from 'video.js';\nimport inboxMixin from '../../../../shared/mixins/inboxMixin';\nimport alertMixin from '../../../../shared/mixins/alertMixin';\nimport Recorder from 'opus-recorder';\nimport encoderWorker from 'opus-recorder/dist/encoderWorker.min';\nimport WaveSurfer from 'wavesurfer.js';\nimport MicrophonePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.microphone.js';\nimport 'videojs-wavesurfer/dist/videojs.wavesurfer.js';\nimport 'videojs-record/dist/videojs.record.js';\nimport 'videojs-record/dist/plugins/videojs.record.opus-recorder.js';\nimport { format, addSeconds } from 'date-fns';\nimport { AUDIO_FORMATS } from 'shared/constants/messages';\nWaveSurfer.microphone = MicrophonePlugin;\nexport default {\n  name: 'WootAudioRecorder',\n  mixins: [inboxMixin, alertMixin],\n  data: function data() {\n    return {\n      player: false,\n      recordingDateStarted: new Date(0),\n      initialTimeDuration: '00:00',\n      recorderOptions: {\n        debug: true,\n        controls: true,\n        bigPlayButton: false,\n        fluid: false,\n        controlBar: {\n          deviceButton: false,\n          fullscreenToggle: false,\n          cameraButton: false,\n          volumePanel: false\n        },\n        plugins: {\n          wavesurfer: {\n            backend: 'WebAudio',\n            waveColor: '#fc7658',\n            progressColor: 'rgb(25, 118, 204)',\n            cursorColor: 'rgba(43, 51, 63, 0.7)',\n            backgroundColor: 'none',\n            barWidth: 1,\n            cursorWidth: 1,\n            hideScrollbar: true,\n            plugins: [WaveSurfer.microphone.create({\n              bufferSize: 4096,\n              numberOfInputChannels: 1,\n              numberOfOutputChannels: 1,\n              constraints: {\n                video: false,\n                audio: true\n              }\n            })]\n          },\n          record: _objectSpread(_objectSpread({\n            audio: true,\n            video: false\n          }, this.audioRecordFormat === AUDIO_FORMATS.WEBM && {\n            monitorGain: 0,\n            recordingGain: 1,\n            numberOfChannels: 1,\n            encoderSampleRate: 16000,\n            originalSampleRateOverride: 16000,\n            streamPages: true,\n            maxFramesPerPage: 1,\n            encoderFrameSize: 1,\n            encoderPath: 'opus-recorder/dist/waveWorker.min.js'\n          }), this.audioRecordFormat === AUDIO_FORMATS.OGG && {\n            displayMilliseconds: false,\n            maxLength: 300,\n            audioEngine: 'opus-recorder',\n            audioWorkerURL: encoderWorker,\n            audioChannels: 1,\n            audioSampleRate: 48000,\n            audioBitRate: 128\n          })\n        }\n      }\n    };\n  },\n  computed: {\n    isRecording: function isRecording() {\n      return this.player && this.player.record().isRecording();\n    },\n    audioRecordFormat: function audioRecordFormat() {\n      if (this.isAWebWidgetInbox) {\n        return AUDIO_FORMATS.WEBM;\n      }\n\n      return AUDIO_FORMATS.OGG;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    window.Recorder = Recorder;\n    this.fireProgressRecord(this.initialTimeDuration);\n    this.player = videojs('#audio-wave', this.recorderOptions, function () {\n      _this.$nextTick(function () {\n        _this.player.record().getDevice();\n      });\n    });\n    this.player.on('deviceReady', this.deviceReady);\n    this.player.on('deviceError', this.deviceError);\n    this.player.on('startRecord', this.startRecord);\n    this.player.on('stopRecord', this.stopRecord);\n    this.player.on('progressRecord', this.progressRecord);\n    this.player.on('finishRecord', this.finishRecord);\n    this.player.on('playbackFinish', this.playbackFinish);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.player) {\n      this.player.dispose();\n    }\n\n    if (window.Recorder) {\n      window.Recorder = undefined;\n    }\n  },\n  methods: {\n    deviceReady: function deviceReady() {\n      this.player.record().start();\n    },\n    startRecord: function startRecord() {\n      this.fireStateRecorderChanged('recording');\n    },\n    stopRecord: function stopRecord() {\n      this.fireStateRecorderChanged('stopped');\n    },\n    finishRecord: function finishRecord() {\n      var file = new File([this.player.recordedData], this.player.recordedData.name, {\n        type: this.player.recordedData.type\n      });\n      this.fireRecorderBlob(file);\n    },\n    progressRecord: function progressRecord() {\n      this.fireProgressRecord(this.formatTimeProgress());\n    },\n    stopAudioRecording: function stopAudioRecording() {\n      this.player.record().stop();\n    },\n    deviceError: function deviceError() {\n      var deviceError = this.player.deviceErrorCode;\n      var deviceErrorName = deviceError === null || deviceError === void 0 ? void 0 : deviceError.name.toLowerCase();\n\n      if (deviceErrorName !== null && deviceErrorName !== void 0 && deviceErrorName.includes('notallowederror') || deviceErrorName !== null && deviceErrorName !== void 0 && deviceErrorName.includes('permissiondeniederror')) {\n        this.showAlert(this.$t('CONVERSATION.REPLYBOX.TIP_AUDIORECORDER_PERMISSION'));\n        this.fireStateRecorderChanged('notallowederror');\n      } else {\n        this.showAlert(this.$t('CONVERSATION.REPLYBOX.TIP_AUDIORECORDER_ERROR'));\n      }\n    },\n    formatTimeProgress: function formatTimeProgress() {\n      return format(addSeconds(new Date(this.recordingDateStarted.getTimezoneOffset() * 1000 * 60), this.player.record().getDuration()), 'mm:ss');\n    },\n    playPause: function playPause() {\n      if (this.player.wavesurfer().surfer.isPlaying()) {\n        this.fireStateRecorderChanged('paused');\n      } else {\n        this.fireStateRecorderChanged('playing');\n      }\n\n      this.player.wavesurfer().surfer.playPause();\n    },\n    play: function play() {\n      this.fireStateRecorderChanged('playing');\n      this.player.wavesurfer().play();\n    },\n    pause: function pause() {\n      this.fireStateRecorderChanged('paused');\n      this.player.wavesurfer().pause();\n    },\n    playbackFinish: function playbackFinish() {\n      this.fireStateRecorderChanged('paused');\n      this.player.wavesurfer().pause();\n    },\n    fireRecorderBlob: function fireRecorderBlob(blob) {\n      this.$emit('finish-record', {\n        name: blob.name,\n        type: blob.type,\n        size: blob.size,\n        file: blob\n      });\n    },\n    fireStateRecorderChanged: function fireStateRecorderChanged(state) {\n      this.$emit('state-recorder-changed', state);\n    },\n    fireProgressRecord: function fireProgressRecord(duration) {\n      this.$emit('state-recorder-progress-changed', duration);\n    }\n  }\n};","map":{"version":3,"sources":["AudioRecorder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAOA,OAAA,4BAAA;AACA,OAAA,4CAAA;AAEA,OAAA,OAAA,MAAA,UAAA;AAEA,OAAA,UAAA,MAAA,sCAAA;AACA,OAAA,UAAA,MAAA,sCAAA;AAEA,OAAA,QAAA,MAAA,eAAA;AACA,OAAA,aAAA,MAAA,sCAAA;AAEA,OAAA,UAAA,MAAA,eAAA;AACA,OAAA,gBAAA,MAAA,oDAAA;AACA,OAAA,+CAAA;AAEA,OAAA,uCAAA;AACA,OAAA,6DAAA;AACA,SAAA,MAAA,EAAA,UAAA,QAAA,UAAA;AACA,SAAA,aAAA,QAAA,2BAAA;AAEA,UAAA,CAAA,UAAA,GAAA,gBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,mBADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,UAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,KADA;AAEA,MAAA,oBAAA,EAAA,IAAA,IAAA,CAAA,CAAA,CAFA;AAGA,MAAA,mBAAA,EAAA,OAHA;AAIA,MAAA,eAAA,EAAA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,QAAA,EAAA,IAFA;AAGA,QAAA,aAAA,EAAA,KAHA;AAIA,QAAA,KAAA,EAAA,KAJA;AAKA,QAAA,UAAA,EAAA;AACA,UAAA,YAAA,EAAA,KADA;AAEA,UAAA,gBAAA,EAAA,KAFA;AAGA,UAAA,YAAA,EAAA,KAHA;AAIA,UAAA,WAAA,EAAA;AAJA,SALA;AAWA,QAAA,OAAA,EAAA;AACA,UAAA,UAAA,EAAA;AACA,YAAA,OAAA,EAAA,UADA;AAEA,YAAA,SAAA,EAAA,SAFA;AAGA,YAAA,aAAA,EAAA,mBAHA;AAIA,YAAA,WAAA,EAAA,uBAJA;AAKA,YAAA,eAAA,EAAA,MALA;AAMA,YAAA,QAAA,EAAA,CANA;AAOA,YAAA,WAAA,EAAA,CAPA;AAQA,YAAA,aAAA,EAAA,IARA;AASA,YAAA,OAAA,EAAA,CACA,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA;AACA,cAAA,UAAA,EAAA,IADA;AAEA,cAAA,qBAAA,EAAA,CAFA;AAGA,cAAA,sBAAA,EAAA,CAHA;AAIA,cAAA,WAAA,EAAA;AACA,gBAAA,KAAA,EAAA,KADA;AAEA,gBAAA,KAAA,EAAA;AAFA;AAJA,aAAA,CADA;AATA,WADA;AAsBA,UAAA,MAAA;AACA,YAAA,KAAA,EAAA,IADA;AAEA,YAAA,KAAA,EAAA;AAFA,aAGA,KAAA,iBAAA,KAAA,aAAA,CAAA,IAAA,IAAA;AACA,YAAA,WAAA,EAAA,CADA;AAEA,YAAA,aAAA,EAAA,CAFA;AAGA,YAAA,gBAAA,EAAA,CAHA;AAIA,YAAA,iBAAA,EAAA,KAJA;AAKA,YAAA,0BAAA,EAAA,KALA;AAMA,YAAA,WAAA,EAAA,IANA;AAOA,YAAA,gBAAA,EAAA,CAPA;AAQA,YAAA,gBAAA,EAAA,CARA;AASA,YAAA,WAAA,EAAA;AATA,WAHA,GAcA,KAAA,iBAAA,KAAA,aAAA,CAAA,GAAA,IAAA;AACA,YAAA,mBAAA,EAAA,KADA;AAEA,YAAA,SAAA,EAAA,GAFA;AAGA,YAAA,WAAA,EAAA,eAHA;AAIA,YAAA,cAAA,EAAA,aAJA;AAKA,YAAA,aAAA,EAAA,CALA;AAMA,YAAA,eAAA,EAAA,KANA;AAOA,YAAA,YAAA,EAAA;AAPA,WAdA;AAtBA;AAXA;AAJA,KAAA;AAgEA,GApEA;AAqEA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,MAAA,IAAA,KAAA,MAAA,CAAA,MAAA,GAAA,WAAA,EAAA;AACA,KAHA;AAIA,IAAA,iBAJA,+BAIA;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,eAAA,aAAA,CAAA,IAAA;AACA;;AACA,aAAA,aAAA,CAAA,GAAA;AACA;AATA,GArEA;AAgFA,EAAA,OAhFA,qBAgFA;AAAA;;AACA,IAAA,MAAA,CAAA,QAAA,GAAA,QAAA;AACA,SAAA,kBAAA,CAAA,KAAA,mBAAA;AACA,SAAA,MAAA,GAAA,OAAA,CAAA,aAAA,EAAA,KAAA,eAAA,EAAA,YAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,SAAA;AACA,OAFA;AAGA,KAJA,CAAA;AAKA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,KAAA,WAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,KAAA,WAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,KAAA,WAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,YAAA,EAAA,KAAA,UAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,KAAA,cAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,cAAA,EAAA,KAAA,YAAA;AACA,SAAA,MAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,KAAA,cAAA;AACA,GA/FA;AAgGA,EAAA,aAhGA,2BAgGA;AACA,QAAA,KAAA,MAAA,EAAA;AACA,WAAA,MAAA,CAAA,OAAA;AACA;;AACA,QAAA,MAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,QAAA,GAAA,SAAA;AACA;AACA,GAvGA;AAwGA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,WAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AACA,KAHA;AAIA,IAAA,WAJA,yBAIA;AACA,WAAA,wBAAA,CAAA,WAAA;AACA,KANA;AAOA,IAAA,UAPA,wBAOA;AACA,WAAA,wBAAA,CAAA,SAAA;AACA,KATA;AAUA,IAAA,YAVA,0BAUA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,CACA,CAAA,KAAA,MAAA,CAAA,YAAA,CADA,EAEA,KAAA,MAAA,CAAA,YAAA,CAAA,IAFA,EAGA;AAAA,QAAA,IAAA,EAAA,KAAA,MAAA,CAAA,YAAA,CAAA;AAAA,OAHA,CAAA;AAKA,WAAA,gBAAA,CAAA,IAAA;AACA,KAjBA;AAkBA,IAAA,cAlBA,4BAkBA;AACA,WAAA,kBAAA,CAAA,KAAA,kBAAA,EAAA;AACA,KApBA;AAqBA,IAAA,kBArBA,gCAqBA;AACA,WAAA,MAAA,CAAA,MAAA,GAAA,IAAA;AACA,KAvBA;AAwBA,IAAA,WAxBA,yBAwBA;AACA,UAAA,WAAA,GAAA,KAAA,MAAA,CAAA,eAAA;AACA,UAAA,eAAA,GAAA,WAAA,aAAA,WAAA,uBAAA,WAAA,CAAA,IAAA,CAAA,WAAA,EAAA;;AACA,UACA,eAAA,SAAA,IAAA,eAAA,WAAA,IAAA,eAAA,CAAA,QAAA,CAAA,iBAAA,KACA,eADA,aACA,eADA,eACA,eAAA,CAAA,QAAA,CAAA,uBAAA,CAFA,EAGA;AACA,aAAA,SAAA,CACA,KAAA,EAAA,CAAA,oDAAA,CADA;AAGA,aAAA,wBAAA,CAAA,iBAAA;AACA,OARA,MAQA;AACA,aAAA,SAAA,CACA,KAAA,EAAA,CAAA,+CAAA,CADA;AAGA;AACA,KAxCA;AAyCA,IAAA,kBAzCA,gCAyCA;AACA,aAAA,MAAA,CACA,UAAA,CACA,IAAA,IAAA,CAAA,KAAA,oBAAA,CAAA,iBAAA,KAAA,IAAA,GAAA,EAAA,CADA,EAEA,KAAA,MAAA,CAAA,MAAA,GAAA,WAAA,EAFA,CADA,EAKA,OALA,CAAA;AAOA,KAjDA;AAkDA,IAAA,SAlDA,uBAkDA;AACA,UAAA,KAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,SAAA,EAAA,EAAA;AACA,aAAA,wBAAA,CAAA,QAAA;AACA,OAFA,MAEA;AACA,aAAA,wBAAA,CAAA,SAAA;AACA;;AACA,WAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,SAAA;AACA,KAzDA;AA0DA,IAAA,IA1DA,kBA0DA;AACA,WAAA,wBAAA,CAAA,SAAA;AACA,WAAA,MAAA,CAAA,UAAA,GAAA,IAAA;AACA,KA7DA;AA8DA,IAAA,KA9DA,mBA8DA;AACA,WAAA,wBAAA,CAAA,QAAA;AACA,WAAA,MAAA,CAAA,UAAA,GAAA,KAAA;AACA,KAjEA;AAkEA,IAAA,cAlEA,4BAkEA;AACA,WAAA,wBAAA,CAAA,QAAA;AACA,WAAA,MAAA,CAAA,UAAA,GAAA,KAAA;AACA,KArEA;AAsEA,IAAA,gBAtEA,4BAsEA,IAtEA,EAsEA;AACA,WAAA,KAAA,CAAA,eAAA,EAAA;AACA,QAAA,IAAA,EAAA,IAAA,CAAA,IADA;AAEA,QAAA,IAAA,EAAA,IAAA,CAAA,IAFA;AAGA,QAAA,IAAA,EAAA,IAAA,CAAA,IAHA;AAIA,QAAA,IAAA,EAAA;AAJA,OAAA;AAMA,KA7EA;AA8EA,IAAA,wBA9EA,oCA8EA,KA9EA,EA8EA;AACA,WAAA,KAAA,CAAA,wBAAA,EAAA,KAAA;AACA,KAhFA;AAiFA,IAAA,kBAjFA,8BAiFA,QAjFA,EAiFA;AACA,WAAA,KAAA,CAAA,iCAAA,EAAA,QAAA;AACA;AAnFA;AAxGA,CAAA","sourcesContent":["<template>\n  <div class=\"audio-wave-wrapper\">\n    <audio id=\"audio-wave\" class=\"video-js vjs-fill vjs-default-skin\" />\n  </div>\n</template>\n\n<script>\nimport 'video.js/dist/video-js.css';\nimport 'videojs-record/dist/css/videojs.record.css';\n\nimport videojs from 'video.js';\n\nimport inboxMixin from '../../../../shared/mixins/inboxMixin';\nimport alertMixin from '../../../../shared/mixins/alertMixin';\n\nimport Recorder from 'opus-recorder';\nimport encoderWorker from 'opus-recorder/dist/encoderWorker.min';\n\nimport WaveSurfer from 'wavesurfer.js';\nimport MicrophonePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.microphone.js';\nimport 'videojs-wavesurfer/dist/videojs.wavesurfer.js';\n\nimport 'videojs-record/dist/videojs.record.js';\nimport 'videojs-record/dist/plugins/videojs.record.opus-recorder.js';\nimport { format, addSeconds } from 'date-fns';\nimport { AUDIO_FORMATS } from 'shared/constants/messages';\n\nWaveSurfer.microphone = MicrophonePlugin;\n\nexport default {\n  name: 'WootAudioRecorder',\n  mixins: [inboxMixin, alertMixin],\n  data() {\n    return {\n      player: false,\n      recordingDateStarted: new Date(0),\n      initialTimeDuration: '00:00',\n      recorderOptions: {\n        debug: true,\n        controls: true,\n        bigPlayButton: false,\n        fluid: false,\n        controlBar: {\n          deviceButton: false,\n          fullscreenToggle: false,\n          cameraButton: false,\n          volumePanel: false,\n        },\n        plugins: {\n          wavesurfer: {\n            backend: 'WebAudio',\n            waveColor: '#fc7658',\n            progressColor: 'rgb(25, 118, 204)',\n            cursorColor: 'rgba(43, 51, 63, 0.7)',\n            backgroundColor: 'none',\n            barWidth: 1,\n            cursorWidth: 1,\n            hideScrollbar: true,\n            plugins: [\n              WaveSurfer.microphone.create({\n                bufferSize: 4096,\n                numberOfInputChannels: 1,\n                numberOfOutputChannels: 1,\n                constraints: {\n                  video: false,\n                  audio: true,\n                },\n              }),\n            ],\n          },\n          record: {\n            audio: true,\n            video: false,\n            ...(this.audioRecordFormat === AUDIO_FORMATS.WEBM && {\n              monitorGain: 0,\n              recordingGain: 1,\n              numberOfChannels: 1,\n              encoderSampleRate: 16000,\n              originalSampleRateOverride: 16000,\n              streamPages: true,\n              maxFramesPerPage: 1,\n              encoderFrameSize: 1,\n              encoderPath: 'opus-recorder/dist/waveWorker.min.js',\n            }),\n            ...(this.audioRecordFormat === AUDIO_FORMATS.OGG && {\n              displayMilliseconds: false,\n              maxLength: 300,\n              audioEngine: 'opus-recorder',\n              audioWorkerURL: encoderWorker,\n              audioChannels: 1,\n              audioSampleRate: 48000,\n              audioBitRate: 128,\n            }),\n          },\n        },\n      },\n    };\n  },\n  computed: {\n    isRecording() {\n      return this.player && this.player.record().isRecording();\n    },\n    audioRecordFormat() {\n      if (this.isAWebWidgetInbox) {\n        return AUDIO_FORMATS.WEBM;\n      }\n      return AUDIO_FORMATS.OGG;\n    },\n  },\n  mounted() {\n    window.Recorder = Recorder;\n    this.fireProgressRecord(this.initialTimeDuration);\n    this.player = videojs('#audio-wave', this.recorderOptions, () => {\n      this.$nextTick(() => {\n        this.player.record().getDevice();\n      });\n    });\n    this.player.on('deviceReady', this.deviceReady);\n    this.player.on('deviceError', this.deviceError);\n    this.player.on('startRecord', this.startRecord);\n    this.player.on('stopRecord', this.stopRecord);\n    this.player.on('progressRecord', this.progressRecord);\n    this.player.on('finishRecord', this.finishRecord);\n    this.player.on('playbackFinish', this.playbackFinish);\n  },\n  beforeDestroy() {\n    if (this.player) {\n      this.player.dispose();\n    }\n    if (window.Recorder) {\n      window.Recorder = undefined;\n    }\n  },\n  methods: {\n    deviceReady() {\n      this.player.record().start();\n    },\n    startRecord() {\n      this.fireStateRecorderChanged('recording');\n    },\n    stopRecord() {\n      this.fireStateRecorderChanged('stopped');\n    },\n    finishRecord() {\n      const file = new File(\n        [this.player.recordedData],\n        this.player.recordedData.name,\n        { type: this.player.recordedData.type }\n      );\n      this.fireRecorderBlob(file);\n    },\n    progressRecord() {\n      this.fireProgressRecord(this.formatTimeProgress());\n    },\n    stopAudioRecording() {\n      this.player.record().stop();\n    },\n    deviceError() {\n      const deviceError = this.player.deviceErrorCode;\n      const deviceErrorName = deviceError?.name.toLowerCase();\n      if (\n        deviceErrorName?.includes('notallowederror') ||\n        deviceErrorName?.includes('permissiondeniederror')\n      ) {\n        this.showAlert(\n          this.$t('CONVERSATION.REPLYBOX.TIP_AUDIORECORDER_PERMISSION')\n        );\n        this.fireStateRecorderChanged('notallowederror');\n      } else {\n        this.showAlert(\n          this.$t('CONVERSATION.REPLYBOX.TIP_AUDIORECORDER_ERROR')\n        );\n      }\n    },\n    formatTimeProgress() {\n      return format(\n        addSeconds(\n          new Date(this.recordingDateStarted.getTimezoneOffset() * 1000 * 60),\n          this.player.record().getDuration()\n        ),\n        'mm:ss'\n      );\n    },\n    playPause() {\n      if (this.player.wavesurfer().surfer.isPlaying()) {\n        this.fireStateRecorderChanged('paused');\n      } else {\n        this.fireStateRecorderChanged('playing');\n      }\n      this.player.wavesurfer().surfer.playPause();\n    },\n    play() {\n      this.fireStateRecorderChanged('playing');\n      this.player.wavesurfer().play();\n    },\n    pause() {\n      this.fireStateRecorderChanged('paused');\n      this.player.wavesurfer().pause();\n    },\n    playbackFinish() {\n      this.fireStateRecorderChanged('paused');\n      this.player.wavesurfer().pause();\n    },\n    fireRecorderBlob(blob) {\n      this.$emit('finish-record', {\n        name: blob.name,\n        type: blob.type,\n        size: blob.size,\n        file: blob,\n      });\n    },\n    fireStateRecorderChanged(state) {\n      this.$emit('state-recorder-changed', state);\n    },\n    fireProgressRecord(duration) {\n      this.$emit('state-recorder-progress-changed', duration);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.audio-wave-wrapper {\n  min-height: 8rem;\n  height: 8rem;\n}\n.video-js .vjs-control-bar {\n  background-color: transparent;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/WootWriter"},"metadata":{},"sourceType":"module"}