{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ChatFooter from '../components/ChatFooter.vue';\nimport ConversationWrap from '../components/ConversationWrap.vue';\nexport default {\n  components: {\n    ChatFooter: ChatFooter,\n    ConversationWrap: ConversationWrap\n  },\n  computed: _objectSpread({}, mapGetters({\n    groupedMessages: 'conversation/getGroupedConversation'\n  })),\n  mounted: function mounted() {\n    this.$store.dispatch('conversation/setUserLastSeen');\n  }\n};","map":{"version":3,"sources":["Messages.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAWA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,8BAAA;AACA,OAAA,gBAAA,MAAA,oCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA,UAAA;AAAA,IAAA,gBAAA,EAAA;AAAA,GADA;AAEA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,eAAA,EAAA;AADA,GAAA,CADA,CAFA;AAOA,EAAA,OAPA,qBAOA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,8BAAA;AACA;AATA,CAAA","sourcesContent":["<template>\n  <div class=\"flex flex-col flex-1 overflow-hidden\">\n    <div class=\"flex flex-1 overflow-auto\">\n      <conversation-wrap :grouped-messages=\"groupedMessages\" />\n    </div>\n    <div class=\"px-5\">\n      <chat-footer />\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport ChatFooter from '../components/ChatFooter.vue';\nimport ConversationWrap from '../components/ConversationWrap.vue';\n\nexport default {\n  components: { ChatFooter, ConversationWrap },\n  computed: {\n    ...mapGetters({\n      groupedMessages: 'conversation/getGroupedConversation',\n    }),\n  },\n  mounted() {\n    this.$store.dispatch('conversation/setUserLastSeen');\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/widget/views"},"metadata":{},"sourceType":"module"}