{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { init as browserInit, SDK_VERSION } from '@sentry/browser';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { DEFAULT_HOOKS } from './constants';\nimport { attachErrorHandler } from './errorhandler';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { createTracingMixins } from './tracing';\nvar DEFAULT_CONFIG = {\n  Vue: getGlobalObject().Vue,\n  attachProps: true,\n  logErrors: false,\n  hooks: DEFAULT_HOOKS,\n  timeout: 2000,\n  trackComponents: false,\n  _metadata: {\n    sdk: {\n      name: 'sentry.javascript.vue',\n      packages: [{\n        name: 'npm:@sentry/vue',\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    }\n  }\n};\n/**\n * Inits the Vue SDK\n */\n\nexport function init(config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var options = __assign(__assign({}, DEFAULT_CONFIG), config);\n\n  browserInit(options);\n\n  if (!options.Vue && !options.app) {\n    IS_DEBUG_BUILD && logger.warn('Misconfigured SDK. Vue specific errors will not be captured.\\n' + 'Update your `Sentry.init` call with an appropriate config option:\\n' + '`app` (Application Instance - Vue 3) or `Vue` (Vue Constructor - Vue 2).');\n    return;\n  }\n\n  if (options.app) {\n    var apps = Array.isArray(options.app) ? options.app : [options.app];\n    apps.forEach(function (app) {\n      return vueInit(app, options);\n    });\n  } else if (options.Vue) {\n    vueInit(options.Vue, options);\n  }\n}\n\nvar vueInit = function vueInit(app, options) {\n  attachErrorHandler(app, options);\n\n  if ('tracesSampleRate' in options || 'tracesSampler' in options) {\n    app.mixin(createTracingMixins(__assign(__assign({}, options), options.tracingOptions)));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}