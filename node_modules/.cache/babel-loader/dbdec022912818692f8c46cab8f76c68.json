{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nexport var getCurrentAccount = function getCurrentAccount() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      accounts = _ref.accounts;\n\n  var accountId = arguments.length > 1 ? arguments[1] : undefined;\n  return accounts.find(function (account) {\n    return account.id === accountId;\n  });\n};\nexport var getUserRole = function getUserRole() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      accounts = _ref2.accounts;\n\n  var accountId = arguments.length > 1 ? arguments[1] : undefined;\n  var currentAccount = getCurrentAccount({\n    accounts: accounts\n  }, accountId) || {};\n  return currentAccount.role || null;\n};\nexport var routeIsAccessibleFor = function routeIsAccessibleFor(route, role, roleWiseRoutes) {\n  return roleWiseRoutes[role].includes(route);\n};\n\nvar validateActiveAccountRoutes = function validateActiveAccountRoutes(to, user, roleWiseRoutes) {\n  // If the current account is active, then check for the route permissions\n  var accountDashboardURL = \"accounts/\".concat(to.params.accountId, \"/dashboard\"); // If the user is trying to access suspended route, redirect them to dashboard\n\n  if (to.name === 'account_suspended') {\n    return accountDashboardURL;\n  }\n\n  var userRole = getUserRole(user, Number(to.params.accountId));\n  var isAccessible = routeIsAccessibleFor(to.name, userRole, roleWiseRoutes); // If the route is not accessible for the user, return to dashboard screen\n\n  return isAccessible ? null : accountDashboardURL;\n};\n\nexport var validateLoggedInRoutes = function validateLoggedInRoutes(to, user, roleWiseRoutes) {\n  var currentAccount = getCurrentAccount(user, Number(to.params.accountId)); // If current account is missing, either user does not have\n  // access to the account or the account is deleted, return to login screen\n\n  if (!currentAccount) {\n    return \"app/login\";\n  }\n\n  var isCurrentAccountActive = currentAccount.status === 'active';\n\n  if (isCurrentAccountActive) {\n    return validateActiveAccountRoutes(to, user, roleWiseRoutes);\n  } // If the current account is not active, then redirect the user to the suspended screen\n\n\n  if (to.name !== 'account_suspended') {\n    return \"accounts/\".concat(to.params.accountId, \"/suspended\");\n  } // Proceed to the route if none of the above conditions are met\n\n\n  return null;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/helper/routeHelpers.js"],"names":["getCurrentAccount","accounts","accountId","find","account","id","getUserRole","currentAccount","role","routeIsAccessibleFor","route","roleWiseRoutes","includes","validateActiveAccountRoutes","to","user","accountDashboardURL","params","name","userRole","Number","isAccessible","validateLoggedInRoutes","isCurrentAccountActive","status"],"mappings":";;;;;AAAA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAkC;AAAA,iFAAlB,EAAkB;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;;AAAA,MAAdC,SAAc;AACjE,SAAOD,QAAQ,CAACE,IAAT,CAAc,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,EAAR,KAAeH,SAAnB;AAAA,GAArB,CAAP;AACD,CAFM;AAIP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,kFAAlB,EAAkB;AAAA,MAA/BL,QAA+B,SAA/BA,QAA+B;;AAAA,MAAdC,SAAc;AAC3D,MAAMK,cAAc,GAAGP,iBAAiB,CAAC;AAAEC,IAAAA,QAAQ,EAARA;AAAF,GAAD,EAAeC,SAAf,CAAjB,IAA8C,EAArE;AACA,SAAOK,cAAc,CAACC,IAAf,IAAuB,IAA9B;AACD,CAHM;AAKP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAQF,IAAR,EAAcG,cAAd,EAAiC;AACnE,SAAOA,cAAc,CAACH,IAAD,CAAd,CAAqBI,QAArB,CAA8BF,KAA9B,CAAP;AACD,CAFM;;AAIP,IAAMG,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,EAAD,EAAKC,IAAL,EAAWJ,cAAX,EAA8B;AAChE;AACA,MAAMK,mBAAmB,sBAAeF,EAAE,CAACG,MAAH,CAAUf,SAAzB,eAAzB,CAFgE,CAIhE;;AACA,MAAIY,EAAE,CAACI,IAAH,KAAY,mBAAhB,EAAqC;AACnC,WAAOF,mBAAP;AACD;;AAED,MAAMG,QAAQ,GAAGb,WAAW,CAACS,IAAD,EAAOK,MAAM,CAACN,EAAE,CAACG,MAAH,CAAUf,SAAX,CAAb,CAA5B;AACA,MAAMmB,YAAY,GAAGZ,oBAAoB,CAACK,EAAE,CAACI,IAAJ,EAAUC,QAAV,EAAoBR,cAApB,CAAzC,CAVgE,CAWhE;;AACA,SAAOU,YAAY,GAAG,IAAH,GAAUL,mBAA7B;AACD,CAbD;;AAeA,OAAO,IAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACR,EAAD,EAAKC,IAAL,EAAWJ,cAAX,EAA8B;AAClE,MAAMJ,cAAc,GAAGP,iBAAiB,CAACe,IAAD,EAAOK,MAAM,CAACN,EAAE,CAACG,MAAH,CAAUf,SAAX,CAAb,CAAxC,CADkE,CAGlE;AACA;;AACA,MAAI,CAACK,cAAL,EAAqB;AACnB;AACD;;AAED,MAAMgB,sBAAsB,GAAGhB,cAAc,CAACiB,MAAf,KAA0B,QAAzD;;AAEA,MAAID,sBAAJ,EAA4B;AAC1B,WAAOV,2BAA2B,CAACC,EAAD,EAAKC,IAAL,EAAWJ,cAAX,CAAlC;AACD,GAbiE,CAelE;;;AACA,MAAIG,EAAE,CAACI,IAAH,KAAY,mBAAhB,EAAqC;AACnC,8BAAmBJ,EAAE,CAACG,MAAH,CAAUf,SAA7B;AACD,GAlBiE,CAoBlE;;;AACA,SAAO,IAAP;AACD,CAtBM","sourcesContent":["export const getCurrentAccount = ({ accounts } = {}, accountId) => {\n  return accounts.find(account => account.id === accountId);\n};\n\nexport const getUserRole = ({ accounts } = {}, accountId) => {\n  const currentAccount = getCurrentAccount({ accounts }, accountId) || {};\n  return currentAccount.role || null;\n};\n\nexport const routeIsAccessibleFor = (route, role, roleWiseRoutes) => {\n  return roleWiseRoutes[role].includes(route);\n};\n\nconst validateActiveAccountRoutes = (to, user, roleWiseRoutes) => {\n  // If the current account is active, then check for the route permissions\n  const accountDashboardURL = `accounts/${to.params.accountId}/dashboard`;\n\n  // If the user is trying to access suspended route, redirect them to dashboard\n  if (to.name === 'account_suspended') {\n    return accountDashboardURL;\n  }\n\n  const userRole = getUserRole(user, Number(to.params.accountId));\n  const isAccessible = routeIsAccessibleFor(to.name, userRole, roleWiseRoutes);\n  // If the route is not accessible for the user, return to dashboard screen\n  return isAccessible ? null : accountDashboardURL;\n};\n\nexport const validateLoggedInRoutes = (to, user, roleWiseRoutes) => {\n  const currentAccount = getCurrentAccount(user, Number(to.params.accountId));\n\n  // If current account is missing, either user does not have\n  // access to the account or the account is deleted, return to login screen\n  if (!currentAccount) {\n    return `app/login`;\n  }\n\n  const isCurrentAccountActive = currentAccount.status === 'active';\n\n  if (isCurrentAccountActive) {\n    return validateActiveAccountRoutes(to, user, roleWiseRoutes);\n  }\n\n  // If the current account is not active, then redirect the user to the suspended screen\n  if (to.name !== 'account_suspended') {\n    return `accounts/${to.params.accountId}/suspended`;\n  }\n\n  // Proceed to the route if none of the above conditions are met\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}