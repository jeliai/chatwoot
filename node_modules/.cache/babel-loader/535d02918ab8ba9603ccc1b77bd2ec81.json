{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport { ATTRIBUTE_TYPES } from './constants';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {},\n  mixins: [alertMixin],\n  props: {\n    selectedAttribute: {\n      type: Object,\n      default: function _default() {}\n    },\n    isUpdating: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      displayName: '',\n      description: '',\n      attributeType: 0,\n      types: ATTRIBUTE_TYPES,\n      show: true,\n      attributeKey: '',\n      values: [],\n      options: [],\n      isTouched: true\n    };\n  },\n  validations: {\n    displayName: {\n      required: required\n    },\n    attributeType: {\n      required: required\n    },\n    description: {\n      required: required,\n      minLength: minLength(1)\n    },\n    attributeKey: {\n      required: required,\n      isKey: function isKey(value) {\n        return !(value.indexOf(' ') >= 0);\n      }\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'attributes/getUIFlags'\n  })), {}, {\n    setAttributeListValue: function setAttributeListValue() {\n      return this.selectedAttribute.attribute_values.map(function (values) {\n        return {\n          name: values\n        };\n      });\n    },\n    updatedAttributeListValues: function updatedAttributeListValues() {\n      return this.values.map(function (item) {\n        return item.name;\n      });\n    },\n    isButtonDisabled: function isButtonDisabled() {\n      return this.$v.description.$invalid || this.isMultiselectInvalid;\n    },\n    isMultiselectInvalid: function isMultiselectInvalid() {\n      return this.isAttributeTypeList && this.isTouched && this.values.length === 0;\n    },\n    pageTitle: function pageTitle() {\n      return \"\".concat(this.$t('ATTRIBUTES_MGMT.EDIT.TITLE'), \" - \").concat(this.selectedAttribute.attribute_display_name);\n    },\n    selectedAttributeType: function selectedAttributeType() {\n      var _this = this;\n\n      return this.types.find(function (item) {\n        return item.option.toLowerCase() === _this.selectedAttribute.attribute_display_type;\n      }).id;\n    },\n    keyErrorMessage: function keyErrorMessage() {\n      if (!this.$v.attributeKey.isKey) {\n        return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.IN_VALID');\n      }\n\n      return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.ERROR');\n    },\n    isAttributeTypeList: function isAttributeTypeList() {\n      return this.attributeType === 6;\n    }\n  }),\n  mounted: function mounted() {\n    this.setFormValues();\n  },\n  methods: {\n    onClose: function onClose() {\n      this.$emit('on-close');\n    },\n    addTagValue: function addTagValue(tagValue) {\n      var tag = {\n        name: tagValue\n      };\n      this.values.push(tag);\n      this.$refs.tagInput.$el.focus();\n    },\n    setFormValues: function setFormValues() {\n      this.displayName = this.selectedAttribute.attribute_display_name;\n      this.description = this.selectedAttribute.attribute_description;\n      this.attributeType = this.selectedAttributeType;\n      this.attributeKey = this.selectedAttribute.attribute_key;\n      this.values = this.setAttributeListValue;\n    },\n    editAttributes: function editAttributes() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var errorMessage;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this2.$v.$touch();\n\n                if (!_this2.$v.$invalid) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return _this2.$store.dispatch('attributes/update', {\n                  id: _this2.selectedAttribute.id,\n                  attribute_description: _this2.description,\n                  attribute_display_name: _this2.displayName,\n                  attribute_values: _this2.updatedAttributeListValues\n                });\n\n              case 6:\n                _this2.alertMessage = _this2.$t('ATTRIBUTES_MGMT.EDIT.API.SUCCESS_MESSAGE');\n\n                _this2.onClose();\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                errorMessage = _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message;\n                _this2.alertMessage = errorMessage || _this2.$t('ATTRIBUTES_MGMT.EDIT.API.ERROR_MESSAGE');\n\n              case 14:\n                _context.prev = 14;\n\n                _this2.showAlert(_this2.alertMessage);\n\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10, 14, 17]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["EditAttribute.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <woot-modal-header :header-title=\"pageTitle\" />\n    <form class=\"row\" @submit.prevent=\"editAttributes\">\n      <div class=\"medium-12 columns\">\n        <woot-input\n          v-model.trim=\"displayName\"\n          :label=\"$t('ATTRIBUTES_MGMT.ADD.FORM.NAME.LABEL')\"\n          type=\"text\"\n          :class=\"{ error: $v.displayName.$error }\"\n          :error=\"\n            $v.displayName.$error\n              ? $t('ATTRIBUTES_MGMT.ADD.FORM.NAME.ERROR')\n              : ''\n          \"\n          :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.NAME.PLACEHOLDER')\"\n          @blur=\"$v.displayName.$touch\"\n        />\n        <woot-input\n          v-model.trim=\"attributeKey\"\n          :label=\"$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.LABEL')\"\n          type=\"text\"\n          :class=\"{ error: $v.attributeKey.$error }\"\n          :error=\"$v.attributeKey.$error ? keyErrorMessage : ''\"\n          :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.PLACEHOLDER')\"\n          readonly\n          @blur=\"$v.attributeKey.$touch\"\n        />\n        <label :class=\"{ error: $v.description.$error }\">\n          {{ $t('ATTRIBUTES_MGMT.ADD.FORM.DESC.LABEL') }}\n          <textarea\n            v-model.trim=\"description\"\n            rows=\"5\"\n            type=\"text\"\n            :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.DESC.PLACEHOLDER')\"\n            @blur=\"$v.description.$touch\"\n          />\n          <span v-if=\"$v.description.$error\" class=\"message\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.DESC.ERROR') }}\n          </span>\n        </label>\n        <label :class=\"{ error: $v.attributeType.$error }\">\n          {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LABEL') }}\n          <select v-model=\"attributeType\" disabled>\n            <option v-for=\"type in types\" :key=\"type.id\" :value=\"type.id\">\n              {{ type.option }}\n            </option>\n          </select>\n          <span v-if=\"$v.attributeType.$error\" class=\"message\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.ERROR') }}\n          </span>\n        </label>\n        <div v-if=\"isAttributeTypeList\" class=\"multiselect--wrap\">\n          <label>\n            {{ $t('ATTRIBUTES_MGMT.EDIT.TYPE.LIST.LABEL') }}\n          </label>\n          <multiselect\n            ref=\"tagInput\"\n            v-model=\"values\"\n            :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LIST.PLACEHOLDER')\"\n            label=\"name\"\n            track-by=\"name\"\n            :class=\"{ invalid: isMultiselectInvalid }\"\n            :options=\"options\"\n            :multiple=\"true\"\n            :taggable=\"true\"\n            @tag=\"addTagValue\"\n          />\n          <label v-show=\"isMultiselectInvalid\" class=\"error-message\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LIST.ERROR') }}\n          </label>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <woot-button :is-loading=\"isUpdating\" :disabled=\"isButtonDisabled\">\n          {{ $t('ATTRIBUTES_MGMT.EDIT.UPDATE_BUTTON_TEXT') }}\n        </woot-button>\n        <woot-button variant=\"clear\" @click.prevent=\"onClose\">\n          {{ $t('ATTRIBUTES_MGMT.ADD.CANCEL_BUTTON_TEXT') }}\n        </woot-button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport { ATTRIBUTE_TYPES } from './constants';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {},\n  mixins: [alertMixin],\n  props: {\n    selectedAttribute: {\n      type: Object,\n      default: () => {},\n    },\n    isUpdating: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      displayName: '',\n      description: '',\n      attributeType: 0,\n      types: ATTRIBUTE_TYPES,\n      show: true,\n      attributeKey: '',\n      values: [],\n      options: [],\n      isTouched: true,\n    };\n  },\n  validations: {\n    displayName: {\n      required,\n    },\n    attributeType: {\n      required,\n    },\n    description: {\n      required,\n      minLength: minLength(1),\n    },\n    attributeKey: {\n      required,\n      isKey(value) {\n        return !(value.indexOf(' ') >= 0);\n      },\n    },\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'attributes/getUIFlags',\n    }),\n    setAttributeListValue() {\n      return this.selectedAttribute.attribute_values.map(values => ({\n        name: values,\n      }));\n    },\n    updatedAttributeListValues() {\n      return this.values.map(item => item.name);\n    },\n    isButtonDisabled() {\n      return this.$v.description.$invalid || this.isMultiselectInvalid;\n    },\n    isMultiselectInvalid() {\n      return (\n        this.isAttributeTypeList && this.isTouched && this.values.length === 0\n      );\n    },\n    pageTitle() {\n      return `${this.$t('ATTRIBUTES_MGMT.EDIT.TITLE')} - ${\n        this.selectedAttribute.attribute_display_name\n      }`;\n    },\n    selectedAttributeType() {\n      return this.types.find(\n        item =>\n          item.option.toLowerCase() ===\n          this.selectedAttribute.attribute_display_type\n      ).id;\n    },\n    keyErrorMessage() {\n      if (!this.$v.attributeKey.isKey) {\n        return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.IN_VALID');\n      }\n      return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.ERROR');\n    },\n    isAttributeTypeList() {\n      return this.attributeType === 6;\n    },\n  },\n  mounted() {\n    this.setFormValues();\n  },\n  methods: {\n    onClose() {\n      this.$emit('on-close');\n    },\n    addTagValue(tagValue) {\n      const tag = {\n        name: tagValue,\n      };\n      this.values.push(tag);\n      this.$refs.tagInput.$el.focus();\n    },\n    setFormValues() {\n      this.displayName = this.selectedAttribute.attribute_display_name;\n      this.description = this.selectedAttribute.attribute_description;\n      this.attributeType = this.selectedAttributeType;\n      this.attributeKey = this.selectedAttribute.attribute_key;\n      this.values = this.setAttributeListValue;\n    },\n    async editAttributes() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      try {\n        await this.$store.dispatch('attributes/update', {\n          id: this.selectedAttribute.id,\n          attribute_description: this.description,\n          attribute_display_name: this.displayName,\n          attribute_values: this.updatedAttributeListValues,\n        });\n\n        this.alertMessage = this.$t('ATTRIBUTES_MGMT.EDIT.API.SUCCESS_MESSAGE');\n        this.onClose();\n      } catch (error) {\n        const errorMessage = error?.message;\n        this.alertMessage =\n          errorMessage || this.$t('ATTRIBUTES_MGMT.EDIT.API.ERROR_MESSAGE');\n      } finally {\n        this.showAlert(this.alertMessage);\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.key-value {\n  padding: 0 var(--space-small) var(--space-small) 0;\n  font-family: monospace;\n}\n.multiselect--wrap {\n  margin-bottom: var(--space-normal);\n  .error-message {\n    color: var(--r-400);\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-normal);\n  }\n  .invalid {\n    ::v-deep {\n      .multiselect__tags {\n        border: 1px solid var(--r-400);\n      }\n    }\n  }\n}\n::v-deep {\n  .multiselect {\n    margin-bottom: 0;\n  }\n  .multiselect__content-wrapper {\n    display: none;\n  }\n  .multiselect--active .multiselect__tags {\n    border-radius: var(--border-radius-normal);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/attributes"},"metadata":{},"sourceType":"module"}