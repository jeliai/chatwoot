{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { isTimeAfter } from 'shared/helpers/DateHelper';\nexport default {\n  computed: {\n    channelConfig: function channelConfig() {\n      return window.chatwootWebChannel;\n    },\n    replyTime: function replyTime() {\n      return window.chatwootWebChannel.replyTime;\n    },\n    replyTimeStatus: function replyTimeStatus() {\n      switch (this.replyTime) {\n        case 'in_a_few_minutes':\n          return this.$t('REPLY_TIME.IN_A_FEW_MINUTES');\n\n        case 'in_a_few_hours':\n          return this.$t('REPLY_TIME.IN_A_FEW_HOURS');\n\n        case 'in_a_day':\n          return this.$t('REPLY_TIME.IN_A_DAY');\n\n        default:\n          return this.$t('REPLY_TIME.IN_A_FEW_HOURS');\n      }\n    },\n    outOfOfficeMessage: function outOfOfficeMessage() {\n      return this.channelConfig.outOfOfficeMessage;\n    },\n    isInBetweenTheWorkingHours: function isInBetweenTheWorkingHours() {\n      var _this$currentDayAvail = this.currentDayAvailability,\n          openHour = _this$currentDayAvail.openHour,\n          openMinute = _this$currentDayAvail.openMinute,\n          closeHour = _this$currentDayAvail.closeHour,\n          closeMinute = _this$currentDayAvail.closeMinute,\n          closedAllDay = _this$currentDayAvail.closedAllDay,\n          openAllDay = _this$currentDayAvail.openAllDay;\n\n      if (openAllDay) {\n        return true;\n      }\n\n      if (closedAllDay) {\n        return false;\n      }\n\n      var utcOffset = this.channelConfig.utcOffset;\n      var today = this.getDateWithOffset(utcOffset);\n      var currentHours = today.getHours();\n      var currentMinutes = today.getMinutes();\n      var isAfterStartTime = isTimeAfter(currentHours, currentMinutes, openHour, openMinute);\n      var isBeforeEndTime = isTimeAfter(closeHour, closeMinute, currentHours, currentMinutes);\n      return isAfterStartTime && isBeforeEndTime;\n    },\n    currentDayAvailability: function currentDayAvailability() {\n      var utcOffset = this.channelConfig.utcOffset;\n      var dayOfTheWeek = this.getDateWithOffset(utcOffset).getDay();\n\n      var _this$channelConfig$w = this.channelConfig.workingHours.filter(function (workingHour) {\n        return workingHour.day_of_week === dayOfTheWeek;\n      }),\n          _this$channelConfig$w2 = _slicedToArray(_this$channelConfig$w, 1),\n          _this$channelConfig$w3 = _this$channelConfig$w2[0],\n          workingHourConfig = _this$channelConfig$w3 === void 0 ? {} : _this$channelConfig$w3;\n\n      return {\n        closedAllDay: workingHourConfig.closed_all_day,\n        openHour: workingHourConfig.open_hour,\n        openMinute: workingHourConfig.open_minutes,\n        closeHour: workingHourConfig.close_hour,\n        closeMinute: workingHourConfig.close_minutes,\n        openAllDay: workingHourConfig.open_all_day\n      };\n    },\n    isInBusinessHours: function isInBusinessHours() {\n      var workingHoursEnabled = this.channelConfig.workingHoursEnabled;\n      return workingHoursEnabled ? this.isInBetweenTheWorkingHours : true;\n    }\n  },\n  methods: {\n    getDateWithOffset: function getDateWithOffset(utcOffset) {\n      return utcToZonedTime(new Date().toISOString(), utcOffset);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/mixins/availability.js"],"names":["utcToZonedTime","isTimeAfter","computed","channelConfig","window","chatwootWebChannel","replyTime","replyTimeStatus","$t","outOfOfficeMessage","isInBetweenTheWorkingHours","currentDayAvailability","openHour","openMinute","closeHour","closeMinute","closedAllDay","openAllDay","utcOffset","today","getDateWithOffset","currentHours","getHours","currentMinutes","getMinutes","isAfterStartTime","isBeforeEndTime","dayOfTheWeek","getDay","workingHours","filter","workingHour","day_of_week","workingHourConfig","closed_all_day","open_hour","open_minutes","close_hour","close_minutes","open_all_day","isInBusinessHours","workingHoursEnabled","methods","Date","toISOString"],"mappings":"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","sourcesContent":["import { utcToZonedTime } from 'date-fns-tz';\nimport { isTimeAfter } from 'shared/helpers/DateHelper';\n\nexport default {\n  computed: {\n    channelConfig() {\n      return window.chatwootWebChannel;\n    },\n    replyTime() {\n      return window.chatwootWebChannel.replyTime;\n    },\n    replyTimeStatus() {\n      switch (this.replyTime) {\n        case 'in_a_few_minutes':\n          return this.$t('REPLY_TIME.IN_A_FEW_MINUTES');\n        case 'in_a_few_hours':\n          return this.$t('REPLY_TIME.IN_A_FEW_HOURS');\n        case 'in_a_day':\n          return this.$t('REPLY_TIME.IN_A_DAY');\n        default:\n          return this.$t('REPLY_TIME.IN_A_FEW_HOURS');\n      }\n    },\n    outOfOfficeMessage() {\n      return this.channelConfig.outOfOfficeMessage;\n    },\n    isInBetweenTheWorkingHours() {\n      const {\n        openHour,\n        openMinute,\n        closeHour,\n        closeMinute,\n        closedAllDay,\n        openAllDay,\n      } = this.currentDayAvailability;\n\n      if (openAllDay) {\n        return true;\n      }\n\n      if (closedAllDay) {\n        return false;\n      }\n\n      const { utcOffset } = this.channelConfig;\n      const today = this.getDateWithOffset(utcOffset);\n      const currentHours = today.getHours();\n      const currentMinutes = today.getMinutes();\n      const isAfterStartTime = isTimeAfter(\n        currentHours,\n        currentMinutes,\n        openHour,\n        openMinute\n      );\n      const isBeforeEndTime = isTimeAfter(\n        closeHour,\n        closeMinute,\n        currentHours,\n        currentMinutes\n      );\n      return isAfterStartTime && isBeforeEndTime;\n    },\n    currentDayAvailability() {\n      const { utcOffset } = this.channelConfig;\n      const dayOfTheWeek = this.getDateWithOffset(utcOffset).getDay();\n      const [workingHourConfig = {}] = this.channelConfig.workingHours.filter(\n        workingHour => workingHour.day_of_week === dayOfTheWeek\n      );\n      return {\n        closedAllDay: workingHourConfig.closed_all_day,\n        openHour: workingHourConfig.open_hour,\n        openMinute: workingHourConfig.open_minutes,\n        closeHour: workingHourConfig.close_hour,\n        closeMinute: workingHourConfig.close_minutes,\n        openAllDay: workingHourConfig.open_all_day,\n      };\n    },\n    isInBusinessHours() {\n      const { workingHoursEnabled } = this.channelConfig;\n      return workingHoursEnabled ? this.isInBetweenTheWorkingHours : true;\n    },\n  },\n\n  methods: {\n    getDateWithOffset(utcOffset) {\n      return utcToZonedTime(new Date().toISOString(), utcOffset);\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}