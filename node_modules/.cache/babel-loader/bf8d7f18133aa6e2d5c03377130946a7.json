{"ast":null,"code":"var _mutations;\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { SET_CONVERSATION_ATTRIBUTES, UPDATE_CONVERSATION_ATTRIBUTES, CLEAR_CONVERSATION_ATTRIBUTES } from '../types';\nimport { getConversationAPI } from '../../api/conversation';\nvar state = {\n  id: '',\n  status: ''\n};\nexport var getters = {\n  getConversationParams: function getConversationParams($state) {\n    return $state;\n  }\n};\nexport var actions = {\n  getAttributes: function () {\n    var _getAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, _yield$getConversatio, data, lastSeen;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return getConversationAPI();\n\n            case 4:\n              _yield$getConversatio = _context.sent;\n              data = _yield$getConversatio.data;\n              lastSeen = data.contact_last_seen_at;\n              commit(SET_CONVERSATION_ATTRIBUTES, data);\n              commit('conversation/setMetaUserLastSeenAt', lastSeen, {\n                root: true\n              });\n              _context.next = 13;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    function getAttributes(_x) {\n      return _getAttributes.apply(this, arguments);\n    }\n\n    return getAttributes;\n  }(),\n  update: function update(_ref2, data) {\n    var commit = _ref2.commit;\n    commit(UPDATE_CONVERSATION_ATTRIBUTES, data);\n  },\n  clearConversationAttributes: function clearConversationAttributes(_ref3) {\n    var commit = _ref3.commit;\n    commit('CLEAR_CONVERSATION_ATTRIBUTES');\n  }\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, SET_CONVERSATION_ATTRIBUTES, function ($state, data) {\n  $state.id = data.id;\n  $state.status = data.status;\n}), _defineProperty(_mutations, UPDATE_CONVERSATION_ATTRIBUTES, function ($state, data) {\n  if (data.id === $state.id) {\n    $state.id = data.id;\n    $state.status = data.status;\n  }\n}), _defineProperty(_mutations, CLEAR_CONVERSATION_ATTRIBUTES, function ($state) {\n  $state.id = '';\n  $state.status = '';\n}), _mutations);\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/conversationAttributes.js"],"names":["SET_CONVERSATION_ATTRIBUTES","UPDATE_CONVERSATION_ATTRIBUTES","CLEAR_CONVERSATION_ATTRIBUTES","getConversationAPI","state","id","status","getters","getConversationParams","$state","actions","getAttributes","commit","data","lastSeen","contact_last_seen_at","root","update","clearConversationAttributes","mutations","namespaced"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,2BADF,EAEEC,8BAFF,EAGEC,6BAHF,QAIO,UAJP;AAKA,SAASC,kBAAT,QAAmC,wBAAnC;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,EAAE,EAAE,EADQ;AAEZC,EAAAA,MAAM,EAAE;AAFI,CAAd;AAKA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,qBAAqB,EAAE,+BAAAC,MAAM;AAAA,WAAIA,MAAJ;AAAA;AADR,CAAhB;AAIP,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,aAAa;AAAA,iFAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,MAAT,QAASA,MAAT;AAAA;AAAA;AAAA,qBAEYT,kBAAkB,EAF9B;;AAAA;AAAA;AAEHU,cAAAA,IAFG,yBAEHA,IAFG;AAGmBC,cAAAA,QAHnB,GAGgCD,IAHhC,CAGHE,oBAHG;AAIXH,cAAAA,MAAM,CAACZ,2BAAD,EAA8Ba,IAA9B,CAAN;AACAD,cAAAA,MAAM,CAAC,oCAAD,EAAuCE,QAAvC,EAAiD;AAAEE,gBAAAA,IAAI,EAAE;AAAR,eAAjD,CAAN;AALW;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADQ;AAWrBC,EAAAA,MAXqB,yBAWFJ,IAXE,EAWI;AAAA,QAAhBD,MAAgB,SAAhBA,MAAgB;AACvBA,IAAAA,MAAM,CAACX,8BAAD,EAAiCY,IAAjC,CAAN;AACD,GAboB;AAcrBK,EAAAA,2BAA2B,EAAE,4CAAgB;AAAA,QAAbN,MAAa,SAAbA,MAAa;AAC3CA,IAAAA,MAAM,CAAC,+BAAD,CAAN;AACD;AAhBoB,CAAhB;AAmBP,OAAO,IAAMO,SAAS,iDACnBnB,2BADmB,YACUS,MADV,EACkBI,IADlB,EACwB;AAC1CJ,EAAAA,MAAM,CAACJ,EAAP,GAAYQ,IAAI,CAACR,EAAjB;AACAI,EAAAA,MAAM,CAACH,MAAP,GAAgBO,IAAI,CAACP,MAArB;AACD,CAJmB,+BAKnBL,8BALmB,YAKaQ,MALb,EAKqBI,IALrB,EAK2B;AAC7C,MAAIA,IAAI,CAACR,EAAL,KAAYI,MAAM,CAACJ,EAAvB,EAA2B;AACzBI,IAAAA,MAAM,CAACJ,EAAP,GAAYQ,IAAI,CAACR,EAAjB;AACAI,IAAAA,MAAM,CAACH,MAAP,GAAgBO,IAAI,CAACP,MAArB;AACD;AACF,CAVmB,+BAWnBJ,6BAXmB,YAWYO,MAXZ,EAWoB;AACtCA,EAAAA,MAAM,CAACJ,EAAP,GAAY,EAAZ;AACAI,EAAAA,MAAM,CAACH,MAAP,GAAgB,EAAhB;AACD,CAdmB,cAAf;AAiBP,eAAe;AACbc,EAAAA,UAAU,EAAE,IADC;AAEbhB,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbG,EAAAA,OAAO,EAAPA,OAJa;AAKbS,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import {\n  SET_CONVERSATION_ATTRIBUTES,\n  UPDATE_CONVERSATION_ATTRIBUTES,\n  CLEAR_CONVERSATION_ATTRIBUTES,\n} from '../types';\nimport { getConversationAPI } from '../../api/conversation';\n\nconst state = {\n  id: '',\n  status: '',\n};\n\nexport const getters = {\n  getConversationParams: $state => $state,\n};\n\nexport const actions = {\n  getAttributes: async ({ commit }) => {\n    try {\n      const { data } = await getConversationAPI();\n      const { contact_last_seen_at: lastSeen } = data;\n      commit(SET_CONVERSATION_ATTRIBUTES, data);\n      commit('conversation/setMetaUserLastSeenAt', lastSeen, { root: true });\n    } catch (error) {\n      // Ignore error\n    }\n  },\n  update({ commit }, data) {\n    commit(UPDATE_CONVERSATION_ATTRIBUTES, data);\n  },\n  clearConversationAttributes: ({ commit }) => {\n    commit('CLEAR_CONVERSATION_ATTRIBUTES');\n  },\n};\n\nexport const mutations = {\n  [SET_CONVERSATION_ATTRIBUTES]($state, data) {\n    $state.id = data.id;\n    $state.status = data.status;\n  },\n  [UPDATE_CONVERSATION_ATTRIBUTES]($state, data) {\n    if (data.id === $state.id) {\n      $state.id = data.id;\n      $state.status = data.status;\n    }\n  },\n  [CLEAR_CONVERSATION_ATTRIBUTES]($state) {\n    $state.id = '';\n    $state.status = '';\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}