{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ReplyBox from './ReplyBox';\nimport Message from './Message';\nimport conversationMixin from '../../../mixins/conversations';\nimport Banner from 'dashboard/components/ui/Banner.vue';\nimport { getTypingUsersText } from '../../../helper/commons';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport { REPLY_POLICY } from 'shared/constants/links';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport { calculateScrollTop } from './helpers/scrollTopCalculationHelper';\nimport { isEscape } from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nexport default {\n  components: {\n    Message: Message,\n    ReplyBox: ReplyBox,\n    Banner: Banner\n  },\n  mixins: [conversationMixin, inboxMixin, eventListenerMixins],\n  props: {\n    isContactPanelOpen: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      isLoadingPrevious: true,\n      heightBeforeLoad: null,\n      conversationPanel: null,\n      selectedTweetId: null,\n      isPopoutReplyBox: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    allConversations: 'getAllConversations',\n    inboxesList: 'inboxes/getInboxes',\n    listLoadingStatus: 'getAllMessagesLoaded',\n    loadingChatList: 'getChatListLoadingStatus'\n  })), {}, {\n    inboxId: function inboxId() {\n      return this.currentChat.inbox_id;\n    },\n    inbox: function inbox() {\n      return this.$store.getters['inboxes/getInbox'](this.inboxId);\n    },\n    hasSelectedTweetId: function hasSelectedTweetId() {\n      return !!this.selectedTweetId;\n    },\n    tweetBannerText: function tweetBannerText() {\n      return !this.selectedTweetId ? this.$t('CONVERSATION.SELECT_A_TWEET_TO_REPLY') : \"\\n          \".concat(this.$t('CONVERSATION.REPLYING_TO'), \"\\n          \").concat(this.selectedTweet.content) || '';\n    },\n    typingUsersList: function typingUsersList() {\n      var userList = this.$store.getters['conversationTypingStatus/getUserList'](this.currentChat.id);\n      return userList;\n    },\n    isAnyoneTyping: function isAnyoneTyping() {\n      var userList = this.typingUsersList;\n      return userList.length !== 0;\n    },\n    typingUserNames: function typingUserNames() {\n      var userList = this.typingUsersList;\n\n      if (this.isAnyoneTyping) {\n        var userListAsName = getTypingUsersText(userList);\n        return userListAsName;\n      }\n\n      return '';\n    },\n    getMessages: function getMessages() {\n      var _this = this;\n\n      var _this$allConversation = this.allConversations.filter(function (c) {\n        return c.id === _this.currentChat.id;\n      }),\n          _this$allConversation2 = _slicedToArray(_this$allConversation, 1),\n          chat = _this$allConversation2[0];\n\n      return chat;\n    },\n    getReadMessages: function getReadMessages() {\n      var chat = this.getMessages;\n      return chat === undefined ? null : this.readMessages(chat);\n    },\n    getUnReadMessages: function getUnReadMessages() {\n      var chat = this.getMessages;\n      return chat === undefined ? null : this.unReadMessages(chat);\n    },\n    shouldShowSpinner: function shouldShowSpinner() {\n      return this.getMessages && this.getMessages.dataFetched === undefined || !this.listLoadingStatus && this.isLoadingPrevious;\n    },\n    shouldLoadMoreChats: function shouldLoadMoreChats() {\n      return !this.listLoadingStatus && !this.isLoadingPrevious;\n    },\n    conversationType: function conversationType() {\n      var additionalAttributes = this.currentChat.additional_attributes;\n      var type = additionalAttributes ? additionalAttributes.type : '';\n      return type || '';\n    },\n    isATweet: function isATweet() {\n      return this.conversationType === 'tweet';\n    },\n    hasInstagramStory: function hasInstagramStory() {\n      return this.conversationType === 'instagram_direct_message';\n    },\n    selectedTweet: function selectedTweet() {\n      var _this2 = this;\n\n      if (this.selectedTweetId) {\n        var _this$getMessages$mes = this.getMessages.messages,\n            messages = _this$getMessages$mes === void 0 ? [] : _this$getMessages$mes;\n\n        var _messages$filter = messages.filter(function (message) {\n          return message.id === _this2.selectedTweetId;\n        }),\n            _messages$filter2 = _slicedToArray(_messages$filter, 1),\n            selectedMessage = _messages$filter2[0];\n\n        return selectedMessage || {};\n      }\n\n      return '';\n    },\n    isRightOrLeftIcon: function isRightOrLeftIcon() {\n      if (this.isContactPanelOpen) {\n        return 'arrow-chevron-right';\n      }\n\n      return 'arrow-chevron-left';\n    },\n    getLastSeenAt: function getLastSeenAt() {\n      var contactLastSeenAt = this.currentChat.contact_last_seen_at;\n      return contactLastSeenAt;\n    },\n    replyWindowBannerMessage: function replyWindowBannerMessage() {\n      if (this.isAWhatsAppChannel) {\n        return this.$t('CONVERSATION.TWILIO_WHATSAPP_CAN_REPLY');\n      }\n\n      if (this.isAPIInbox) {\n        var _this$inbox$additiona = this.inbox.additional_attributes,\n            additionalAttributes = _this$inbox$additiona === void 0 ? {} : _this$inbox$additiona;\n\n        if (additionalAttributes) {\n          var agentReplyTimeWindowMessage = additionalAttributes.agent_reply_time_window_message;\n          return agentReplyTimeWindowMessage;\n        }\n\n        return '';\n      }\n\n      return this.$t('CONVERSATION.CANNOT_REPLY');\n    },\n    replyWindowLink: function replyWindowLink() {\n      if (this.isAWhatsAppChannel) {\n        return REPLY_POLICY.FACEBOOK;\n      }\n\n      if (!this.isAPIInbox) {\n        return REPLY_POLICY.TWILIO_WHATSAPP;\n      }\n\n      return '';\n    },\n    replyWindowLinkText: function replyWindowLinkText() {\n      if (this.isAWhatsAppChannel) {\n        return this.$t('CONVERSATION.24_HOURS_WINDOW');\n      }\n\n      if (!this.isAPIInbox) {\n        return this.$t('CONVERSATION.TWILIO_WHATSAPP_24_HOURS_WINDOW');\n      }\n\n      return '';\n    },\n    unreadMessageCount: function unreadMessageCount() {\n      return this.currentChat.unread_count;\n    }\n  }),\n  watch: {\n    currentChat: function currentChat(newChat, oldChat) {\n      if (newChat.id === oldChat.id) {\n        return;\n      }\n\n      this.selectedTweetId = null;\n    }\n  },\n  created: function created() {\n    bus.$on(BUS_EVENTS.SCROLL_TO_MESSAGE, this.onScrollToMessage);\n    bus.$on(BUS_EVENTS.SET_TWEET_REPLY, this.setSelectedTweet);\n  },\n  mounted: function mounted() {\n    this.addScrollListener();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeBusListeners();\n    this.removeScrollListener();\n  },\n  methods: {\n    removeBusListeners: function removeBusListeners() {\n      bus.$off(BUS_EVENTS.SCROLL_TO_MESSAGE, this.onScrollToMessage);\n      bus.$off(BUS_EVENTS.SET_TWEET_REPLY, this.setSelectedTweet);\n    },\n    setSelectedTweet: function setSelectedTweet(tweetId) {\n      this.selectedTweetId = tweetId;\n    },\n    onScrollToMessage: function onScrollToMessage() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        return _this3.scrollToBottom();\n      });\n      this.makeMessagesRead();\n    },\n    showPopoutReplyBox: function showPopoutReplyBox() {\n      this.isPopoutReplyBox = !this.isPopoutReplyBox;\n    },\n    closePopoutReplyBox: function closePopoutReplyBox() {\n      this.isPopoutReplyBox = false;\n    },\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (isEscape(e)) {\n        this.closePopoutReplyBox();\n      }\n    },\n    addScrollListener: function addScrollListener() {\n      var _this4 = this;\n\n      this.conversationPanel = this.$el.querySelector('.conversation-panel');\n      this.setScrollParams();\n      this.conversationPanel.addEventListener('scroll', this.handleScroll);\n      this.$nextTick(function () {\n        return _this4.scrollToBottom();\n      });\n      this.isLoadingPrevious = false;\n    },\n    removeScrollListener: function removeScrollListener() {\n      this.conversationPanel.removeEventListener('scroll', this.handleScroll);\n    },\n    scrollToBottom: function scrollToBottom() {\n      var relevantMessages = [];\n\n      if (this.unreadMessageCount > 0) {\n        // capturing only the unread messages\n        relevantMessages = this.conversationPanel.querySelectorAll('.message--unread');\n      } else {\n        // capturing last message from the messages list\n        relevantMessages = Array.from(this.conversationPanel.querySelectorAll('.message--read')).slice(-1);\n      }\n\n      this.conversationPanel.scrollTop = calculateScrollTop(this.conversationPanel.scrollHeight, this.$el.scrollHeight, relevantMessages);\n    },\n    onToggleContactPanel: function onToggleContactPanel() {\n      this.$emit('contact-panel-toggle');\n    },\n    setScrollParams: function setScrollParams() {\n      this.heightBeforeLoad = this.conversationPanel.scrollHeight;\n      this.scrollTopBeforeLoad = this.conversationPanel.scrollTop;\n    },\n    handleScroll: function handleScroll(e) {\n      var _this5 = this;\n\n      this.setScrollParams();\n      var dataFetchCheck = this.getMessages.dataFetched === true && this.shouldLoadMoreChats;\n\n      if (e.target.scrollTop < 100 && !this.isLoadingPrevious && dataFetchCheck) {\n        this.isLoadingPrevious = true;\n        this.$store.dispatch('fetchPreviousMessages', {\n          conversationId: this.currentChat.id,\n          before: this.getMessages.messages[0].id\n        }).then(function () {\n          var heightDifference = _this5.conversationPanel.scrollHeight - _this5.heightBeforeLoad;\n          _this5.conversationPanel.scrollTop = _this5.scrollTopBeforeLoad + heightDifference;\n          _this5.isLoadingPrevious = false;\n\n          _this5.setScrollParams();\n        });\n      }\n    },\n    makeMessagesRead: function makeMessagesRead() {\n      this.$store.dispatch('markMessagesRead', {\n        id: this.currentChat.id\n      });\n    },\n    removeTweetSelection: function removeTweetSelection() {\n      this.selectedTweetId = null;\n    }\n  }\n};","map":{"version":3,"sources":["MessagesView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"view-box fill-height\">\n    <banner\n      v-if=\"!currentChat.can_reply\"\n      color-scheme=\"alert\"\n      :banner-message=\"replyWindowBannerMessage\"\n      :href-link=\"replyWindowLink\"\n      :href-link-text=\"replyWindowLinkText\"\n    />\n\n    <banner\n      v-if=\"isATweet\"\n      color-scheme=\"gray\"\n      :banner-message=\"tweetBannerText\"\n      :has-close-button=\"hasSelectedTweetId\"\n      @close=\"removeTweetSelection\"\n    />\n\n    <div class=\"sidebar-toggle__wrap\">\n      <woot-button\n        variant=\"smooth\"\n        size=\"tiny\"\n        color-scheme=\"secondary\"\n        class=\"sidebar-toggle--button\"\n        :icon=\"isRightOrLeftIcon\"\n        @click=\"onToggleContactPanel\"\n      />\n    </div>\n    <ul class=\"conversation-panel\">\n      <transition name=\"slide-up\">\n        <li class=\"spinner--container\">\n          <span v-if=\"shouldShowSpinner\" class=\"spinner message\" />\n        </li>\n      </transition>\n      <message\n        v-for=\"message in getReadMessages\"\n        :key=\"message.id\"\n        class=\"message--read ph-no-capture\"\n        :data=\"message\"\n        :is-a-tweet=\"isATweet\"\n        :is-a-whatsapp-channel=\"isAWhatsAppChannel\"\n        :has-instagram-story=\"hasInstagramStory\"\n        :has-user-read-message=\"\n          hasUserReadMessage(message.created_at, getLastSeenAt)\n        \"\n        :is-web-widget-inbox=\"isAWebWidgetInbox\"\n      />\n      <li v-show=\"unreadMessageCount != 0\" class=\"unread--toast\">\n        <span class=\"text-uppercase\">\n          {{ unreadMessageCount }}\n          {{\n            unreadMessageCount > 1\n              ? $t('CONVERSATION.UNREAD_MESSAGES')\n              : $t('CONVERSATION.UNREAD_MESSAGE')\n          }}\n        </span>\n      </li>\n      <message\n        v-for=\"message in getUnReadMessages\"\n        :key=\"message.id\"\n        class=\"message--unread ph-no-capture\"\n        :data=\"message\"\n        :is-a-tweet=\"isATweet\"\n        :is-a-whatsapp-channel=\"isAWhatsAppChannel\"\n        :has-instagram-story=\"hasInstagramStory\"\n        :has-user-read-message=\"\n          hasUserReadMessage(message.created_at, getLastSeenAt)\n        \"\n        :is-web-widget-inbox=\"isAWebWidgetInbox\"\n      />\n    </ul>\n    <div\n      class=\"conversation-footer\"\n      :class=\"{ 'modal-mask': isPopoutReplyBox }\"\n    >\n      <div v-if=\"isAnyoneTyping\" class=\"typing-indicator-wrap\">\n        <div class=\"typing-indicator\">\n          {{ typingUserNames }}\n          <img\n            class=\"gif\"\n            src=\"~dashboard/assets/images/typing.gif\"\n            alt=\"Someone is typing\"\n          />\n        </div>\n      </div>\n      <reply-box\n        :conversation-id=\"currentChat.id\"\n        :is-a-tweet=\"isATweet\"\n        :selected-tweet=\"selectedTweet\"\n        :popout-reply-box.sync=\"isPopoutReplyBox\"\n        @click=\"showPopoutReplyBox\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nimport ReplyBox from './ReplyBox';\nimport Message from './Message';\nimport conversationMixin from '../../../mixins/conversations';\nimport Banner from 'dashboard/components/ui/Banner.vue';\nimport { getTypingUsersText } from '../../../helper/commons';\nimport { BUS_EVENTS } from 'shared/constants/busEvents';\nimport { REPLY_POLICY } from 'shared/constants/links';\nimport inboxMixin from 'shared/mixins/inboxMixin';\nimport { calculateScrollTop } from './helpers/scrollTopCalculationHelper';\nimport { isEscape } from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\n\nexport default {\n  components: {\n    Message,\n    ReplyBox,\n    Banner,\n  },\n  mixins: [conversationMixin, inboxMixin, eventListenerMixins],\n  props: {\n    isContactPanelOpen: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data() {\n    return {\n      isLoadingPrevious: true,\n      heightBeforeLoad: null,\n      conversationPanel: null,\n      selectedTweetId: null,\n      isPopoutReplyBox: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      allConversations: 'getAllConversations',\n      inboxesList: 'inboxes/getInboxes',\n      listLoadingStatus: 'getAllMessagesLoaded',\n      loadingChatList: 'getChatListLoadingStatus',\n    }),\n    inboxId() {\n      return this.currentChat.inbox_id;\n    },\n    inbox() {\n      return this.$store.getters['inboxes/getInbox'](this.inboxId);\n    },\n    hasSelectedTweetId() {\n      return !!this.selectedTweetId;\n    },\n    tweetBannerText() {\n      return !this.selectedTweetId\n        ? this.$t('CONVERSATION.SELECT_A_TWEET_TO_REPLY')\n        : `\n          ${this.$t('CONVERSATION.REPLYING_TO')}\n          ${this.selectedTweet.content}` || '';\n    },\n    typingUsersList() {\n      const userList = this.$store.getters[\n        'conversationTypingStatus/getUserList'\n      ](this.currentChat.id);\n      return userList;\n    },\n    isAnyoneTyping() {\n      const userList = this.typingUsersList;\n      return userList.length !== 0;\n    },\n    typingUserNames() {\n      const userList = this.typingUsersList;\n\n      if (this.isAnyoneTyping) {\n        const userListAsName = getTypingUsersText(userList);\n        return userListAsName;\n      }\n\n      return '';\n    },\n\n    getMessages() {\n      const [chat] = this.allConversations.filter(\n        c => c.id === this.currentChat.id\n      );\n      return chat;\n    },\n    getReadMessages() {\n      const chat = this.getMessages;\n      return chat === undefined ? null : this.readMessages(chat);\n    },\n    getUnReadMessages() {\n      const chat = this.getMessages;\n      return chat === undefined ? null : this.unReadMessages(chat);\n    },\n    shouldShowSpinner() {\n      return (\n        (this.getMessages && this.getMessages.dataFetched === undefined) ||\n        (!this.listLoadingStatus && this.isLoadingPrevious)\n      );\n    },\n\n    shouldLoadMoreChats() {\n      return !this.listLoadingStatus && !this.isLoadingPrevious;\n    },\n\n    conversationType() {\n      const { additional_attributes: additionalAttributes } = this.currentChat;\n      const type = additionalAttributes ? additionalAttributes.type : '';\n      return type || '';\n    },\n\n    isATweet() {\n      return this.conversationType === 'tweet';\n    },\n\n    hasInstagramStory() {\n      return this.conversationType === 'instagram_direct_message';\n    },\n\n    selectedTweet() {\n      if (this.selectedTweetId) {\n        const { messages = [] } = this.getMessages;\n        const [selectedMessage] = messages.filter(\n          message => message.id === this.selectedTweetId\n        );\n        return selectedMessage || {};\n      }\n      return '';\n    },\n    isRightOrLeftIcon() {\n      if (this.isContactPanelOpen) {\n        return 'arrow-chevron-right';\n      }\n      return 'arrow-chevron-left';\n    },\n    getLastSeenAt() {\n      const { contact_last_seen_at: contactLastSeenAt } = this.currentChat;\n      return contactLastSeenAt;\n    },\n\n    replyWindowBannerMessage() {\n      if (this.isAWhatsAppChannel) {\n        return this.$t('CONVERSATION.TWILIO_WHATSAPP_CAN_REPLY');\n      }\n      if (this.isAPIInbox) {\n        const { additional_attributes: additionalAttributes = {} } = this.inbox;\n        if (additionalAttributes) {\n          const {\n            agent_reply_time_window_message: agentReplyTimeWindowMessage,\n          } = additionalAttributes;\n          return agentReplyTimeWindowMessage;\n        }\n        return '';\n      }\n      return this.$t('CONVERSATION.CANNOT_REPLY');\n    },\n    replyWindowLink() {\n      if (this.isAWhatsAppChannel) {\n        return REPLY_POLICY.FACEBOOK;\n      }\n      if (!this.isAPIInbox) {\n        return REPLY_POLICY.TWILIO_WHATSAPP;\n      }\n      return '';\n    },\n    replyWindowLinkText() {\n      if (this.isAWhatsAppChannel) {\n        return this.$t('CONVERSATION.24_HOURS_WINDOW');\n      }\n      if (!this.isAPIInbox) {\n        return this.$t('CONVERSATION.TWILIO_WHATSAPP_24_HOURS_WINDOW');\n      }\n      return '';\n    },\n    unreadMessageCount() {\n      return this.currentChat.unread_count;\n    },\n  },\n\n  watch: {\n    currentChat(newChat, oldChat) {\n      if (newChat.id === oldChat.id) {\n        return;\n      }\n      this.selectedTweetId = null;\n    },\n  },\n\n  created() {\n    bus.$on(BUS_EVENTS.SCROLL_TO_MESSAGE, this.onScrollToMessage);\n    bus.$on(BUS_EVENTS.SET_TWEET_REPLY, this.setSelectedTweet);\n  },\n\n  mounted() {\n    this.addScrollListener();\n  },\n\n  beforeDestroy() {\n    this.removeBusListeners();\n    this.removeScrollListener();\n  },\n\n  methods: {\n    removeBusListeners() {\n      bus.$off(BUS_EVENTS.SCROLL_TO_MESSAGE, this.onScrollToMessage);\n      bus.$off(BUS_EVENTS.SET_TWEET_REPLY, this.setSelectedTweet);\n    },\n    setSelectedTweet(tweetId) {\n      this.selectedTweetId = tweetId;\n    },\n    onScrollToMessage() {\n      this.$nextTick(() => this.scrollToBottom());\n      this.makeMessagesRead();\n    },\n    showPopoutReplyBox() {\n      this.isPopoutReplyBox = !this.isPopoutReplyBox;\n    },\n    closePopoutReplyBox() {\n      this.isPopoutReplyBox = false;\n    },\n    handleKeyEvents(e) {\n      if (isEscape(e)) {\n        this.closePopoutReplyBox();\n      }\n    },\n    addScrollListener() {\n      this.conversationPanel = this.$el.querySelector('.conversation-panel');\n      this.setScrollParams();\n      this.conversationPanel.addEventListener('scroll', this.handleScroll);\n      this.$nextTick(() => this.scrollToBottom());\n      this.isLoadingPrevious = false;\n    },\n    removeScrollListener() {\n      this.conversationPanel.removeEventListener('scroll', this.handleScroll);\n    },\n    scrollToBottom() {\n      let relevantMessages = [];\n      if (this.unreadMessageCount > 0) {\n        // capturing only the unread messages\n        relevantMessages = this.conversationPanel.querySelectorAll(\n          '.message--unread'\n        );\n      } else {\n        // capturing last message from the messages list\n        relevantMessages = Array.from(\n          this.conversationPanel.querySelectorAll('.message--read')\n        ).slice(-1);\n      }\n      this.conversationPanel.scrollTop = calculateScrollTop(\n        this.conversationPanel.scrollHeight,\n        this.$el.scrollHeight,\n        relevantMessages\n      );\n    },\n    onToggleContactPanel() {\n      this.$emit('contact-panel-toggle');\n    },\n    setScrollParams() {\n      this.heightBeforeLoad = this.conversationPanel.scrollHeight;\n      this.scrollTopBeforeLoad = this.conversationPanel.scrollTop;\n    },\n\n    handleScroll(e) {\n      this.setScrollParams();\n\n      const dataFetchCheck =\n        this.getMessages.dataFetched === true && this.shouldLoadMoreChats;\n      if (\n        e.target.scrollTop < 100 &&\n        !this.isLoadingPrevious &&\n        dataFetchCheck\n      ) {\n        this.isLoadingPrevious = true;\n        this.$store\n          .dispatch('fetchPreviousMessages', {\n            conversationId: this.currentChat.id,\n            before: this.getMessages.messages[0].id,\n          })\n          .then(() => {\n            const heightDifference =\n              this.conversationPanel.scrollHeight - this.heightBeforeLoad;\n            this.conversationPanel.scrollTop =\n              this.scrollTopBeforeLoad + heightDifference;\n            this.isLoadingPrevious = false;\n            this.setScrollParams();\n          });\n      }\n    },\n\n    makeMessagesRead() {\n      this.$store.dispatch('markMessagesRead', { id: this.currentChat.id });\n    },\n    removeTweetSelection() {\n      this.selectedTweetId = null;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.spinner--container {\n  min-height: var(--space-jumbo);\n}\n\n.view-box.fill-height {\n  height: auto;\n  flex-grow: 1;\n  min-width: 0;\n}\n\n.modal-mask {\n  &::v-deep {\n    .ProseMirror-woot-style {\n      max-height: 40rem;\n    }\n\n    .reply-box {\n      border: 1px solid var(--color-border);\n      max-width: 120rem;\n      width: 70%;\n    }\n\n    .reply-box .reply-box__top {\n      position: relative;\n      min-height: 44rem;\n    }\n\n    .reply-box__top .input {\n      min-height: 44rem;\n    }\n\n    .emoji-dialog {\n      position: fixed;\n      left: unset;\n      position: absolute;\n      bottom: var(--space-smaller);\n    }\n  }\n}\n.sidebar-toggle__wrap {\n  display: flex;\n  justify-content: flex-end;\n\n  .sidebar-toggle--button {\n    position: fixed;\n\n    top: var(--space-mega);\n    z-index: var(--z-index-low);\n\n    background: var(--white);\n\n    padding: inherit 0;\n    border-top-left-radius: calc(\n      var(--space-medium) + 1px\n    ); /* 100px of height + 10px of border */\n    border-bottom-left-radius: calc(\n      var(--space-medium) + 1px\n    ); /* 100px of height + 10px of border */\n    border: 1px solid var(--color-border-light);\n    border-right: 0;\n    box-sizing: border-box;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}