{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { required, email } from 'vuelidate/lib/validators';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport Spinner from 'shared/components/Spinner';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\nexport default {\n  components: {\n    FluentIcon: FluentIcon,\n    Spinner: Spinner\n  },\n  mixins: [darkModeMixin],\n  props: {\n    messageId: {\n      type: Number,\n      required: true\n    },\n    messageContentAttributes: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      email: '',\n      isUpdating: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    widgetColor: 'appConfig/getWidgetColor'\n  })), {}, {\n    textColor: function textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hasSubmitted: function hasSubmitted() {\n      return this.messageContentAttributes && this.messageContentAttributes.submitted_email;\n    },\n    inputColor: function inputColor() {\n      return \"\".concat(this.$dm('bg-white', 'dark:bg-slate-600'), \"\\n        \").concat(this.$dm('text-black-900', 'dark:text-slate-50'));\n    },\n    inputHasError: function inputHasError() {\n      return this.$v.email.$error ? \"\".concat(this.inputColor, \" error\") : \"\".concat(this.inputColor);\n    }\n  }),\n  validations: {\n    email: {\n      required: required,\n      email: email\n    }\n  },\n  methods: {\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.$v.$invalid) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _this.isUpdating = true;\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.$store.dispatch('message/update', {\n                  email: _this.email,\n                  messageId: _this.messageId\n                });\n\n              case 6:\n                _context.next = 10;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](3);\n\n              case 10:\n                _context.prev = 10;\n                _this.isUpdating = false;\n                return _context.finish(10);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 8, 10, 13]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["EmailInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,QAAA,EAAA,KAAA,QAAA,0BAAA;AACA,SAAA,uBAAA,QAAA,iBAAA;AAEA,OAAA,UAAA,MAAA,wCAAA;AACA,OAAA,OAAA,MAAA,2BAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,OAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,aAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,wBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AALA,GANA;AAgBA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GArBA;AAsBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,SAJA,uBAIA;AACA,aAAA,uBAAA,CAAA,KAAA,WAAA,CAAA;AACA,KANA;AAOA,IAAA,YAPA,0BAOA;AACA,aACA,KAAA,wBAAA,IACA,KAAA,wBAAA,CAAA,eAFA;AAIA,KAZA;AAaA,IAAA,UAbA,wBAaA;AACA,uBAAA,KAAA,GAAA,CAAA,UAAA,EAAA,mBAAA,CAAA,uBACA,KAAA,GAAA,CAAA,gBAAA,EAAA,oBAAA,CADA;AAEA,KAhBA;AAiBA,IAAA,aAjBA,2BAiBA;AACA,aAAA,KAAA,EAAA,CAAA,KAAA,CAAA,MAAA,aACA,KAAA,UADA,wBAEA,KAAA,UAFA,CAAA;AAGA;AArBA,IAtBA;AA6CA,EAAA,WAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,KAAA,EAAA;AAFA;AADA,GA7CA;AAmDA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,KAAA,CAAA,EAAA,CAAA,QADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIA,gBAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AAJA;AAAA;AAAA,uBAMA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,gBAAA,EAAA;AACA,kBAAA,KAAA,EAAA,KAAA,CAAA,KADA;AAEA,kBAAA,SAAA,EAAA,KAAA,CAAA;AAFA,iBAAA,CANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAaA,gBAAA,KAAA,CAAA,UAAA,GAAA,KAAA;AAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAhBA;AAnDA,CAAA","sourcesContent":["<template>\n  <div>\n    <form\n      v-if=\"!hasSubmitted\"\n      class=\"email-input-group\"\n      @submit.prevent=\"onSubmit\"\n    >\n      <input\n        v-model.trim=\"email\"\n        class=\"form-input\"\n        :placeholder=\"$t('EMAIL_PLACEHOLDER')\"\n        :class=\"inputHasError\"\n        @input=\"$v.email.$touch\"\n        @keydown.enter=\"onSubmit\"\n      />\n      <button\n        class=\"button small\"\n        :disabled=\"$v.email.$invalid\"\n        :style=\"{\n          background: widgetColor,\n          borderColor: widgetColor,\n          color: textColor,\n        }\"\n      >\n        <fluent-icon v-if=\"!isUpdating\" icon=\"chevron-right\" />\n        <spinner v-else class=\"mx-2\" />\n      </button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { required, email } from 'vuelidate/lib/validators';\nimport { getContrastingTextColor } from '@chatwoot/utils';\n\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport Spinner from 'shared/components/Spinner';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\n\nexport default {\n  components: {\n    FluentIcon,\n    Spinner,\n  },\n  mixins: [darkModeMixin],\n  props: {\n    messageId: {\n      type: Number,\n      required: true,\n    },\n    messageContentAttributes: {\n      type: Object,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      email: '',\n      isUpdating: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n    }),\n    textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    hasSubmitted() {\n      return (\n        this.messageContentAttributes &&\n        this.messageContentAttributes.submitted_email\n      );\n    },\n    inputColor() {\n      return `${this.$dm('bg-white', 'dark:bg-slate-600')}\n        ${this.$dm('text-black-900', 'dark:text-slate-50')}`;\n    },\n    inputHasError() {\n      return this.$v.email.$error\n        ? `${this.inputColor} error`\n        : `${this.inputColor}`;\n    },\n  },\n  validations: {\n    email: {\n      required,\n      email,\n    },\n  },\n  methods: {\n    async onSubmit() {\n      if (this.$v.$invalid) {\n        return;\n      }\n      this.isUpdating = true;\n      try {\n        await this.$store.dispatch('message/update', {\n          email: this.email,\n          messageId: this.messageId,\n        });\n      } catch (error) {\n        // Ignore error\n      } finally {\n        this.isUpdating = false;\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~widget/assets/scss/variables.scss';\n\n.email-input-group {\n  display: flex;\n  margin: $space-small 0;\n  min-width: 200px;\n\n  input {\n    border-bottom-right-radius: 0;\n    border-top-right-radius: 0;\n    padding: $space-one;\n    width: 100%;\n\n    &::placeholder {\n      color: $color-light-gray;\n    }\n\n    &.error {\n      border-color: $color-error;\n    }\n  }\n\n  .button {\n    border-bottom-left-radius: 0;\n    border-top-left-radius: 0;\n    font-size: $font-size-large;\n    height: auto;\n    margin-left: -1px;\n\n    .spinner {\n      display: block;\n      padding: 0;\n      height: auto;\n      width: auto;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/widget/components/template"},"metadata":{},"sourceType":"module"}