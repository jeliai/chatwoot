{"ast":null,"code":"import { backoff } from './backoff';\n\nvar PriorityQueue =\n/** @class */\nfunction () {\n  function PriorityQueue(maxAttempts, queue, seen) {\n    this.future = [];\n    this.maxAttempts = maxAttempts;\n    this.queue = queue;\n    this.seen = seen !== null && seen !== void 0 ? seen : {};\n  }\n\n  PriorityQueue.prototype.push = function () {\n    var _this = this;\n\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    var accepted = operations.map(function (operation) {\n      var attempts = _this.updateAttempts(operation);\n\n      if (attempts > _this.maxAttempts || _this.includes(operation)) {\n        return false;\n      }\n\n      _this.queue.push(operation);\n\n      return true;\n    });\n    this.queue = this.queue.sort(function (a, b) {\n      return _this.getAttempts(a) - _this.getAttempts(b);\n    });\n    return accepted;\n  };\n\n  PriorityQueue.prototype.pushWithBackoff = function (operation) {\n    var _this = this;\n\n    if (this.getAttempts(operation) === 0) {\n      return this.push(operation)[0];\n    }\n\n    var attempt = this.updateAttempts(operation);\n\n    if (attempt > this.maxAttempts || this.includes(operation)) {\n      return false;\n    }\n\n    var timeout = backoff({\n      attempt: attempt - 1\n    });\n    setTimeout(function () {\n      _this.queue.push(operation); // remove from future list\n\n\n      _this.future = _this.future.filter(function (f) {\n        return f.id !== operation.id;\n      });\n    }, timeout);\n    this.future.push(operation);\n    return true;\n  };\n\n  PriorityQueue.prototype.getAttempts = function (operation) {\n    var _a;\n\n    return (_a = this.seen[operation.id]) !== null && _a !== void 0 ? _a : 0;\n  };\n\n  PriorityQueue.prototype.updateAttempts = function (operation) {\n    this.seen[operation.id] = this.getAttempts(operation) + 1;\n    return this.getAttempts(operation);\n  };\n\n  PriorityQueue.prototype.includes = function (operation) {\n    return this.queue.includes(operation) || this.future.includes(operation) || Boolean(this.queue.find(function (i) {\n      return i.id === operation.id;\n    })) || Boolean(this.future.find(function (i) {\n      return i.id === operation.id;\n    }));\n  };\n\n  PriorityQueue.prototype.pop = function () {\n    return this.queue.shift();\n  };\n\n  Object.defineProperty(PriorityQueue.prototype, \"length\", {\n    get: function get() {\n      return this.queue.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PriorityQueue.prototype, \"todo\", {\n    get: function get() {\n      return this.queue.length + this.future.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PriorityQueue;\n}();\n\nexport { PriorityQueue };","map":null,"metadata":{},"sourceType":"module"}