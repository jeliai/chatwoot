{"ast":null,"code":"/* eslint-disable no-plusplus */\n\n/* eslint-disable no-cond-assign */\nimport { wrapIn, setBlockType, chainCommands, toggleMark, exitCode, joinUp, joinDown, lift, selectParentNode } from 'prosemirror-commands';\nimport { wrapInList, splitListItem, liftListItem, sinkListItem } from 'prosemirror-schema-list';\nimport { undo, redo } from 'prosemirror-history';\nimport { undoInputRule } from 'prosemirror-inputrules';\nvar mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false; // :: (Schema, ?Object) â†’ Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\n\nexport function buildKeymap(schema, mapKeys) {\n  var keys = {};\n  var type;\n\n  function bind(key, cmd) {\n    if (mapKeys) {\n      var mapped = mapKeys[key];\n      if (mapped === false) return;\n      if (mapped) key = mapped;\n    }\n\n    keys[key] = cmd;\n  }\n\n  bind('Mod-z', undo);\n  bind('Shift-Mod-z', redo);\n  bind('Backspace', undoInputRule);\n  if (!mac) bind('Mod-y', redo);\n  bind('Alt-ArrowUp', joinUp);\n  bind('Alt-ArrowDown', joinDown);\n  bind('Mod-BracketLeft', lift);\n  bind('Escape', selectParentNode);\n\n  if (type = schema.marks.strong) {\n    bind('Mod-b', toggleMark(type));\n    bind('Mod-B', toggleMark(type));\n  }\n\n  if (type = schema.marks.em) {\n    bind('Mod-i', toggleMark(type));\n    bind('Mod-I', toggleMark(type));\n  }\n\n  if (type = schema.marks.code) bind('Mod-`', toggleMark(type));\n  if (type = schema.nodes.bullet_list) bind('Shift-Ctrl-8', wrapInList(type));\n  if (type = schema.nodes.ordered_list) bind('Shift-Ctrl-9', wrapInList(type));\n  if (type = schema.nodes.blockquote) bind('Ctrl->', wrapIn(type));\n\n  if (type = schema.nodes.hard_break) {\n    var br = type;\n    var cmd = chainCommands(exitCode, function (state, dispatch) {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());\n      return true;\n    });\n    bind('Mod-Enter', cmd);\n    bind('Shift-Enter', cmd);\n    if (mac) bind('Ctrl-Enter', cmd);\n  }\n\n  if (type = schema.nodes.list_item) {\n    bind('Enter', splitListItem(type));\n    bind('Mod-[', liftListItem(type));\n    bind('Mod-]', sinkListItem(type));\n  }\n\n  if (type = schema.nodes.paragraph) bind('Shift-Ctrl-0', setBlockType(type));\n  if (type = schema.nodes.code_block) bind('Shift-Ctrl-\\\\', setBlockType(type));\n  if (type = schema.nodes.heading) for (var i = 1; i <= 6; i++) {\n    bind('Shift-Ctrl-' + i, setBlockType(type, {\n      level: i\n    }));\n  }\n\n  if (type = schema.nodes.horizontal_rule) {\n    var hr = type;\n    bind('Mod-_', function (state, dispatch) {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());\n      return true;\n    });\n  }\n\n  return keys;\n}","map":null,"metadata":{},"sourceType":"module"}