{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { MESSAGE_TYPE } from 'shared/constants/messages';\nimport { applyPageFilters } from './helpers';\nexport var getSelectedChatConversation = function getSelectedChatConversation(_ref) {\n  var allConversations = _ref.allConversations,\n      selectedChatId = _ref.selectedChatId;\n  return allConversations.filter(function (conversation) {\n    return conversation.id === selectedChatId;\n  });\n}; // getters\n\nvar getters = {\n  getAllConversations: function getAllConversations(_ref2) {\n    var allConversations = _ref2.allConversations;\n    return allConversations.sort(function (a, b) {\n      var _b$messages$last, _a$messages$last;\n\n      return ((_b$messages$last = b.messages.last()) === null || _b$messages$last === void 0 ? void 0 : _b$messages$last.created_at) - ((_a$messages$last = a.messages.last()) === null || _a$messages$last === void 0 ? void 0 : _a$messages$last.created_at);\n    });\n  },\n  getSelectedChat: function getSelectedChat(_ref3) {\n    var selectedChatId = _ref3.selectedChatId,\n        allConversations = _ref3.allConversations;\n    var selectedChat = allConversations.find(function (conversation) {\n      return conversation.id === selectedChatId;\n    });\n    return selectedChat || {};\n  },\n  getLastEmailInSelectedChat: function getLastEmailInSelectedChat(stage, _getters) {\n    var selectedChat = _getters.getSelectedChat;\n    var _selectedChat$message = selectedChat.messages,\n        messages = _selectedChat$message === void 0 ? [] : _selectedChat$message;\n\n    var lastEmail = _toConsumableArray(messages).reverse().find(function (message) {\n      var _message$content_attr = message.content_attributes,\n          contentAttributes = _message$content_attr === void 0 ? {} : _message$content_attr,\n          messageType = message.message_type;\n      var _contentAttributes$em = contentAttributes.email,\n          email = _contentAttributes$em === void 0 ? {} : _contentAttributes$em;\n      var isIncomingOrOutgoing = messageType === MESSAGE_TYPE.OUTGOING || messageType === MESSAGE_TYPE.INCOMING;\n\n      if (email.from && isIncomingOrOutgoing) {\n        return true;\n      }\n\n      return false;\n    });\n\n    return lastEmail;\n  },\n  getMineChats: function getMineChats(_state, _, __, rootGetters) {\n    return function (activeFilters) {\n      var _rootGetters$getCurre;\n\n      var currentUserID = (_rootGetters$getCurre = rootGetters.getCurrentUser) === null || _rootGetters$getCurre === void 0 ? void 0 : _rootGetters$getCurre.id;\n      return _state.allConversations.filter(function (conversation) {\n        var assignee = conversation.meta.assignee;\n        var isAssignedToMe = assignee && assignee.id === currentUserID;\n        var shouldFilter = applyPageFilters(conversation, activeFilters);\n        var isChatMine = isAssignedToMe && shouldFilter;\n        return isChatMine;\n      });\n    };\n  },\n  getAppliedConversationFilters: function getAppliedConversationFilters(_state) {\n    return _state.appliedFilters;\n  },\n  getUnAssignedChats: function getUnAssignedChats(_state) {\n    return function (activeFilters) {\n      return _state.allConversations.filter(function (conversation) {\n        var isUnAssigned = !conversation.meta.assignee;\n        var shouldFilter = applyPageFilters(conversation, activeFilters);\n        return isUnAssigned && shouldFilter;\n      });\n    };\n  },\n  getAllStatusChats: function getAllStatusChats(_state) {\n    return function (activeFilters) {\n      return _state.allConversations.filter(function (conversation) {\n        var shouldFilter = applyPageFilters(conversation, activeFilters);\n        return shouldFilter;\n      });\n    };\n  },\n  getChatListLoadingStatus: function getChatListLoadingStatus(_ref4) {\n    var listLoadingStatus = _ref4.listLoadingStatus;\n    return listLoadingStatus;\n  },\n  getAllMessagesLoaded: function getAllMessagesLoaded(_state) {\n    var _getSelectedChatConve = getSelectedChatConversation(_state),\n        _getSelectedChatConve2 = _slicedToArray(_getSelectedChatConve, 1),\n        chat = _getSelectedChatConve2[0];\n\n    return !chat || chat.allMessagesLoaded === undefined ? false : chat.allMessagesLoaded;\n  },\n  getUnreadCount: function getUnreadCount(_state) {\n    var _getSelectedChatConve3 = getSelectedChatConversation(_state),\n        _getSelectedChatConve4 = _slicedToArray(_getSelectedChatConve3, 1),\n        chat = _getSelectedChatConve4[0];\n\n    if (!chat) return [];\n    return chat.messages.filter(function (chatMessage) {\n      return chatMessage.created_at * 1000 > chat.agent_last_seen_at * 1000 && chatMessage.message_type === 0 && chatMessage.private !== true;\n    }).length;\n  },\n  getChatStatusFilter: function getChatStatusFilter(_ref5) {\n    var chatStatusFilter = _ref5.chatStatusFilter;\n    return chatStatusFilter;\n  },\n  getSelectedInbox: function getSelectedInbox(_ref6) {\n    var currentInbox = _ref6.currentInbox;\n    return currentInbox;\n  },\n  getConversationById: function getConversationById(_state) {\n    return function (conversationId) {\n      return _state.allConversations.find(function (value) {\n        return value.id === Number(conversationId);\n      });\n    };\n  }\n};\nexport default getters;","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/getters.js"],"names":["MESSAGE_TYPE","applyPageFilters","getSelectedChatConversation","allConversations","selectedChatId","filter","conversation","id","getters","getAllConversations","sort","a","b","messages","last","created_at","getSelectedChat","selectedChat","find","getLastEmailInSelectedChat","stage","_getters","lastEmail","reverse","message","content_attributes","contentAttributes","messageType","message_type","email","isIncomingOrOutgoing","OUTGOING","INCOMING","from","getMineChats","_state","_","__","rootGetters","activeFilters","currentUserID","getCurrentUser","assignee","meta","isAssignedToMe","shouldFilter","isChatMine","getAppliedConversationFilters","appliedFilters","getUnAssignedChats","isUnAssigned","getAllStatusChats","getChatListLoadingStatus","listLoadingStatus","getAllMessagesLoaded","chat","allMessagesLoaded","undefined","getUnreadCount","chatMessage","agent_last_seen_at","private","length","getChatStatusFilter","chatStatusFilter","getSelectedInbox","currentInbox","getConversationById","conversationId","value","Number"],"mappings":"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","sourcesContent":["import { MESSAGE_TYPE } from 'shared/constants/messages';\nimport { applyPageFilters } from './helpers';\n\nexport const getSelectedChatConversation = ({\n  allConversations,\n  selectedChatId,\n}) =>\n  allConversations.filter(conversation => conversation.id === selectedChatId);\n\n// getters\nconst getters = {\n  getAllConversations: ({ allConversations }) =>\n    allConversations.sort(\n      (a, b) => b.messages.last()?.created_at - a.messages.last()?.created_at\n    ),\n  getSelectedChat: ({ selectedChatId, allConversations }) => {\n    const selectedChat = allConversations.find(\n      conversation => conversation.id === selectedChatId\n    );\n    return selectedChat || {};\n  },\n  getLastEmailInSelectedChat: (stage, _getters) => {\n    const selectedChat = _getters.getSelectedChat;\n    const { messages = [] } = selectedChat;\n    const lastEmail = [...messages].reverse().find(message => {\n      const {\n        content_attributes: contentAttributes = {},\n        message_type: messageType,\n      } = message;\n      const { email = {} } = contentAttributes;\n      const isIncomingOrOutgoing =\n        messageType === MESSAGE_TYPE.OUTGOING ||\n        messageType === MESSAGE_TYPE.INCOMING;\n      if (email.from && isIncomingOrOutgoing) {\n        return true;\n      }\n      return false;\n    });\n\n    return lastEmail;\n  },\n  getMineChats: (_state, _, __, rootGetters) => activeFilters => {\n    const currentUserID = rootGetters.getCurrentUser?.id;\n\n    return _state.allConversations.filter(conversation => {\n      const { assignee } = conversation.meta;\n      const isAssignedToMe = assignee && assignee.id === currentUserID;\n      const shouldFilter = applyPageFilters(conversation, activeFilters);\n      const isChatMine = isAssignedToMe && shouldFilter;\n\n      return isChatMine;\n    });\n  },\n  getAppliedConversationFilters: _state => {\n    return _state.appliedFilters;\n  },\n  getUnAssignedChats: _state => activeFilters => {\n    return _state.allConversations.filter(conversation => {\n      const isUnAssigned = !conversation.meta.assignee;\n      const shouldFilter = applyPageFilters(conversation, activeFilters);\n      return isUnAssigned && shouldFilter;\n    });\n  },\n  getAllStatusChats: _state => activeFilters => {\n    return _state.allConversations.filter(conversation => {\n      const shouldFilter = applyPageFilters(conversation, activeFilters);\n      return shouldFilter;\n    });\n  },\n  getChatListLoadingStatus: ({ listLoadingStatus }) => listLoadingStatus,\n  getAllMessagesLoaded(_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    return !chat || chat.allMessagesLoaded === undefined\n      ? false\n      : chat.allMessagesLoaded;\n  },\n  getUnreadCount(_state) {\n    const [chat] = getSelectedChatConversation(_state);\n    if (!chat) return [];\n    return chat.messages.filter(\n      chatMessage =>\n        chatMessage.created_at * 1000 > chat.agent_last_seen_at * 1000 &&\n        chatMessage.message_type === 0 &&\n        chatMessage.private !== true\n    ).length;\n  },\n  getChatStatusFilter: ({ chatStatusFilter }) => chatStatusFilter,\n  getSelectedInbox: ({ currentInbox }) => currentInbox,\n  getConversationById: _state => conversationId => {\n    return _state.allConversations.find(\n      value => value.id === Number(conversationId)\n    );\n  },\n};\n\nexport default getters;\n"]},"metadata":{},"sourceType":"module"}