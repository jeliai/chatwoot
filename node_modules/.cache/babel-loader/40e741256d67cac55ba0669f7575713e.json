{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mixin as clickaway } from 'vue-clickaway';\nimport { mapGetters } from 'vuex';\nimport timeMixin from '../../../../mixins/time';\nimport ResultItem from './ResultItem';\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport SwitchLayout from './SwitchLayout.vue';\nexport default {\n  components: {\n    ResultItem: ResultItem,\n    SwitchLayout: SwitchLayout\n  },\n  directives: {\n    focus: {\n      inserted: function inserted(el) {\n        el.focus();\n      }\n    }\n  },\n  mixins: [timeMixin, messageFormatterMixin, clickaway],\n  props: {\n    isOnExpandedLayout: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      searchTerm: '',\n      showSearchBox: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    conversations: 'conversationSearch/getConversations',\n    uiFlags: 'conversationSearch/getUIFlags',\n    currentPage: 'conversationPage/getCurrentPage'\n  })), {}, {\n    resultsCount: function resultsCount() {\n      return this.conversations.length;\n    },\n    showSearchResult: function showSearchResult() {\n      return this.searchTerm && this.conversations.length && !this.uiFlags.isFetching;\n    },\n    showEmptyResult: function showEmptyResult() {\n      return this.searchTerm && !this.conversations.length && !this.uiFlags.isFetching;\n    }\n  }),\n  watch: {\n    searchTerm: function searchTerm(newValue) {\n      var _this = this;\n\n      if (this.typingTimer) {\n        clearTimeout(this.typingTimer);\n      }\n\n      this.typingTimer = setTimeout(function () {\n        _this.hasSearched = true;\n\n        _this.$store.dispatch('conversationSearch/get', {\n          q: newValue\n        });\n      }, 1000);\n    },\n    currentPage: function currentPage() {\n      this.clearSearchTerm();\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.$store.dispatch('conversationSearch/get', {\n      q: ''\n    });\n    bus.$on('clearSearchInput', function () {\n      _this2.clearSearchTerm();\n    });\n  },\n  methods: {\n    onSearch: function onSearch() {\n      this.showSearchBox = true;\n    },\n    closeSearch: function closeSearch() {\n      this.showSearchBox = false;\n    },\n    clearSearchTerm: function clearSearchTerm() {\n      this.searchTerm = '';\n    }\n  }\n};","map":{"version":3,"sources":["PopOverSearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,SAAA,KAAA,IAAA,SAAA,QAAA,eAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,qBAAA,MAAA,qCAAA;AACA,OAAA,YAAA,MAAA,oBAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA,UADA;AAEA,IAAA,YAAA,EAAA;AAFA,GADA;AAMA,EAAA,UAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,QADA,oBACA,EADA,EACA;AACA,QAAA,EAAA,CAAA,KAAA;AACA;AAHA;AADA,GANA;AAcA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,qBAAA,EAAA,SAAA,CAdA;AAgBA,EAAA,KAAA,EAAA;AACA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAhBA;AAuBA,EAAA,IAvBA,kBAuBA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,aAAA,EAAA;AAFA,KAAA;AAIA,GA5BA;AA8BA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,aAAA,EAAA,qCADA;AAEA,IAAA,OAAA,EAAA,+BAFA;AAGA,IAAA,WAAA,EAAA;AAHA,GAAA,CADA;AAMA,IAAA,YANA,0BAMA;AACA,aAAA,KAAA,aAAA,CAAA,MAAA;AACA,KARA;AASA,IAAA,gBATA,8BASA;AACA,aACA,KAAA,UAAA,IAAA,KAAA,aAAA,CAAA,MAAA,IAAA,CAAA,KAAA,OAAA,CAAA,UADA;AAGA,KAbA;AAcA,IAAA,eAdA,6BAcA;AACA,aACA,KAAA,UAAA,IACA,CAAA,KAAA,aAAA,CAAA,MADA,IAEA,CAAA,KAAA,OAAA,CAAA,UAHA;AAKA;AApBA,IA9BA;AAqDA,EAAA,KAAA,EAAA;AACA,IAAA,UADA,sBACA,QADA,EACA;AAAA;;AACA,UAAA,KAAA,WAAA,EAAA;AACA,QAAA,YAAA,CAAA,KAAA,WAAA,CAAA;AACA;;AAEA,WAAA,WAAA,GAAA,UAAA,CAAA,YAAA;AACA,QAAA,KAAA,CAAA,WAAA,GAAA,IAAA;;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,wBAAA,EAAA;AAAA,UAAA,CAAA,EAAA;AAAA,SAAA;AACA,OAHA,EAGA,IAHA,CAAA;AAIA,KAVA;AAWA,IAAA,WAXA,yBAWA;AACA,WAAA,eAAA;AACA;AAbA,GArDA;AAqEA,EAAA,OArEA,qBAqEA;AAAA;;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,wBAAA,EAAA;AAAA,MAAA,CAAA,EAAA;AAAA,KAAA;AACA,IAAA,GAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,YAAA;AACA,MAAA,MAAA,CAAA,eAAA;AACA,KAFA;AAGA,GA1EA;AA4EA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,WAJA,yBAIA;AACA,WAAA,aAAA,GAAA,KAAA;AACA,KANA;AAOA,IAAA,eAPA,6BAOA;AACA,WAAA,UAAA,GAAA,EAAA;AACA;AATA;AA5EA,CAAA","sourcesContent":["<template>\n  <div v-on-clickaway=\"closeSearch\" class=\"search-wrap\">\n    <div class=\"search\" :class=\"{ 'is-active': showSearchBox }\">\n      <woot-sidemenu-icon />\n      <div class=\"icon\">\n        <fluent-icon icon=\"search\" class=\"search--icon\" size=\"28\" />\n      </div>\n      <input\n        v-model=\"searchTerm\"\n        class=\"search--input\"\n        :placeholder=\"$t('CONVERSATION.SEARCH_MESSAGES')\"\n        @focus=\"onSearch\"\n      />\n      <switch-layout\n        :is-on-expanded-layout=\"isOnExpandedLayout\"\n        @toggle=\"$emit('toggle-conversation-layout')\"\n      />\n    </div>\n    <div v-if=\"showSearchBox\" class=\"results-wrap\">\n      <div class=\"show-results\">\n        <div>\n          <div class=\"result-view\">\n            <div class=\"result\">\n              {{ $t('CONVERSATION.SEARCH.RESULT_TITLE') }}\n              <span v-if=\"resultsCount\" class=\"message-counter\">\n                ({{ resultsCount }})\n              </span>\n            </div>\n            <div v-if=\"uiFlags.isFetching\" class=\"search--activity-message\">\n              <woot-spinner size=\"\" />\n              {{ $t('CONVERSATION.SEARCH.LOADING_MESSAGE') }}\n            </div>\n          </div>\n\n          <div v-if=\"showSearchResult\" class=\"search-results--container\">\n            <result-item\n              v-for=\"conversation in conversations\"\n              :key=\"conversation.messageId\"\n              :conversation-id=\"conversation.id\"\n              :user-name=\"conversation.contact.name\"\n              :timestamp=\"conversation.created_at\"\n              :messages=\"conversation.messages\"\n              :search-term=\"searchTerm\"\n              :inbox-name=\"conversation.inbox.name\"\n            />\n          </div>\n          <div v-else-if=\"showEmptyResult\" class=\"search--activity-no-message\">\n            {{ $t('CONVERSATION.SEARCH.NO_MATCHING_RESULTS') }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mixin as clickaway } from 'vue-clickaway';\nimport { mapGetters } from 'vuex';\nimport timeMixin from '../../../../mixins/time';\nimport ResultItem from './ResultItem';\nimport messageFormatterMixin from 'shared/mixins/messageFormatterMixin';\nimport SwitchLayout from './SwitchLayout.vue';\nexport default {\n  components: {\n    ResultItem,\n    SwitchLayout,\n  },\n\n  directives: {\n    focus: {\n      inserted(el) {\n        el.focus();\n      },\n    },\n  },\n\n  mixins: [timeMixin, messageFormatterMixin, clickaway],\n\n  props: {\n    isOnExpandedLayout: {\n      type: Boolean,\n      required: true,\n    },\n  },\n\n  data() {\n    return {\n      searchTerm: '',\n      showSearchBox: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      conversations: 'conversationSearch/getConversations',\n      uiFlags: 'conversationSearch/getUIFlags',\n      currentPage: 'conversationPage/getCurrentPage',\n    }),\n    resultsCount() {\n      return this.conversations.length;\n    },\n    showSearchResult() {\n      return (\n        this.searchTerm && this.conversations.length && !this.uiFlags.isFetching\n      );\n    },\n    showEmptyResult() {\n      return (\n        this.searchTerm &&\n        !this.conversations.length &&\n        !this.uiFlags.isFetching\n      );\n    },\n  },\n\n  watch: {\n    searchTerm(newValue) {\n      if (this.typingTimer) {\n        clearTimeout(this.typingTimer);\n      }\n\n      this.typingTimer = setTimeout(() => {\n        this.hasSearched = true;\n        this.$store.dispatch('conversationSearch/get', { q: newValue });\n      }, 1000);\n    },\n    currentPage() {\n      this.clearSearchTerm();\n    },\n  },\n\n  mounted() {\n    this.$store.dispatch('conversationSearch/get', { q: '' });\n    bus.$on('clearSearchInput', () => {\n      this.clearSearchTerm();\n    });\n  },\n\n  methods: {\n    onSearch() {\n      this.showSearchBox = true;\n    },\n    closeSearch() {\n      this.showSearchBox = false;\n    },\n    clearSearchTerm() {\n      this.searchTerm = '';\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.search-wrap {\n  position: relative;\n}\n\n.search {\n  display: flex;\n  padding: 0;\n  border-bottom: 1px solid transparent;\n  padding: var(--space-one) var(--space-normal) var(--space-smaller)\n    var(--space-normal);\n\n  &:hover {\n    .search--icon {\n      color: var(--w-500);\n    }\n  }\n}\n\n.search--input {\n  align-items: center;\n  border: 0;\n  color: var(--color-body);\n  cursor: pointer;\n  width: 100%;\n  display: flex;\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-normal);\n  text-align: left;\n  line-height: var(--font-size-large);\n}\n\n.search--icon {\n  color: var(--s-600);\n  font-size: var(--font-size-large);\n  padding: 0 var(--space-small) 0 0;\n}\n\n.icon {\n  display: flex;\n}\n\ninput::placeholder {\n  color: var(--color-body);\n  font-size: var(--font-size-small);\n}\n\n.results-wrap {\n  position: absolute;\n  z-index: 9999;\n  box-shadow: var(--shadow-large);\n  background: white;\n  width: 100%;\n  max-height: 70vh;\n  overflow: auto;\n}\n\n.show-results {\n  list-style-type: none;\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-normal);\n}\n\n.result-view {\n  display: flex;\n  justify-content: space-between;\n}\n\n.result {\n  padding: var(--space-smaller) var(--space-smaller) var(--space-smaller)\n    var(--space-normal);\n  color: var(--s-700);\n  font-size: var(--font-size-medium);\n  font-weight: var(--font-weight-bold);\n\n  .message-counter {\n    color: var(--s-500);\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-bold);\n  }\n}\n\n.search--activity-message {\n  padding: var(--space-small) var(--space-normal) var(--space-small)\n    var(--space-zero);\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-medium);\n  color: var(--s-500);\n}\n\n.search--activity-no-message {\n  display: flex;\n  justify-content: center;\n  padding: var(--space-one) var(--space-zero) var(--space-two) var(--space-zero);\n  font-size: var(--font-size-small);\n  font-weight: var(--font-weight-medium);\n  color: var(--s-500);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/conversation/search"},"metadata":{},"sourceType":"module"}