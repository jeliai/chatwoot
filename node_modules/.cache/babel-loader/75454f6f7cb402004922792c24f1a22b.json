{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { CSAT_RATINGS } from '../../../../../shared/constants/messages';\n\nvar generateInputSelectContent = function generateInputSelectContent(contentAttributes) {\n  var _contentAttributes$su = contentAttributes.submitted_values,\n      submittedValues = _contentAttributes$su === void 0 ? [] : _contentAttributes$su;\n\n  var _submittedValues = _slicedToArray(submittedValues, 1),\n      selectedOption = _submittedValues[0];\n\n  if (selectedOption && selectedOption.title) {\n    return \"<strong>\".concat(selectedOption.title, \"</strong>\");\n  }\n\n  return '';\n};\n\nvar generateInputEmailContent = function generateInputEmailContent(contentAttributes) {\n  var _contentAttributes$su2 = contentAttributes.submitted_email,\n      submittedEmail = _contentAttributes$su2 === void 0 ? '' : _contentAttributes$su2;\n\n  if (submittedEmail) {\n    return \"<strong>\".concat(submittedEmail, \"</strong>\");\n  }\n\n  return '';\n};\n\nvar generateFormContent = function generateFormContent(contentAttributes, _ref) {\n  var noResponseText = _ref.noResponseText;\n  var items = contentAttributes.items,\n      _contentAttributes$su3 = contentAttributes.submitted_values,\n      submittedValues = _contentAttributes$su3 === void 0 ? [] : _contentAttributes$su3;\n\n  if (submittedValues.length) {\n    var submittedObject = submittedValues.reduce(function (acc, keyValuePair) {\n      acc[keyValuePair.name] = keyValuePair.value;\n      return acc;\n    }, {});\n    var formMessageContent = '';\n    items.forEach(function (item) {\n      formMessageContent += \"<div>\".concat(item.label, \"</div>\");\n      var response = submittedObject[item.name] || noResponseText;\n      formMessageContent += \"<strong>\".concat(response, \"</strong><br/><br/>\");\n    });\n    return formMessageContent;\n  }\n\n  return '';\n};\n\nvar generateCSATContent = function generateCSATContent(contentAttributes, _ref2) {\n  var ratingTitle = _ref2.ratingTitle,\n      feedbackTitle = _ref2.feedbackTitle;\n  var _contentAttributes$su4 = contentAttributes.submitted_values;\n  _contentAttributes$su4 = _contentAttributes$su4 === void 0 ? {} : _contentAttributes$su4;\n  var _contentAttributes$su5 = _contentAttributes$su4.csat_survey_response,\n      surveyResponse = _contentAttributes$su5 === void 0 ? {} : _contentAttributes$su5;\n\n  var _ref3 = surveyResponse || {},\n      rating = _ref3.rating,\n      feedback_message = _ref3.feedback_message;\n\n  var messageContent = '';\n\n  if (rating) {\n    var _CSAT_RATINGS$filter = CSAT_RATINGS.filter(function (csatRating) {\n      return csatRating.value === rating;\n    }),\n        _CSAT_RATINGS$filter2 = _slicedToArray(_CSAT_RATINGS$filter, 1),\n        _CSAT_RATINGS$filter3 = _CSAT_RATINGS$filter2[0],\n        ratingObject = _CSAT_RATINGS$filter3 === void 0 ? {} : _CSAT_RATINGS$filter3;\n\n    messageContent += \"<div><strong>\".concat(ratingTitle, \"</strong></div>\");\n    messageContent += \"<p>\".concat(ratingObject.emoji, \"</p>\");\n  }\n\n  if (feedback_message) {\n    messageContent += \"<div><strong>\".concat(feedbackTitle, \"</strong></div>\");\n    messageContent += \"<p>\".concat(feedback_message, \"</p>\");\n  }\n\n  return messageContent;\n};\n\nexport var generateBotMessageContent = function generateBotMessageContent(contentType, contentAttributes) {\n  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref4$noResponseText = _ref4.noResponseText,\n      noResponseText = _ref4$noResponseText === void 0 ? 'No response' : _ref4$noResponseText,\n      _ref4$csat = _ref4.csat;\n\n  _ref4$csat = _ref4$csat === void 0 ? {} : _ref4$csat;\n  var _ref4$csat$ratingTitl = _ref4$csat.ratingTitle,\n      ratingTitle = _ref4$csat$ratingTitl === void 0 ? 'Rating' : _ref4$csat$ratingTitl,\n      _ref4$csat$feedbackTi = _ref4$csat.feedbackTitle,\n      feedbackTitle = _ref4$csat$feedbackTi === void 0 ? 'Feedback' : _ref4$csat$feedbackTi;\n  var contentTypeMethods = {\n    input_select: generateInputSelectContent,\n    input_email: generateInputEmailContent,\n    form: generateFormContent,\n    input_csat: generateCSATContent\n  };\n  var contentTypeMethod = contentTypeMethods[contentType];\n\n  if (contentTypeMethod && typeof contentTypeMethod === 'function') {\n    return contentTypeMethod(contentAttributes, {\n      noResponseText: noResponseText,\n      ratingTitle: ratingTitle,\n      feedbackTitle: feedbackTitle\n    });\n  }\n\n  return '';\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/components/widgets/conversation/helpers/botMessageContentHelper.js"],"names":["CSAT_RATINGS","generateInputSelectContent","contentAttributes","submitted_values","submittedValues","selectedOption","title","generateInputEmailContent","submitted_email","submittedEmail","generateFormContent","noResponseText","items","length","submittedObject","reduce","acc","keyValuePair","name","value","formMessageContent","forEach","item","label","response","generateCSATContent","ratingTitle","feedbackTitle","csat_survey_response","surveyResponse","rating","feedback_message","messageContent","filter","csatRating","ratingObject","emoji","generateBotMessageContent","contentType","csat","contentTypeMethods","input_select","input_email","form","input_csat","contentTypeMethod"],"mappings":"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","sourcesContent":["import { CSAT_RATINGS } from '../../../../../shared/constants/messages';\n\nconst generateInputSelectContent = contentAttributes => {\n  const { submitted_values: submittedValues = [] } = contentAttributes;\n  const [selectedOption] = submittedValues;\n\n  if (selectedOption && selectedOption.title) {\n    return `<strong>${selectedOption.title}</strong>`;\n  }\n  return '';\n};\n\nconst generateInputEmailContent = contentAttributes => {\n  const { submitted_email: submittedEmail = '' } = contentAttributes;\n  if (submittedEmail) {\n    return `<strong>${submittedEmail}</strong>`;\n  }\n  return '';\n};\n\nconst generateFormContent = (contentAttributes, { noResponseText }) => {\n  const { items, submitted_values: submittedValues = [] } = contentAttributes;\n  if (submittedValues.length) {\n    const submittedObject = submittedValues.reduce((acc, keyValuePair) => {\n      acc[keyValuePair.name] = keyValuePair.value;\n      return acc;\n    }, {});\n    let formMessageContent = '';\n    items.forEach(item => {\n      formMessageContent += `<div>${item.label}</div>`;\n      const response = submittedObject[item.name] || noResponseText;\n      formMessageContent += `<strong>${response}</strong><br/><br/>`;\n    });\n    return formMessageContent;\n  }\n  return '';\n};\n\nconst generateCSATContent = (\n  contentAttributes,\n  { ratingTitle, feedbackTitle }\n) => {\n  const {\n    submitted_values: { csat_survey_response: surveyResponse = {} } = {},\n  } = contentAttributes;\n  const { rating, feedback_message } = surveyResponse || {};\n\n  let messageContent = '';\n  if (rating) {\n    const [ratingObject = {}] = CSAT_RATINGS.filter(\n      csatRating => csatRating.value === rating\n    );\n    messageContent += `<div><strong>${ratingTitle}</strong></div>`;\n    messageContent += `<p>${ratingObject.emoji}</p>`;\n  }\n  if (feedback_message) {\n    messageContent += `<div><strong>${feedbackTitle}</strong></div>`;\n    messageContent += `<p>${feedback_message}</p>`;\n  }\n  return messageContent;\n};\n\nexport const generateBotMessageContent = (\n  contentType,\n  contentAttributes,\n  {\n    noResponseText = 'No response',\n    csat: { ratingTitle = 'Rating', feedbackTitle = 'Feedback' } = {},\n  } = {}\n) => {\n  const contentTypeMethods = {\n    input_select: generateInputSelectContent,\n    input_email: generateInputEmailContent,\n    form: generateFormContent,\n    input_csat: generateCSATContent,\n  };\n\n  const contentTypeMethod = contentTypeMethods[contentType];\n  if (contentTypeMethod && typeof contentTypeMethod === 'function') {\n    return contentTypeMethod(contentAttributes, {\n      noResponseText,\n      ratingTitle,\n      feedbackTitle,\n    });\n  }\n  return '';\n};\n"]},"metadata":{},"sourceType":"module"}