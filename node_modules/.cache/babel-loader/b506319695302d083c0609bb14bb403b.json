{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport SettingsHeader from 'dashboard/routes/dashboard/settings/SettingsHeader';\nimport SettingIntroBanner from 'dashboard/components/widgets/SettingIntroBanner';\nexport default {\n  components: {\n    SettingsHeader: SettingsHeader,\n    SettingIntroBanner: SettingIntroBanner\n  },\n  mixins: [globalConfigMixin],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    currentPortal: function currentPortal() {\n      var slug = this.$route.params.portalSlug;\n      if (slug) return this.$store.getters['portals/portalBySlug'](slug);\n      return this.$store.getters['portals/allPortals'][0];\n    },\n    tabs: function tabs() {\n      var tabs = [{\n        key: 'edit_portal_information',\n        name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.BASIC_SETTINGS.TITLE')\n      }, {\n        key: 'edit_portal_customization',\n        name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.CUSTOMIZATION_SETTINGS.TITLE')\n      }, {\n        key: \"list_all_locale_categories\",\n        name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.CATEGORY_SETTINGS.TITLE')\n      }, {\n        key: 'edit_portal_locales',\n        name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.LOCALE_SETTINGS.TITLE')\n      }];\n      return tabs;\n    },\n    activeTabIndex: function activeTabIndex() {\n      return this.tabs.map(function (tab) {\n        return tab.key;\n      }).indexOf(this.$route.name);\n    },\n    portalName: function portalName() {\n      return this.currentPortal ? this.currentPortal.name : '';\n    },\n    currentPortalLocale: function currentPortalLocale() {\n      var _this$currentPortal, _this$currentPortal$m;\n\n      return this.currentPortal ? (_this$currentPortal = this.currentPortal) === null || _this$currentPortal === void 0 ? void 0 : (_this$currentPortal$m = _this$currentPortal.meta) === null || _this$currentPortal$m === void 0 ? void 0 : _this$currentPortal$m.default_locale : '';\n    }\n  }),\n  methods: {\n    onTabChange: function onTabChange(index) {\n      var nextRoute = this.tabs.map(function (tab) {\n        return tab.key;\n      })[index];\n      var slug = this.$route.params.portalSlug;\n      this.$router.push({\n        name: nextRoute,\n        params: {\n          portalSlug: slug,\n          locale: this.currentPortalLocale\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["EditPortal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,iBAAA,MAAA,iCAAA;AACA,OAAA,cAAA,MAAA,oDAAA;AACA,OAAA,kBAAA,MAAA,iDAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA,cADA;AAEA,IAAA,kBAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,iBAAA,CALA;AAMA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,YAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,aAJA,2BAIA;AACA,UAAA,IAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AACA,UAAA,IAAA,EAAA,OAAA,KAAA,MAAA,CAAA,OAAA,CAAA,sBAAA,EAAA,IAAA,CAAA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,oBAAA,EAAA,CAAA,CAAA;AACA,KARA;AASA,IAAA,IATA,kBASA;AACA,UAAA,IAAA,GAAA,CACA;AACA,QAAA,GAAA,EAAA,yBADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,mDAAA;AAFA,OADA,EAKA;AACA,QAAA,GAAA,EAAA,2BADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CACA,2DADA;AAFA,OALA,EAWA;AACA,QAAA,GAAA,8BADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,sDAAA;AAFA,OAXA,EAeA;AACA,QAAA,GAAA,EAAA,qBADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,oDAAA;AAFA,OAfA,CAAA;AAqBA,aAAA,IAAA;AACA,KAhCA;AAiCA,IAAA,cAjCA,4BAiCA;AACA,aAAA,KAAA,IAAA,CAAA,GAAA,CAAA,UAAA,GAAA;AAAA,eAAA,GAAA,CAAA,GAAA;AAAA,OAAA,EAAA,OAAA,CAAA,KAAA,MAAA,CAAA,IAAA,CAAA;AACA,KAnCA;AAoCA,IAAA,UApCA,wBAoCA;AACA,aAAA,KAAA,aAAA,GAAA,KAAA,aAAA,CAAA,IAAA,GAAA,EAAA;AACA,KAtCA;AAuCA,IAAA,mBAvCA,iCAuCA;AAAA;;AACA,aAAA,KAAA,aAAA,0BAAA,KAAA,aAAA,iFAAA,oBAAA,IAAA,0DAAA,sBAAA,cAAA,GAAA,EAAA;AACA;AAzCA,IANA;AAiDA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,KADA,EACA;AACA,UAAA,SAAA,GAAA,KAAA,IAAA,CAAA,GAAA,CAAA,UAAA,GAAA;AAAA,eAAA,GAAA,CAAA,GAAA;AAAA,OAAA,EAAA,KAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,UAAA;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,EAAA,SADA;AAEA,QAAA,MAAA,EAAA;AAAA,UAAA,UAAA,EAAA,IAAA;AAAA,UAAA,MAAA,EAAA,KAAA;AAAA;AAFA,OAAA;AAIA;AATA;AAjDA,CAAA","sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <settings-header\n      button-route=\"new\"\n      :header-title=\"$t('HELP_CENTER.PORTAL.EDIT.HEADER_TEXT')\"\n      show-back-button\n      :back-button-label=\"\n        $t('HELP_CENTER.PORTAL.ADD.CREATE_FLOW_PAGE.BACK_BUTTON')\n      \"\n      :show-new-button=\"false\"\n    />\n    <div>\n      <setting-intro-banner :header-title=\"portalName\">\n        <woot-tabs\n          :index=\"activeTabIndex\"\n          :border=\"false\"\n          @change=\"onTabChange\"\n        >\n          <woot-tabs-item\n            v-for=\"tab in tabs\"\n            :key=\"tab.key\"\n            :name=\"tab.name\"\n            :show-badge=\"false\"\n          />\n        </woot-tabs>\n      </setting-intro-banner>\n    </div>\n    <div class=\"row content-box\">\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport SettingsHeader from 'dashboard/routes/dashboard/settings/SettingsHeader';\nimport SettingIntroBanner from 'dashboard/components/widgets/SettingIntroBanner';\n\nexport default {\n  components: {\n    SettingsHeader,\n    SettingIntroBanner,\n  },\n  mixins: [globalConfigMixin],\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n    }),\n    currentPortal() {\n      const slug = this.$route.params.portalSlug;\n      if (slug) return this.$store.getters['portals/portalBySlug'](slug);\n      return this.$store.getters['portals/allPortals'][0];\n    },\n    tabs() {\n      const tabs = [\n        {\n          key: 'edit_portal_information',\n          name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.BASIC_SETTINGS.TITLE'),\n        },\n        {\n          key: 'edit_portal_customization',\n          name: this.$t(\n            'HELP_CENTER.PORTAL.EDIT.TABS.CUSTOMIZATION_SETTINGS.TITLE'\n          ),\n        },\n        {\n          key: `list_all_locale_categories`,\n          name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.CATEGORY_SETTINGS.TITLE'),\n        },\n        {\n          key: 'edit_portal_locales',\n          name: this.$t('HELP_CENTER.PORTAL.EDIT.TABS.LOCALE_SETTINGS.TITLE'),\n        },\n      ];\n\n      return tabs;\n    },\n    activeTabIndex() {\n      return this.tabs.map(tab => tab.key).indexOf(this.$route.name);\n    },\n    portalName() {\n      return this.currentPortal ? this.currentPortal.name : '';\n    },\n    currentPortalLocale() {\n      return this.currentPortal ? this.currentPortal?.meta?.default_locale : '';\n    },\n  },\n  methods: {\n    onTabChange(index) {\n      const nextRoute = this.tabs.map(tab => tab.key)[index];\n      const slug = this.$route.params.portalSlug;\n\n      this.$router.push({\n        name: nextRoute,\n        params: { portalSlug: slug, locale: this.currentPortalLocale },\n      });\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.wrapper {\n  flex: 1;\n}\n::v-deep .tabs {\n  padding-left: 0;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/helpcenter/pages/portals"},"metadata":{},"sourceType":"module"}