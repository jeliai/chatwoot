{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { v4 as uuid } from '@lukeed/uuid';\nimport jar from 'js-cookie';\nimport { tld } from './tld';\nimport autoBind from '../../lib/bind-all';\nvar defaults = {\n  persist: true,\n  cookie: {\n    key: 'ajs_user_id',\n    oldKey: 'ajs_user'\n  },\n  localStorage: {\n    key: 'ajs_user_traits'\n  }\n};\n\nvar Store =\n/** @class */\nfunction () {\n  function Store() {\n    this.cache = {};\n  }\n\n  Store.prototype.get = function (key) {\n    return this.cache[key];\n  };\n\n  Store.prototype.set = function (key, value) {\n    this.cache[key] = value;\n    return value;\n  };\n\n  Store.prototype.remove = function (key) {\n    delete this.cache[key];\n  };\n\n  return Store;\n}();\n\nvar domain = undefined;\n\ntry {\n  domain = tld(new URL(window.location.href));\n} catch (_) {\n  domain = undefined;\n}\n\nvar ONE_YEAR = 365;\n\nvar Cookie =\n/** @class */\nfunction (_super) {\n  __extends(Cookie, _super);\n\n  function Cookie(options) {\n    if (options === void 0) {\n      options = Cookie.defaults;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.options = __assign(__assign({}, Cookie.defaults), options);\n    return _this;\n  }\n\n  Cookie.available = function () {\n    var cookieEnabled = window.navigator.cookieEnabled;\n\n    if (!cookieEnabled) {\n      jar.set('ajs:cookies', 'test');\n      cookieEnabled = document.cookie.includes('ajs:cookies');\n      jar.remove('ajs:cookies');\n    }\n\n    return cookieEnabled;\n  };\n\n  Cookie.prototype.opts = function () {\n    return {\n      sameSite: this.options.sameSite,\n      expires: this.options.maxage,\n      domain: this.options.domain,\n      path: this.options.path\n    };\n  };\n\n  Cookie.prototype.get = function (key) {\n    return jar.getJSON(key);\n  };\n\n  Cookie.prototype.set = function (key, value) {\n    if (typeof value === 'string') {\n      jar.set(key, value, this.opts());\n    } else if (value === null) {\n      jar.remove(key, this.opts());\n    } else {\n      jar.set(key, JSON.stringify(value), this.opts());\n    }\n\n    return value;\n  };\n\n  Cookie.prototype.remove = function (key) {\n    return jar.remove(key, this.opts());\n  };\n\n  Cookie.defaults = {\n    maxage: ONE_YEAR,\n    domain: domain,\n    path: '/',\n    sameSite: 'Lax'\n  };\n  return Cookie;\n}(Store);\n\nexport { Cookie };\n\nvar NullStorage =\n/** @class */\nfunction (_super) {\n  __extends(NullStorage, _super);\n\n  function NullStorage() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.get = function (_key) {\n      return null;\n    };\n\n    _this.set = function (_key, _val) {\n      return null;\n    };\n\n    _this.remove = function (_key) {};\n\n    return _this;\n  }\n\n  return NullStorage;\n}(Store);\n\nvar LocalStorage =\n/** @class */\nfunction (_super) {\n  __extends(LocalStorage, _super);\n\n  function LocalStorage() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LocalStorage.available = function () {\n    var test = 'test';\n\n    try {\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  LocalStorage.prototype.get = function (key) {\n    var val = localStorage.getItem(key);\n\n    if (val) {\n      try {\n        return JSON.parse(val);\n      } catch (e) {\n        return JSON.parse(JSON.stringify(val));\n      }\n    }\n\n    return null;\n  };\n\n  LocalStorage.prototype.set = function (key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (_a) {\n      console.warn(\"Unable to set \" + key + \" in localStorage, storage may be full.\");\n    }\n\n    return value;\n  };\n\n  LocalStorage.prototype.remove = function (key) {\n    return localStorage.removeItem(key);\n  };\n\n  return LocalStorage;\n}(Store);\n\nexport { LocalStorage };\n\nvar User =\n/** @class */\nfunction () {\n  function User(options, cookieOptions) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = defaults;\n    }\n\n    var _a, _b, _c, _d;\n\n    this.mem = new Store();\n    this.options = {};\n\n    this.id = function (id) {\n      var _a, _b;\n\n      var prevId = _this.chainGet(_this.idKey);\n\n      if (id !== undefined) {\n        _this.trySet(_this.idKey, id);\n\n        var changingIdentity = id !== prevId && prevId !== null && id !== null;\n\n        if (changingIdentity) {\n          _this.anonymousId(null);\n        }\n      }\n\n      return (_b = (_a = _this.chainGet(_this.idKey)) !== null && _a !== void 0 ? _a : _this.cookies.get(defaults.cookie.oldKey)) !== null && _b !== void 0 ? _b : null;\n    };\n\n    this.anonymousId = function (id) {\n      var _a, _b;\n\n      if (id === undefined) {\n        var val = (_a = _this.chainGet(_this.anonKey)) !== null && _a !== void 0 ? _a : (_b = _this.legacySIO()) === null || _b === void 0 ? void 0 : _b[0];\n\n        if (val) {\n          return val;\n        }\n      }\n\n      if (id === null) {\n        _this.trySet(_this.anonKey, null);\n\n        return _this.chainGet(_this.anonKey);\n      }\n\n      _this.trySet(_this.anonKey, id !== null && id !== void 0 ? id : uuid());\n\n      return _this.chainGet(_this.anonKey);\n    };\n\n    this.traits = function (traits) {\n      var _a, _b;\n\n      if (traits === null) {\n        traits = {};\n      }\n\n      if (traits) {\n        _this.mem.set(_this.traitsKey, traits !== null && traits !== void 0 ? traits : {});\n\n        _this.localStorage.set(_this.traitsKey, traits !== null && traits !== void 0 ? traits : {});\n      }\n\n      return (_b = (_a = _this.localStorage.get(_this.traitsKey)) !== null && _a !== void 0 ? _a : _this.mem.get(_this.traitsKey)) !== null && _b !== void 0 ? _b : {};\n    };\n\n    this.options = options;\n    this.cookieOptions = cookieOptions;\n    this.idKey = (_b = (_a = options.cookie) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : defaults.cookie.key;\n    this.traitsKey = (_d = (_c = options.localStorage) === null || _c === void 0 ? void 0 : _c.key) !== null && _d !== void 0 ? _d : defaults.localStorage.key;\n    this.anonKey = 'ajs_anonymous_id';\n    var shouldPersist = options.persist !== false;\n    this.localStorage = options.localStorageFallbackDisabled || !shouldPersist || !LocalStorage.available() ? new NullStorage() : new LocalStorage();\n    this.cookies = shouldPersist && Cookie.available() ? new Cookie(cookieOptions) : new NullStorage();\n    var legacyUser = this.cookies.get(defaults.cookie.oldKey);\n\n    if (legacyUser) {\n      legacyUser.id && this.id(legacyUser.id);\n      legacyUser.traits && this.traits(legacyUser.traits);\n    }\n\n    autoBind(this);\n  }\n\n  User.prototype.chainGet = function (key) {\n    var _a, _b, _c;\n\n    var val = (_c = (_b = (_a = this.localStorage.get(key)) !== null && _a !== void 0 ? _a : this.cookies.get(key)) !== null && _b !== void 0 ? _b : this.mem.get(key)) !== null && _c !== void 0 ? _c : null;\n    return this.trySet(key, typeof val === 'number' ? val.toString() : val);\n  };\n\n  User.prototype.trySet = function (key, value) {\n    this.localStorage.set(key, value);\n    this.cookies.set(key, value);\n    this.mem.set(key, value);\n    return value;\n  };\n\n  User.prototype.chainClear = function (key) {\n    this.localStorage.remove(key);\n    this.cookies.remove(key);\n    this.mem.remove(key);\n  };\n\n  User.prototype.legacySIO = function () {\n    var val = this.cookies.get('_sio');\n\n    if (!val) {\n      return null;\n    }\n\n    var _a = val.split('----'),\n        anon = _a[0],\n        user = _a[1];\n\n    return [anon, user];\n  };\n\n  User.prototype.identify = function (id, traits) {\n    traits = traits !== null && traits !== void 0 ? traits : {};\n    var currentId = this.id();\n\n    if (currentId === null || currentId === id) {\n      traits = __assign(__assign({}, this.traits()), traits);\n    }\n\n    if (id) {\n      this.id(id);\n    }\n\n    this.traits(traits);\n  };\n\n  User.prototype.logout = function () {\n    this.anonymousId(null);\n    this.id(null);\n    this.traits({});\n  };\n\n  User.prototype.reset = function () {\n    this.logout();\n    this.chainClear(this.idKey);\n    this.chainClear(this.anonKey);\n    this.chainClear(this.traitsKey);\n  };\n\n  User.prototype.load = function () {\n    return new User(this.options, this.cookieOptions);\n  };\n\n  User.prototype.save = function () {\n    return true;\n  };\n\n  User.defaults = defaults;\n  return User;\n}();\n\nexport { User };\nvar groupDefaults = {\n  persist: true,\n  cookie: {\n    key: 'ajs_group_id'\n  },\n  localStorage: {\n    key: 'ajs_group_properties'\n  }\n};\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n\n  function Group(options, cookie) {\n    if (options === void 0) {\n      options = groupDefaults;\n    }\n\n    var _this = _super.call(this, options, cookie) || this;\n\n    _this.anonymousId = function (_id) {\n      return undefined;\n    };\n\n    autoBind(_this);\n    return _this;\n  }\n\n  return Group;\n}(User);\n\nexport { Group };","map":null,"metadata":{},"sourceType":"module"}