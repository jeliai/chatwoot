{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * wavesurfer.js microphone plugin 6.1.0 (2022-03-31)\n * https://wavesurfer-js.org\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"WaveSurfer\", [], factory);else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"WaveSurfer\"] = factory();else root[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"microphone\"] = factory();\n})(self, function () {\n  return (\n    /******/\n    function () {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = {\n        /***/\n        \"./src/plugin/microphone/index.js\":\n        /*!****************************************!*\\\n          !*** ./src/plugin/microphone/index.js ***!\n          \\****************************************/\n\n        /***/\n        function srcPluginMicrophoneIndexJs(module, exports) {\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n          /**\n           * @typedef {Object} MicrophonePluginParams\n           * @property {MediaStreamConstraints} constraints The constraints parameter is a\n           * MediaStreamConstaints object with two members: video and audio, describing\n           * the media types requested. Either or both must be specified.\n           * @property {number} bufferSize=4096 The buffer size in units of sample-frames.\n           * If specified, the bufferSize must be one of the following values: `256`,\n           * `512`, `1024`, `2048`, `4096`, `8192`, `16384`\n           * @property {number} numberOfInputChannels=1 Integer specifying the number of\n           * channels for this node's input. Values of up to 32 are supported.\n           * @property {number} numberOfOutputChannels=1 Integer specifying the number of\n           * channels for this node's output.\n           * @property {?boolean} deferInit Set to true to manually call\n           * `initPlugin('microphone')`\n           */\n\n          /**\n           * Visualize microphone input in a wavesurfer instance.\n           *\n           * @implements {PluginClass}\n           * @extends {Observer}\n           * @example\n           * // es6\n           * import MicrophonePlugin from 'wavesurfer.microphone.js';\n           *\n           * // commonjs\n           * var MicrophonePlugin = require('wavesurfer.microphone.js');\n           *\n           * // if you are using <script> tags\n           * var MicrophonePlugin = window.WaveSurfer.microphone;\n           *\n           * // ... initialising wavesurfer with the plugin\n           * var wavesurfer = WaveSurfer.create({\n           *   // wavesurfer options ...\n           *   plugins: [\n           *     MicrophonePlugin.create({\n           *       // plugin options ...\n           *     })\n           *   ]\n           * });\n           */\n\n\n          var MicrophonePlugin = /*#__PURE__*/function () {\n            function MicrophonePlugin(params, ws) {\n              var _this = this;\n\n              _classCallCheck(this, MicrophonePlugin);\n\n              this.params = params;\n              this.wavesurfer = ws;\n              this.active = false;\n              this.paused = false;\n              this.browser = this.detectBrowser();\n\n              this.reloadBufferFunction = function (e) {\n                return _this.reloadBuffer(e);\n              }; // cross-browser getUserMedia\n\n\n              var promisifiedOldGUM = function promisifiedOldGUM(constraints, successCallback, errorCallback) {\n                // get a hold of getUserMedia, if present\n                var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // Some browsers just don't implement it - return a rejected\n                // promise with an error to keep a consistent interface\n\n                if (!getUserMedia) {\n                  return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n                } // otherwise, wrap the call to the old navigator.getUserMedia with\n                // a Promise\n\n\n                return new Promise(function (successCallback, errorCallback) {\n                  getUserMedia.call(navigator, constraints, successCallback, errorCallback);\n                });\n              }; // Older browsers might not implement mediaDevices at all, so we set an\n              // empty object first\n\n\n              if (navigator.mediaDevices === undefined) {\n                navigator.mediaDevices = {};\n              } // Some browsers partially implement mediaDevices. We can't just assign\n              // an object with getUserMedia as it would overwrite existing\n              // properties. Here, we will just add the getUserMedia property if it's\n              // missing.\n\n\n              if (navigator.mediaDevices.getUserMedia === undefined) {\n                navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\n              }\n\n              this.constraints = this.params.constraints || {\n                video: false,\n                audio: true\n              };\n              this.bufferSize = this.params.bufferSize || 4096;\n              this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\n              this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\n\n              this._onBackendCreated = function () {\n                // wavesurfer's AudioContext where we'll route the mic signal to\n                _this.micContext = _this.wavesurfer.backend.getAudioContext();\n              };\n            }\n\n            _createClass(MicrophonePlugin, [{\n              key: \"init\",\n              value: function init() {\n                this.wavesurfer.on('backend-created', this._onBackendCreated);\n\n                if (this.wavesurfer.backend) {\n                  this._onBackendCreated();\n                }\n              }\n              /**\n               * Destroy the microphone plugin.\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                // make sure the buffer is not redrawn during\n                // cleanup and demolition of this plugin.\n                this.paused = true;\n                this.wavesurfer.un('backend-created', this._onBackendCreated);\n                this.stop();\n              }\n              /**\n               * Allow user to select audio input device, e.g. microphone, and\n               * start the visualization.\n               */\n\n            }, {\n              key: \"start\",\n              value: function start() {\n                var _this2 = this;\n\n                navigator.mediaDevices.getUserMedia(this.constraints).then(function (data) {\n                  return _this2.gotStream(data);\n                }).catch(function (data) {\n                  return _this2.deviceError(data);\n                });\n              }\n              /**\n               * Pause/resume visualization.\n               */\n\n            }, {\n              key: \"togglePlay\",\n              value: function togglePlay() {\n                if (!this.active) {\n                  // start it first\n                  this.start();\n                } else {\n                  // toggle paused\n                  this.paused = !this.paused;\n\n                  if (this.paused) {\n                    this.pause();\n                  } else {\n                    this.play();\n                  }\n                }\n              }\n              /**\n               * Play visualization.\n               */\n\n            }, {\n              key: \"play\",\n              value: function play() {\n                this.paused = false;\n                this.connect();\n              }\n              /**\n               * Pause visualization.\n               */\n\n            }, {\n              key: \"pause\",\n              value: function pause() {\n                this.paused = true; // disconnect sources so they can be used elsewhere\n                // (eg. during audio playback)\n\n                this.disconnect();\n              }\n              /**\n               * Stop the device stream and remove any remaining waveform drawing from\n               * the wavesurfer canvas.\n               */\n\n            }, {\n              key: \"stop\",\n              value: function stop() {\n                if (this.active) {\n                  // stop visualization and device\n                  this.stopDevice(); // empty last frame\n\n                  this.wavesurfer.empty();\n                }\n              }\n              /**\n               * Stop the device and the visualization.\n               */\n\n            }, {\n              key: \"stopDevice\",\n              value: function stopDevice() {\n                this.active = false; // stop visualization\n\n                this.disconnect(); // stop stream from device\n\n                if (this.stream && this.stream.getTracks) {\n                  this.stream.getTracks().forEach(function (stream) {\n                    return stream.stop();\n                  });\n                }\n              }\n              /**\n               * Connect the media sources that feed the visualization.\n               */\n\n            }, {\n              key: \"connect\",\n              value: function connect() {\n                if (this.stream !== undefined) {\n                  // Create a local buffer for data to be copied to the Wavesurfer buffer for Edge\n                  if (this.browser.browser === 'edge') {\n                    this.localAudioBuffer = this.micContext.createBuffer(this.numberOfInputChannels, this.bufferSize, this.micContext.sampleRate);\n                  } // Create an AudioNode from the stream.\n\n\n                  this.mediaStreamSource = this.micContext.createMediaStreamSource(this.stream);\n                  this.levelChecker = this.micContext.createScriptProcessor(this.bufferSize, this.numberOfInputChannels, this.numberOfOutputChannels);\n                  this.mediaStreamSource.connect(this.levelChecker);\n                  this.levelChecker.connect(this.micContext.destination);\n                  this.levelChecker.onaudioprocess = this.reloadBufferFunction;\n                }\n              }\n              /**\n               * Disconnect the media sources that feed the visualization.\n               */\n\n            }, {\n              key: \"disconnect\",\n              value: function disconnect() {\n                if (this.mediaStreamSource !== undefined) {\n                  this.mediaStreamSource.disconnect();\n                }\n\n                if (this.levelChecker !== undefined) {\n                  this.levelChecker.disconnect();\n                  this.levelChecker.onaudioprocess = undefined;\n                }\n\n                if (this.localAudioBuffer !== undefined) {\n                  this.localAudioBuffer = undefined;\n                }\n              }\n              /**\n               * Redraw the waveform.\n               *\n               * @param {object} event Audioprocess event\n               */\n\n            }, {\n              key: \"reloadBuffer\",\n              value: function reloadBuffer(event) {\n                if (!this.paused) {\n                  this.wavesurfer.empty();\n\n                  if (this.browser.browser === 'edge') {\n                    // copy audio data to a local audio buffer,\n                    // from https://github.com/audiojs/audio-buffer-utils\n                    var channel, l;\n\n                    for (channel = 0, l = Math.min(this.localAudioBuffer.numberOfChannels, event.inputBuffer.numberOfChannels); channel < l; channel++) {\n                      this.localAudioBuffer.getChannelData(channel).set(event.inputBuffer.getChannelData(channel));\n                    }\n\n                    this.wavesurfer.loadDecodedBuffer(this.localAudioBuffer);\n                  } else {\n                    this.wavesurfer.loadDecodedBuffer(event.inputBuffer);\n                  }\n                }\n              }\n              /**\n               * Audio input device is ready.\n               *\n               * @param {MediaStream} stream The microphone's media stream.\n               */\n\n            }, {\n              key: \"gotStream\",\n              value: function gotStream(stream) {\n                this.stream = stream;\n                this.active = true; // start visualization\n\n                this.play(); // notify listeners\n\n                this.fireEvent('deviceReady', stream);\n              }\n              /**\n               * Device error callback.\n               *\n               * @param {string} code Error message\n               */\n\n            }, {\n              key: \"deviceError\",\n              value: function deviceError(code) {\n                // notify listeners\n                this.fireEvent('deviceError', code);\n              }\n              /**\n               * Extract browser version out of the provided user agent string.\n               * @param {!string} uastring userAgent string.\n               * @param {!string} expr Regular expression used as match criteria.\n               * @param {!number} pos position in the version string to be returned.\n               * @return {!number} browser version.\n               */\n\n            }, {\n              key: \"extractVersion\",\n              value: function extractVersion(uastring, expr, pos) {\n                var match = uastring.match(expr);\n                return match && match.length >= pos && parseInt(match[pos], 10);\n              }\n              /**\n               * Browser detector.\n               * @return {object} result containing browser, version and minVersion\n               *     properties.\n               */\n\n            }, {\n              key: \"detectBrowser\",\n              value: function detectBrowser() {\n                // Returned result object.\n                var result = {};\n                result.browser = null;\n                result.version = null;\n                result.minVersion = null; // Non supported browser.\n\n                if (typeof window === 'undefined' || !window.navigator) {\n                  result.browser = 'Not a supported browser.';\n                  return result;\n                }\n\n                if (navigator.mozGetUserMedia) {\n                  // Firefox\n                  result.browser = 'firefox';\n                  result.version = this.extractVersion(navigator.userAgent, /Firefox\\/(\\d+)\\./, 1);\n                  result.minVersion = 31;\n                  return result;\n                } else if (navigator.webkitGetUserMedia) {\n                  // Chrome/Chromium/Webview/Opera\n                  result.browser = 'chrome';\n                  result.version = this.extractVersion(navigator.userAgent, /Chrom(e|ium)\\/(\\d+)\\./, 2);\n                  result.minVersion = 38;\n                  return result;\n                } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n                  // Edge\n                  result.browser = 'edge';\n                  result.version = this.extractVersion(navigator.userAgent, /Edge\\/(\\d+).(\\d+)$/, 2);\n                  result.minVersion = 10547;\n                  return result;\n                } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n                  // Safari\n                  result.browser = 'safari';\n                  result.minVersion = 11;\n                  result.version = this.extractVersion(navigator.userAgent, /AppleWebKit\\/(\\d+)\\./, 1);\n                  return result;\n                } // Non supported browser default.\n\n\n                result.browser = 'Not a supported browser.';\n                return result;\n              }\n            }], [{\n              key: \"create\",\n              value:\n              /**\n               * Microphone plugin definition factory\n               *\n               * This function must be used to create a plugin definition which can be\n               * used by wavesurfer to correctly instantiate the plugin.\n               *\n               * @param  {MicrophonePluginParams} params parameters use to initialise the plugin\n               * @return {PluginDefinition} an object representing the plugin\n               */\n              function create(params) {\n                return {\n                  name: 'microphone',\n                  deferInit: params && params.deferInit ? params.deferInit : false,\n                  params: params,\n                  instance: MicrophonePlugin\n                };\n              }\n            }]);\n\n            return MicrophonePlugin;\n          }();\n\n          exports[\"default\"] = MicrophonePlugin;\n          module.exports = exports.default;\n          /***/\n        }\n        /******/\n\n      };\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n      /******/\n\n      /******/\n      // startup\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n      // This entry module is referenced by other modules so it can't be inlined\n\n      /******/\n\n\n      var __webpack_exports__ = __webpack_require__(\"./src/plugin/microphone/index.js\");\n      /******/\n\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"module"}