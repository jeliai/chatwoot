{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { IFrameHelper, RNHelper } from 'widget/helpers/utils';\nimport { popoutChatWindow } from '../helpers/popoutHelper';\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport darkModeMixin from 'widget/mixins/darkModeMixin';\nimport configMixin from 'widget/mixins/configMixin';\nimport { CONVERSATION_STATUS } from 'shared/constants/messages';\nexport default {\n  name: 'HeaderActions',\n  components: {\n    FluentIcon: FluentIcon\n  },\n  mixins: [configMixin, darkModeMixin],\n  props: {\n    showPopoutButton: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    conversationAttributes: 'conversationAttributes/getConversationParams'\n  })), {}, {\n    canLeaveConversation: function canLeaveConversation() {\n      return [CONVERSATION_STATUS.OPEN, CONVERSATION_STATUS.SNOOZED, CONVERSATION_STATUS.PENDING].includes(this.conversationStatus);\n    },\n    isIframe: function isIframe() {\n      return IFrameHelper.isIFrame();\n    },\n    isRNWebView: function isRNWebView() {\n      return RNHelper.isRNWebView();\n    },\n    showHeaderActions: function showHeaderActions() {\n      return this.isIframe || this.isRNWebView || this.hasWidgetOptions;\n    },\n    conversationStatus: function conversationStatus() {\n      return this.conversationAttributes.status;\n    },\n    hasWidgetOptions: function hasWidgetOptions() {\n      return this.showPopoutButton || this.conversationStatus === 'open';\n    }\n  }),\n  methods: {\n    popoutWindow: function popoutWindow() {\n      this.closeWindow();\n      var _window = window,\n          origin = _window.location.origin,\n          websiteToken = _window.chatwootWebChannel.websiteToken,\n          authToken = _window.authToken;\n      popoutChatWindow(origin, websiteToken, this.$root.$i18n.locale, authToken);\n    },\n    closeWindow: function closeWindow() {\n      if (IFrameHelper.isIFrame()) {\n        IFrameHelper.sendMessage({\n          event: 'closeWindow'\n        });\n      } else if (RNHelper.isRNWebView) {\n        RNHelper.sendMessage({\n          type: 'close-widget'\n        });\n      }\n    },\n    resolveConversation: function resolveConversation() {\n      this.$store.dispatch('conversation/resolveConversation');\n    }\n  }\n};","map":{"version":3,"sources":["HeaderActions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,YAAA,EAAA,QAAA,QAAA,sBAAA;AACA,SAAA,gBAAA,QAAA,yBAAA;AACA,OAAA,UAAA,MAAA,wCAAA;AACA,OAAA,aAAA,MAAA,6BAAA;AACA,OAAA,WAAA,MAAA,2BAAA;AACA,SAAA,mBAAA,QAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GAFA;AAGA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,aAAA,CAHA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GAJA;AAUA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,sBAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,oBAJA,kCAIA;AACA,aAAA,CACA,mBAAA,CAAA,IADA,EAEA,mBAAA,CAAA,OAFA,EAGA,mBAAA,CAAA,OAHA,EAIA,QAJA,CAIA,KAAA,kBAJA,CAAA;AAKA,KAVA;AAWA,IAAA,QAXA,sBAWA;AACA,aAAA,YAAA,CAAA,QAAA,EAAA;AACA,KAbA;AAcA,IAAA,WAdA,yBAcA;AACA,aAAA,QAAA,CAAA,WAAA,EAAA;AACA,KAhBA;AAiBA,IAAA,iBAjBA,+BAiBA;AACA,aAAA,KAAA,QAAA,IAAA,KAAA,WAAA,IAAA,KAAA,gBAAA;AACA,KAnBA;AAoBA,IAAA,kBApBA,gCAoBA;AACA,aAAA,KAAA,sBAAA,CAAA,MAAA;AACA,KAtBA;AAuBA,IAAA,gBAvBA,8BAuBA;AACA,aAAA,KAAA,gBAAA,IAAA,KAAA,kBAAA,KAAA,MAAA;AACA;AAzBA,IAVA;AAqCA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AACA,WAAA,WAAA;AACA,oBAIA,MAJA;AAAA,UACA,MADA,WACA,QADA,CACA,MADA;AAAA,UAEA,YAFA,WAEA,kBAFA,CAEA,YAFA;AAAA,UAGA,SAHA,WAGA,SAHA;AAKA,MAAA,gBAAA,CACA,MADA,EAEA,YAFA,EAGA,KAAA,KAAA,CAAA,KAAA,CAAA,MAHA,EAIA,SAJA,CAAA;AAMA,KAdA;AAeA,IAAA,WAfA,yBAeA;AACA,UAAA,YAAA,CAAA,QAAA,EAAA,EAAA;AACA,QAAA,YAAA,CAAA,WAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACA,OAFA,MAEA,IAAA,QAAA,CAAA,WAAA,EAAA;AACA,QAAA,QAAA,CAAA,WAAA,CAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA;AACA;AACA,KArBA;AAsBA,IAAA,mBAtBA,iCAsBA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,kCAAA;AACA;AAxBA;AArCA,CAAA","sourcesContent":["<template>\n  <div v-if=\"showHeaderActions\" class=\"actions flex items-center\">\n    <button\n      v-if=\"canLeaveConversation && hasEndConversationEnabled\"\n      class=\"button transparent compact\"\n      :title=\"$t('END_CONVERSATION')\"\n      @click=\"resolveConversation\"\n    >\n      <fluent-icon\n        icon=\"sign-out\"\n        size=\"22\"\n        :class=\"$dm('text-black-900', 'dark:text-slate-50')\"\n      />\n    </button>\n    <button\n      v-if=\"showPopoutButton\"\n      class=\"button transparent compact new-window--button \"\n      @click=\"popoutWindow\"\n    >\n      <fluent-icon\n        icon=\"open\"\n        size=\"22\"\n        :class=\"$dm('text-black-900', 'dark:text-slate-50')\"\n      />\n    </button>\n    <button\n      class=\"button transparent compact close-button\"\n      :class=\"{\n        'rn-close-button': isRNWebView,\n      }\"\n      @click=\"closeWindow\"\n    >\n      <fluent-icon\n        icon=\"dismiss\"\n        size=\"24\"\n        :class=\"$dm('text-black-900', 'dark:text-slate-50')\"\n      />\n    </button>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport { IFrameHelper, RNHelper } from 'widget/helpers/utils';\nimport { popoutChatWindow } from '../helpers/popoutHelper';\nimport FluentIcon from 'shared/components/FluentIcon/Index.vue';\nimport darkModeMixin from 'widget/mixins/darkModeMixin';\nimport configMixin from 'widget/mixins/configMixin';\nimport { CONVERSATION_STATUS } from 'shared/constants/messages';\n\nexport default {\n  name: 'HeaderActions',\n  components: { FluentIcon },\n  mixins: [configMixin, darkModeMixin],\n  props: {\n    showPopoutButton: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      conversationAttributes: 'conversationAttributes/getConversationParams',\n    }),\n    canLeaveConversation() {\n      return [\n        CONVERSATION_STATUS.OPEN,\n        CONVERSATION_STATUS.SNOOZED,\n        CONVERSATION_STATUS.PENDING,\n      ].includes(this.conversationStatus);\n    },\n    isIframe() {\n      return IFrameHelper.isIFrame();\n    },\n    isRNWebView() {\n      return RNHelper.isRNWebView();\n    },\n    showHeaderActions() {\n      return this.isIframe || this.isRNWebView || this.hasWidgetOptions;\n    },\n    conversationStatus() {\n      return this.conversationAttributes.status;\n    },\n    hasWidgetOptions() {\n      return this.showPopoutButton || this.conversationStatus === 'open';\n    },\n  },\n  methods: {\n    popoutWindow() {\n      this.closeWindow();\n      const {\n        location: { origin },\n        chatwootWebChannel: { websiteToken },\n        authToken,\n      } = window;\n      popoutChatWindow(\n        origin,\n        websiteToken,\n        this.$root.$i18n.locale,\n        authToken\n      );\n    },\n    closeWindow() {\n      if (IFrameHelper.isIFrame()) {\n        IFrameHelper.sendMessage({ event: 'closeWindow' });\n      } else if (RNHelper.isRNWebView) {\n        RNHelper.sendMessage({ type: 'close-widget' });\n      }\n    },\n    resolveConversation() {\n      this.$store.dispatch('conversation/resolveConversation');\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n@import '~widget/assets/scss/variables.scss';\n\n.actions {\n  button {\n    margin-left: $space-normal;\n  }\n\n  span {\n    color: $color-heading;\n    font-size: $font-size-large;\n  }\n\n  .close-button {\n    display: none;\n  }\n  .rn-close-button {\n    display: block !important;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/widget/components"},"metadata":{},"sourceType":"module"}