{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar totalMessageHeight = function totalMessageHeight(total, element) {\n  return total + element.scrollHeight;\n};\n\nexport var calculateScrollTop = function calculateScrollTop(conversationPanelHeight, parentHeight, relevantMessages) {\n  // add up scrollHeight of a `relevantMessages`\n  var combinedMessageScrollHeight = _toConsumableArray(relevantMessages).reduce(totalMessageHeight, 0);\n\n  return conversationPanelHeight - combinedMessageScrollHeight - parentHeight / 2;\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/components/widgets/conversation/helpers/scrollTopCalculationHelper.js"],"names":["totalMessageHeight","total","element","scrollHeight","calculateScrollTop","conversationPanelHeight","parentHeight","relevantMessages","combinedMessageScrollHeight","reduce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAC7C,SAAOD,KAAK,GAAGC,OAAO,CAACC,YAAvB;AACD,CAFD;;AAIA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,uBADgC,EAEhCC,YAFgC,EAGhCC,gBAHgC,EAI7B;AACH;AACA,MAAIC,2BAA2B,GAAG,mBAAID,gBAAJ,EAAsBE,MAAtB,CAChCT,kBADgC,EAEhC,CAFgC,CAAlC;;AAIA,SACEK,uBAAuB,GAAGG,2BAA1B,GAAwDF,YAAY,GAAG,CADzE;AAGD,CAbM","sourcesContent":["const totalMessageHeight = (total, element) => {\n  return total + element.scrollHeight;\n};\n\nexport const calculateScrollTop = (\n  conversationPanelHeight,\n  parentHeight,\n  relevantMessages\n) => {\n  // add up scrollHeight of a `relevantMessages`\n  let combinedMessageScrollHeight = [...relevantMessages].reduce(\n    totalMessageHeight,\n    0\n  );\n  return (\n    conversationPanelHeight - combinedMessageScrollHeight - parentHeight / 2\n  );\n};\n"]},"metadata":{},"sourceType":"module"}