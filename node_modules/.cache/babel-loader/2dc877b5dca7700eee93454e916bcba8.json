{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nimport { formatTime } from '@chatwoot/utils';\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    accountSummary: 'getAccountSummary',\n    accountReport: 'getAccountReports'\n  })), {}, {\n    calculateTrend: function calculateTrend() {\n      var _this = this;\n\n      return function (metric_key) {\n        if (!_this.accountSummary.previous[metric_key]) return 0;\n        return Math.round((_this.accountSummary[metric_key] - _this.accountSummary.previous[metric_key]) / _this.accountSummary.previous[metric_key] * 100);\n      };\n    },\n    displayMetric: function displayMetric() {\n      var _this2 = this;\n\n      return function (metric_key) {\n        if (_this2.isAverageMetricType(metric_key)) {\n          return formatTime(_this2.accountSummary[metric_key]);\n        }\n\n        return _this2.accountSummary[metric_key];\n      };\n    },\n    displayInfoText: function displayInfoText() {\n      var _this3 = this;\n\n      return function (metric_key) {\n        if (_this3.metrics[_this3.currentSelection].KEY !== metric_key) {\n          return '';\n        }\n\n        if (_this3.isAverageMetricType(metric_key)) {\n          var total = _this3.accountReport.data.map(function (item) {\n            return item.count;\n          }).reduce(function (prev, curr) {\n            return prev + curr;\n          }, 0);\n\n          return \"\".concat(_this3.metrics[_this3.currentSelection].INFO_TEXT, \" \").concat(total);\n        }\n\n        return '';\n      };\n    },\n    isAverageMetricType: function isAverageMetricType() {\n      return function (metric_key) {\n        return ['avg_first_response_time', 'avg_resolution_time'].includes(metric_key);\n      };\n    }\n  })\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/reportMixin.js"],"names":["mapGetters","formatTime","computed","accountSummary","accountReport","calculateTrend","metric_key","previous","Math","round","displayMetric","isAverageMetricType","displayInfoText","metrics","currentSelection","KEY","total","data","map","item","count","reduce","prev","curr","INFO_TEXT","includes"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe;AACbC,EAAAA,QAAQ,kCACHF,UAAU,CAAC;AACZG,IAAAA,cAAc,EAAE,mBADJ;AAEZC,IAAAA,aAAa,EAAE;AAFH,GAAD,CADP;AAKNC,IAAAA,cALM,4BAKW;AAAA;;AACf,aAAO,UAAAC,UAAU,EAAI;AACnB,YAAI,CAAC,KAAI,CAACH,cAAL,CAAoBI,QAApB,CAA6BD,UAA7B,CAAL,EAA+C,OAAO,CAAP;AAC/C,eAAOE,IAAI,CAACC,KAAL,CACJ,CAAC,KAAI,CAACN,cAAL,CAAoBG,UAApB,IACA,KAAI,CAACH,cAAL,CAAoBI,QAApB,CAA6BD,UAA7B,CADD,IAEC,KAAI,CAACH,cAAL,CAAoBI,QAApB,CAA6BD,UAA7B,CAFF,GAGE,GAJG,CAAP;AAMD,OARD;AASD,KAfK;AAgBNI,IAAAA,aAhBM,2BAgBU;AAAA;;AACd,aAAO,UAAAJ,UAAU,EAAI;AACnB,YAAI,MAAI,CAACK,mBAAL,CAAyBL,UAAzB,CAAJ,EAA0C;AACxC,iBAAOL,UAAU,CAAC,MAAI,CAACE,cAAL,CAAoBG,UAApB,CAAD,CAAjB;AACD;;AACD,eAAO,MAAI,CAACH,cAAL,CAAoBG,UAApB,CAAP;AACD,OALD;AAMD,KAvBK;AAwBNM,IAAAA,eAxBM,6BAwBY;AAAA;;AAChB,aAAO,UAAAN,UAAU,EAAI;AACnB,YAAI,MAAI,CAACO,OAAL,CAAa,MAAI,CAACC,gBAAlB,EAAoCC,GAApC,KAA4CT,UAAhD,EAA4D;AAC1D,iBAAO,EAAP;AACD;;AACD,YAAI,MAAI,CAACK,mBAAL,CAAyBL,UAAzB,CAAJ,EAA0C;AACxC,cAAMU,KAAK,GAAG,MAAI,CAACZ,aAAL,CAAmBa,IAAnB,CACXC,GADW,CACP,UAAAC,IAAI;AAAA,mBAAIA,IAAI,CAACC,KAAT;AAAA,WADG,EAEXC,MAFW,CAEJ,UAACC,IAAD,EAAOC,IAAP;AAAA,mBAAgBD,IAAI,GAAGC,IAAvB;AAAA,WAFI,EAEyB,CAFzB,CAAd;;AAGA,2BAAU,MAAI,CAACV,OAAL,CAAa,MAAI,CAACC,gBAAlB,EAAoCU,SAA9C,cAA2DR,KAA3D;AACD;;AACD,eAAO,EAAP;AACD,OAXD;AAYD,KArCK;AAsCNL,IAAAA,mBAtCM,iCAsCgB;AACpB,aAAO,UAAAL,UAAU,EAAI;AACnB,eAAO,CAAC,yBAAD,EAA4B,qBAA5B,EAAmDmB,QAAnD,CACLnB,UADK,CAAP;AAGD,OAJD;AAKD;AA5CK;AADK,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\nimport { formatTime } from '@chatwoot/utils';\n\nexport default {\n  computed: {\n    ...mapGetters({\n      accountSummary: 'getAccountSummary',\n      accountReport: 'getAccountReports',\n    }),\n    calculateTrend() {\n      return metric_key => {\n        if (!this.accountSummary.previous[metric_key]) return 0;\n        return Math.round(\n          ((this.accountSummary[metric_key] -\n            this.accountSummary.previous[metric_key]) /\n            this.accountSummary.previous[metric_key]) *\n            100\n        );\n      };\n    },\n    displayMetric() {\n      return metric_key => {\n        if (this.isAverageMetricType(metric_key)) {\n          return formatTime(this.accountSummary[metric_key]);\n        }\n        return this.accountSummary[metric_key];\n      };\n    },\n    displayInfoText() {\n      return metric_key => {\n        if (this.metrics[this.currentSelection].KEY !== metric_key) {\n          return '';\n        }\n        if (this.isAverageMetricType(metric_key)) {\n          const total = this.accountReport.data\n            .map(item => item.count)\n            .reduce((prev, curr) => prev + curr, 0);\n          return `${this.metrics[this.currentSelection].INFO_TEXT} ${total}`;\n        }\n        return '';\n      };\n    },\n    isAverageMetricType() {\n      return metric_key => {\n        return ['avg_first_response_time', 'avg_resolution_time'].includes(\n          metric_key\n        );\n      };\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}