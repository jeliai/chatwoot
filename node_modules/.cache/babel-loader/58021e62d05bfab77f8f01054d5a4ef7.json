{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport LabelSelector from 'dashboard/components/widgets/LabelSelector.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {\n    LabelSelector: LabelSelector\n  },\n  mixins: [alertMixin],\n  props: {\n    contactId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  computed: _objectSpread({\n    savedLabels: function savedLabels() {\n      var availableContactLabels = this.$store.getters['contactLabels/getContactLabels'](this.contactId);\n      return this.allLabels.filter(function (_ref) {\n        var title = _ref.title;\n        return availableContactLabels.includes(title);\n      });\n    }\n  }, mapGetters({\n    labelUiFlags: 'contactLabels/getUIFlags',\n    allLabels: 'labels/getLabels'\n  })),\n  watch: {\n    contactId: function contactId(newContactId, prevContactId) {\n      if (newContactId && newContactId !== prevContactId) {\n        this.fetchLabels(newContactId);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var contactId = this.contactId;\n    this.fetchLabels(contactId);\n  },\n  methods: {\n    onUpdateLabels: function onUpdateLabels(selectedLabels) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('contactLabels/update', {\n                  contactId: _this.contactId,\n                  labels: selectedLabels\n                });\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('CONTACT_PANEL.LABELS.CONTACT.ERROR'));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 5]]);\n      }))();\n    },\n    addItem: function addItem(value) {\n      var result = this.savedLabels.map(function (item) {\n        return item.title;\n      });\n      result.push(value.title);\n      this.onUpdateLabels(result);\n    },\n    removeItem: function removeItem(value) {\n      var result = this.savedLabels.map(function (label) {\n        return label.title;\n      }).filter(function (label) {\n        return label !== value;\n      });\n      this.onUpdateLabels(result);\n    },\n    fetchLabels: function fetchLabels(contactId) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (contactId) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _this2.$store.dispatch('contactLabels/get', contactId);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["ContactLabels.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,aAAA,MAAA,gDAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,aAAA,EAAA;AAAA,GADA;AAEA,EAAA,MAAA,EAAA,CAAA,UAAA,CAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAHA;AAUA,EAAA,QAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,sBAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CACA,gCADA,EAEA,KAAA,SAFA,CAAA;AAGA,aAAA,KAAA,SAAA,CAAA,MAAA,CAAA;AAAA,YAAA,KAAA,QAAA,KAAA;AAAA,eACA,sBAAA,CAAA,QAAA,CAAA,KAAA,CADA;AAAA,OAAA,CAAA;AAGA;AARA,KAUA,UAAA,CAAA;AACA,IAAA,YAAA,EAAA,0BADA;AAEA,IAAA,SAAA,EAAA;AAFA,GAAA,CAVA,CAVA;AA0BA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,qBACA,YADA,EACA,aADA,EACA;AACA,UAAA,YAAA,IAAA,YAAA,KAAA,aAAA,EAAA;AACA,aAAA,WAAA,CAAA,YAAA;AACA;AACA;AALA,GA1BA;AAkCA,EAAA,OAlCA,qBAkCA;AACA,QAAA,SAAA,GAAA,IAAA,CAAA,SAAA;AACA,SAAA,WAAA,CAAA,SAAA;AACA,GArCA;AAuCA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,0BACA,cADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,sBAAA,EAAA;AACA,kBAAA,SAAA,EAAA,KAAA,CAAA,SADA;AAEA,kBAAA,MAAA,EAAA;AAFA,iBAAA,CAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oCAAA,CAAA;;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,KAVA;AAYA,IAAA,OAZA,mBAYA,KAZA,EAYA;AACA,UAAA,MAAA,GAAA,KAAA,WAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,KAAA;AAAA,OAAA,CAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA;AACA,WAAA,cAAA,CAAA,MAAA;AACA,KAhBA;AAkBA,IAAA,UAlBA,sBAkBA,KAlBA,EAkBA;AACA,UAAA,MAAA,GAAA,KAAA,WAAA,CACA,GADA,CACA,UAAA,KAAA;AAAA,eAAA,KAAA,CAAA,KAAA;AAAA,OADA,EAEA,MAFA,CAEA,UAAA,KAAA;AAAA,eAAA,KAAA,KAAA,KAAA;AAAA,OAFA,CAAA;AAGA,WAAA,cAAA,CAAA,MAAA;AACA,KAvBA;AAyBA,IAAA,WAzBA,uBAyBA,SAzBA,EAyBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,SADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIA,gBAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA,SAAA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AA9BA;AAvCA,CAAA","sourcesContent":["<template>\n  <label-selector\n    :all-labels=\"allLabels\"\n    :saved-labels=\"savedLabels\"\n    @add=\"addItem\"\n    @remove=\"removeItem\"\n  />\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport LabelSelector from 'dashboard/components/widgets/LabelSelector.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nexport default {\n  components: { LabelSelector },\n  mixins: [alertMixin],\n  props: {\n    contactId: {\n      type: [String, Number],\n      required: true,\n    },\n  },\n\n  computed: {\n    savedLabels() {\n      const availableContactLabels = this.$store.getters[\n        'contactLabels/getContactLabels'\n      ](this.contactId);\n      return this.allLabels.filter(({ title }) =>\n        availableContactLabels.includes(title)\n      );\n    },\n\n    ...mapGetters({\n      labelUiFlags: 'contactLabels/getUIFlags',\n      allLabels: 'labels/getLabels',\n    }),\n  },\n\n  watch: {\n    contactId(newContactId, prevContactId) {\n      if (newContactId && newContactId !== prevContactId) {\n        this.fetchLabels(newContactId);\n      }\n    },\n  },\n\n  mounted() {\n    const { contactId } = this;\n    this.fetchLabels(contactId);\n  },\n\n  methods: {\n    async onUpdateLabels(selectedLabels) {\n      try {\n        await this.$store.dispatch('contactLabels/update', {\n          contactId: this.contactId,\n          labels: selectedLabels,\n        });\n      } catch (error) {\n        this.showAlert(this.$t('CONTACT_PANEL.LABELS.CONTACT.ERROR'));\n      }\n    },\n\n    addItem(value) {\n      const result = this.savedLabels.map(item => item.title);\n      result.push(value.title);\n      this.onUpdateLabels(result);\n    },\n\n    removeItem(value) {\n      const result = this.savedLabels\n        .map(label => label.title)\n        .filter(label => label !== value);\n      this.onUpdateLabels(result);\n    },\n\n    async fetchLabels(contactId) {\n      if (!contactId) {\n        return;\n      }\n      this.$store.dispatch('contactLabels/get', contactId);\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/contacts/components"},"metadata":{},"sourceType":"module"}