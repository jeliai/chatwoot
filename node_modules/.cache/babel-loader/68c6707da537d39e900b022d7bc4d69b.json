{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\n\n/* eslint-disable no-console */\nimport NotificationSubscriptions from '../api/notificationSubscription';\nimport auth from '../api/auth';\nexport var verifyServiceWorkerExistence = function verifyServiceWorkerExistence() {\n  var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n\n  if (!('serviceWorker' in navigator)) {\n    // Service Worker isn't supported on this browser, disable or hide UI.\n    return;\n  }\n\n  if (!('PushManager' in window)) {\n    // Push isn't supported on this browser, disable or hide UI.\n    return;\n  }\n\n  navigator.serviceWorker.register('/sw.js').then(function (registration) {\n    return callback(registration);\n  }).catch(function (registrationError) {\n    // eslint-disable-next-line\n    console.log('SW registration failed: ', registrationError);\n  });\n};\nexport var hasPushPermissions = function hasPushPermissions() {\n  if ('Notification' in window) {\n    return Notification.permission === 'granted';\n  }\n\n  return false;\n};\n\nvar generateKeys = function generateKeys(str) {\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(str))).replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\nexport var getPushSubscriptionPayload = function getPushSubscriptionPayload(subscription) {\n  return {\n    subscription_type: 'browser_push',\n    subscription_attributes: {\n      endpoint: subscription.endpoint,\n      p256dh: generateKeys(subscription.getKey('p256dh')),\n      auth: generateKeys(subscription.getKey('auth'))\n    }\n  };\n};\nexport var sendRegistrationToServer = function sendRegistrationToServer(subscription) {\n  if (auth.hasAuthCookie()) {\n    return NotificationSubscriptions.create(getPushSubscriptionPayload(subscription));\n  }\n\n  return null;\n};\nexport var registerSubscription = function registerSubscription() {\n  var onSuccess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n\n  if (!window.chatwootConfig.vapidPublicKey) {\n    return;\n  }\n\n  navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n    return serviceWorkerRegistration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: window.chatwootConfig.vapidPublicKey\n    });\n  }).then(sendRegistrationToServer).then(function () {\n    onSuccess();\n  }).catch(function () {\n    window.bus.$emit('newToastMessage', 'This browser does not support desktop notification');\n  });\n};\nexport var requestPushPermissions = function requestPushPermissions(_ref) {\n  var onSuccess = _ref.onSuccess;\n\n  if (!('Notification' in window)) {\n    window.bus.$emit('newToastMessage', 'This browser does not support desktop notification');\n  } else if (Notification.permission === 'granted') {\n    registerSubscription(onSuccess);\n  } else if (Notification.permission !== 'denied') {\n    Notification.requestPermission(function (permission) {\n      if (permission === 'granted') {\n        registerSubscription(onSuccess);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/helper/pushHelper.js"],"names":["NotificationSubscriptions","auth","verifyServiceWorkerExistence","callback","navigator","window","serviceWorker","register","then","registration","catch","registrationError","console","log","hasPushPermissions","Notification","permission","generateKeys","str","btoa","String","fromCharCode","apply","Uint8Array","replace","getPushSubscriptionPayload","subscription","subscription_type","subscription_attributes","endpoint","p256dh","getKey","sendRegistrationToServer","hasAuthCookie","create","registerSubscription","onSuccess","chatwootConfig","vapidPublicKey","ready","serviceWorkerRegistration","pushManager","subscribe","userVisibleOnly","applicationServerKey","bus","$emit","requestPushPermissions","requestPermission"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport NotificationSubscriptions from '../api/notificationSubscription';\nimport auth from '../api/auth';\n\nexport const verifyServiceWorkerExistence = (callback = () => {}) => {\n  if (!('serviceWorker' in navigator)) {\n    // Service Worker isn't supported on this browser, disable or hide UI.\n    return;\n  }\n\n  if (!('PushManager' in window)) {\n    // Push isn't supported on this browser, disable or hide UI.\n    return;\n  }\n\n  navigator.serviceWorker\n    .register('/sw.js')\n    .then(registration => callback(registration))\n    .catch(registrationError => {\n      // eslint-disable-next-line\n      console.log('SW registration failed: ', registrationError);\n    });\n};\n\nexport const hasPushPermissions = () => {\n  if ('Notification' in window) {\n    return Notification.permission === 'granted';\n  }\n  return false;\n};\n\nconst generateKeys = str =>\n  btoa(String.fromCharCode.apply(null, new Uint8Array(str)))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n\nexport const getPushSubscriptionPayload = subscription => ({\n  subscription_type: 'browser_push',\n  subscription_attributes: {\n    endpoint: subscription.endpoint,\n    p256dh: generateKeys(subscription.getKey('p256dh')),\n    auth: generateKeys(subscription.getKey('auth')),\n  },\n});\n\nexport const sendRegistrationToServer = subscription => {\n  if (auth.hasAuthCookie()) {\n    return NotificationSubscriptions.create(\n      getPushSubscriptionPayload(subscription)\n    );\n  }\n  return null;\n};\n\nexport const registerSubscription = (onSuccess = () => {}) => {\n  if (!window.chatwootConfig.vapidPublicKey) {\n    return;\n  }\n  navigator.serviceWorker.ready\n    .then(serviceWorkerRegistration =>\n      serviceWorkerRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: window.chatwootConfig.vapidPublicKey,\n      })\n    )\n    .then(sendRegistrationToServer)\n    .then(() => {\n      onSuccess();\n    })\n    .catch(() => {\n      window.bus.$emit(\n        'newToastMessage',\n        'This browser does not support desktop notification'\n      );\n    });\n};\n\nexport const requestPushPermissions = ({ onSuccess }) => {\n  if (!('Notification' in window)) {\n    window.bus.$emit(\n      'newToastMessage',\n      'This browser does not support desktop notification'\n    );\n  } else if (Notification.permission === 'granted') {\n    registerSubscription(onSuccess);\n  } else if (Notification.permission !== 'denied') {\n    Notification.requestPermission(permission => {\n      if (permission === 'granted') {\n        registerSubscription(onSuccess);\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}