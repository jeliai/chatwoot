{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { mapGetters } from 'vuex';\nimport wootConstants from '../../../constants';\nimport { CMD_MUTE_CONVERSATION, CMD_REOPEN_CONVERSATION, CMD_RESOLVE_CONVERSATION, CMD_SEND_TRANSCRIPT, CMD_SNOOZE_CONVERSATION, CMD_UNMUTE_CONVERSATION } from './commandBarBusEvents';\nimport { ICON_ADD_LABEL, ICON_ASSIGN_AGENT, ICON_ASSIGN_TEAM, ICON_MUTE_CONVERSATION, ICON_REMOVE_LABEL, ICON_REOPEN_CONVERSATION, ICON_RESOLVE_CONVERSATION, ICON_SEND_TRANSCRIPT, ICON_SNOOZE_CONVERSATION, ICON_SNOOZE_UNTIL_NEXT_REPLY, ICON_SNOOZE_UNTIL_NEXT_WEEK, ICON_SNOOZE_UNTIL_TOMORRROW, ICON_UNMUTE_CONVERSATION } from './CommandBarIcons';\nvar OPEN_CONVERSATION_ACTIONS = [{\n  id: 'resolve_conversation',\n  title: 'COMMAND_BAR.COMMANDS.RESOLVE_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_RESOLVE_CONVERSATION,\n  handler: function handler() {\n    return bus.$emit(CMD_RESOLVE_CONVERSATION);\n  }\n}, {\n  id: 'snooze_conversation',\n  title: 'COMMAND_BAR.COMMANDS.SNOOZE_CONVERSATION',\n  icon: ICON_SNOOZE_CONVERSATION,\n  children: ['until_next_reply', 'until_tomorrow', 'until_next_week']\n}, {\n  id: 'until_next_reply',\n  title: 'COMMAND_BAR.COMMANDS.UNTIL_NEXT_REPLY',\n  parent: 'snooze_conversation',\n  icon: ICON_SNOOZE_UNTIL_NEXT_REPLY,\n  handler: function handler() {\n    return bus.$emit(CMD_SNOOZE_CONVERSATION, 'nextReply');\n  }\n}, {\n  id: 'until_tomorrow',\n  title: 'COMMAND_BAR.COMMANDS.UNTIL_TOMORROW',\n  parent: 'snooze_conversation',\n  icon: ICON_SNOOZE_UNTIL_TOMORRROW,\n  handler: function handler() {\n    return bus.$emit(CMD_SNOOZE_CONVERSATION, 'tomorrow');\n  }\n}, {\n  id: 'until_next_week',\n  title: 'COMMAND_BAR.COMMANDS.UNTIL_NEXT_WEEK',\n  parent: 'snooze_conversation',\n  icon: ICON_SNOOZE_UNTIL_NEXT_WEEK,\n  handler: function handler() {\n    return bus.$emit(CMD_SNOOZE_CONVERSATION, 'nextWeek');\n  }\n}];\nvar RESOLVED_CONVERSATION_ACTIONS = [{\n  id: 'reopen_conversation',\n  title: 'COMMAND_BAR.COMMANDS.REOPEN_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_REOPEN_CONVERSATION,\n  handler: function handler() {\n    return bus.$emit(CMD_REOPEN_CONVERSATION);\n  }\n}];\nvar SEND_TRANSCRIPT_ACTION = {\n  id: 'send_transcript',\n  title: 'COMMAND_BAR.COMMANDS.SEND_TRANSCRIPT',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_SEND_TRANSCRIPT,\n  handler: function handler() {\n    return bus.$emit(CMD_SEND_TRANSCRIPT);\n  }\n};\nvar UNMUTE_ACTION = {\n  id: 'unmute_conversation',\n  title: 'COMMAND_BAR.COMMANDS.UNMUTE_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_UNMUTE_CONVERSATION,\n  handler: function handler() {\n    return bus.$emit(CMD_UNMUTE_CONVERSATION);\n  }\n};\nvar MUTE_ACTION = {\n  id: 'mute_conversation',\n  title: 'COMMAND_BAR.COMMANDS.MUTE_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_MUTE_CONVERSATION,\n  handler: function handler() {\n    return bus.$emit(CMD_MUTE_CONVERSATION);\n  }\n};\nexport var isAConversationRoute = function isAConversationRoute(routeName) {\n  return ['inbox_conversation', 'conversation_through_mentions', 'conversation_through_unattended', 'conversation_through_inbox', 'conversations_through_label', 'conversations_through_team'].includes(routeName);\n};\nexport default {\n  watch: {\n    assignableAgents: function assignableAgents() {\n      this.setCommandbarData();\n    },\n    currentChat: function currentChat() {\n      this.setCommandbarData();\n    },\n    teamsList: function teamsList() {\n      this.setCommandbarData();\n    },\n    activeLabels: function activeLabels() {\n      this.setCommandbarData();\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat'\n  })), {}, {\n    inboxId: function inboxId() {\n      var _this$currentChat;\n\n      return (_this$currentChat = this.currentChat) === null || _this$currentChat === void 0 ? void 0 : _this$currentChat.inbox_id;\n    },\n    conversationId: function conversationId() {\n      var _this$currentChat2;\n\n      return (_this$currentChat2 = this.currentChat) === null || _this$currentChat2 === void 0 ? void 0 : _this$currentChat2.id;\n    },\n    statusActions: function statusActions() {\n      var _this$currentChat3, _this$currentChat4, _this$currentChat5;\n\n      var isOpen = ((_this$currentChat3 = this.currentChat) === null || _this$currentChat3 === void 0 ? void 0 : _this$currentChat3.status) === wootConstants.STATUS_TYPE.OPEN;\n      var isSnoozed = ((_this$currentChat4 = this.currentChat) === null || _this$currentChat4 === void 0 ? void 0 : _this$currentChat4.status) === wootConstants.STATUS_TYPE.SNOOZED;\n      var isResolved = ((_this$currentChat5 = this.currentChat) === null || _this$currentChat5 === void 0 ? void 0 : _this$currentChat5.status) === wootConstants.STATUS_TYPE.RESOLVED;\n      var actions = [];\n\n      if (isOpen) {\n        actions = OPEN_CONVERSATION_ACTIONS;\n      } else if (isResolved || isSnoozed) {\n        actions = RESOLVED_CONVERSATION_ACTIONS;\n      }\n\n      return this.prepareActions(actions);\n    },\n    assignAgentActions: function assignAgentActions() {\n      var _this = this;\n\n      var agentOptions = this.agentsList.map(function (agent) {\n        return {\n          id: \"agent-\".concat(agent.id),\n          title: agent.name,\n          parent: 'assign_an_agent',\n          section: _this.$t('COMMAND_BAR.SECTIONS.CHANGE_ASSIGNEE'),\n          agentInfo: agent,\n          icon: ICON_ASSIGN_AGENT,\n          handler: _this.onChangeAssignee\n        };\n      });\n      return [{\n        id: 'assign_an_agent',\n        title: this.$t('COMMAND_BAR.COMMANDS.ASSIGN_AN_AGENT'),\n        section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n        icon: ICON_ASSIGN_AGENT,\n        children: agentOptions.map(function (option) {\n          return option.id;\n        })\n      }].concat(_toConsumableArray(agentOptions));\n    },\n    assignTeamActions: function assignTeamActions() {\n      var _this2 = this;\n\n      var teamOptions = this.teamsList.map(function (team) {\n        return {\n          id: \"team-\".concat(team.id),\n          title: team.name,\n          parent: 'assign_a_team',\n          section: _this2.$t('COMMAND_BAR.SECTIONS.CHANGE_TEAM'),\n          teamInfo: team,\n          icon: ICON_ASSIGN_TEAM,\n          handler: _this2.onChangeTeam\n        };\n      });\n      return [{\n        id: 'assign_a_team',\n        title: this.$t('COMMAND_BAR.COMMANDS.ASSIGN_A_TEAM'),\n        section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n        icon: ICON_ASSIGN_TEAM,\n        children: teamOptions.map(function (option) {\n          return option.id;\n        })\n      }].concat(_toConsumableArray(teamOptions));\n    },\n    addLabelActions: function addLabelActions() {\n      var _this3 = this;\n\n      var availableLabels = this.inactiveLabels.map(function (label) {\n        return {\n          id: label.title,\n          title: \"#\".concat(label.title),\n          parent: 'add_a_label_to_the_conversation',\n          section: _this3.$t('COMMAND_BAR.SECTIONS.ADD_LABEL'),\n          icon: ICON_ADD_LABEL,\n          handler: function handler(action) {\n            return _this3.addLabelToConversation({\n              title: action.id\n            });\n          }\n        };\n      });\n      return [].concat(_toConsumableArray(availableLabels), [{\n        id: 'add_a_label_to_the_conversation',\n        title: this.$t('COMMAND_BAR.COMMANDS.ADD_LABELS_TO_CONVERSATION'),\n        section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n        icon: ICON_ADD_LABEL,\n        children: this.inactiveLabels.map(function (label) {\n          return label.title;\n        })\n      }]);\n    },\n    removeLabelActions: function removeLabelActions() {\n      var _this4 = this;\n\n      var activeLabels = this.activeLabels.map(function (label) {\n        return {\n          id: label.title,\n          title: \"#\".concat(label.title),\n          parent: 'remove_a_label_to_the_conversation',\n          section: _this4.$t('COMMAND_BAR.SECTIONS.REMOVE_LABEL'),\n          icon: ICON_REMOVE_LABEL,\n          handler: function handler(action) {\n            return _this4.removeLabelFromConversation(action.id);\n          }\n        };\n      });\n      return [].concat(_toConsumableArray(activeLabels), [{\n        id: 'remove_a_label_to_the_conversation',\n        title: this.$t('COMMAND_BAR.COMMANDS.REMOVE_LABEL_FROM_CONVERSATION'),\n        section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n        icon: ICON_REMOVE_LABEL,\n        children: this.activeLabels.map(function (label) {\n          return label.title;\n        })\n      }]);\n    },\n    labelActions: function labelActions() {\n      if (this.activeLabels.length) {\n        return [].concat(_toConsumableArray(this.addLabelActions), _toConsumableArray(this.removeLabelActions));\n      }\n\n      return this.addLabelActions;\n    },\n    conversationAdditionalActions: function conversationAdditionalActions() {\n      return this.prepareActions([this.currentChat.muted ? UNMUTE_ACTION : MUTE_ACTION, SEND_TRANSCRIPT_ACTION]);\n    },\n    conversationHotKeys: function conversationHotKeys() {\n      if (isAConversationRoute(this.$route.name)) {\n        return [].concat(_toConsumableArray(this.statusActions), _toConsumableArray(this.conversationAdditionalActions), _toConsumableArray(this.assignAgentActions), _toConsumableArray(this.assignTeamActions), _toConsumableArray(this.labelActions));\n      }\n\n      return [];\n    }\n  }),\n  methods: {\n    onChangeAssignee: function onChangeAssignee(action) {\n      this.$store.dispatch('assignAgent', {\n        conversationId: this.currentChat.id,\n        agentId: action.agentInfo.id\n      });\n    },\n    onChangeTeam: function onChangeTeam(action) {\n      this.$store.dispatch('assignTeam', {\n        conversationId: this.currentChat.id,\n        teamId: action.teamInfo.id\n      });\n    },\n    prepareActions: function prepareActions(actions) {\n      var _this5 = this;\n\n      return actions.map(function (action) {\n        return _objectSpread(_objectSpread({}, action), {}, {\n          title: _this5.$t(action.title),\n          section: _this5.$t(action.section)\n        });\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/routes/dashboard/commands/conversationHotKeys.js"],"names":["mapGetters","wootConstants","CMD_MUTE_CONVERSATION","CMD_REOPEN_CONVERSATION","CMD_RESOLVE_CONVERSATION","CMD_SEND_TRANSCRIPT","CMD_SNOOZE_CONVERSATION","CMD_UNMUTE_CONVERSATION","ICON_ADD_LABEL","ICON_ASSIGN_AGENT","ICON_ASSIGN_TEAM","ICON_MUTE_CONVERSATION","ICON_REMOVE_LABEL","ICON_REOPEN_CONVERSATION","ICON_RESOLVE_CONVERSATION","ICON_SEND_TRANSCRIPT","ICON_SNOOZE_CONVERSATION","ICON_SNOOZE_UNTIL_NEXT_REPLY","ICON_SNOOZE_UNTIL_NEXT_WEEK","ICON_SNOOZE_UNTIL_TOMORRROW","ICON_UNMUTE_CONVERSATION","OPEN_CONVERSATION_ACTIONS","id","title","section","icon","handler","bus","$emit","children","parent","RESOLVED_CONVERSATION_ACTIONS","SEND_TRANSCRIPT_ACTION","UNMUTE_ACTION","MUTE_ACTION","isAConversationRoute","routeName","includes","watch","assignableAgents","setCommandbarData","currentChat","teamsList","activeLabels","computed","inboxId","inbox_id","conversationId","statusActions","isOpen","status","STATUS_TYPE","OPEN","isSnoozed","SNOOZED","isResolved","RESOLVED","actions","prepareActions","assignAgentActions","agentOptions","agentsList","map","agent","name","$t","agentInfo","onChangeAssignee","option","assignTeamActions","teamOptions","team","teamInfo","onChangeTeam","addLabelActions","availableLabels","inactiveLabels","label","action","addLabelToConversation","removeLabelActions","removeLabelFromConversation","labelActions","length","conversationAdditionalActions","muted","conversationHotKeys","$route","methods","$store","dispatch","agentId","teamId"],"mappings":"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","sourcesContent":["import { mapGetters } from 'vuex';\nimport wootConstants from '../../../constants';\nimport {\n  CMD_MUTE_CONVERSATION,\n  CMD_REOPEN_CONVERSATION,\n  CMD_RESOLVE_CONVERSATION,\n  CMD_SEND_TRANSCRIPT,\n  CMD_SNOOZE_CONVERSATION,\n  CMD_UNMUTE_CONVERSATION,\n} from './commandBarBusEvents';\n\nimport {\n  ICON_ADD_LABEL,\n  ICON_ASSIGN_AGENT,\n  ICON_ASSIGN_TEAM,\n  ICON_MUTE_CONVERSATION,\n  ICON_REMOVE_LABEL,\n  ICON_REOPEN_CONVERSATION,\n  ICON_RESOLVE_CONVERSATION,\n  ICON_SEND_TRANSCRIPT,\n  ICON_SNOOZE_CONVERSATION,\n  ICON_SNOOZE_UNTIL_NEXT_REPLY,\n  ICON_SNOOZE_UNTIL_NEXT_WEEK,\n  ICON_SNOOZE_UNTIL_TOMORRROW,\n  ICON_UNMUTE_CONVERSATION,\n} from './CommandBarIcons';\n\nconst OPEN_CONVERSATION_ACTIONS = [\n  {\n    id: 'resolve_conversation',\n    title: 'COMMAND_BAR.COMMANDS.RESOLVE_CONVERSATION',\n    section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n    icon: ICON_RESOLVE_CONVERSATION,\n    handler: () => bus.$emit(CMD_RESOLVE_CONVERSATION),\n  },\n  {\n    id: 'snooze_conversation',\n    title: 'COMMAND_BAR.COMMANDS.SNOOZE_CONVERSATION',\n    icon: ICON_SNOOZE_CONVERSATION,\n    children: ['until_next_reply', 'until_tomorrow', 'until_next_week'],\n  },\n  {\n    id: 'until_next_reply',\n    title: 'COMMAND_BAR.COMMANDS.UNTIL_NEXT_REPLY',\n    parent: 'snooze_conversation',\n    icon: ICON_SNOOZE_UNTIL_NEXT_REPLY,\n    handler: () => bus.$emit(CMD_SNOOZE_CONVERSATION, 'nextReply'),\n  },\n  {\n    id: 'until_tomorrow',\n    title: 'COMMAND_BAR.COMMANDS.UNTIL_TOMORROW',\n    parent: 'snooze_conversation',\n    icon: ICON_SNOOZE_UNTIL_TOMORRROW,\n    handler: () => bus.$emit(CMD_SNOOZE_CONVERSATION, 'tomorrow'),\n  },\n  {\n    id: 'until_next_week',\n    title: 'COMMAND_BAR.COMMANDS.UNTIL_NEXT_WEEK',\n    parent: 'snooze_conversation',\n    icon: ICON_SNOOZE_UNTIL_NEXT_WEEK,\n    handler: () => bus.$emit(CMD_SNOOZE_CONVERSATION, 'nextWeek'),\n  },\n];\n\nconst RESOLVED_CONVERSATION_ACTIONS = [\n  {\n    id: 'reopen_conversation',\n    title: 'COMMAND_BAR.COMMANDS.REOPEN_CONVERSATION',\n    section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n    icon: ICON_REOPEN_CONVERSATION,\n    handler: () => bus.$emit(CMD_REOPEN_CONVERSATION),\n  },\n];\n\nconst SEND_TRANSCRIPT_ACTION = {\n  id: 'send_transcript',\n  title: 'COMMAND_BAR.COMMANDS.SEND_TRANSCRIPT',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_SEND_TRANSCRIPT,\n  handler: () => bus.$emit(CMD_SEND_TRANSCRIPT),\n};\n\nconst UNMUTE_ACTION = {\n  id: 'unmute_conversation',\n  title: 'COMMAND_BAR.COMMANDS.UNMUTE_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_UNMUTE_CONVERSATION,\n  handler: () => bus.$emit(CMD_UNMUTE_CONVERSATION),\n};\n\nconst MUTE_ACTION = {\n  id: 'mute_conversation',\n  title: 'COMMAND_BAR.COMMANDS.MUTE_CONVERSATION',\n  section: 'COMMAND_BAR.SECTIONS.CONVERSATION',\n  icon: ICON_MUTE_CONVERSATION,\n  handler: () => bus.$emit(CMD_MUTE_CONVERSATION),\n};\n\nexport const isAConversationRoute = routeName =>\n  [\n    'inbox_conversation',\n    'conversation_through_mentions',\n    'conversation_through_unattended',\n    'conversation_through_inbox',\n    'conversations_through_label',\n    'conversations_through_team',\n  ].includes(routeName);\n\nexport default {\n  watch: {\n    assignableAgents() {\n      this.setCommandbarData();\n    },\n    currentChat() {\n      this.setCommandbarData();\n    },\n    teamsList() {\n      this.setCommandbarData();\n    },\n    activeLabels() {\n      this.setCommandbarData();\n    },\n  },\n  computed: {\n    ...mapGetters({ currentChat: 'getSelectedChat' }),\n    inboxId() {\n      return this.currentChat?.inbox_id;\n    },\n    conversationId() {\n      return this.currentChat?.id;\n    },\n    statusActions() {\n      const isOpen =\n        this.currentChat?.status === wootConstants.STATUS_TYPE.OPEN;\n      const isSnoozed =\n        this.currentChat?.status === wootConstants.STATUS_TYPE.SNOOZED;\n      const isResolved =\n        this.currentChat?.status === wootConstants.STATUS_TYPE.RESOLVED;\n\n      let actions = [];\n      if (isOpen) {\n        actions = OPEN_CONVERSATION_ACTIONS;\n      } else if (isResolved || isSnoozed) {\n        actions = RESOLVED_CONVERSATION_ACTIONS;\n      }\n      return this.prepareActions(actions);\n    },\n    assignAgentActions() {\n      const agentOptions = this.agentsList.map(agent => ({\n        id: `agent-${agent.id}`,\n        title: agent.name,\n        parent: 'assign_an_agent',\n        section: this.$t('COMMAND_BAR.SECTIONS.CHANGE_ASSIGNEE'),\n        agentInfo: agent,\n        icon: ICON_ASSIGN_AGENT,\n        handler: this.onChangeAssignee,\n      }));\n      return [\n        {\n          id: 'assign_an_agent',\n          title: this.$t('COMMAND_BAR.COMMANDS.ASSIGN_AN_AGENT'),\n          section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n          icon: ICON_ASSIGN_AGENT,\n          children: agentOptions.map(option => option.id),\n        },\n        ...agentOptions,\n      ];\n    },\n    assignTeamActions() {\n      const teamOptions = this.teamsList.map(team => ({\n        id: `team-${team.id}`,\n        title: team.name,\n        parent: 'assign_a_team',\n        section: this.$t('COMMAND_BAR.SECTIONS.CHANGE_TEAM'),\n        teamInfo: team,\n        icon: ICON_ASSIGN_TEAM,\n        handler: this.onChangeTeam,\n      }));\n      return [\n        {\n          id: 'assign_a_team',\n          title: this.$t('COMMAND_BAR.COMMANDS.ASSIGN_A_TEAM'),\n          section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n          icon: ICON_ASSIGN_TEAM,\n          children: teamOptions.map(option => option.id),\n        },\n        ...teamOptions,\n      ];\n    },\n\n    addLabelActions() {\n      const availableLabels = this.inactiveLabels.map(label => ({\n        id: label.title,\n        title: `#${label.title}`,\n        parent: 'add_a_label_to_the_conversation',\n        section: this.$t('COMMAND_BAR.SECTIONS.ADD_LABEL'),\n        icon: ICON_ADD_LABEL,\n        handler: action => this.addLabelToConversation({ title: action.id }),\n      }));\n      return [\n        ...availableLabels,\n        {\n          id: 'add_a_label_to_the_conversation',\n          title: this.$t('COMMAND_BAR.COMMANDS.ADD_LABELS_TO_CONVERSATION'),\n          section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n          icon: ICON_ADD_LABEL,\n          children: this.inactiveLabels.map(label => label.title),\n        },\n      ];\n    },\n    removeLabelActions() {\n      const activeLabels = this.activeLabels.map(label => ({\n        id: label.title,\n        title: `#${label.title}`,\n        parent: 'remove_a_label_to_the_conversation',\n        section: this.$t('COMMAND_BAR.SECTIONS.REMOVE_LABEL'),\n        icon: ICON_REMOVE_LABEL,\n        handler: action => this.removeLabelFromConversation(action.id),\n      }));\n      return [\n        ...activeLabels,\n        {\n          id: 'remove_a_label_to_the_conversation',\n          title: this.$t('COMMAND_BAR.COMMANDS.REMOVE_LABEL_FROM_CONVERSATION'),\n          section: this.$t('COMMAND_BAR.SECTIONS.CONVERSATION'),\n          icon: ICON_REMOVE_LABEL,\n          children: this.activeLabels.map(label => label.title),\n        },\n      ];\n    },\n    labelActions() {\n      if (this.activeLabels.length) {\n        return [...this.addLabelActions, ...this.removeLabelActions];\n      }\n      return this.addLabelActions;\n    },\n    conversationAdditionalActions() {\n      return this.prepareActions([\n        this.currentChat.muted ? UNMUTE_ACTION : MUTE_ACTION,\n        SEND_TRANSCRIPT_ACTION,\n      ]);\n    },\n    conversationHotKeys() {\n      if (isAConversationRoute(this.$route.name)) {\n        return [\n          ...this.statusActions,\n          ...this.conversationAdditionalActions,\n          ...this.assignAgentActions,\n          ...this.assignTeamActions,\n          ...this.labelActions,\n        ];\n      }\n\n      return [];\n    },\n  },\n\n  methods: {\n    onChangeAssignee(action) {\n      this.$store.dispatch('assignAgent', {\n        conversationId: this.currentChat.id,\n        agentId: action.agentInfo.id,\n      });\n    },\n    onChangeTeam(action) {\n      this.$store.dispatch('assignTeam', {\n        conversationId: this.currentChat.id,\n        teamId: action.teamInfo.id,\n      });\n    },\n    prepareActions(actions) {\n      return actions.map(action => ({\n        ...action,\n        title: this.$t(action.title),\n        section: this.$t(action.section),\n      }));\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}