{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { sendMessage } from 'widget/helpers/utils';\nimport ContactsAPI from '../../api/contacts';\nimport { SET_USER_ERROR } from '../../constants/errorTypes';\nimport { setHeader } from '../../helpers/axios';\nvar state = {\n  currentUser: {}\n};\nvar SET_CURRENT_USER = 'SET_CURRENT_USER';\n\nvar parseErrorData = function parseErrorData(error) {\n  return error && error.response && error.response.data ? error.response.data : error;\n};\n\nexport var updateWidgetAuthToken = function updateWidgetAuthToken(widgetAuthToken) {\n  if (widgetAuthToken) {\n    setHeader(widgetAuthToken);\n    sendMessage({\n      event: 'setAuthCookie',\n      data: {\n        widgetAuthToken: widgetAuthToken\n      }\n    });\n  }\n};\nexport var getters = {\n  getCurrentUser: function getCurrentUser(_state) {\n    return _state.currentUser;\n  }\n};\nexport var actions = {\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, _yield$ContactsAPI$ge, data;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return ContactsAPI.get();\n\n            case 4:\n              _yield$ContactsAPI$ge = _context.sent;\n              data = _yield$ContactsAPI$ge.data;\n              commit(SET_CURRENT_USER, data);\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, _ref3) {\n      var dispatch, user;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch = _ref2.dispatch;\n              user = _ref3.user;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return ContactsAPI.update(user);\n\n            case 5:\n              dispatch('get');\n              _context2.next = 10;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](2);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 8]]);\n    }));\n\n    function update(_x2, _x3) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }(),\n  setUser: function () {\n    var _setUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref4, _ref5) {\n      var dispatch, identifier, userObject, email, name, avatar_url, identifierHash, phone_number, company_name, city, country_code, description, custom_attributes, social_profiles, user, _yield$ContactsAPI$se, widgetAuthToken, data;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch = _ref4.dispatch;\n              identifier = _ref5.identifier, userObject = _ref5.user;\n              _context3.prev = 2;\n              email = userObject.email, name = userObject.name, avatar_url = userObject.avatar_url, identifierHash = userObject.identifier_hash, phone_number = userObject.phone_number, company_name = userObject.company_name, city = userObject.city, country_code = userObject.country_code, description = userObject.description, custom_attributes = userObject.custom_attributes, social_profiles = userObject.social_profiles;\n              user = {\n                email: email,\n                name: name,\n                avatar_url: avatar_url,\n                identifier_hash: identifierHash,\n                phone_number: phone_number,\n                additional_attributes: {\n                  company_name: company_name,\n                  city: city,\n                  description: description,\n                  country_code: country_code,\n                  social_profiles: social_profiles\n                },\n                custom_attributes: custom_attributes\n              };\n              _context3.next = 7;\n              return ContactsAPI.setUser(identifier, user);\n\n            case 7:\n              _yield$ContactsAPI$se = _context3.sent;\n              widgetAuthToken = _yield$ContactsAPI$se.data.widget_auth_token;\n              updateWidgetAuthToken(widgetAuthToken);\n              dispatch('get');\n\n              if (identifierHash || widgetAuthToken) {\n                dispatch('conversation/clearConversations', {}, {\n                  root: true\n                });\n                dispatch('conversation/fetchOldConversations', {}, {\n                  root: true\n                });\n                dispatch('conversationAttributes/getAttributes', {}, {\n                  root: true\n                });\n              }\n\n              _context3.next = 18;\n              break;\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](2);\n              data = parseErrorData(_context3.t0);\n              sendMessage({\n                event: 'error',\n                errorType: SET_USER_ERROR,\n                data: data\n              });\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 14]]);\n    }));\n\n    function setUser(_x4, _x5) {\n      return _setUser.apply(this, arguments);\n    }\n\n    return setUser;\n  }(),\n  setCustomAttributes: function () {\n    var _setCustomAttributes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_) {\n      var customAttributes,\n          _args4 = arguments;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              customAttributes = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              _context4.prev = 1;\n              _context4.next = 4;\n              return ContactsAPI.setCustomAttributes(customAttributes);\n\n            case 4:\n              _context4.next = 8;\n              break;\n\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](1);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 6]]);\n    }));\n\n    function setCustomAttributes(_x6) {\n      return _setCustomAttributes.apply(this, arguments);\n    }\n\n    return setCustomAttributes;\n  }(),\n  deleteCustomAttribute: function () {\n    var _deleteCustomAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_, customAttribute) {\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return ContactsAPI.deleteCustomAttribute(customAttribute);\n\n            case 3:\n              _context5.next = 7;\n              break;\n\n            case 5:\n              _context5.prev = 5;\n              _context5.t0 = _context5[\"catch\"](0);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 5]]);\n    }));\n\n    function deleteCustomAttribute(_x7, _x8) {\n      return _deleteCustomAttribute.apply(this, arguments);\n    }\n\n    return deleteCustomAttribute;\n  }()\n};\nexport var mutations = _defineProperty({}, SET_CURRENT_USER, function ($state, user) {\n  var currentUser = $state.currentUser;\n  $state.currentUser = _objectSpread(_objectSpread({}, currentUser), user);\n});\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/contacts.js"],"names":["sendMessage","ContactsAPI","SET_USER_ERROR","setHeader","state","currentUser","SET_CURRENT_USER","parseErrorData","error","response","data","updateWidgetAuthToken","widgetAuthToken","event","getters","getCurrentUser","_state","actions","get","commit","update","dispatch","user","setUser","identifier","userObject","email","name","avatar_url","identifierHash","identifier_hash","phone_number","company_name","city","country_code","description","custom_attributes","social_profiles","additional_attributes","widget_auth_token","root","errorType","setCustomAttributes","_","customAttributes","deleteCustomAttribute","customAttribute","mutations","$state","namespaced"],"mappings":"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","sourcesContent":["import { sendMessage } from 'widget/helpers/utils';\nimport ContactsAPI from '../../api/contacts';\nimport { SET_USER_ERROR } from '../../constants/errorTypes';\nimport { setHeader } from '../../helpers/axios';\nconst state = {\n  currentUser: {},\n};\n\nconst SET_CURRENT_USER = 'SET_CURRENT_USER';\nconst parseErrorData = error =>\n  error && error.response && error.response.data ? error.response.data : error;\nexport const updateWidgetAuthToken = widgetAuthToken => {\n  if (widgetAuthToken) {\n    setHeader(widgetAuthToken);\n    sendMessage({\n      event: 'setAuthCookie',\n      data: { widgetAuthToken },\n    });\n  }\n};\n\nexport const getters = {\n  getCurrentUser(_state) {\n    return _state.currentUser;\n  },\n};\n\nexport const actions = {\n  get: async ({ commit }) => {\n    try {\n      const { data } = await ContactsAPI.get();\n      commit(SET_CURRENT_USER, data);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n  update: async ({ dispatch }, { user }) => {\n    try {\n      await ContactsAPI.update(user);\n      dispatch('get');\n    } catch (error) {\n      // Ignore error\n    }\n  },\n  setUser: async ({ dispatch }, { identifier, user: userObject }) => {\n    try {\n      const {\n        email,\n        name,\n        avatar_url,\n        identifier_hash: identifierHash,\n        phone_number,\n        company_name,\n        city,\n        country_code,\n        description,\n        custom_attributes,\n        social_profiles,\n      } = userObject;\n      const user = {\n        email,\n        name,\n        avatar_url,\n        identifier_hash: identifierHash,\n        phone_number,\n        additional_attributes: {\n          company_name,\n          city,\n          description,\n          country_code,\n          social_profiles,\n        },\n        custom_attributes,\n      };\n      const {\n        data: { widget_auth_token: widgetAuthToken },\n      } = await ContactsAPI.setUser(identifier, user);\n      updateWidgetAuthToken(widgetAuthToken);\n      dispatch('get');\n      if (identifierHash || widgetAuthToken) {\n        dispatch('conversation/clearConversations', {}, { root: true });\n        dispatch('conversation/fetchOldConversations', {}, { root: true });\n        dispatch('conversationAttributes/getAttributes', {}, { root: true });\n      }\n    } catch (error) {\n      const data = parseErrorData(error);\n      sendMessage({ event: 'error', errorType: SET_USER_ERROR, data });\n    }\n  },\n  setCustomAttributes: async (_, customAttributes = {}) => {\n    try {\n      await ContactsAPI.setCustomAttributes(customAttributes);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n  deleteCustomAttribute: async (_, customAttribute) => {\n    try {\n      await ContactsAPI.deleteCustomAttribute(customAttribute);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n};\n\nexport const mutations = {\n  [SET_CURRENT_USER]($state, user) {\n    const { currentUser } = $state;\n    $state.currentUser = { ...currentUser, ...user };\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}