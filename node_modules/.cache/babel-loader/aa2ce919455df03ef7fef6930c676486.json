{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { MESSAGE_TYPE } from 'shared/constants/messages';\nimport { IFrameHelper } from 'widget/helpers/utils';\nimport { showBadgeOnFavicon } from './faviconHelper';\nexport var initOnEvents = ['click', 'touchstart', 'keypress', 'keydown'];\nexport var getAudioContext = function getAudioContext() {\n  var audioCtx;\n\n  try {\n    audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  } catch (_unused) {// AudioContext is not available.\n  }\n\n  return audioCtx;\n};\nexport var getAlertAudio = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var baseUrl,\n        type,\n        audioCtx,\n        playsound,\n        resourceUrl,\n        audioRequest,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            baseUrl = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n            type = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'dashboard';\n            audioCtx = getAudioContext();\n\n            playsound = function playsound(audioBuffer) {\n              window.playAudioAlert = function () {\n                if (audioCtx) {\n                  var source = audioCtx.createBufferSource();\n                  source.buffer = audioBuffer;\n                  source.connect(audioCtx.destination);\n                  source.loop = false;\n                  source.start();\n                }\n              };\n            };\n\n            if (audioCtx) {\n              resourceUrl = \"\".concat(baseUrl, \"/audio/\").concat(type, \"/ding.mp3\");\n              audioRequest = new Request(resourceUrl);\n              fetch(audioRequest).then(function (response) {\n                return response.arrayBuffer();\n              }).then(function (buffer) {\n                audioCtx.decodeAudioData(buffer).then(playsound);\n                return new Promise(function (res) {\n                  return res();\n                });\n              }).catch(function () {// error\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAlertAudio() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var notificationEnabled = function notificationEnabled(enableAudioAlerts, id, userId) {\n  if (enableAudioAlerts === 'mine') {\n    return userId === id;\n  }\n\n  if (enableAudioAlerts === 'all') {\n    return true;\n  }\n\n  return false;\n};\nexport var shouldPlayAudio = function shouldPlayAudio(message, conversationId, userId, isDocHidden) {\n  var incomingConvId = message.conversation_id,\n      senderId = message.sender_id,\n      messageType = message.message_type,\n      isPrivate = message.private;\n\n  if (!isDocHidden && messageType === MESSAGE_TYPE.INCOMING) {\n    showBadgeOnFavicon();\n    return false;\n  }\n\n  var isFromCurrentUser = userId === senderId;\n  var playAudio = !isFromCurrentUser && (messageType === MESSAGE_TYPE.INCOMING || isPrivate);\n  if (isDocHidden) return playAudio;\n  if (conversationId !== incomingConvId) return playAudio;\n  return false;\n};\nexport var getAssigneeFromNotification = function getAssigneeFromNotification(currentConv) {\n  var id;\n\n  if (currentConv.meta) {\n    var assignee = currentConv.meta.assignee;\n\n    if (assignee) {\n      id = assignee.id;\n    }\n  }\n\n  return id;\n};\nexport var newMessageNotification = function newMessageNotification(data) {\n  var currentConvId = window.WOOT.$route.params.conversation_id;\n  var currentUserId = window.WOOT.$store.getters.getCurrentUserID;\n  var incomingConvId = data.conversation_id;\n  var currentConv = window.WOOT.$store.getters.getConversationById(incomingConvId) || {};\n  var assigneeId = getAssigneeFromNotification(currentConv);\n  var isDocHidden = document.hidden;\n  var _window$WOOT$$store$g = window.WOOT.$store.getters.getUISettings.enable_audio_alerts,\n      enableAudioAlerts = _window$WOOT$$store$g === void 0 ? false : _window$WOOT$$store$g;\n  var playAudio = shouldPlayAudio(data, currentConvId, currentUserId, isDocHidden);\n  var isNotificationEnabled = notificationEnabled(enableAudioAlerts, currentUserId, assigneeId);\n\n  if (playAudio && isNotificationEnabled) {\n    window.playAudioAlert();\n    showBadgeOnFavicon();\n  }\n};\nexport var playNewMessageNotificationInWidget = function playNewMessageNotificationInWidget() {\n  IFrameHelper.sendMessage({\n    event: 'playAudio'\n  });\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/helpers/AudioNotificationHelper.js"],"names":["MESSAGE_TYPE","IFrameHelper","showBadgeOnFavicon","initOnEvents","getAudioContext","audioCtx","window","AudioContext","webkitAudioContext","getAlertAudio","baseUrl","type","playsound","audioBuffer","playAudioAlert","source","createBufferSource","buffer","connect","destination","loop","start","resourceUrl","audioRequest","Request","fetch","then","response","arrayBuffer","decodeAudioData","Promise","res","catch","notificationEnabled","enableAudioAlerts","id","userId","shouldPlayAudio","message","conversationId","isDocHidden","incomingConvId","conversation_id","senderId","sender_id","messageType","message_type","isPrivate","private","INCOMING","isFromCurrentUser","playAudio","getAssigneeFromNotification","currentConv","meta","assignee","newMessageNotification","data","currentConvId","WOOT","$route","params","currentUserId","$store","getters","getCurrentUserID","getConversationById","assigneeId","document","hidden","getUISettings","enable_audio_alerts","isNotificationEnabled","playNewMessageNotificationInWidget","sendMessage","event"],"mappings":"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","sourcesContent":["import { MESSAGE_TYPE } from 'shared/constants/messages';\nimport { IFrameHelper } from 'widget/helpers/utils';\n\nimport { showBadgeOnFavicon } from './faviconHelper';\n\nexport const initOnEvents = ['click', 'touchstart', 'keypress', 'keydown'];\n\nexport const getAudioContext = () => {\n  let audioCtx;\n  try {\n    audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n  } catch {\n    // AudioContext is not available.\n  }\n  return audioCtx;\n};\n\nexport const getAlertAudio = async (baseUrl = '', type = 'dashboard') => {\n  const audioCtx = getAudioContext();\n\n  const playsound = audioBuffer => {\n    window.playAudioAlert = () => {\n      if (audioCtx) {\n        const source = audioCtx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(audioCtx.destination);\n        source.loop = false;\n        source.start();\n      }\n    };\n  };\n\n  if (audioCtx) {\n    const resourceUrl = `${baseUrl}/audio/${type}/ding.mp3`;\n    const audioRequest = new Request(resourceUrl);\n\n    fetch(audioRequest)\n      .then(response => response.arrayBuffer())\n      .then(buffer => {\n        audioCtx.decodeAudioData(buffer).then(playsound);\n        return new Promise(res => res());\n      })\n      .catch(() => {\n        // error\n      });\n  }\n};\n\nexport const notificationEnabled = (enableAudioAlerts, id, userId) => {\n  if (enableAudioAlerts === 'mine') {\n    return userId === id;\n  }\n  if (enableAudioAlerts === 'all') {\n    return true;\n  }\n  return false;\n};\n\nexport const shouldPlayAudio = (\n  message,\n  conversationId,\n  userId,\n  isDocHidden\n) => {\n  const {\n    conversation_id: incomingConvId,\n    sender_id: senderId,\n    message_type: messageType,\n    private: isPrivate,\n  } = message;\n  if (!isDocHidden && messageType === MESSAGE_TYPE.INCOMING) {\n    showBadgeOnFavicon();\n    return false;\n  }\n  const isFromCurrentUser = userId === senderId;\n\n  const playAudio =\n    !isFromCurrentUser && (messageType === MESSAGE_TYPE.INCOMING || isPrivate);\n  if (isDocHidden) return playAudio;\n  if (conversationId !== incomingConvId) return playAudio;\n  return false;\n};\n\nexport const getAssigneeFromNotification = currentConv => {\n  let id;\n  if (currentConv.meta) {\n    const assignee = currentConv.meta.assignee;\n    if (assignee) {\n      id = assignee.id;\n    }\n  }\n  return id;\n};\nexport const newMessageNotification = data => {\n  const { conversation_id: currentConvId } = window.WOOT.$route.params;\n  const currentUserId = window.WOOT.$store.getters.getCurrentUserID;\n  const { conversation_id: incomingConvId } = data;\n  const currentConv =\n    window.WOOT.$store.getters.getConversationById(incomingConvId) || {};\n  const assigneeId = getAssigneeFromNotification(currentConv);\n  const isDocHidden = document.hidden;\n  const {\n    enable_audio_alerts: enableAudioAlerts = false,\n  } = window.WOOT.$store.getters.getUISettings;\n  const playAudio = shouldPlayAudio(\n    data,\n    currentConvId,\n    currentUserId,\n    isDocHidden\n  );\n  const isNotificationEnabled = notificationEnabled(\n    enableAudioAlerts,\n    currentUserId,\n    assigneeId\n  );\n\n  if (playAudio && isNotificationEnabled) {\n    window.playAudioAlert();\n    showBadgeOnFavicon();\n  }\n};\n\nexport const playNewMessageNotificationInWidget = () => {\n  IFrameHelper.sendMessage({\n    event: 'playAudio',\n  });\n};\n"]},"metadata":{},"sourceType":"module"}