{"ast":null,"code":"import { __extends } from \"tslib\";\nexport function isString(obj) {\n  return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n  return typeof obj === 'number';\n}\nexport function isFunction(obj) {\n  return typeof obj === 'function';\n}\nexport function isPlainObject(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase() === 'object';\n}\n\nfunction hasUser(event) {\n  var _a, _b, _c;\n\n  var id = (_c = (_b = (_a = event.userId) !== null && _a !== void 0 ? _a : event.anonymousId) !== null && _b !== void 0 ? _b : event.groupId) !== null && _c !== void 0 ? _c : event.previousId;\n  return isString(id);\n}\n\nvar ValidationError =\n/** @class */\nfunction (_super) {\n  __extends(ValidationError, _super);\n\n  function ValidationError(field, message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.field = field;\n    return _this;\n  }\n\n  return ValidationError;\n}(Error);\n\nfunction validate(ctx) {\n  var _a;\n\n  var eventType = ctx && ctx.event && ctx.event.type;\n  var event = ctx.event;\n\n  if (event === undefined) {\n    throw new ValidationError('event', 'Event is missing');\n  }\n\n  if (!isString(eventType)) {\n    throw new ValidationError('event', 'Event is not a string');\n  }\n\n  if (eventType === 'track' && !isString(event.event)) {\n    throw new ValidationError('event', 'Event is not a string');\n  }\n\n  var props = (_a = event.properties) !== null && _a !== void 0 ? _a : event.traits;\n\n  if (eventType !== 'alias' && !isPlainObject(props)) {\n    throw new ValidationError('properties', 'properties is not an object');\n  }\n\n  if (!hasUser(event)) {\n    throw new ValidationError('userId', 'Missing userId or anonymousId');\n  }\n\n  return ctx;\n}\n\nexport var validation = {\n  name: 'Event Validation',\n  type: 'before',\n  version: '1.0.0',\n  isLoaded: function isLoaded() {\n    return true;\n  },\n  load: function load() {\n    return Promise.resolve();\n  },\n  track: validate,\n  identify: validate,\n  page: validate,\n  alias: validate,\n  group: validate,\n  screen: validate\n};","map":null,"metadata":{},"sourceType":"module"}