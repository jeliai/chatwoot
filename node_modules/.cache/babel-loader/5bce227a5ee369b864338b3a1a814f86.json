{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport events from 'widget/api/events';\nvar actions = {\n  create: function () {\n    var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_, _ref) {\n      var name;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = _ref.name;\n              _context.prev = 1;\n              _context.next = 4;\n              return events.create(name);\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 6]]);\n    }));\n\n    function create(_x, _x2) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }()\n};\nexport default {\n  namespaced: true,\n  state: {},\n  getters: {},\n  actions: actions,\n  mutations: {}\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/events.js"],"names":["events","actions","create","_","name","namespaced","state","getters","mutations"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM;AAAA,0EAAE,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,cAAAA,IAAZ,QAAYA,IAAZ;AAAA;AAAA;AAAA,qBAEEJ,MAAM,CAACE,MAAP,CAAcE,IAAd,CAFF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADQ,CAAhB;AAUA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbC,EAAAA,KAAK,EAAE,EAFM;AAGbC,EAAAA,OAAO,EAAE,EAHI;AAIbN,EAAAA,OAAO,EAAPA,OAJa;AAKbO,EAAAA,SAAS,EAAE;AALE,CAAf","sourcesContent":["import events from 'widget/api/events';\n\nconst actions = {\n  create: async (_, { name }) => {\n    try {\n      await events.create(name);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n};\n\nexport default {\n  namespaced: true,\n  state: {},\n  getters: {},\n  actions,\n  mutations: {},\n};\n"]},"metadata":{},"sourceType":"module"}