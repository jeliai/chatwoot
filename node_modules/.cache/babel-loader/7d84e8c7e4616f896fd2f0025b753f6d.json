{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\n\nvar getLastNonActivityMessage = function getLastNonActivityMessage(messageInStore, messageFromAPI) {\n  // If both API value and store value for last non activity message\n  // are available, then return the latest one.\n  if (messageInStore && messageFromAPI) {\n    if (messageInStore.created_at >= messageFromAPI.created_at) {\n      return messageInStore;\n    }\n\n    return messageFromAPI;\n  } // Otherwise, return whichever is available\n\n\n  return messageInStore || messageFromAPI;\n};\n\nexport default {\n  methods: {\n    lastMessage: function lastMessage(m) {\n      var lastMessageIncludingActivity = m.messages.last();\n      var nonActivityMessages = m.messages.filter(function (message) {\n        return message.message_type !== 2;\n      });\n      var lastNonActivityMessageInStore = nonActivityMessages.last();\n      var lastNonActivityMessageFromAPI = m.last_non_activity_message; // If API value and store value for last non activity message\n      // is empty, then return the last activity message\n\n      if (!lastNonActivityMessageInStore && !lastNonActivityMessageFromAPI) {\n        return lastMessageIncludingActivity;\n      }\n\n      return getLastNonActivityMessage(lastNonActivityMessageInStore, lastNonActivityMessageFromAPI);\n    },\n    hasUserReadMessage: function hasUserReadMessage(createdAt, contactLastSeen) {\n      return !(contactLastSeen - createdAt < 0);\n    },\n    readMessages: function readMessages(m) {\n      return m.messages.filter(function (chat) {\n        return chat.created_at * 1000 <= m.agent_last_seen_at * 1000;\n      });\n    },\n    unReadMessages: function unReadMessages(m) {\n      return m.messages.filter(function (chat) {\n        return chat.created_at * 1000 > m.agent_last_seen_at * 1000;\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/conversations.js"],"names":["getLastNonActivityMessage","messageInStore","messageFromAPI","created_at","methods","lastMessage","m","lastMessageIncludingActivity","messages","last","nonActivityMessages","filter","message","message_type","lastNonActivityMessageInStore","lastNonActivityMessageFromAPI","last_non_activity_message","hasUserReadMessage","createdAt","contactLastSeen","readMessages","chat","agent_last_seen_at","unReadMessages"],"mappings":";;AAAA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,cAAD,EAAiBC,cAAjB,EAAoC;AACpE;AACA;AACA,MAAID,cAAc,IAAIC,cAAtB,EAAsC;AACpC,QAAID,cAAc,CAACE,UAAf,IAA6BD,cAAc,CAACC,UAAhD,EAA4D;AAC1D,aAAOF,cAAP;AACD;;AACD,WAAOC,cAAP;AACD,GARmE,CAUpE;;;AACA,SAAOD,cAAc,IAAIC,cAAzB;AACD,CAZD;;AAcA,eAAe;AACbE,EAAAA,OAAO,EAAE;AACPC,IAAAA,WADO,uBACKC,CADL,EACQ;AACb,UAAIC,4BAA4B,GAAGD,CAAC,CAACE,QAAF,CAAWC,IAAX,EAAnC;AAEA,UAAMC,mBAAmB,GAAGJ,CAAC,CAACE,QAAF,CAAWG,MAAX,CAC1B,UAAAC,OAAO;AAAA,eAAIA,OAAO,CAACC,YAAR,KAAyB,CAA7B;AAAA,OADmB,CAA5B;AAGA,UAAIC,6BAA6B,GAAGJ,mBAAmB,CAACD,IAApB,EAApC;AACA,UAAIM,6BAA6B,GAAGT,CAAC,CAACU,yBAAtC,CAPa,CASb;AACA;;AACA,UAAI,CAACF,6BAAD,IAAkC,CAACC,6BAAvC,EAAsE;AACpE,eAAOR,4BAAP;AACD;;AAED,aAAOP,yBAAyB,CAC9Bc,6BAD8B,EAE9BC,6BAF8B,CAAhC;AAID,KApBM;AAqBPE,IAAAA,kBArBO,8BAqBYC,SArBZ,EAqBuBC,eArBvB,EAqBwC;AAC7C,aAAO,EAAEA,eAAe,GAAGD,SAAlB,GAA8B,CAAhC,CAAP;AACD,KAvBM;AAwBPE,IAAAA,YAxBO,wBAwBMd,CAxBN,EAwBS;AACd,aAAOA,CAAC,CAACE,QAAF,CAAWG,MAAX,CACL,UAAAU,IAAI;AAAA,eAAIA,IAAI,CAAClB,UAAL,GAAkB,IAAlB,IAA0BG,CAAC,CAACgB,kBAAF,GAAuB,IAArD;AAAA,OADC,CAAP;AAGD,KA5BM;AA6BPC,IAAAA,cA7BO,0BA6BQjB,CA7BR,EA6BW;AAChB,aAAOA,CAAC,CAACE,QAAF,CAAWG,MAAX,CACL,UAAAU,IAAI;AAAA,eAAIA,IAAI,CAAClB,UAAL,GAAkB,IAAlB,GAAyBG,CAAC,CAACgB,kBAAF,GAAuB,IAApD;AAAA,OADC,CAAP;AAGD;AAjCM;AADI,CAAf","sourcesContent":["const getLastNonActivityMessage = (messageInStore, messageFromAPI) => {\n  // If both API value and store value for last non activity message\n  // are available, then return the latest one.\n  if (messageInStore && messageFromAPI) {\n    if (messageInStore.created_at >= messageFromAPI.created_at) {\n      return messageInStore;\n    }\n    return messageFromAPI;\n  }\n\n  // Otherwise, return whichever is available\n  return messageInStore || messageFromAPI;\n};\n\nexport default {\n  methods: {\n    lastMessage(m) {\n      let lastMessageIncludingActivity = m.messages.last();\n\n      const nonActivityMessages = m.messages.filter(\n        message => message.message_type !== 2\n      );\n      let lastNonActivityMessageInStore = nonActivityMessages.last();\n      let lastNonActivityMessageFromAPI = m.last_non_activity_message;\n\n      // If API value and store value for last non activity message\n      // is empty, then return the last activity message\n      if (!lastNonActivityMessageInStore && !lastNonActivityMessageFromAPI) {\n        return lastMessageIncludingActivity;\n      }\n\n      return getLastNonActivityMessage(\n        lastNonActivityMessageInStore,\n        lastNonActivityMessageFromAPI\n      );\n    },\n    hasUserReadMessage(createdAt, contactLastSeen) {\n      return !(contactLastSeen - createdAt < 0);\n    },\n    readMessages(m) {\n      return m.messages.filter(\n        chat => chat.created_at * 1000 <= m.agent_last_seen_at * 1000\n      );\n    },\n    unReadMessages(m) {\n      return m.messages.filter(\n        chat => chat.created_at * 1000 > m.agent_last_seen_at * 1000\n      );\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}