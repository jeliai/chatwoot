{"ast":null,"code":"import { v4 as uuid } from '@lukeed/uuid';\nimport { dset } from 'dset';\nimport Logger from '../logger';\nimport Stats from '../stats';\nimport { RemoteMetrics } from '../stats/remote-metrics';\n\nvar ContextCancelation =\n/** @class */\nfunction () {\n  function ContextCancelation(options) {\n    var _a, _b, _c;\n\n    this.retry = (_a = options.retry) !== null && _a !== void 0 ? _a : true;\n    this.type = (_b = options.type) !== null && _b !== void 0 ? _b : 'plugin Error';\n    this.reason = (_c = options.reason) !== null && _c !== void 0 ? _c : '';\n  }\n\n  return ContextCancelation;\n}();\n\nexport { ContextCancelation };\nvar remoteMetrics;\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(event, id) {\n    this.logger = new Logger();\n\n    this.cancel = function (error) {\n      if (error) {\n        throw error;\n      }\n\n      throw new ContextCancelation({\n        reason: 'Context Cancel'\n      });\n    };\n\n    this._attempts = 0;\n    this._event = event;\n    this._id = id !== null && id !== void 0 ? id : uuid();\n    this.stats = new Stats(remoteMetrics);\n  }\n\n  Context.initMetrics = function (options) {\n    remoteMetrics = new RemoteMetrics(options);\n  };\n\n  Context.system = function () {\n    return new Context({\n      type: 'track',\n      event: 'system'\n    });\n  };\n\n  Context.prototype.isSame = function (other) {\n    return other._id === this._id;\n  };\n\n  Context.prototype.log = function (level, message, extras) {\n    this.logger.log(level, message, extras);\n  };\n\n  Object.defineProperty(Context.prototype, \"id\", {\n    get: function get() {\n      return this._id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"event\", {\n    get: function get() {\n      return this._event;\n    },\n    set: function set(evt) {\n      this._event = evt;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Context.prototype, \"attempts\", {\n    get: function get() {\n      return this._attempts;\n    },\n    set: function set(attempts) {\n      this._attempts = attempts;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Context.prototype.updateEvent = function (path, val) {\n    var _a; // Don't allow integrations that are set to false to be overwritten with integration settings.\n\n\n    if (path.split('.')[0] === 'integrations') {\n      var integrationName = path.split('.')[1];\n\n      if (((_a = this._event.integrations) === null || _a === void 0 ? void 0 : _a[integrationName]) === false) {\n        return this._event;\n      }\n    }\n\n    dset(this._event, path, val);\n    return this._event;\n  };\n\n  Context.prototype.logs = function () {\n    return this.logger.logs;\n  };\n\n  Context.prototype.flush = function () {\n    this.logger.flush();\n    this.stats.flush();\n  };\n\n  Context.prototype.toJSON = function () {\n    return {\n      id: this._id,\n      event: this._event,\n      logs: this.logger.logs,\n      metrics: this.stats.metrics\n    };\n  };\n\n  return Context;\n}();\n\nexport { Context };","map":null,"metadata":{},"sourceType":"module"}