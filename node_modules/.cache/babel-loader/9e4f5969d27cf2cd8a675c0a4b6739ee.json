{"ast":null,"code":"var _mutations;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport Vue from 'vue';\nimport * as types from '../mutation-types';\nimport ConversationAPI from '../../api/conversations';\nvar state = {\n  records: {},\n  uiFlags: {\n    isFetching: false,\n    isUpdating: false,\n    isError: false\n  }\n};\nexport var getters = {\n  getUIFlags: function getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getConversationLabels: function getConversationLabels($state) {\n    return function (id) {\n      return $state.records[Number(id)] || [];\n    };\n  }\n};\nexport var actions = {\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, conversationId) {\n      var commit, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isFetching: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return ConversationAPI.getLabels(conversationId);\n\n            case 5:\n              response = _context.sent;\n              commit(types.default.SET_CONVERSATION_LABELS, {\n                id: conversationId,\n                data: response.data.payload\n              });\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isFetching: false\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isFetching: false\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 10]]);\n    }));\n\n    function get(_x, _x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, _ref3) {\n      var commit, conversationId, labels, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              conversationId = _ref3.conversationId, labels = _ref3.labels;\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isUpdating: true\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return ConversationAPI.updateLabels(conversationId, labels);\n\n            case 6:\n              response = _context2.sent;\n              commit(types.default.SET_CONVERSATION_LABELS, {\n                id: conversationId,\n                data: response.data.payload\n              });\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isUpdating: false,\n                isError: false\n              });\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](3);\n              commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n                isUpdating: false,\n                isError: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 11]]);\n    }));\n\n    function update(_x3, _x4) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }(),\n  setBulkConversationLabels: function setBulkConversationLabels(_ref4, conversations) {\n    var commit = _ref4.commit;\n    commit(types.default.SET_BULK_CONVERSATION_LABELS, conversations);\n  },\n  setConversationLabel: function setConversationLabel(_ref5, _ref6) {\n    var commit = _ref5.commit;\n    var id = _ref6.id,\n        data = _ref6.data;\n    commit(types.default.SET_CONVERSATION_LABELS, {\n      id: id,\n      data: data\n    });\n  }\n};\nexport var mutations = (_mutations = {}, _defineProperty(_mutations, types.default.SET_CONVERSATION_LABELS_UI_FLAG, function ($state, data) {\n  $state.uiFlags = _objectSpread(_objectSpread({}, $state.uiFlags), data);\n}), _defineProperty(_mutations, types.default.SET_CONVERSATION_LABELS, function ($state, _ref7) {\n  var id = _ref7.id,\n      data = _ref7.data;\n  Vue.set($state.records, id, data);\n}), _defineProperty(_mutations, types.default.SET_BULK_CONVERSATION_LABELS, function ($state, conversations) {\n  conversations.forEach(function (conversation) {\n    Vue.set($state.records, conversation.id, conversation.labels);\n  });\n}), _mutations);\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversationLabels.js"],"names":["Vue","types","ConversationAPI","state","records","uiFlags","isFetching","isUpdating","isError","getters","getUIFlags","$state","getConversationLabels","id","Number","actions","get","conversationId","commit","default","SET_CONVERSATION_LABELS_UI_FLAG","getLabels","response","SET_CONVERSATION_LABELS","data","payload","update","labels","updateLabels","setBulkConversationLabels","conversations","SET_BULK_CONVERSATION_LABELS","setConversationLabel","mutations","set","forEach","conversation","namespaced"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport * as types from '../mutation-types';\nimport ConversationAPI from '../../api/conversations';\n\nconst state = {\n  records: {},\n  uiFlags: {\n    isFetching: false,\n    isUpdating: false,\n    isError: false,\n  },\n};\n\nexport const getters = {\n  getUIFlags($state) {\n    return $state.uiFlags;\n  },\n  getConversationLabels: $state => id => {\n    return $state.records[Number(id)] || [];\n  },\n};\n\nexport const actions = {\n  get: async ({ commit }, conversationId) => {\n    commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n      isFetching: true,\n    });\n    try {\n      const response = await ConversationAPI.getLabels(conversationId);\n      commit(types.default.SET_CONVERSATION_LABELS, {\n        id: conversationId,\n        data: response.data.payload,\n      });\n      commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n        isFetching: false,\n      });\n    } catch (error) {\n      commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n        isFetching: false,\n      });\n    }\n  },\n  update: async ({ commit }, { conversationId, labels }) => {\n    commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n      isUpdating: true,\n    });\n    try {\n      const response = await ConversationAPI.updateLabels(\n        conversationId,\n        labels\n      );\n      commit(types.default.SET_CONVERSATION_LABELS, {\n        id: conversationId,\n        data: response.data.payload,\n      });\n      commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n        isUpdating: false,\n        isError: false,\n      });\n    } catch (error) {\n      commit(types.default.SET_CONVERSATION_LABELS_UI_FLAG, {\n        isUpdating: false,\n        isError: true,\n      });\n    }\n  },\n  setBulkConversationLabels({ commit }, conversations) {\n    commit(types.default.SET_BULK_CONVERSATION_LABELS, conversations);\n  },\n  setConversationLabel({ commit }, { id, data }) {\n    commit(types.default.SET_CONVERSATION_LABELS, { id, data });\n  },\n};\n\nexport const mutations = {\n  [types.default.SET_CONVERSATION_LABELS_UI_FLAG]($state, data) {\n    $state.uiFlags = {\n      ...$state.uiFlags,\n      ...data,\n    };\n  },\n  [types.default.SET_CONVERSATION_LABELS]: ($state, { id, data }) => {\n    Vue.set($state.records, id, data);\n  },\n  [types.default.SET_BULK_CONVERSATION_LABELS]: ($state, conversations) => {\n    conversations.forEach(conversation => {\n      Vue.set($state.records, conversation.id, conversation.labels);\n    });\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}