{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ContactPanel from 'dashboard/routes/dashboard/conversation/ContactPanel';\nimport ConversationHeader from './ConversationHeader';\nimport DashboardAppFrame from '../DashboardApp/Frame.vue';\nimport EmptyState from './EmptyState';\nimport MessagesView from './MessagesView';\nexport default {\n  components: {\n    ContactPanel: ContactPanel,\n    ConversationHeader: ConversationHeader,\n    DashboardAppFrame: DashboardAppFrame,\n    EmptyState: EmptyState,\n    MessagesView: MessagesView\n  },\n  props: {\n    inboxId: {\n      type: [Number, String],\n      default: '',\n      required: false\n    },\n    isContactPanelOpen: {\n      type: Boolean,\n      default: true\n    },\n    isOnExpandedLayout: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      activeIndex: 0\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    dashboardApps: 'dashboardApps/getRecords'\n  })), {}, {\n    dashboardAppTabs: function dashboardAppTabs() {\n      return [{\n        key: 'messages',\n        name: this.$t('CONVERSATION.DASHBOARD_APP_TAB_MESSAGES')\n      }].concat(_toConsumableArray(this.dashboardApps.map(function (dashboardApp) {\n        return {\n          key: \"dashboard-\".concat(dashboardApp.id),\n          name: dashboardApp.title\n        };\n      })));\n    },\n    showContactPanel: function showContactPanel() {\n      return this.isContactPanelOpen && this.currentChat.id;\n    }\n  }),\n  watch: {\n    'currentChat.inbox_id': function currentChatInbox_id(inboxId) {\n      if (inboxId) {\n        this.$store.dispatch('inboxAssignableAgents/fetch', [inboxId]);\n      }\n    },\n    'currentChat.id': function currentChatId() {\n      this.fetchLabels();\n    }\n  },\n  mounted: function mounted() {\n    this.fetchLabels();\n    this.$store.dispatch('dashboardApps/get');\n  },\n  methods: {\n    fetchLabels: function fetchLabels() {\n      if (!this.currentChat.id) {\n        return;\n      }\n\n      this.$store.dispatch('conversationLabels/get', this.currentChat.id);\n    },\n    onToggleContactPanel: function onToggleContactPanel() {\n      this.$emit('contact-panel-toggle');\n    },\n    onDashboardAppTabChange: function onDashboardAppTabChange(index) {\n      this.activeIndex = index;\n    }\n  }\n};","map":{"version":3,"sources":["ConversationBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,YAAA,MAAA,sDAAA;AACA,OAAA,kBAAA,MAAA,sBAAA;AACA,OAAA,iBAAA,MAAA,2BAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,YAAA,MAAA,gBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,YAAA,EAAA,YADA;AAEA,IAAA,kBAAA,EAAA,kBAFA;AAGA,IAAA,iBAAA,EAAA,iBAHA;AAIA,IAAA,UAAA,EAAA,UAJA;AAKA,IAAA,YAAA,EAAA;AALA,GADA;AASA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA;AAHA,KADA;AAMA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KANA;AAUA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAVA,GATA;AAwBA,EAAA,IAxBA,kBAwBA;AACA,WAAA;AAAA,MAAA,WAAA,EAAA;AAAA,KAAA;AACA,GA1BA;AA2BA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA,iBADA;AAEA,IAAA,aAAA,EAAA;AAFA,GAAA,CADA;AAKA,IAAA,gBALA,8BAKA;AACA,cACA;AACA,QAAA,GAAA,EAAA,UADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,yCAAA;AAFA,OADA,4BAKA,KAAA,aAAA,CAAA,GAAA,CAAA,UAAA,YAAA;AAAA,eAAA;AACA,UAAA,GAAA,sBAAA,YAAA,CAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,YAAA,CAAA;AAFA,SAAA;AAAA,OAAA,CALA;AAUA,KAhBA;AAiBA,IAAA,gBAjBA,8BAiBA;AACA,aAAA,KAAA,kBAAA,IAAA,KAAA,WAAA,CAAA,EAAA;AACA;AAnBA,IA3BA;AAgDA,EAAA,KAAA,EAAA;AACA,0BADA,+BACA,OADA,EACA;AACA,UAAA,OAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,6BAAA,EAAA,CAAA,OAAA,CAAA;AACA;AACA,KALA;AAMA,oBANA,2BAMA;AACA,WAAA,WAAA;AACA;AARA,GAhDA;AA0DA,EAAA,OA1DA,qBA0DA;AACA,SAAA,WAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,mBAAA;AACA,GA7DA;AA8DA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,CAAA,KAAA,WAAA,CAAA,EAAA,EAAA;AACA;AACA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,wBAAA,EAAA,KAAA,WAAA,CAAA,EAAA;AACA,KANA;AAOA,IAAA,oBAPA,kCAOA;AACA,WAAA,KAAA,CAAA,sBAAA;AACA,KATA;AAUA,IAAA,uBAVA,mCAUA,KAVA,EAUA;AACA,WAAA,WAAA,GAAA,KAAA;AACA;AAZA;AA9DA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"conversation-details-wrap\"\n    :class=\"{ 'with-border-left': !isOnExpandedLayout }\"\n  >\n    <conversation-header\n      v-if=\"currentChat.id\"\n      :chat=\"currentChat\"\n      :is-contact-panel-open=\"isContactPanelOpen\"\n      :show-back-button=\"isOnExpandedLayout\"\n      @contact-panel-toggle=\"onToggleContactPanel\"\n    />\n    <woot-tabs\n      v-if=\"dashboardApps.length && currentChat.id\"\n      :index=\"activeIndex\"\n      class=\"dashboard-app--tabs\"\n      @change=\"onDashboardAppTabChange\"\n    >\n      <woot-tabs-item\n        v-for=\"tab in dashboardAppTabs\"\n        :key=\"tab.key\"\n        :name=\"tab.name\"\n        :show-badge=\"false\"\n      />\n    </woot-tabs>\n    <div v-if=\"!activeIndex\" class=\"messages-and-sidebar\">\n      <messages-view\n        v-if=\"currentChat.id\"\n        :inbox-id=\"inboxId\"\n        :is-contact-panel-open=\"isContactPanelOpen\"\n        @contact-panel-toggle=\"onToggleContactPanel\"\n      />\n      <empty-state v-else :is-on-expanded-layout=\"isOnExpandedLayout\" />\n      <div v-show=\"showContactPanel\" class=\"conversation-sidebar-wrap\">\n        <contact-panel\n          v-if=\"showContactPanel\"\n          :conversation-id=\"currentChat.id\"\n          :inbox-id=\"currentChat.inbox_id\"\n          :on-toggle=\"onToggleContactPanel\"\n        />\n      </div>\n    </div>\n    <dashboard-app-frame\n      v-else\n      :key=\"currentChat.id + '-' + activeIndex\"\n      :config=\"dashboardApps[activeIndex - 1].content\"\n      :current-chat=\"currentChat\"\n    />\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport ContactPanel from 'dashboard/routes/dashboard/conversation/ContactPanel';\nimport ConversationHeader from './ConversationHeader';\nimport DashboardAppFrame from '../DashboardApp/Frame.vue';\nimport EmptyState from './EmptyState';\nimport MessagesView from './MessagesView';\n\nexport default {\n  components: {\n    ContactPanel,\n    ConversationHeader,\n    DashboardAppFrame,\n    EmptyState,\n    MessagesView,\n  },\n\n  props: {\n    inboxId: {\n      type: [Number, String],\n      default: '',\n      required: false,\n    },\n    isContactPanelOpen: {\n      type: Boolean,\n      default: true,\n    },\n    isOnExpandedLayout: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return { activeIndex: 0 };\n  },\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      dashboardApps: 'dashboardApps/getRecords',\n    }),\n    dashboardAppTabs() {\n      return [\n        {\n          key: 'messages',\n          name: this.$t('CONVERSATION.DASHBOARD_APP_TAB_MESSAGES'),\n        },\n        ...this.dashboardApps.map(dashboardApp => ({\n          key: `dashboard-${dashboardApp.id}`,\n          name: dashboardApp.title,\n        })),\n      ];\n    },\n    showContactPanel() {\n      return this.isContactPanelOpen && this.currentChat.id;\n    },\n  },\n  watch: {\n    'currentChat.inbox_id'(inboxId) {\n      if (inboxId) {\n        this.$store.dispatch('inboxAssignableAgents/fetch', [inboxId]);\n      }\n    },\n    'currentChat.id'() {\n      this.fetchLabels();\n    },\n  },\n  mounted() {\n    this.fetchLabels();\n    this.$store.dispatch('dashboardApps/get');\n  },\n  methods: {\n    fetchLabels() {\n      if (!this.currentChat.id) {\n        return;\n      }\n      this.$store.dispatch('conversationLabels/get', this.currentChat.id);\n    },\n    onToggleContactPanel() {\n      this.$emit('contact-panel-toggle');\n    },\n    onDashboardAppTabChange(index) {\n      this.activeIndex = index;\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n@import '~dashboard/assets/scss/woot';\n\n.conversation-details-wrap {\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  width: 100%;\n  background: var(--color-background-light);\n\n  &.with-border-left {\n    border-left: 1px solid var(--color-border);\n  }\n}\n\n.dashboard-app--tabs {\n  background: var(--white);\n  margin-top: -1px;\n  min-height: var(--dashboard-app-tabs-height);\n}\n\n.messages-and-sidebar {\n  display: flex;\n  background: var(--color-background-light);\n  margin: 0;\n  height: 100%;\n  min-height: 0;\n}\n\n.conversation-sidebar-wrap {\n  height: auto;\n  flex: 0 0;\n  overflow: hidden;\n  overflow: auto;\n  background: white;\n  flex-basis: 28rem;\n\n  @include breakpoint(large up) {\n    flex-basis: 30em;\n  }\n\n  @include breakpoint(xlarge up) {\n    flex-basis: 31em;\n  }\n\n  @include breakpoint(xxlarge up) {\n    flex-basis: 33rem;\n  }\n\n  @include breakpoint(xxxlarge up) {\n    flex-basis: 40rem;\n  }\n\n  &::v-deep .contact--panel {\n    width: 100%;\n    height: 100%;\n    max-width: 100%;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}