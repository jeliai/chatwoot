{"ast":null,"code":"var identity = function identity(_) {\n  return _;\n};\n/**\n * Module exports, export\n */\n\n\nmodule.exports = multiple(find);\nmodule.exports.find = module.exports;\n/**\n * Export the replacement function, return the modified object\n */\n\nmodule.exports.replace = function (obj, key, val, options) {\n  multiple(replace).call(this, obj, key, val, options);\n  return obj;\n};\n/**\n * Export the delete function, return the modified object\n */\n\n\nmodule.exports.del = function (obj, key, options) {\n  multiple(del).call(this, obj, key, null, options);\n  return obj;\n};\n/**\n * Compose applying the function to a nested key\n */\n\n\nfunction multiple(fn) {\n  return function (obj, path, val, options) {\n    var normalize = options && isFunction(options.normalizer) ? options.normalizer : defaultNormalize;\n    path = normalize(path);\n    var key;\n    var finished = false;\n\n    while (!finished) {\n      loop();\n    }\n\n    function loop() {\n      for (key in obj) {\n        var normalizedKey = normalize(key);\n\n        if (0 === path.indexOf(normalizedKey)) {\n          var temp = path.substr(normalizedKey.length);\n\n          if (temp.charAt(0) === '.' || temp.length === 0) {\n            path = temp.substr(1);\n            var child = obj[key]; // we're at the end and there is nothing.\n\n            if (null == child) {\n              finished = true;\n              return;\n            } // we're at the end and there is something.\n\n\n            if (!path.length) {\n              finished = true;\n              return;\n            } // step into child\n\n\n            obj = child; // but we're done here\n\n            return;\n          }\n        }\n      }\n\n      key = undefined; // if we found no matching properties\n      // on the current object, there's no match.\n\n      finished = true;\n    }\n\n    if (!key) return;\n    if (null == obj) return obj; // the `obj` and `key` is one above the leaf object and key, so\n    // start object: { a: { 'b.c': 10 } }\n    // end object: { 'b.c': 10 }\n    // end key: 'b.c'\n    // this way, you can do `obj[key]` and get `10`.\n\n    return fn(obj, key, val);\n  };\n}\n/**\n * Find an object by its key\n *\n * find({ first_name : 'Calvin' }, 'firstName')\n */\n\n\nfunction find(obj, key) {\n  if (obj.hasOwnProperty(key)) return obj[key];\n}\n/**\n * Delete a value for a given key\n *\n * del({ a : 'b', x : 'y' }, 'X' }) -> { a : 'b' }\n */\n\n\nfunction del(obj, key) {\n  if (obj.hasOwnProperty(key)) delete obj[key];\n  return obj;\n}\n/**\n * Replace an objects existing value with a new one\n *\n * replace({ a : 'b' }, 'a', 'c') -> { a : 'c' }\n */\n\n\nfunction replace(obj, key, val) {\n  if (obj.hasOwnProperty(key)) obj[key] = val;\n  return obj;\n}\n/**\n * Normalize a `dot.separated.path`.\n *\n * A.HELL(!*&#(!)O_WOR   LD.bar => ahelloworldbar\n *\n * @param {String} path\n * @return {String}\n */\n\n\nfunction defaultNormalize(path) {\n  return path.replace(/[^a-zA-Z0-9\\.]+/g, '').toLowerCase();\n}\n/**\n * Check if a value is a function.\n *\n * @param {*} val\n * @return {boolean} Returns `true` if `val` is a function, otherwise `false`.\n */\n\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}","map":null,"metadata":{},"sourceType":"module"}