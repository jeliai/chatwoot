{"ast":null,"code":"import Vue from 'vue';\nimport { sanitize } from 'lettersanitizer';\nvar script = Vue.extend({\n  name: 'Letter',\n  props: {\n    className: String,\n    html: String,\n    text: String,\n    useIframe: Boolean,\n    iframeTitle: String,\n    rewriteExternalLinks: Function,\n    rewriteExternalResources: Function,\n    allowedSchemas: Array,\n    preserveCssPriority: Boolean\n  },\n  computed: {\n    sanitizerOptions: function sanitizerOptions() {\n      return {\n        rewriteExternalResources: this.rewriteExternalResources,\n        rewriteExternalLinks: this.rewriteExternalLinks,\n        allowedSchemas: this.allowedSchemas,\n        preserveCssPriority: this.preserveCssPriority\n      };\n    },\n    sanitizedHtml: function sanitizedHtml() {\n      return sanitize(this.html, this.text, this.sanitizerOptions);\n    },\n    iframeSrc: function iframeSrc() {\n      return 'data:text/html;charset=utf-8,' + encodeURIComponent(this.sanitizedHtml);\n    }\n  }\n});\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n/* server only */\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  } // Vue.extend constructor export interop.\n\n\n  var options = typeof script === 'function' ? script.options : script; // render functions\n\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true; // functional template\n\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  } // scopedId\n\n\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n\n  if (moduleIdentifier) {\n    // server build\n    hook = function hook(context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      } // inject component styles\n\n\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      } // register component module identifier for async chunk inference\n\n\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    }; // used by ssr in case component is cached and beforeCreate\n    // never gets called\n\n\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function (context) {\n      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      var originalRender = options.render;\n\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n\n  return script;\n}\n/* script */\n\n\nvar __vue_script__ = script;\n/* template */\n\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n\n  var _h = _vm.$createElement;\n\n  var _c = _vm._self._c || _h;\n\n  return !_vm.useIframe ? _c(\"div\", {\n    class: [_vm.className],\n    domProps: {\n      innerHTML: _vm._s(_vm.sanitizedHtml)\n    }\n  }) : _vm.useIframe ? _c(\"div\", {\n    class: [_vm.className]\n  }, [_c(\"iframe\", {\n    attrs: {\n      src: _vm.iframeSrc,\n      title: _vm.iframeTitle\n    }\n  })]) : _vm._e();\n};\n\nvar __vue_staticRenderFns__ = [];\n__vue_render__._withStripped = true;\n/* style */\n\nvar __vue_inject_styles__ = undefined;\n/* scoped */\n\nvar __vue_scope_id__ = undefined;\n/* module identifier */\n\nvar __vue_module_identifier__ = undefined;\n/* functional template */\n\nvar __vue_is_functional_template__ = false;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nvar __vue_component__ = /*#__PURE__*/normalizeComponent({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined); // Declare install function executed by Vue.use()\n\n\nfunction install(Vue) {\n  if (install.installed) {\n    return;\n  }\n\n  install.installed = true;\n  Vue.component('Letter', __vue_component__);\n} // Create module definition for Vue.use()\n\n\nvar plugin = {\n  install: install\n}; // Auto-install when vue is found (eg. in browser via <script> tag)\n\nvar GlobalVue = null;\n\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\n\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n\nexport default __vue_component__;\nexport { install };","map":null,"metadata":{},"sourceType":"module"}