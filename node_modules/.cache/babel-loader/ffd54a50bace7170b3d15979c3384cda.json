{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport adminMixin from '../../mixins/isAdmin';\nimport { getSidebarItems } from './config/default-sidebar';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport PrimarySidebar from './sidebarComponents/Primary';\nimport SecondarySidebar from './sidebarComponents/Secondary';\nimport { hasPressedAltAndCKey, hasPressedAltAndRKey, hasPressedAltAndSKey, hasPressedAltAndVKey, hasPressedCommandAndForwardSlash, isEscape } from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport router from '../../routes';\nexport default {\n  components: {\n    PrimarySidebar: PrimarySidebar,\n    SecondarySidebar: SecondarySidebar\n  },\n  mixins: [adminMixin, alertMixin, eventListenerMixins],\n  props: {\n    showSecondarySidebar: {\n      type: Boolean,\n      default: true\n    },\n    sidebarClassName: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      showOptionsMenu: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    accountId: 'getCurrentAccountId',\n    currentRole: 'getCurrentRole',\n    currentUser: 'getCurrentUser',\n    globalConfig: 'globalConfig/get',\n    inboxes: 'inboxes/getInboxes',\n    isACustomBrandedInstance: 'globalConfig/isACustomBrandedInstance',\n    isFeatureEnabledonAccount: 'accounts/isFeatureEnabledonAccount',\n    isOnChatwootCloud: 'globalConfig/isOnChatwootCloud',\n    labels: 'labels/getLabelsOnSidebar',\n    teams: 'teams/getMyTeams'\n  })), {}, {\n    activeCustomView: function activeCustomView() {\n      if (this.activePrimaryMenu.key === 'contacts') {\n        return 'contact';\n      }\n\n      if (this.activePrimaryMenu.key === 'conversations') {\n        return 'conversation';\n      }\n\n      return '';\n    },\n    customViews: function customViews() {\n      return this.$store.getters['customViews/getCustomViewsByFilterType'](this.activeCustomView);\n    },\n    isConversationOrContactActive: function isConversationOrContactActive() {\n      return this.activePrimaryMenu.key === 'contacts' || this.activePrimaryMenu.key === 'conversations';\n    },\n    sideMenuConfig: function sideMenuConfig() {\n      return getSidebarItems(this.accountId);\n    },\n    primaryMenuItems: function primaryMenuItems() {\n      var _this = this;\n\n      var menuItems = this.sideMenuConfig.primaryMenu;\n      return menuItems.filter(function (menuItem) {\n        var isAvailableForTheUser = menuItem.roles.includes(_this.currentRole);\n\n        if (!isAvailableForTheUser) {\n          return false;\n        }\n\n        if (menuItem.featureFlag) {\n          return _this.isFeatureEnabledonAccount(_this.accountId, menuItem.featureFlag);\n        }\n\n        return true;\n      });\n    },\n    activeSecondaryMenu: function activeSecondaryMenu() {\n      var secondaryMenu = this.sideMenuConfig.secondaryMenu;\n      var currentRoute = this.$route.name;\n      var activeSecondaryMenu = secondaryMenu.find(function (menuItem) {\n        return menuItem.routes.includes(currentRoute);\n      }) || {};\n      return activeSecondaryMenu;\n    },\n    activePrimaryMenu: function activePrimaryMenu() {\n      var _this2 = this;\n\n      var activePrimaryMenu = this.primaryMenuItems.find(function (menuItem) {\n        return menuItem.key === _this2.activeSecondaryMenu.parentNav;\n      }) || {};\n      return activePrimaryMenu;\n    }\n  }),\n  watch: {\n    activeCustomView: function activeCustomView() {\n      this.fetchCustomViews();\n    }\n  },\n  mounted: function mounted() {\n    this.$store.dispatch('labels/get');\n    this.$store.dispatch('inboxes/get');\n    this.$store.dispatch('notifications/unReadCount');\n    this.$store.dispatch('teams/get');\n    this.$store.dispatch('attributes/get');\n    this.fetchCustomViews();\n  },\n  methods: {\n    fetchCustomViews: function fetchCustomViews() {\n      if (this.isConversationOrContactActive) {\n        this.$store.dispatch('customViews/get', this.activeCustomView);\n      }\n    },\n    toggleKeyShortcutModal: function toggleKeyShortcutModal() {\n      this.$emit('open-key-shortcut-modal');\n    },\n    closeKeyShortcutModal: function closeKeyShortcutModal() {\n      this.$emit('close-key-shortcut-modal');\n    },\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (hasPressedCommandAndForwardSlash(e)) {\n        this.toggleKeyShortcutModal();\n      }\n\n      if (isEscape(e)) {\n        this.closeKeyShortcutModal();\n      }\n\n      if (hasPressedAltAndCKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('home')) {\n          router.push({\n            name: 'home'\n          });\n        }\n      } else if (hasPressedAltAndVKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('contacts_dashboard')) {\n          router.push({\n            name: 'contacts_dashboard'\n          });\n        }\n      } else if (hasPressedAltAndRKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('settings_account_reports')) {\n          router.push({\n            name: 'settings_account_reports'\n          });\n        }\n      } else if (hasPressedAltAndSKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('agent_list')) {\n          router.push({\n            name: 'agent_list'\n          });\n        }\n      }\n    },\n    isCurrentRouteSameAsNavigation: function isCurrentRouteSameAsNavigation(routeName) {\n      return this.$route.name === routeName;\n    },\n    toggleSupportChatWindow: function toggleSupportChatWindow() {\n      window.$chatwoot.toggle();\n    },\n    toggleAccountModal: function toggleAccountModal() {\n      this.$emit('toggle-account-modal');\n    },\n    showAddLabelPopup: function showAddLabelPopup() {\n      this.$emit('show-add-label-popup');\n    },\n    openNotificationPanel: function openNotificationPanel() {\n      this.$emit('open-notification-panel');\n    }\n  }\n};","map":{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <aside class=\"woot-sidebar\">\n    <primary-sidebar\n      :logo-source=\"globalConfig.logoThumbnail\"\n      :installation-name=\"globalConfig.installationName\"\n      :is-a-custom-branded-instance=\"isACustomBrandedInstance\"\n      :account-id=\"accountId\"\n      :menu-items=\"primaryMenuItems\"\n      :active-menu-item=\"activePrimaryMenu.key\"\n      @toggle-accounts=\"toggleAccountModal\"\n      @key-shortcut-modal=\"toggleKeyShortcutModal\"\n      @open-notification-panel=\"openNotificationPanel\"\n    />\n    <div class=\"secondary-sidebar\">\n      <secondary-sidebar\n        v-if=\"showSecondarySidebar\"\n        :class=\"sidebarClassName\"\n        :account-id=\"accountId\"\n        :inboxes=\"inboxes\"\n        :labels=\"labels\"\n        :teams=\"teams\"\n        :custom-views=\"customViews\"\n        :menu-config=\"activeSecondaryMenu\"\n        :current-role=\"currentRole\"\n        :is-on-chatwoot-cloud=\"isOnChatwootCloud\"\n        @add-label=\"showAddLabelPopup\"\n        @toggle-accounts=\"toggleAccountModal\"\n      />\n    </div>\n  </aside>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport adminMixin from '../../mixins/isAdmin';\nimport { getSidebarItems } from './config/default-sidebar';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nimport PrimarySidebar from './sidebarComponents/Primary';\nimport SecondarySidebar from './sidebarComponents/Secondary';\nimport {\n  hasPressedAltAndCKey,\n  hasPressedAltAndRKey,\n  hasPressedAltAndSKey,\n  hasPressedAltAndVKey,\n  hasPressedCommandAndForwardSlash,\n  isEscape,\n} from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport router from '../../routes';\n\nexport default {\n  components: {\n    PrimarySidebar,\n    SecondarySidebar,\n  },\n  mixins: [adminMixin, alertMixin, eventListenerMixins],\n  props: {\n    showSecondarySidebar: {\n      type: Boolean,\n      default: true,\n    },\n    sidebarClassName: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      showOptionsMenu: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      accountId: 'getCurrentAccountId',\n      currentRole: 'getCurrentRole',\n      currentUser: 'getCurrentUser',\n      globalConfig: 'globalConfig/get',\n      inboxes: 'inboxes/getInboxes',\n      isACustomBrandedInstance: 'globalConfig/isACustomBrandedInstance',\n      isFeatureEnabledonAccount: 'accounts/isFeatureEnabledonAccount',\n      isOnChatwootCloud: 'globalConfig/isOnChatwootCloud',\n      labels: 'labels/getLabelsOnSidebar',\n      teams: 'teams/getMyTeams',\n    }),\n    activeCustomView() {\n      if (this.activePrimaryMenu.key === 'contacts') {\n        return 'contact';\n      }\n      if (this.activePrimaryMenu.key === 'conversations') {\n        return 'conversation';\n      }\n      return '';\n    },\n    customViews() {\n      return this.$store.getters['customViews/getCustomViewsByFilterType'](\n        this.activeCustomView\n      );\n    },\n    isConversationOrContactActive() {\n      return (\n        this.activePrimaryMenu.key === 'contacts' ||\n        this.activePrimaryMenu.key === 'conversations'\n      );\n    },\n    sideMenuConfig() {\n      return getSidebarItems(this.accountId);\n    },\n    primaryMenuItems() {\n      const menuItems = this.sideMenuConfig.primaryMenu;\n      return menuItems.filter(menuItem => {\n        const isAvailableForTheUser = menuItem.roles.includes(this.currentRole);\n\n        if (!isAvailableForTheUser) {\n          return false;\n        }\n\n        if (menuItem.featureFlag) {\n          return this.isFeatureEnabledonAccount(\n            this.accountId,\n            menuItem.featureFlag\n          );\n        }\n        return true;\n      });\n    },\n    activeSecondaryMenu() {\n      const { secondaryMenu } = this.sideMenuConfig;\n      const { name: currentRoute } = this.$route;\n\n      const activeSecondaryMenu =\n        secondaryMenu.find(menuItem =>\n          menuItem.routes.includes(currentRoute)\n        ) || {};\n      return activeSecondaryMenu;\n    },\n    activePrimaryMenu() {\n      const activePrimaryMenu =\n        this.primaryMenuItems.find(\n          menuItem => menuItem.key === this.activeSecondaryMenu.parentNav\n        ) || {};\n      return activePrimaryMenu;\n    },\n  },\n\n  watch: {\n    activeCustomView() {\n      this.fetchCustomViews();\n    },\n  },\n  mounted() {\n    this.$store.dispatch('labels/get');\n    this.$store.dispatch('inboxes/get');\n    this.$store.dispatch('notifications/unReadCount');\n    this.$store.dispatch('teams/get');\n    this.$store.dispatch('attributes/get');\n    this.fetchCustomViews();\n  },\n\n  methods: {\n    fetchCustomViews() {\n      if (this.isConversationOrContactActive) {\n        this.$store.dispatch('customViews/get', this.activeCustomView);\n      }\n    },\n    toggleKeyShortcutModal() {\n      this.$emit('open-key-shortcut-modal');\n    },\n    closeKeyShortcutModal() {\n      this.$emit('close-key-shortcut-modal');\n    },\n    handleKeyEvents(e) {\n      if (hasPressedCommandAndForwardSlash(e)) {\n        this.toggleKeyShortcutModal();\n      }\n      if (isEscape(e)) {\n        this.closeKeyShortcutModal();\n      }\n\n      if (hasPressedAltAndCKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('home')) {\n          router.push({ name: 'home' });\n        }\n      } else if (hasPressedAltAndVKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('contacts_dashboard')) {\n          router.push({ name: 'contacts_dashboard' });\n        }\n      } else if (hasPressedAltAndRKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('settings_account_reports')) {\n          router.push({ name: 'settings_account_reports' });\n        }\n      } else if (hasPressedAltAndSKey(e)) {\n        if (!this.isCurrentRouteSameAsNavigation('agent_list')) {\n          router.push({ name: 'agent_list' });\n        }\n      }\n    },\n    isCurrentRouteSameAsNavigation(routeName) {\n      return this.$route.name === routeName;\n    },\n    toggleSupportChatWindow() {\n      window.$chatwoot.toggle();\n    },\n    toggleAccountModal() {\n      this.$emit('toggle-account-modal');\n    },\n    showAddLabelPopup() {\n      this.$emit('show-add-label-popup');\n    },\n    openNotificationPanel() {\n      this.$emit('open-notification-panel');\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.woot-sidebar {\n  background: var(--white);\n  display: flex;\n  min-height: 0;\n  height: 100%;\n  width: fit-content;\n}\n</style>\n\n<style lang=\"scss\">\n@import '~dashboard/assets/scss/variables';\n\n.account-selector--modal {\n  .modal-container {\n    width: 40rem;\n  }\n}\n.off-canvas-content.is-open-left {\n  transform: translateX(18.8rem);\n}\n\n.secondary-sidebar {\n  overflow-y: auto;\n  height: 100%;\n}\n\n.account-selector {\n  cursor: pointer;\n  padding: $space-small $space-large;\n\n  .selected--account {\n    margin-top: -$space-smaller;\n\n    & + .account--details {\n      padding-left: $space-normal - $space-micro;\n    }\n  }\n\n  .account--details {\n    padding-left: $space-large + $space-smaller;\n  }\n\n  &:last-child {\n    margin-bottom: $space-large;\n  }\n\n  a {\n    align-items: center;\n    cursor: pointer;\n    display: flex;\n\n    .account--name {\n      cursor: pointer;\n      font-size: $font-size-medium;\n      font-weight: $font-weight-medium;\n      line-height: 1;\n    }\n\n    .account--role {\n      cursor: pointer;\n      font-size: $font-size-mini;\n      text-transform: capitalize;\n    }\n  }\n}\n\n.app-context-menu {\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  height: 6rem;\n}\n\n.current-user--options {\n  font-size: $font-size-big;\n  margin-bottom: auto;\n  margin-left: auto;\n  margin-top: auto;\n}\n\n.secondary-menu .nested.vertical.menu {\n  margin-left: var(--space-small);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/layout"},"metadata":{},"sourceType":"module"}