{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport categoriesAPI from 'dashboard/api/helpCenter/categories.js';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport types from '../../mutation-types';\nexport var actions = {\n  index: function () {\n    var _index = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n      var commit, portalSlug, locale, _yield$categoriesAPI$, payload, categoryIds;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              portalSlug = _ref2.portalSlug, locale = _ref2.locale;\n              _context.prev = 2;\n              commit(types.SET_UI_FLAG, {\n                isFetching: true\n              });\n\n              if (!portalSlug) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 7;\n              return categoriesAPI.get({\n                portalSlug: portalSlug,\n                locale: locale\n              });\n\n            case 7:\n              _yield$categoriesAPI$ = _context.sent;\n              payload = _yield$categoriesAPI$.data.payload;\n              commit(types.CLEAR_CATEGORIES);\n              categoryIds = payload.map(function (category) {\n                return category.id;\n              });\n              commit(types.ADD_MANY_CATEGORIES, payload);\n              commit(types.ADD_MANY_CATEGORIES_ID, categoryIds);\n              return _context.abrupt(\"return\", categoryIds);\n\n            case 14:\n              return _context.abrupt(\"return\", '');\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](2);\n              return _context.abrupt(\"return\", throwErrorMessage(_context.t0));\n\n            case 20:\n              _context.prev = 20;\n              commit(types.SET_UI_FLAG, {\n                isFetching: false\n              });\n              return _context.finish(20);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 17, 20, 23]]);\n    }));\n\n    function index(_x, _x2) {\n      return _index.apply(this, arguments);\n    }\n\n    return index;\n  }(),\n  create: function () {\n    var _create = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3, _ref4) {\n      var commit, portalSlug, categoryObj, _yield$categoriesAPI$2, payload, categoryId;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              portalSlug = _ref4.portalSlug, categoryObj = _ref4.categoryObj;\n              commit(types.SET_UI_FLAG, {\n                isCreating: true\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return categoriesAPI.create({\n                portalSlug: portalSlug,\n                categoryObj: categoryObj\n              });\n\n            case 6:\n              _yield$categoriesAPI$2 = _context2.sent;\n              payload = _yield$categoriesAPI$2.data.payload;\n              categoryId = payload.id;\n              commit(types.ADD_CATEGORY, payload);\n              commit(types.ADD_CATEGORY_ID, categoryId);\n              return _context2.abrupt(\"return\", categoryId);\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](3);\n              return _context2.abrupt(\"return\", throwErrorMessage(_context2.t0));\n\n            case 17:\n              _context2.prev = 17;\n              commit(types.SET_UI_FLAG, {\n                isCreating: false\n              });\n              return _context2.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 14, 17, 20]]);\n    }));\n\n    function create(_x3, _x4) {\n      return _create.apply(this, arguments);\n    }\n\n    return create;\n  }(),\n  update: function () {\n    var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5, _ref6) {\n      var commit, portalSlug, categoryId, categoryObj, _yield$categoriesAPI$3, payload;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref5.commit;\n              portalSlug = _ref6.portalSlug, categoryId = _ref6.categoryId, categoryObj = _ref6.categoryObj;\n              commit(types.ADD_CATEGORY_FLAG, {\n                uiFlags: {\n                  isUpdating: true\n                },\n                categoryId: categoryId\n              });\n              _context3.prev = 3;\n              _context3.next = 6;\n              return categoriesAPI.update({\n                portalSlug: portalSlug,\n                categoryId: categoryId,\n                categoryObj: categoryObj\n              });\n\n            case 6:\n              _yield$categoriesAPI$3 = _context3.sent;\n              payload = _yield$categoriesAPI$3.data.payload;\n              commit(types.UPDATE_CATEGORY, payload);\n              return _context3.abrupt(\"return\", categoryId);\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](3);\n              return _context3.abrupt(\"return\", throwErrorMessage(_context3.t0));\n\n            case 15:\n              _context3.prev = 15;\n              commit(types.ADD_CATEGORY_FLAG, {\n                uiFlags: {\n                  isUpdating: false\n                },\n                categoryId: categoryId\n              });\n              return _context3.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 12, 15, 18]]);\n    }));\n\n    function update(_x5, _x6) {\n      return _update.apply(this, arguments);\n    }\n\n    return update;\n  }(),\n  delete: function () {\n    var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref7, _ref8) {\n      var commit, portalSlug, categoryId;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref7.commit;\n              portalSlug = _ref8.portalSlug, categoryId = _ref8.categoryId;\n              commit(types.ADD_CATEGORY_FLAG, {\n                uiFlags: {\n                  isDeleting: true\n                },\n                categoryId: categoryId\n              });\n              _context4.prev = 3;\n              _context4.next = 6;\n              return categoriesAPI.delete({\n                portalSlug: portalSlug,\n                categoryId: categoryId\n              });\n\n            case 6:\n              commit(types.REMOVE_CATEGORY, categoryId);\n              commit(types.REMOVE_CATEGORY_ID, categoryId);\n              return _context4.abrupt(\"return\", categoryId);\n\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](3);\n              return _context4.abrupt(\"return\", throwErrorMessage(_context4.t0));\n\n            case 14:\n              _context4.prev = 14;\n              commit(types.ADD_CATEGORY_FLAG, {\n                uiFlags: {\n                  isDeleting: false\n                },\n                categoryId: categoryId\n              });\n              return _context4.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[3, 11, 14, 17]]);\n    }));\n\n    function _delete(_x7, _x8) {\n      return _delete2.apply(this, arguments);\n    }\n\n    return _delete;\n  }()\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/helpCenterCategories/actions.js"],"names":["categoriesAPI","throwErrorMessage","types","actions","index","commit","portalSlug","locale","SET_UI_FLAG","isFetching","get","payload","data","CLEAR_CATEGORIES","categoryIds","map","category","id","ADD_MANY_CATEGORIES","ADD_MANY_CATEGORIES_ID","create","categoryObj","isCreating","categoryId","ADD_CATEGORY","ADD_CATEGORY_ID","update","ADD_CATEGORY_FLAG","uiFlags","isUpdating","UPDATE_CATEGORY","delete","isDeleting","REMOVE_CATEGORY","REMOVE_CATEGORY_ID"],"mappings":"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","sourcesContent":["import categoriesAPI from 'dashboard/api/helpCenter/categories.js';\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport types from '../../mutation-types';\nexport const actions = {\n  index: async ({ commit }, { portalSlug, locale }) => {\n    try {\n      commit(types.SET_UI_FLAG, { isFetching: true });\n      if (portalSlug) {\n        const {\n          data: { payload },\n        } = await categoriesAPI.get({ portalSlug, locale });\n        commit(types.CLEAR_CATEGORIES);\n        const categoryIds = payload.map(category => category.id);\n        commit(types.ADD_MANY_CATEGORIES, payload);\n        commit(types.ADD_MANY_CATEGORIES_ID, categoryIds);\n        return categoryIds;\n      }\n      return '';\n    } catch (error) {\n      return throwErrorMessage(error);\n    } finally {\n      commit(types.SET_UI_FLAG, { isFetching: false });\n    }\n  },\n\n  create: async ({ commit }, { portalSlug, categoryObj }) => {\n    commit(types.SET_UI_FLAG, { isCreating: true });\n    try {\n      const {\n        data: { payload },\n      } = await categoriesAPI.create({ portalSlug, categoryObj });\n      const { id: categoryId } = payload;\n      commit(types.ADD_CATEGORY, payload);\n      commit(types.ADD_CATEGORY_ID, categoryId);\n      return categoryId;\n    } catch (error) {\n      return throwErrorMessage(error);\n    } finally {\n      commit(types.SET_UI_FLAG, { isCreating: false });\n    }\n  },\n\n  update: async ({ commit }, { portalSlug, categoryId, categoryObj }) => {\n    commit(types.ADD_CATEGORY_FLAG, {\n      uiFlags: {\n        isUpdating: true,\n      },\n      categoryId,\n    });\n    try {\n      const {\n        data: { payload },\n      } = await categoriesAPI.update({\n        portalSlug,\n        categoryId,\n        categoryObj,\n      });\n      commit(types.UPDATE_CATEGORY, payload);\n      return categoryId;\n    } catch (error) {\n      return throwErrorMessage(error);\n    } finally {\n      commit(types.ADD_CATEGORY_FLAG, {\n        uiFlags: {\n          isUpdating: false,\n        },\n        categoryId,\n      });\n    }\n  },\n\n  delete: async ({ commit }, { portalSlug, categoryId }) => {\n    commit(types.ADD_CATEGORY_FLAG, {\n      uiFlags: {\n        isDeleting: true,\n      },\n      categoryId,\n    });\n    try {\n      await categoriesAPI.delete({ portalSlug, categoryId });\n      commit(types.REMOVE_CATEGORY, categoryId);\n      commit(types.REMOVE_CATEGORY_ID, categoryId);\n      return categoryId;\n    } catch (error) {\n      return throwErrorMessage(error);\n    } finally {\n      commit(types.ADD_CATEGORY_FLAG, {\n        uiFlags: {\n          isDeleting: false,\n        },\n        categoryId,\n      });\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}