{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint no-console: 0 */\nimport { mapGetters } from 'vuex';\nimport InboxMembersAPI from '../../../../api/inboxMembers';\nimport router from '../../../index';\nimport PageHeader from '../SettingsSubPageHeader';\nexport default {\n  components: {\n    PageHeader: PageHeader\n  },\n  validations: {\n    selectedAgents: {\n      isEmpty: function isEmpty() {\n        return !!this.selectedAgents.length;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedAgents: [],\n      isCreating: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    agentList: 'agents/getAgents'\n  })),\n  mounted: function mounted() {\n    this.$store.dispatch('agents/get');\n  },\n  methods: {\n    addAgents: function addAgents() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var inboxId, selectedAgents;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.isCreating = true;\n                inboxId = _this.$route.params.inbox_id;\n                selectedAgents = _this.selectedAgents.map(function (x) {\n                  return x.id;\n                });\n                _context.prev = 3;\n                _context.next = 6;\n                return InboxMembersAPI.update({\n                  inboxId: inboxId,\n                  agentList: selectedAgents\n                });\n\n              case 6:\n                router.replace({\n                  name: 'settings_inbox_finish',\n                  params: {\n                    page: 'new',\n                    inbox_id: _this.$route.params.inbox_id\n                  }\n                });\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n                bus.$emit('newToastMessage', _context.t0.message);\n\n              case 12:\n                _this.isCreating = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 9]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["AddAgents.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,OAAA,eAAA,MAAA,8BAAA;AACA,OAAA,MAAA,MAAA,gBAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GADA;AAKA,EAAA,WAAA,EAAA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,OADA,qBACA;AACA,eAAA,CAAA,CAAA,KAAA,cAAA,CAAA,MAAA;AACA;AAHA;AADA,GALA;AAaA,EAAA,IAbA,kBAaA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GAlBA;AAoBA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,SAAA,EAAA;AADA,GAAA,CADA,CApBA;AA0BA,EAAA,OA1BA,qBA0BA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,YAAA;AACA,GA5BA;AA8BA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AACA,gBAAA,OAFA,GAEA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAFA;AAGA,gBAAA,cAHA,GAGA,KAAA,CAAA,cAAA,CAAA,GAAA,CAAA,UAAA,CAAA;AAAA,yBAAA,CAAA,CAAA,EAAA;AAAA,iBAAA,CAHA;AAAA;AAAA;AAAA,uBAMA,eAAA,CAAA,MAAA,CAAA;AAAA,kBAAA,OAAA,EAAA,OAAA;AAAA,kBAAA,SAAA,EAAA;AAAA,iBAAA,CANA;;AAAA;AAOA,gBAAA,MAAA,CAAA,OAAA,CAAA;AACA,kBAAA,IAAA,EAAA,uBADA;AAEA,kBAAA,MAAA,EAAA;AACA,oBAAA,IAAA,EAAA,KADA;AAEA,oBAAA,QAAA,EAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAFA;AAFA,iBAAA;AAPA;AAAA;;AAAA;AAAA;AAAA;AAeA,gBAAA,GAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,YAAA,OAAA;;AAfA;AAiBA,gBAAA,KAAA,CAAA,UAAA,GAAA,KAAA;;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAnBA;AA9BA,CAAA","sourcesContent":["<template>\n  <div class=\"wizard-body columns content-box small-9\">\n    <form class=\"row\" @submit.prevent=\"addAgents()\">\n      <div class=\"medium-12 columns\">\n        <page-header\n          :header-title=\"$t('INBOX_MGMT.ADD.AGENTS.TITLE')\"\n          :header-content=\"$t('INBOX_MGMT.ADD.AGENTS.DESC')\"\n        />\n      </div>\n      <div class=\"medium-7 columns\">\n        <div class=\"medium-12 columns\">\n          <label :class=\"{ error: $v.selectedAgents.$error }\">\n            {{ $t('INBOX_MGMT.ADD.AGENTS.TITLE') }}\n            <multiselect\n              v-model=\"selectedAgents\"\n              :options=\"agentList\"\n              track-by=\"id\"\n              label=\"name\"\n              :multiple=\"true\"\n              :close-on-select=\"false\"\n              :clear-on-select=\"false\"\n              :hide-selected=\"true\"\n              selected-label\n              :select-label=\"$t('FORMS.MULTISELECT.ENTER_TO_SELECT')\"\n              :deselect-label=\"$t('FORMS.MULTISELECT.ENTER_TO_REMOVE')\"\n              :placeholder=\"$t('INBOX_MGMT.ADD.AGENTS.PICK_AGENTS')\"\n              @select=\"$v.selectedAgents.$touch\"\n            />\n            <span v-if=\"$v.selectedAgents.$error\" class=\"message\">\n              {{ $t('INBOX_MGMT.ADD.AGENTS.VALIDATION_ERROR') }}\n            </span>\n          </label>\n        </div>\n        <div class=\"medium-12 columns\">\n          <woot-submit-button\n            :button-text=\"$t('INBOX_MGMT.AGENTS.BUTTON_TEXT')\"\n            :loading=\"isCreating\"\n          />\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\n/* eslint no-console: 0 */\nimport { mapGetters } from 'vuex';\n\nimport InboxMembersAPI from '../../../../api/inboxMembers';\nimport router from '../../../index';\nimport PageHeader from '../SettingsSubPageHeader';\n\nexport default {\n  components: {\n    PageHeader,\n  },\n\n  validations: {\n    selectedAgents: {\n      isEmpty() {\n        return !!this.selectedAgents.length;\n      },\n    },\n  },\n\n  data() {\n    return {\n      selectedAgents: [],\n      isCreating: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      agentList: 'agents/getAgents',\n    }),\n  },\n\n  mounted() {\n    this.$store.dispatch('agents/get');\n  },\n\n  methods: {\n    async addAgents() {\n      this.isCreating = true;\n      const inboxId = this.$route.params.inbox_id;\n      const selectedAgents = this.selectedAgents.map(x => x.id);\n\n      try {\n        await InboxMembersAPI.update({ inboxId, agentList: selectedAgents });\n        router.replace({\n          name: 'settings_inbox_finish',\n          params: {\n            page: 'new',\n            inbox_id: this.$route.params.inbox_id,\n          },\n        });\n      } catch (error) {\n        bus.$emit('newToastMessage', error.message);\n      }\n      this.isCreating = false;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox"},"metadata":{},"sourceType":"module"}