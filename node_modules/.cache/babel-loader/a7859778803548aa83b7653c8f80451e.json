{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport LoadingState from 'dashboard/components/widgets/LoadingState';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {\n    LoadingState: LoadingState,\n    SettingsSection: SettingsSection\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedAgentBotId: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    agentBots: 'agentBots/getBots',\n    uiFlags: 'agentBots/getUIFlags'\n  })), {}, {\n    activeAgentBot: function activeAgentBot() {\n      return this.$store.getters['agentBots/getActiveAgentBot'](this.inbox.id);\n    }\n  }),\n  watch: {\n    activeAgentBot: function activeAgentBot() {\n      this.selectedAgentBotId = this.activeAgentBot.id;\n    }\n  },\n  mounted: function mounted() {\n    this.$store.dispatch('agentBots/get');\n    this.$store.dispatch('agentBots/fetchAgentBotInbox', this.inbox.id);\n  },\n  methods: {\n    updateActiveAgentBot: function updateActiveAgentBot() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('agentBots/setAgentBotInbox', {\n                  inboxId: _this.inbox.id,\n                  // Added this to make sure that empty values are not sent to the API\n                  botId: _this.selectedAgentBotId ? _this.selectedAgentBotId : undefined\n                });\n\n              case 3:\n                _this.showAlert(_this.$t('AGENT_BOTS.BOT_CONFIGURATION.SUCCESS_MESSAGE'));\n\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('AGENT_BOTS.BOT_CONFIGURATION.ERROR_MESSAGE'));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 6]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["BotConfiguration.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,eAAA,MAAA,sCAAA;AACA,OAAA,YAAA,MAAA,2CAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,YAAA,EAAA,YADA;AAEA,IAAA,eAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,UAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AADA,GANA;AAYA,EAAA,IAZA,kBAYA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA;AADA,KAAA;AAGA,GAhBA;AAiBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,SAAA,EAAA,mBADA;AAEA,IAAA,OAAA,EAAA;AAFA,GAAA,CADA;AAKA,IAAA,cALA,4BAKA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,6BAAA,EAAA,KAAA,KAAA,CAAA,EAAA,CAAA;AACA;AAPA,IAjBA;AA0BA,EAAA,KAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,WAAA,kBAAA,GAAA,KAAA,cAAA,CAAA,EAAA;AACA;AAHA,GA1BA;AA+BA,EAAA,OA/BA,qBA+BA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,eAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,8BAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AACA,GAlCA;AAoCA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,4BAAA,EAAA;AACA,kBAAA,OAAA,EAAA,KAAA,CAAA,KAAA,CAAA,EADA;AAEA;AACA,kBAAA,KAAA,EAAA,KAAA,CAAA,kBAAA,GAAA,KAAA,CAAA,kBAAA,GAAA;AAHA,iBAAA,CAFA;;AAAA;AAOA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,8CAAA,CAAA;;AAPA;AAAA;;AAAA;AAAA;AAAA;;AASA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,4CAAA,CAAA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAZA;AApCA,CAAA","sourcesContent":["<template>\n  <div class=\"settings--content\">\n    <loading-state v-if=\"uiFlags.isFetching || uiFlags.isFetchingAgentBot\" />\n    <form v-else class=\"row\" @submit.prevent=\"updateActiveAgentBot\">\n      <settings-section\n        :title=\"$t('AGENT_BOTS.BOT_CONFIGURATION.TITLE')\"\n        :sub-title=\"$t('AGENT_BOTS.BOT_CONFIGURATION.DESC')\"\n      >\n        <div class=\"medium-7 columns\">\n          <label>\n            <select v-model=\"selectedAgentBotId\">\n              <option value=\"\" disabled selected>{{\n                $t('AGENT_BOTS.BOT_CONFIGURATION.SELECT_PLACEHOLDER')\n              }}</option>\n              <option\n                v-for=\"agentBot in agentBots\"\n                :key=\"agentBot.id\"\n                :value=\"agentBot.id\"\n              >\n                {{ agentBot.name }}\n              </option>\n            </select>\n          </label>\n          <woot-submit-button\n            :button-text=\"$t('AGENT_BOTS.BOT_CONFIGURATION.SUBMIT')\"\n            :loading=\"uiFlags.isSettingAgentBot\"\n          />\n        </div>\n      </settings-section>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport SettingsSection from 'dashboard/components/SettingsSection';\nimport LoadingState from 'dashboard/components/widgets/LoadingState';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nexport default {\n  components: {\n    LoadingState,\n    SettingsSection,\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      selectedAgentBotId: null,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      agentBots: 'agentBots/getBots',\n      uiFlags: 'agentBots/getUIFlags',\n    }),\n    activeAgentBot() {\n      return this.$store.getters['agentBots/getActiveAgentBot'](this.inbox.id);\n    },\n  },\n  watch: {\n    activeAgentBot() {\n      this.selectedAgentBotId = this.activeAgentBot.id;\n    },\n  },\n  mounted() {\n    this.$store.dispatch('agentBots/get');\n    this.$store.dispatch('agentBots/fetchAgentBotInbox', this.inbox.id);\n  },\n\n  methods: {\n    async updateActiveAgentBot() {\n      try {\n        await this.$store.dispatch('agentBots/setAgentBotInbox', {\n          inboxId: this.inbox.id,\n          // Added this to make sure that empty values are not sent to the API\n          botId: this.selectedAgentBotId ? this.selectedAgentBotId : undefined,\n        });\n        this.showAlert(this.$t('AGENT_BOTS.BOT_CONFIGURATION.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('AGENT_BOTS.BOT_CONFIGURATION.ERROR_MESSAGE'));\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/components"},"metadata":{},"sourceType":"module"}