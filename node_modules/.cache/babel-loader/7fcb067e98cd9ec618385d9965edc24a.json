{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\nimport { getContrastingTextColor } from '@chatwoot/utils';\nexport default {\n  mixins: [darkModeMixin],\n  props: {\n    buttonLabel: {\n      type: String,\n      default: ''\n    },\n    items: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    submittedValues: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      formValues: {},\n      hasSubmitted: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    widgetColor: 'appConfig/getWidgetColor'\n  })), {}, {\n    textColor: function textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    inputColor: function inputColor() {\n      return \"\".concat(this.$dm('bg-white', 'dark:bg-slate-600'), \"\\n        \").concat(this.$dm('text-black-900', 'dark:text-slate-50'));\n    },\n    isFormValid: function isFormValid() {\n      var _this = this;\n\n      return this.items.reduce(function (acc, _ref) {\n        var name = _ref.name;\n        return !!_this.formValues[name] && acc;\n      }, true);\n    }\n  }),\n  mounted: function mounted() {\n    if (this.submittedValues.length) {\n      this.updateFormValues();\n    } else {\n      this.setFormDefaults();\n    }\n  },\n  methods: {\n    onSubmitClick: function onSubmitClick() {\n      this.hasSubmitted = true;\n    },\n    onSubmit: function onSubmit() {\n      if (!this.isFormValid) {\n        return;\n      }\n\n      this.$emit('submit', this.formValues);\n    },\n    buildFormObject: function buildFormObject(formObjectArray) {\n      return formObjectArray.reduce(function (acc, obj) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, obj.name, obj.value || obj.default));\n      }, {});\n    },\n    updateFormValues: function updateFormValues() {\n      this.formValues = this.buildFormObject(this.submittedValues);\n    },\n    setFormDefaults: function setFormDefaults() {\n      this.formValues = this.buildFormObject(this.items);\n    }\n  }\n};","map":{"version":3,"sources":["ChatForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AACA,SAAA,uBAAA,QAAA,iBAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,aAAA,CADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KALA;AASA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA;AATA,GAFA;AAgBA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,YAAA,EAAA;AAFA,KAAA;AAIA,GArBA;AAsBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA;AADA,GAAA,CADA;AAIA,IAAA,SAJA,uBAIA;AACA,aAAA,uBAAA,CAAA,KAAA,WAAA,CAAA;AACA,KANA;AAOA,IAAA,UAPA,wBAOA;AACA,uBAAA,KAAA,GAAA,CAAA,UAAA,EAAA,mBAAA,CAAA,uBACA,KAAA,GAAA,CAAA,gBAAA,EAAA,oBAAA,CADA;AAEA,KAVA;AAWA,IAAA,WAXA,yBAWA;AAAA;;AACA,aAAA,KAAA,KAAA,CAAA,MAAA,CAAA,UAAA,GAAA,QAAA;AAAA,YAAA,IAAA,QAAA,IAAA;AACA,eAAA,CAAA,CAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA,IAAA,GAAA;AACA,OAFA,EAEA,IAFA,CAAA;AAGA;AAfA,IAtBA;AAuCA,EAAA,OAvCA,qBAuCA;AACA,QAAA,KAAA,eAAA,CAAA,MAAA,EAAA;AACA,WAAA,gBAAA;AACA,KAFA,MAEA;AACA,WAAA,eAAA;AACA;AACA,GA7CA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA,UAAA,CAAA,KAAA,WAAA,EAAA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,KAAA,UAAA;AACA,KATA;AAUA,IAAA,eAVA,2BAUA,eAVA,EAUA;AACA,aAAA,eAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA,GAAA,EAAA;AACA,+CACA,GADA,2BAEA,GAAA,CAAA,IAFA,EAEA,GAAA,CAAA,KAAA,IAAA,GAAA,CAAA,OAFA;AAIA,OALA,EAKA,EALA,CAAA;AAMA,KAjBA;AAkBA,IAAA,gBAlBA,8BAkBA;AACA,WAAA,UAAA,GAAA,KAAA,eAAA,CAAA,KAAA,eAAA,CAAA;AACA,KApBA;AAqBA,IAAA,eArBA,6BAqBA;AACA,WAAA,UAAA,GAAA,KAAA,eAAA,CAAA,KAAA,KAAA,CAAA;AACA;AAvBA;AA9CA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"form chat-bubble agent\"\n    :class=\"$dm('bg-white', 'dark:bg-slate-700')\"\n  >\n    <form @submit.prevent=\"onSubmit\">\n      <div\n        v-for=\"item in items\"\n        :key=\"item.key\"\n        class=\"form-block\"\n        :class=\"{\n          'has-submitted': hasSubmitted,\n        }\"\n      >\n        <label :class=\"$dm('text-black-900', 'dark:text-slate-50')\">{{\n          item.label\n        }}</label>\n        <input\n          v-if=\"item.type === 'email'\"\n          v-model=\"formValues[item.name]\"\n          :class=\"inputColor\"\n          :type=\"item.type\"\n          :pattern=\"item.regex\"\n          :title=\"item.title\"\n          :required=\"item.required && 'required'\"\n          :name=\"item.name\"\n          :placeholder=\"item.placeholder\"\n          :disabled=\"!!submittedValues.length\"\n        />\n        <input\n          v-else-if=\"item.type === 'text'\"\n          v-model=\"formValues[item.name]\"\n          :class=\"inputColor\"\n          :required=\"item.required && 'required'\"\n          :pattern=\"item.pattern\"\n          :title=\"item.title\"\n          :type=\"item.type\"\n          :name=\"item.name\"\n          :placeholder=\"item.placeholder\"\n          :disabled=\"!!submittedValues.length\"\n        />\n        <textarea\n          v-else-if=\"item.type === 'text_area'\"\n          v-model=\"formValues[item.name]\"\n          :class=\"inputColor\"\n          :required=\"item.required && 'required'\"\n          :title=\"item.title\"\n          :name=\"item.name\"\n          :placeholder=\"item.placeholder\"\n          :disabled=\"!!submittedValues.length\"\n        />\n        <select\n          v-else-if=\"item.type === 'select'\"\n          v-model=\"formValues[item.name]\"\n          :class=\"inputColor\"\n          :required=\"item.required && 'required'\"\n        >\n          <option\n            v-for=\"option in item.options\"\n            :key=\"option.key\"\n            :value=\"option.value\"\n          >\n            {{ option.label }}\n          </option>\n        </select>\n        <span class=\"error-message\">\n          {{ item.pattern_error || $t('CHAT_FORM.INVALID.FIELD') }}\n        </span>\n      </div>\n      <button\n        v-if=\"!submittedValues.length\"\n        class=\"button block\"\n        type=\"submit\"\n        :style=\"{\n          background: widgetColor,\n          borderColor: widgetColor,\n          color: textColor,\n        }\"\n        @click=\"onSubmitClick\"\n      >\n        {{ buttonLabel || $t('COMPONENTS.FORM_BUBBLE.SUBMIT') }}\n      </button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport darkModeMixin from 'widget/mixins/darkModeMixin.js';\nimport { getContrastingTextColor } from '@chatwoot/utils';\n\nexport default {\n  mixins: [darkModeMixin],\n  props: {\n    buttonLabel: {\n      type: String,\n      default: '',\n    },\n    items: {\n      type: Array,\n      default: () => [],\n    },\n    submittedValues: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      formValues: {},\n      hasSubmitted: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      widgetColor: 'appConfig/getWidgetColor',\n    }),\n    textColor() {\n      return getContrastingTextColor(this.widgetColor);\n    },\n    inputColor() {\n      return `${this.$dm('bg-white', 'dark:bg-slate-600')}\n        ${this.$dm('text-black-900', 'dark:text-slate-50')}`;\n    },\n    isFormValid() {\n      return this.items.reduce((acc, { name }) => {\n        return !!this.formValues[name] && acc;\n      }, true);\n    },\n  },\n  mounted() {\n    if (this.submittedValues.length) {\n      this.updateFormValues();\n    } else {\n      this.setFormDefaults();\n    }\n  },\n  methods: {\n    onSubmitClick() {\n      this.hasSubmitted = true;\n    },\n    onSubmit() {\n      if (!this.isFormValid) {\n        return;\n      }\n      this.$emit('submit', this.formValues);\n    },\n    buildFormObject(formObjectArray) {\n      return formObjectArray.reduce((acc, obj) => {\n        return {\n          ...acc,\n          [obj.name]: obj.value || obj.default,\n        };\n      }, {});\n    },\n    updateFormValues() {\n      this.formValues = this.buildFormObject(this.submittedValues);\n    },\n    setFormDefaults() {\n      this.formValues = this.buildFormObject(this.items);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '~widget/assets/scss/variables.scss';\n\n.form {\n  padding: $space-normal;\n  width: 80%;\n\n  .form-block {\n    width: 90%;\n    padding-bottom: $space-small;\n  }\n\n  label {\n    display: block;\n    font-weight: $font-weight-medium;\n    padding: $space-smaller 0;\n    text-transform: capitalize;\n  }\n\n  input,\n  textarea {\n    border-radius: $space-smaller;\n    border: 1px solid $color-border;\n    display: block;\n    font-family: inherit;\n    font-size: $font-size-default;\n    line-height: 1.5;\n    padding: $space-one;\n    width: 100%;\n\n    &:disabled {\n      background: $color-background-light;\n    }\n  }\n\n  textarea {\n    resize: none;\n  }\n\n  select {\n    width: 110%;\n    padding: $space-smaller;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    border: 1px solid $color-border;\n    border-radius: $space-smaller;\n    font-family: inherit;\n    font-size: $space-normal;\n    font-weight: normal;\n    line-height: 1.5;\n    background-image: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='32' height='24' viewBox='0 0 32 24'><polygon points='0,0 32,0 16,24' style='fill: rgb%28110, 111, 115%29'></polygon></svg>\");\n    background-origin: content-box;\n    background-position: right -1.6rem center;\n    background-repeat: no-repeat;\n    background-size: 9px 6px;\n    padding-right: 2.4rem;\n  }\n\n  .button {\n    font-size: $font-size-default;\n  }\n\n  .error-message {\n    display: none;\n    margin-top: $space-smaller;\n    color: $color-error;\n  }\n\n  .has-submitted {\n    input:invalid {\n      border: 1px solid $color-error;\n    }\n\n    input:invalid + .error-message {\n      display: block;\n    }\n\n    textarea:invalid {\n      border: 1px solid $color-error;\n    }\n\n    textarea:invalid + .error-message {\n      display: block;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/shared/components"},"metadata":{},"sourceType":"module"}