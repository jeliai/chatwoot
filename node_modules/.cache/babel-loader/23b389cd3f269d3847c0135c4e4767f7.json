{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MacroNodes from './MacroNodes';\nimport MacroProperties from './MacroProperties';\nimport { required, requiredIf } from 'vuelidate/lib/validators';\nexport default {\n  components: {\n    MacroNodes: MacroNodes,\n    MacroProperties: MacroProperties\n  },\n  provide: function provide() {\n    return {\n      $v: this.$v\n    };\n  },\n  props: {\n    macroData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      macro: this.macroData\n    };\n  },\n  computed: {\n    files: function files() {\n      if (this.macro && this.macro.files) return this.macro.files;\n      return [];\n    }\n  },\n  watch: {\n    $route: {\n      handler: function handler() {\n        this.resetValidation();\n      },\n      immediate: true\n    },\n    macroData: {\n      handler: function handler() {\n        this.macro = this.macroData;\n      },\n      immediate: true\n    }\n  },\n  validations: {\n    macro: {\n      name: {\n        required: required\n      },\n      visibility: {\n        required: required\n      },\n      actions: {\n        required: required,\n        $each: {\n          action_params: {\n            required: requiredIf(function (prop) {\n              if (prop.action_name === 'send_email_to_team') return true;\n              return !(prop.action_name === 'mute_conversation' || prop.action_name === 'snooze_conversation' || prop.action_name === 'resolve_conversation' || prop.action_name === 'remove_assigned_team');\n            })\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    updateName: function updateName(value) {\n      this.macro.name = value;\n    },\n    updateVisibility: function updateVisibility(value) {\n      this.macro.visibility = value;\n    },\n    appendNode: function appendNode() {\n      this.macro.actions.push({\n        action_name: 'assign_team',\n        action_params: []\n      });\n    },\n    deleteNode: function deleteNode(index) {\n      this.macro.actions.splice(index, 1);\n    },\n    submit: function submit() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      this.$emit('submit', this.macro);\n    },\n    resetNode: function resetNode(index) {\n      this.$v.macro.actions.$each[index].$reset();\n      this.macro.actions[index].action_params = [];\n    },\n    resetValidation: function resetValidation() {\n      this.$v.$reset();\n    }\n  }\n};","map":{"version":3,"sources":["MacroForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"small-8 columns with-right-space macros-canvas\">\n      <macro-nodes\n        v-model=\"macro.actions\"\n        :files=\"files\"\n        @addNewNode=\"appendNode\"\n        @deleteNode=\"deleteNode\"\n        @resetAction=\"resetNode\"\n      />\n    </div>\n    <div class=\"small-4 columns\">\n      <macro-properties\n        :macro-name=\"macro.name\"\n        :macro-visibility=\"macro.visibility\"\n        @update:name=\"updateName\"\n        @update:visibility=\"updateVisibility\"\n        @submit=\"submit\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport MacroNodes from './MacroNodes';\nimport MacroProperties from './MacroProperties';\nimport { required, requiredIf } from 'vuelidate/lib/validators';\n\nexport default {\n  components: {\n    MacroNodes,\n    MacroProperties,\n  },\n  provide() {\n    return {\n      $v: this.$v,\n    };\n  },\n  props: {\n    macroData: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      macro: this.macroData,\n    };\n  },\n  computed: {\n    files() {\n      if (this.macro && this.macro.files) return this.macro.files;\n      return [];\n    },\n  },\n  watch: {\n    $route: {\n      handler() {\n        this.resetValidation();\n      },\n      immediate: true,\n    },\n    macroData: {\n      handler() {\n        this.macro = this.macroData;\n      },\n      immediate: true,\n    },\n  },\n  validations: {\n    macro: {\n      name: {\n        required,\n      },\n      visibility: {\n        required,\n      },\n      actions: {\n        required,\n        $each: {\n          action_params: {\n            required: requiredIf(prop => {\n              if (prop.action_name === 'send_email_to_team') return true;\n              return !(\n                prop.action_name === 'mute_conversation' ||\n                prop.action_name === 'snooze_conversation' ||\n                prop.action_name === 'resolve_conversation' ||\n                prop.action_name === 'remove_assigned_team'\n              );\n            }),\n          },\n        },\n      },\n    },\n  },\n  methods: {\n    updateName(value) {\n      this.macro.name = value;\n    },\n    updateVisibility(value) {\n      this.macro.visibility = value;\n    },\n    appendNode() {\n      this.macro.actions.push({\n        action_name: 'assign_team',\n        action_params: [],\n      });\n    },\n    deleteNode(index) {\n      this.macro.actions.splice(index, 1);\n    },\n    submit() {\n      this.$v.$touch();\n      if (this.$v.$invalid) return;\n      this.$emit('submit', this.macro);\n    },\n    resetNode(index) {\n      this.$v.macro.actions.$each[index].$reset();\n      this.macro.actions[index].action_params = [];\n    },\n    resetValidation() {\n      this.$v.$reset();\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.row {\n  height: 100%;\n}\n.macros-canvas {\n  background-image: radial-gradient(var(--s-100) 1.2px, transparent 0);\n  background-size: var(--space-normal) var(--space-normal);\n  height: 100%;\n  max-height: 100%;\n  padding: var(--space-normal) var(--space-three);\n  max-height: 100vh;\n  overflow-y: auto;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/macros"},"metadata":{},"sourceType":"module"}