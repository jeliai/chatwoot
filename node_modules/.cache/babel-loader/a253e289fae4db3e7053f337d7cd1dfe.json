{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required } from 'vuelidate/lib/validators';\nimport router from '../../../../index';\n\nvar shouldStartWithPlusSign = function shouldStartWithPlusSign() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return value.startsWith('+');\n};\n\nexport default {\n  mixins: [alertMixin],\n  props: {\n    type: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      accountSID: '',\n      authToken: '',\n      medium: this.type,\n      channelName: '',\n      messagingServiceSID: '',\n      useMessagingService: false,\n      phoneNumber: ''\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'inboxes/getUIFlags'\n  })),\n  validations: function validations() {\n    if (this.phoneNumber) {\n      return {\n        channelName: {\n          required: required\n        },\n        messagingServiceSID: {},\n        phoneNumber: {\n          shouldStartWithPlusSign: shouldStartWithPlusSign\n        },\n        authToken: {\n          required: required\n        },\n        accountSID: {\n          required: required\n        },\n        medium: {\n          required: required\n        }\n      };\n    }\n\n    return {\n      channelName: {\n        required: required\n      },\n      messagingServiceSID: {\n        required: required\n      },\n      phoneNumber: {},\n      authToken: {\n        required: required\n      },\n      accountSID: {\n        required: required\n      },\n      medium: {\n        required: required\n      }\n    };\n  },\n  methods: {\n    createChannel: function createChannel() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var twilioChannel;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.$v.$touch();\n\n                if (!_this.$v.$invalid) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.$store.dispatch('inboxes/createTwilioChannel', {\n                  twilio_channel: {\n                    name: _this.channelName,\n                    medium: _this.medium,\n                    account_sid: _this.accountSID,\n                    auth_token: _this.authToken,\n                    messaging_service_sid: _this.messagingServiceSID,\n                    phone_number: _this.messagingServiceSID ? null : \"+\".concat(_this.phoneNumber.replace(/\\D/g, ''))\n                  }\n                });\n\n              case 6:\n                twilioChannel = _context.sent;\n                router.replace({\n                  name: 'settings_inboxes_add_agents',\n                  params: {\n                    page: 'new',\n                    inbox_id: twilioChannel.id\n                  }\n                });\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n\n                _this.showAlert(_this.$t('INBOX_MGMT.ADD.TWILIO.API.ERROR_MESSAGE'));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["Twilio.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- Deprecated in favour of separate files for SMS and Whatsapp and also to implement new providers for each platform in the future-->\n<template>\n  <form class=\"row\" @submit.prevent=\"createChannel()\">\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.channelName.$error }\">\n        {{ $t('INBOX_MGMT.ADD.TWILIO.CHANNEL_NAME.LABEL') }}\n        <input\n          v-model.trim=\"channelName\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.TWILIO.CHANNEL_NAME.PLACEHOLDER')\"\n          @blur=\"$v.channelName.$touch\"\n        />\n        <span v-if=\"$v.channelName.$error\" class=\"message\">{{\n          $t('INBOX_MGMT.ADD.TWILIO.CHANNEL_NAME.ERROR')\n        }}</span>\n      </label>\n    </div>\n\n    <div class=\"medium-8 columns\">\n      <label\n        v-if=\"useMessagingService\"\n        :class=\"{ error: $v.messagingServiceSID.$error }\"\n      >\n        {{ $t('INBOX_MGMT.ADD.TWILIO.MESSAGING_SERVICE_SID.LABEL') }}\n        <input\n          v-model.trim=\"messagingServiceSID\"\n          type=\"text\"\n          :placeholder=\"\n            $t('INBOX_MGMT.ADD.TWILIO.MESSAGING_SERVICE_SID.PLACEHOLDER')\n          \"\n          @blur=\"$v.messagingServiceSID.$touch\"\n        />\n        <span v-if=\"$v.messagingServiceSID.$error\" class=\"message\">{{\n          $t('INBOX_MGMT.ADD.TWILIO.MESSAGING_SERVICE_SID.ERROR')\n        }}</span>\n      </label>\n    </div>\n\n    <div v-if=\"!useMessagingService\" class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.phoneNumber.$error }\">\n        {{ $t('INBOX_MGMT.ADD.TWILIO.PHONE_NUMBER.LABEL') }}\n        <input\n          v-model.trim=\"phoneNumber\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.TWILIO.PHONE_NUMBER.PLACEHOLDER')\"\n          @blur=\"$v.phoneNumber.$touch\"\n        />\n        <span v-if=\"$v.phoneNumber.$error\" class=\"message\">{{\n          $t('INBOX_MGMT.ADD.TWILIO.PHONE_NUMBER.ERROR')\n        }}</span>\n      </label>\n    </div>\n\n    <div class=\"medium-8 columns messagingServiceHelptext\">\n      <label for=\"useMessagingService\">\n        <input\n          id=\"useMessagingService\"\n          v-model=\"useMessagingService\"\n          type=\"checkbox\"\n          class=\"checkbox\"\n        />\n        {{\n          $t(\n            'INBOX_MGMT.ADD.TWILIO.MESSAGING_SERVICE_SID.USE_MESSAGING_SERVICE'\n          )\n        }}\n      </label>\n    </div>\n\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.accountSID.$error }\">\n        {{ $t('INBOX_MGMT.ADD.TWILIO.ACCOUNT_SID.LABEL') }}\n        <input\n          v-model.trim=\"accountSID\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.TWILIO.ACCOUNT_SID.PLACEHOLDER')\"\n          @blur=\"$v.accountSID.$touch\"\n        />\n        <span v-if=\"$v.accountSID.$error\" class=\"message\">{{\n          $t('INBOX_MGMT.ADD.TWILIO.ACCOUNT_SID.ERROR')\n        }}</span>\n      </label>\n    </div>\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.authToken.$error }\">\n        {{ $t('INBOX_MGMT.ADD.TWILIO.AUTH_TOKEN.LABEL') }}\n        <input\n          v-model.trim=\"authToken\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.TWILIO.AUTH_TOKEN.PLACEHOLDER')\"\n          @blur=\"$v.authToken.$touch\"\n        />\n        <span v-if=\"$v.authToken.$error\" class=\"message\">{{\n          $t('INBOX_MGMT.ADD.TWILIO.AUTH_TOKEN.ERROR')\n        }}</span>\n      </label>\n    </div>\n\n    <div class=\"medium-12 columns\">\n      <woot-submit-button\n        :loading=\"uiFlags.isCreating\"\n        :button-text=\"$t('INBOX_MGMT.ADD.TWILIO.SUBMIT_BUTTON')\"\n      />\n    </div>\n  </form>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required } from 'vuelidate/lib/validators';\nimport router from '../../../../index';\n\nconst shouldStartWithPlusSign = (value = '') => value.startsWith('+');\n\nexport default {\n  mixins: [alertMixin],\n  props: {\n    type: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      accountSID: '',\n      authToken: '',\n      medium: this.type,\n      channelName: '',\n      messagingServiceSID: '',\n      useMessagingService: false,\n      phoneNumber: '',\n    };\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'inboxes/getUIFlags',\n    }),\n  },\n  validations() {\n    if (this.phoneNumber) {\n      return {\n        channelName: { required },\n        messagingServiceSID: {},\n        phoneNumber: { shouldStartWithPlusSign },\n        authToken: { required },\n        accountSID: { required },\n        medium: { required },\n      };\n    }\n    return {\n      channelName: { required },\n      messagingServiceSID: { required },\n      phoneNumber: {},\n      authToken: { required },\n      accountSID: { required },\n      medium: { required },\n    };\n  },\n  methods: {\n    async createChannel() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n\n      try {\n        const twilioChannel = await this.$store.dispatch(\n          'inboxes/createTwilioChannel',\n          {\n            twilio_channel: {\n              name: this.channelName,\n              medium: this.medium,\n              account_sid: this.accountSID,\n              auth_token: this.authToken,\n              messaging_service_sid: this.messagingServiceSID,\n              phone_number: this.messagingServiceSID\n                ? null\n                : `+${this.phoneNumber.replace(/\\D/g, '')}`,\n            },\n          }\n        );\n\n        router.replace({\n          name: 'settings_inboxes_add_agents',\n          params: {\n            page: 'new',\n            inbox_id: twilioChannel.id,\n          },\n        });\n      } catch (error) {\n        this.showAlert(this.$t('INBOX_MGMT.ADD.TWILIO.API.ERROR_MESSAGE'));\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.messagingServiceHelptext {\n  margin-top: -10px;\n  margin-bottom: 15px;\n\n  .checkbox {\n    margin: 0px 4px;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/channels"},"metadata":{},"sourceType":"module"}