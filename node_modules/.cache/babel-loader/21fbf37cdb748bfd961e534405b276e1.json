{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { ContextCancelation } from '../../core/context';\nimport { asPromise } from '../../lib/as-promise';\nimport { toFacade } from '../../lib/to-facade';\nexport function applyDestinationMiddleware(destination, evt, middleware) {\n  return __awaiter(this, void 0, void 0, function () {\n    function applyMiddleware(event, fn) {\n      return __awaiter(this, void 0, void 0, function () {\n        var nextCalled, returnedEvent;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              nextCalled = false;\n              returnedEvent = null;\n              return [4\n              /*yield*/\n              , asPromise(fn({\n                payload: toFacade(event, {\n                  clone: true,\n                  traverse: false\n                }),\n                integration: destination,\n                next: function next(evt) {\n                  nextCalled = true;\n\n                  if (evt === null) {\n                    returnedEvent = null;\n                  }\n\n                  if (evt) {\n                    returnedEvent = evt.obj;\n                  }\n                }\n              }))];\n\n            case 1:\n              _b.sent();\n\n              if (!nextCalled && returnedEvent !== null) {\n                returnedEvent = returnedEvent;\n                returnedEvent.integrations = __assign(__assign({}, event.integrations), (_a = {}, _a[destination] = false, _a));\n              }\n\n              return [2\n              /*return*/\n              , returnedEvent];\n          }\n        });\n      });\n    }\n\n    var _i, middleware_1, md, result;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _i = 0, middleware_1 = middleware;\n          _a.label = 1;\n\n        case 1:\n          if (!(_i < middleware_1.length)) return [3\n          /*break*/\n          , 4];\n          md = middleware_1[_i];\n          return [4\n          /*yield*/\n          , applyMiddleware(evt, md)];\n\n        case 2:\n          result = _a.sent();\n\n          if (result === null) {\n            return [2\n            /*return*/\n            , null];\n          }\n\n          evt = result;\n          _a.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , evt];\n      }\n    });\n  });\n}\nexport function sourceMiddlewarePlugin(fn, integrations) {\n  function apply(ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var nextCalled;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            nextCalled = false;\n            return [4\n            /*yield*/\n            , asPromise(fn({\n              payload: toFacade(ctx.event, {\n                clone: true,\n                traverse: false\n              }),\n              integrations: integrations !== null && integrations !== void 0 ? integrations : {},\n              next: function next(evt) {\n                nextCalled = true;\n\n                if (evt) {\n                  ctx.event = evt.obj;\n                }\n              }\n            }))];\n\n          case 1:\n            _a.sent();\n\n            if (!nextCalled) {\n              throw new ContextCancelation({\n                retry: false,\n                type: 'middleware_cancellation',\n                reason: 'Middleware `next` function skipped'\n              });\n            }\n\n            return [2\n            /*return*/\n            , ctx];\n        }\n      });\n    });\n  }\n\n  return {\n    name: \"Source Middleware \" + fn.name,\n    type: 'before',\n    version: '0.1.0',\n    isLoaded: function isLoaded() {\n      return true;\n    },\n    load: function load(ctx) {\n      return Promise.resolve(ctx);\n    },\n    track: apply,\n    page: apply,\n    identify: apply,\n    alias: apply,\n    group: apply\n  };\n}","map":null,"metadata":{},"sourceType":"module"}