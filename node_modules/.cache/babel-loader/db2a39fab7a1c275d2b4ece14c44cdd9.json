{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, email } from 'vuelidate/lib/validators';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport WootSubmitButton from '../../components/buttons/FormSubmitButton';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    WootSubmitButton: WootSubmitButton\n  },\n  mixins: [globalConfigMixin],\n  props: {\n    ssoAuthToken: {\n      type: String,\n      default: ''\n    },\n    ssoAccountId: {\n      type: String,\n      default: ''\n    },\n    ssoConversationId: {\n      type: String,\n      default: ''\n    },\n    config: {\n      type: String,\n      default: ''\n    },\n    email: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      // We need to initialize the component with any\n      // properties that will be used in it\n      credentials: {\n        email: '',\n        password: ''\n      },\n      loginApi: {\n        message: '',\n        showLoading: false\n      },\n      error: ''\n    };\n  },\n  validations: {\n    credentials: {\n      password: {\n        required: required\n      },\n      email: {\n        required: required,\n        email: email\n      }\n    }\n  },\n  computed: _objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })),\n  created: function created() {\n    if (this.ssoAuthToken) {\n      this.login();\n    }\n  },\n  methods: {\n    showAlert: function showAlert(message) {\n      // Reset loading, current selected agent\n      this.loginApi.showLoading = false;\n      this.loginApi.message = message;\n      bus.$emit('newToastMessage', this.loginApi.message);\n    },\n    showSignupLink: function showSignupLink() {\n      return window.chatwootConfig.signupEnabled === 'true';\n    },\n    login: function login() {\n      var _this = this;\n\n      this.loginApi.showLoading = true;\n      var credentials = {\n        email: this.email ? decodeURIComponent(this.email) : this.credentials.email,\n        password: this.credentials.password,\n        sso_auth_token: this.ssoAuthToken,\n        ssoAccountId: this.ssoAccountId,\n        ssoConversationId: this.ssoConversationId\n      };\n      this.$store.dispatch('login', credentials).then(function () {\n        _this.showAlert(_this.$t('LOGIN.API.SUCCESS_MESSAGE'));\n      }).catch(function (response) {\n        // Reset URL Params if the authentication is invalid\n        if (_this.email) {\n          window.location = '/app/login';\n        }\n\n        if (response && response.status === 401) {\n          var errors = response.data.errors;\n          var hasAuthErrorMsg = errors && errors.length && errors[0] && typeof errors[0] === 'string';\n\n          if (hasAuthErrorMsg) {\n            _this.showAlert(errors[0]);\n          } else {\n            _this.showAlert(_this.$t('LOGIN.API.UNAUTH'));\n          }\n\n          return;\n        }\n\n        _this.showAlert(_this.$t('LOGIN.API.ERROR_MESSAGE'));\n      });\n    }\n  }\n};","map":{"version":3,"sources":["Login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"medium-12 column login\">\n    <div class=\"text-center medium-12 login__hero align-self-top\">\n      <img\n        :src=\"globalConfig.logo\"\n        :alt=\"globalConfig.installationName\"\n        class=\"hero__logo\"\n      />\n      <h2 class=\"hero__title\">\n        {{\n          useInstallationName($t('LOGIN.TITLE'), globalConfig.installationName)\n        }}\n      </h2>\n    </div>\n    <div class=\"row align-center\">\n      <div v-if=\"!email\" class=\"small-12 medium-4 column\">\n        <form class=\"login-box column align-self-top\" @submit.prevent=\"login()\">\n          <div class=\"column log-in-form\">\n            <label :class=\"{ error: $v.credentials.email.$error }\">\n              {{ $t('LOGIN.EMAIL.LABEL') }}\n              <input\n                v-model.trim=\"credentials.email\"\n                type=\"text\"\n                data-testid=\"email_input\"\n                :placeholder=\"$t('LOGIN.EMAIL.PLACEHOLDER')\"\n                @input=\"$v.credentials.email.$touch\"\n              />\n            </label>\n            <label :class=\"{ error: $v.credentials.password.$error }\">\n              {{ $t('LOGIN.PASSWORD.LABEL') }}\n              <input\n                v-model.trim=\"credentials.password\"\n                type=\"password\"\n                data-testid=\"password_input\"\n                :placeholder=\"$t('LOGIN.PASSWORD.PLACEHOLDER')\"\n                @input=\"$v.credentials.password.$touch\"\n              />\n            </label>\n            <woot-submit-button\n              :disabled=\"\n                $v.credentials.email.$invalid ||\n                  $v.credentials.password.$invalid ||\n                  loginApi.showLoading\n              \"\n              :button-text=\"$t('LOGIN.SUBMIT')\"\n              :loading=\"loginApi.showLoading\"\n              button-class=\"large expanded\"\n            />\n          </div>\n        </form>\n        <div class=\"column text-center sigin__footer\">\n          <p v-if=\"!globalConfig.disableUserProfileUpdate\">\n            <router-link to=\"auth/reset/password\">\n              {{ $t('LOGIN.FORGOT_PASSWORD') }}\n            </router-link>\n          </p>\n          <p v-if=\"showSignupLink()\">\n            <router-link to=\"auth/signup\">\n              {{ $t('LOGIN.CREATE_NEW_ACCOUNT') }}\n            </router-link>\n          </p>\n        </div>\n      </div>\n      <woot-spinner v-else size=\"\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { required, email } from 'vuelidate/lib/validators';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nimport WootSubmitButton from '../../components/buttons/FormSubmitButton';\nimport { mapGetters } from 'vuex';\n\nexport default {\n  components: {\n    WootSubmitButton,\n  },\n  mixins: [globalConfigMixin],\n  props: {\n    ssoAuthToken: { type: String, default: '' },\n    ssoAccountId: { type: String, default: '' },\n    ssoConversationId: { type: String, default: '' },\n    config: { type: String, default: '' },\n    email: { type: String, default: '' },\n  },\n  data() {\n    return {\n      // We need to initialize the component with any\n      // properties that will be used in it\n      credentials: {\n        email: '',\n        password: '',\n      },\n      loginApi: {\n        message: '',\n        showLoading: false,\n      },\n      error: '',\n    };\n  },\n  validations: {\n    credentials: {\n      password: {\n        required,\n      },\n      email: {\n        required,\n        email,\n      },\n    },\n  },\n  computed: {\n    ...mapGetters({\n      globalConfig: 'globalConfig/get',\n    }),\n  },\n  created() {\n    if (this.ssoAuthToken) {\n      this.login();\n    }\n  },\n  methods: {\n    showAlert(message) {\n      // Reset loading, current selected agent\n      this.loginApi.showLoading = false;\n      this.loginApi.message = message;\n      bus.$emit('newToastMessage', this.loginApi.message);\n    },\n    showSignupLink() {\n      return window.chatwootConfig.signupEnabled === 'true';\n    },\n    login() {\n      this.loginApi.showLoading = true;\n      const credentials = {\n        email: this.email\n          ? decodeURIComponent(this.email)\n          : this.credentials.email,\n        password: this.credentials.password,\n        sso_auth_token: this.ssoAuthToken,\n        ssoAccountId: this.ssoAccountId,\n        ssoConversationId: this.ssoConversationId,\n      };\n      this.$store\n        .dispatch('login', credentials)\n        .then(() => {\n          this.showAlert(this.$t('LOGIN.API.SUCCESS_MESSAGE'));\n        })\n        .catch(response => {\n          // Reset URL Params if the authentication is invalid\n          if (this.email) {\n            window.location = '/app/login';\n          }\n\n          if (response && response.status === 401) {\n            const { errors } = response.data;\n            const hasAuthErrorMsg =\n              errors &&\n              errors.length &&\n              errors[0] &&\n              typeof errors[0] === 'string';\n            if (hasAuthErrorMsg) {\n              this.showAlert(errors[0]);\n            } else {\n              this.showAlert(this.$t('LOGIN.API.UNAUTH'));\n            }\n            return;\n          }\n          this.showAlert(this.$t('LOGIN.API.ERROR_MESSAGE'));\n        });\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/login"},"metadata":{},"sourceType":"module"}