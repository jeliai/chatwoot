{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport parse from 'date-fns/parse';\nimport getHours from 'date-fns/getHours';\nimport getMinutes from 'date-fns/getMinutes';\nimport timeZoneData from './timezones.json';\nexport var defaultTimeSlot = [{\n  day: 0,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 1,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 2,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 3,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 4,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 5,\n  to: '',\n  from: '',\n  valid: false\n}, {\n  day: 6,\n  to: '',\n  from: '',\n  valid: false\n}];\nexport var generateTimeSlots = function generateTimeSlots() {\n  var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n\n  /* \n    Generates a list of time strings from 12:00 AM to next 24 hours. Each new string\n     will be generated by adding `step` minutes to the previous one.\n    The list is generated by starting with a random day and adding step minutes till end of the same day.\n  */\n  var date = new Date(1970, 1, 1);\n  var slots = [];\n\n  while (date.getDate() === 1) {\n    slots.push(date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    }));\n    date.setMinutes(date.getMinutes() + step);\n  }\n\n  return slots;\n};\nexport var getTime = function getTime(hour, minute) {\n  var merdian = hour > 11 ? 'PM' : 'AM';\n  var modHour = hour > 12 ? hour % 12 : hour || 12;\n  var parsedHour = modHour < 10 ? \"0\".concat(modHour) : modHour;\n  var parsedMinute = minute < 10 ? \"0\".concat(minute) : minute;\n  return \"\".concat(parsedHour, \":\").concat(parsedMinute, \" \").concat(merdian);\n};\nexport var timeSlotParse = function timeSlotParse(timeSlots) {\n  return timeSlots.map(function (slot) {\n    var day = slot.day_of_week,\n        openHour = slot.open_hour,\n        openMinutes = slot.open_minutes,\n        closeHour = slot.close_hour,\n        closeMinutes = slot.close_minutes,\n        closedAllDay = slot.closed_all_day,\n        openAllDay = slot.open_all_day;\n    var from = closedAllDay ? '' : getTime(openHour, openMinutes);\n    var to = closedAllDay ? '' : getTime(closeHour, closeMinutes);\n    return {\n      day: day,\n      to: to,\n      from: from,\n      valid: !closedAllDay,\n      openAllDay: openAllDay\n    };\n  });\n};\nexport var timeSlotTransform = function timeSlotTransform(timeSlots) {\n  return timeSlots.map(function (slot) {\n    var closed = slot.openAllDay ? false : !(slot.to && slot.from);\n    var openAllDay = slot.openAllDay;\n    var fromDate = '';\n    var toDate = '';\n    var openHour = '';\n    var openMinutes = '';\n    var closeHour = '';\n    var closeMinutes = '';\n\n    if (!closed) {\n      fromDate = parse(slot.from, 'hh:mm a', new Date());\n      toDate = parse(slot.to, 'hh:mm a', new Date());\n      openHour = getHours(fromDate);\n      openMinutes = getMinutes(fromDate);\n      closeHour = getHours(toDate);\n      closeMinutes = getMinutes(toDate);\n    }\n\n    return {\n      day_of_week: slot.day,\n      closed_all_day: closed,\n      open_hour: openHour,\n      open_minutes: openMinutes,\n      close_hour: closeHour,\n      close_minutes: closeMinutes,\n      open_all_day: openAllDay\n    };\n  });\n};\nexport var timeZoneOptions = function timeZoneOptions() {\n  return Object.keys(timeZoneData).map(function (key) {\n    return {\n      label: key,\n      value: timeZoneData[key]\n    };\n  });\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/routes/dashboard/settings/inbox/helpers/businessHour.js"],"names":["parse","getHours","getMinutes","timeZoneData","defaultTimeSlot","day","to","from","valid","generateTimeSlots","step","date","Date","slots","getDate","push","toLocaleTimeString","hour","minute","hour12","setMinutes","getTime","merdian","modHour","parsedHour","parsedMinute","timeSlotParse","timeSlots","map","slot","day_of_week","openHour","open_hour","openMinutes","open_minutes","closeHour","close_hour","closeMinutes","close_minutes","closedAllDay","closed_all_day","openAllDay","open_all_day","timeSlotTransform","closed","fromDate","toDate","timeZoneOptions","Object","keys","key","label","value"],"mappings":"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","sourcesContent":["import parse from 'date-fns/parse';\nimport getHours from 'date-fns/getHours';\nimport getMinutes from 'date-fns/getMinutes';\nimport timeZoneData from './timezones.json';\n\nexport const defaultTimeSlot = [\n  {\n    day: 0,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 1,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 2,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 3,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 4,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 5,\n    to: '',\n    from: '',\n    valid: false,\n  },\n  {\n    day: 6,\n    to: '',\n    from: '',\n    valid: false,\n  },\n];\n\nexport const generateTimeSlots = (step = 15) => {\n  /* \n    Generates a list of time strings from 12:00 AM to next 24 hours. Each new string\n     will be generated by adding `step` minutes to the previous one.\n    The list is generated by starting with a random day and adding step minutes till end of the same day.\n  */\n  const date = new Date(1970, 1, 1);\n  const slots = [];\n  while (date.getDate() === 1) {\n    slots.push(\n      date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n      })\n    );\n    date.setMinutes(date.getMinutes() + step);\n  }\n  return slots;\n};\n\nexport const getTime = (hour, minute) => {\n  const merdian = hour > 11 ? 'PM' : 'AM';\n  const modHour = hour > 12 ? hour % 12 : hour || 12;\n  const parsedHour = modHour < 10 ? `0${modHour}` : modHour;\n  const parsedMinute = minute < 10 ? `0${minute}` : minute;\n  return `${parsedHour}:${parsedMinute} ${merdian}`;\n};\n\nexport const timeSlotParse = timeSlots => {\n  return timeSlots.map(slot => {\n    const {\n      day_of_week: day,\n      open_hour: openHour,\n      open_minutes: openMinutes,\n      close_hour: closeHour,\n      close_minutes: closeMinutes,\n      closed_all_day: closedAllDay,\n      open_all_day: openAllDay,\n    } = slot;\n    const from = closedAllDay ? '' : getTime(openHour, openMinutes);\n    const to = closedAllDay ? '' : getTime(closeHour, closeMinutes);\n\n    return {\n      day,\n      to,\n      from,\n      valid: !closedAllDay,\n      openAllDay,\n    };\n  });\n};\n\nexport const timeSlotTransform = timeSlots => {\n  return timeSlots.map(slot => {\n    const closed = slot.openAllDay ? false : !(slot.to && slot.from);\n    const openAllDay = slot.openAllDay;\n    let fromDate = '';\n    let toDate = '';\n    let openHour = '';\n    let openMinutes = '';\n    let closeHour = '';\n    let closeMinutes = '';\n\n    if (!closed) {\n      fromDate = parse(slot.from, 'hh:mm a', new Date());\n      toDate = parse(slot.to, 'hh:mm a', new Date());\n      openHour = getHours(fromDate);\n      openMinutes = getMinutes(fromDate);\n      closeHour = getHours(toDate);\n      closeMinutes = getMinutes(toDate);\n    }\n\n    return {\n      day_of_week: slot.day,\n      closed_all_day: closed,\n      open_hour: openHour,\n      open_minutes: openMinutes,\n      close_hour: closeHour,\n      close_minutes: closeMinutes,\n      open_all_day: openAllDay,\n    };\n  });\n};\n\nexport const timeZoneOptions = () => {\n  return Object.keys(timeZoneData).map(key => ({\n    label: key,\n    value: timeZoneData[key],\n  }));\n};\n"]},"metadata":{},"sourceType":"module"}