{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mixin as clickaway } from 'vue-clickaway';\nimport WootDropdownItem from 'shared/components/ui/dropdown/DropdownItem.vue';\nimport WootDropdownMenu from 'shared/components/ui/dropdown/DropdownMenu.vue';\nimport bulkActionsMixin from 'dashboard/mixins/bulkActionsMixin.js';\nexport default {\n  components: {\n    WootDropdownItem: WootDropdownItem,\n    WootDropdownMenu: WootDropdownMenu\n  },\n  mixins: [clickaway, bulkActionsMixin],\n  props: {\n    selectedInboxes: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    conversationCount: {\n      type: Number,\n      default: 0\n    },\n    showResolve: {\n      type: Boolean,\n      default: true\n    },\n    showReopen: {\n      type: Boolean,\n      default: true\n    },\n    showSnooze: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      query: '',\n      selectedAction: null,\n      actions: [{\n        icon: 'checkmark',\n        key: 'resolved'\n      }, {\n        icon: 'arrow-redo',\n        key: 'open'\n      }, {\n        icon: 'send-clock',\n        key: 'snoozed'\n      }]\n    };\n  },\n  methods: {\n    updateConversations: function updateConversations(key) {\n      this.$emit('update', key);\n    },\n    goBack: function goBack() {\n      this.selectedAgent = null;\n    },\n    onClose: function onClose() {\n      this.$emit('close');\n    },\n    showAction: function showAction(key) {\n      var actionsMap = {\n        resolved: this.showResolve,\n        open: this.showReopen,\n        snoozed: this.showSnooze\n      };\n      return actionsMap[key] || false;\n    },\n    actionLabel: function actionLabel(key) {\n      var labelsMap = {\n        resolved: this.$t('CONVERSATION.HEADER.RESOLVE_ACTION'),\n        open: this.$t('CONVERSATION.HEADER.REOPEN_ACTION'),\n        snoozed: this.$t('BULK_ACTION.UPDATE.SNOOZE_UNTIL_NEXT_REPLY')\n      };\n      return labelsMap[key] || '';\n    }\n  }\n};","map":{"version":3,"sources":["UpdateActions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,SAAA,KAAA,IAAA,SAAA,QAAA,eAAA;AACA,OAAA,gBAAA,MAAA,gDAAA;AACA,OAAA,gBAAA,MAAA,gDAAA;AACA,OAAA,gBAAA,MAAA,sCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA,gBADA;AAEA,IAAA,gBAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,gBAAA,CALA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAjBA,GANA;AA4BA,EAAA,IA5BA,kBA4BA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,cAAA,EAAA,IAFA;AAGA,MAAA,OAAA,EAAA,CACA;AACA,QAAA,IAAA,EAAA,WADA;AAEA,QAAA,GAAA,EAAA;AAFA,OADA,EAKA;AACA,QAAA,IAAA,EAAA,YADA;AAEA,QAAA,GAAA,EAAA;AAFA,OALA,EASA;AACA,QAAA,IAAA,EAAA,YADA;AAEA,QAAA,GAAA,EAAA;AAFA,OATA;AAHA,KAAA;AAkBA,GA/CA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,mBADA,+BACA,GADA,EACA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,GAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,KANA;AAOA,IAAA,OAPA,qBAOA;AACA,WAAA,KAAA,CAAA,OAAA;AACA,KATA;AAUA,IAAA,UAVA,sBAUA,GAVA,EAUA;AACA,UAAA,UAAA,GAAA;AACA,QAAA,QAAA,EAAA,KAAA,WADA;AAEA,QAAA,IAAA,EAAA,KAAA,UAFA;AAGA,QAAA,OAAA,EAAA,KAAA;AAHA,OAAA;AAKA,aAAA,UAAA,CAAA,GAAA,CAAA,IAAA,KAAA;AACA,KAjBA;AAkBA,IAAA,WAlBA,uBAkBA,GAlBA,EAkBA;AACA,UAAA,SAAA,GAAA;AACA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,oCAAA,CADA;AAEA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,mCAAA,CAFA;AAGA,QAAA,OAAA,EAAA,KAAA,EAAA,CAAA,4CAAA;AAHA,OAAA;AAKA,aAAA,SAAA,CAAA,GAAA,CAAA,IAAA,EAAA;AACA;AAzBA;AAhDA,CAAA","sourcesContent":["<template>\n  <div v-on-clickaway=\"onClose\" class=\"actions-container\">\n    <div class=\"triangle\" :style=\"cssVars\">\n      <svg height=\"12\" viewBox=\"0 0 24 12\" width=\"24\">\n        <path\n          d=\"M20 12l-8-8-12 12\"\n          fill=\"var(--white)\"\n          fill-rule=\"evenodd\"\n          stroke=\"var(--s-50)\"\n          stroke-width=\"1px\"\n        />\n      </svg>\n    </div>\n    <div class=\"header flex-between\">\n      <span>{{ $t('BULK_ACTION.UPDATE.CHANGE_STATUS') }}</span>\n      <woot-button\n        size=\"tiny\"\n        variant=\"clear\"\n        color-scheme=\"secondary\"\n        icon=\"dismiss\"\n        @click=\"onClose\"\n      />\n    </div>\n    <div class=\"container\">\n      <woot-dropdown-menu>\n        <template v-for=\"action in actions\">\n          <woot-dropdown-item v-if=\"showAction(action.key)\" :key=\"action.key\">\n            <woot-button\n              variant=\"clear\"\n              color-scheme=\"secondary\"\n              size=\"small\"\n              :icon=\"action.icon\"\n              @click=\"updateConversations(action.key)\"\n            >\n              {{ actionLabel(action.key) }}\n            </woot-button>\n          </woot-dropdown-item>\n        </template>\n      </woot-dropdown-menu>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mixin as clickaway } from 'vue-clickaway';\nimport WootDropdownItem from 'shared/components/ui/dropdown/DropdownItem.vue';\nimport WootDropdownMenu from 'shared/components/ui/dropdown/DropdownMenu.vue';\nimport bulkActionsMixin from 'dashboard/mixins/bulkActionsMixin.js';\n\nexport default {\n  components: {\n    WootDropdownItem,\n    WootDropdownMenu,\n  },\n  mixins: [clickaway, bulkActionsMixin],\n  props: {\n    selectedInboxes: {\n      type: Array,\n      default: () => [],\n    },\n    conversationCount: {\n      type: Number,\n      default: 0,\n    },\n    showResolve: {\n      type: Boolean,\n      default: true,\n    },\n    showReopen: {\n      type: Boolean,\n      default: true,\n    },\n    showSnooze: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return {\n      query: '',\n      selectedAction: null,\n      actions: [\n        {\n          icon: 'checkmark',\n          key: 'resolved',\n        },\n        {\n          icon: 'arrow-redo',\n          key: 'open',\n        },\n        {\n          icon: 'send-clock',\n          key: 'snoozed',\n        },\n      ],\n    };\n  },\n  methods: {\n    updateConversations(key) {\n      this.$emit('update', key);\n    },\n    goBack() {\n      this.selectedAgent = null;\n    },\n    onClose() {\n      this.$emit('close');\n    },\n    showAction(key) {\n      const actionsMap = {\n        resolved: this.showResolve,\n        open: this.showReopen,\n        snoozed: this.showSnooze,\n      };\n      return actionsMap[key] || false;\n    },\n    actionLabel(key) {\n      const labelsMap = {\n        resolved: this.$t('CONVERSATION.HEADER.RESOLVE_ACTION'),\n        open: this.$t('CONVERSATION.HEADER.REOPEN_ACTION'),\n        snoozed: this.$t('BULK_ACTION.UPDATE.SNOOZE_UNTIL_NEXT_REPLY'),\n      };\n      return labelsMap[key] || '';\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.actions-container {\n  background-color: var(--white);\n  border-radius: var(--border-radius-large);\n  border: 1px solid var(--s-50);\n  box-shadow: var(--shadow-dropdown-pane);\n  position: absolute;\n  right: var(--space-small);\n  top: var(--space-larger);\n  transform-origin: top right;\n  width: auto;\n  z-index: var(--z-index-twenty);\n\n  .header {\n    padding: var(--space-one);\n\n    span {\n      font-size: var(--font-size-small);\n      font-weight: var(--font-weight-medium);\n    }\n  }\n  .container {\n    padding: var(--space-one);\n    padding-top: var(--space-zero);\n  }\n\n  .triangle {\n    display: block;\n    position: absolute;\n    right: var(--triangle-position);\n    text-align: left;\n    top: calc(var(--space-slab) * -1);\n    z-index: var(--z-index-one);\n  }\n}\n\nul {\n  margin: 0;\n  list-style: none;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation/conversationBulkActions"},"metadata":{},"sourceType":"module"}