{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport PreChatFields from './PreChatFields.vue';\nimport { getPreChatFields, standardFieldKeys } from 'dashboard/helper/preChat';\nexport default {\n  components: {\n    PreChatFields: PreChatFields\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      preChatFormEnabled: false,\n      preChatMessage: '',\n      preChatFields: []\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'inboxes/getUIFlags',\n    customAttributes: 'attributes/getAttributes'\n  })), {}, {\n    preChatFieldOptions: function preChatFieldOptions() {\n      var preChatFormOptions = this.inbox.pre_chat_form_options;\n      return getPreChatFields({\n        preChatFormOptions: preChatFormOptions,\n        customAttributes: this.customAttributes\n      });\n    }\n  }),\n  watch: {\n    inbox: function inbox() {\n      this.setDefaults();\n    }\n  },\n  mounted: function mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults: function setDefaults() {\n      var preChatFormEnabled = this.inbox.pre_chat_form_enabled;\n      this.preChatFormEnabled = preChatFormEnabled;\n\n      var _ref = this.preChatFieldOptions || {},\n          preChatMessage = _ref.pre_chat_message,\n          preChatFields = _ref.pre_chat_fields;\n\n      this.preChatMessage = preChatMessage;\n      this.preChatFields = preChatFields;\n    },\n    isFieldEditable: function isFieldEditable(item) {\n      return !!standardFieldKeys[item.name] || !item.enabled;\n    },\n    handlePreChatFieldOptions: function handlePreChatFieldOptions(event, type, item) {\n      var _this = this;\n\n      this.preChatFields.forEach(function (field, index) {\n        if (field.name === item.name) {\n          _this.preChatFields[index][type] = !item[type];\n        }\n      });\n    },\n    changePreChatFieldFieldsOrder: function changePreChatFieldFieldsOrder(updatedPreChatFieldOptions) {\n      this.preChatFields = updatedPreChatFieldOptions;\n    },\n    updateInbox: function updateInbox() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var payload;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                payload = {\n                  id: _this2.inbox.id,\n                  formData: false,\n                  channel: {\n                    pre_chat_form_enabled: _this2.preChatFormEnabled,\n                    pre_chat_form_options: {\n                      pre_chat_message: _this2.preChatMessage,\n                      pre_chat_fields: _this2.preChatFields\n                    }\n                  }\n                };\n                _context.next = 4;\n                return _this2.$store.dispatch('inboxes/updateInbox', payload);\n\n              case 4:\n                _this2.showAlert(_this2.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this2.showAlert(_this2.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["Settings.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"settings--content\">\n    <div class=\"pre-chat--title\">\n      {{ $t('INBOX_MGMT.PRE_CHAT_FORM.DESCRIPTION') }}\n    </div>\n    <form @submit.prevent=\"updateInbox\">\n      <label class=\"medium-3 columns\">\n        {{ $t('INBOX_MGMT.PRE_CHAT_FORM.ENABLE.LABEL') }}\n        <select v-model=\"preChatFormEnabled\">\n          <option :value=\"true\">\n            {{ $t('INBOX_MGMT.PRE_CHAT_FORM.ENABLE.OPTIONS.ENABLED') }}\n          </option>\n          <option :value=\"false\">\n            {{ $t('INBOX_MGMT.PRE_CHAT_FORM.ENABLE.OPTIONS.DISABLED') }}\n          </option>\n        </select>\n      </label>\n      <div v-if=\"preChatFormEnabled\">\n        <label class=\"medium-3 columns\">\n          {{ $t('INBOX_MGMT.PRE_CHAT_FORM.PRE_CHAT_MESSAGE.LABEL') }}\n          <textarea\n            v-model.trim=\"preChatMessage\"\n            type=\"text\"\n            :placeholder=\"\n              $t('INBOX_MGMT.PRE_CHAT_FORM.PRE_CHAT_MESSAGE.PLACEHOLDER')\n            \"\n          />\n        </label>\n        <div class=\"medium-8 columns\">\n          <label>{{ $t('INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS') }}</label>\n          <table class=\"table table-striped w-full\">\n            <thead class=\"thead-dark\">\n              <tr>\n                <th scope=\"col\" />\n                <th scope=\"col\" />\n                <th scope=\"col\">\n                  {{ $t('INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS_HEADER.KEY') }}\n                </th>\n                <th scope=\"col\">\n                  {{ $t('INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS_HEADER.TYPE') }}\n                </th>\n                <th scope=\"col\">\n                  {{\n                    $t('INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS_HEADER.REQUIRED')\n                  }}\n                </th>\n                <th scope=\"col\">\n                  {{ $t('INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS_HEADER.LABEL') }}\n                </th>\n                <th scope=\"col\">\n                  {{\n                    $t(\n                      'INBOX_MGMT.PRE_CHAT_FORM.SET_FIELDS_HEADER.PLACE_HOLDER'\n                    )\n                  }}\n                </th>\n              </tr>\n            </thead>\n            <pre-chat-fields\n              :pre-chat-fields=\"preChatFields\"\n              @update=\"handlePreChatFieldOptions\"\n              @drag-end=\"changePreChatFieldFieldsOrder\"\n            />\n          </table>\n        </div>\n      </div>\n      <woot-submit-button\n        :button-text=\"$t('INBOX_MGMT.SETTINGS_POPUP.UPDATE')\"\n        :loading=\"uiFlags.isUpdating\"\n      />\n    </form>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport PreChatFields from './PreChatFields.vue';\nimport { getPreChatFields, standardFieldKeys } from 'dashboard/helper/preChat';\n\nexport default {\n  components: {\n    PreChatFields,\n  },\n  mixins: [alertMixin],\n  props: {\n    inbox: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      preChatFormEnabled: false,\n      preChatMessage: '',\n      preChatFields: [],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'inboxes/getUIFlags',\n      customAttributes: 'attributes/getAttributes',\n    }),\n    preChatFieldOptions() {\n      const { pre_chat_form_options: preChatFormOptions } = this.inbox;\n      return getPreChatFields({\n        preChatFormOptions,\n        customAttributes: this.customAttributes,\n      });\n    },\n  },\n  watch: {\n    inbox() {\n      this.setDefaults();\n    },\n  },\n  mounted() {\n    this.setDefaults();\n  },\n  methods: {\n    setDefaults() {\n      const { pre_chat_form_enabled: preChatFormEnabled } = this.inbox;\n      this.preChatFormEnabled = preChatFormEnabled;\n      const {\n        pre_chat_message: preChatMessage,\n        pre_chat_fields: preChatFields,\n      } = this.preChatFieldOptions || {};\n      this.preChatMessage = preChatMessage;\n      this.preChatFields = preChatFields;\n    },\n    isFieldEditable(item) {\n      return !!standardFieldKeys[item.name] || !item.enabled;\n    },\n    handlePreChatFieldOptions(event, type, item) {\n      this.preChatFields.forEach((field, index) => {\n        if (field.name === item.name) {\n          this.preChatFields[index][type] = !item[type];\n        }\n      });\n    },\n\n    changePreChatFieldFieldsOrder(updatedPreChatFieldOptions) {\n      this.preChatFields = updatedPreChatFieldOptions;\n    },\n\n    async updateInbox() {\n      try {\n        const payload = {\n          id: this.inbox.id,\n          formData: false,\n          channel: {\n            pre_chat_form_enabled: this.preChatFormEnabled,\n            pre_chat_form_options: {\n              pre_chat_message: this.preChatMessage,\n              pre_chat_fields: this.preChatFields,\n            },\n          },\n        };\n        await this.$store.dispatch('inboxes/updateInbox', payload);\n        this.showAlert(this.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n      } catch (error) {\n        this.showAlert(this.$t('INBOX_MGMT.EDIT.API.SUCCESS_MESSAGE'));\n      }\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.settings--content {\n  font-size: var(--font-size-default);\n}\n.pre-chat--title {\n  margin: var(--space-medium) 0 var(--space-slab);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/PreChatForm"},"metadata":{},"sourceType":"module"}