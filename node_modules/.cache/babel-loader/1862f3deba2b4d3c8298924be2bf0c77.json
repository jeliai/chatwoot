{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport types from '../mutation-types';\nimport BulkActionsAPI from '../../api/bulkActions';\nexport var state = {\n  uiFlags: {\n    isUpdating: false\n  }\n};\nexport var getters = {\n  getUIFlags: function getUIFlags(_state) {\n    return _state.uiFlags;\n  }\n};\nexport var actions = {\n  process: function () {\n    var _processAction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var commit;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              commit(types.SET_BULK_ACTIONS_FLAG, {\n                isUpdating: true\n              });\n              _context.prev = 2;\n              _context.next = 5;\n              return BulkActionsAPI.create(payload);\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              throw new Error(_context.t0);\n\n            case 10:\n              _context.prev = 10;\n              commit(types.SET_BULK_ACTIONS_FLAG, {\n                isUpdating: false\n              });\n              return _context.finish(10);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 7, 10, 13]]);\n    }));\n\n    function processAction(_x, _x2) {\n      return _processAction.apply(this, arguments);\n    }\n\n    return processAction;\n  }()\n};\nexport var mutations = _defineProperty({}, types.SET_BULK_ACTIONS_FLAG, function (_state, data) {\n  _state.uiFlags = _objectSpread(_objectSpread({}, _state.uiFlags), data);\n});\nexport default {\n  namespaced: true,\n  actions: actions,\n  state: state,\n  getters: getters,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/bulkActions.js"],"names":["types","BulkActionsAPI","state","uiFlags","isUpdating","getters","getUIFlags","_state","actions","process","payload","commit","SET_BULK_ACTIONS_FLAG","create","Error","processAction","mutations","data","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAO,IAAMC,KAAK,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL;AADU,CAAd;AAMP,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,UADqB,sBACVC,MADU,EACF;AACjB,WAAOA,MAAM,CAACJ,OAAd;AACD;AAHoB,CAAhB;AAMP,OAAO,IAAMK,OAAO,GAAG;AACrBC,EAAAA,OAAO;AAAA,iFAAE,uBAAyCC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,cAAAA,MAA/B,QAA+BA,MAA/B;AACPA,cAAAA,MAAM,CAACX,KAAK,CAACY,qBAAP,EAA8B;AAAER,gBAAAA,UAAU,EAAE;AAAd,eAA9B,CAAN;AADO;AAAA;AAAA,qBAGCH,cAAc,CAACY,MAAf,CAAsBH,OAAtB,CAHD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAKC,IAAII,KAAJ,aALD;;AAAA;AAAA;AAOLH,cAAAA,MAAM,CAACX,KAAK,CAACY,qBAAP,EAA8B;AAAER,gBAAAA,UAAU,EAAE;AAAd,eAA9B,CAAN;AAPK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,aAAiBW,aAAjB;AAAA;AAAA;;AAAA,WAAiBA,aAAjB;AAAA;AADc,CAAhB;AAaP,OAAO,IAAMC,SAAS,uBACnBhB,KAAK,CAACY,qBADa,YACUL,MADV,EACkBU,IADlB,EACwB;AAC1CV,EAAAA,MAAM,CAACJ,OAAP,mCACKI,MAAM,CAACJ,OADZ,GAEKc,IAFL;AAID,CANmB,CAAf;AASP,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbV,EAAAA,OAAO,EAAPA,OAFa;AAGbN,EAAAA,KAAK,EAALA,KAHa;AAIbG,EAAAA,OAAO,EAAPA,OAJa;AAKbW,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import types from '../mutation-types';\nimport BulkActionsAPI from '../../api/bulkActions';\n\nexport const state = {\n  uiFlags: {\n    isUpdating: false,\n  },\n};\n\nexport const getters = {\n  getUIFlags(_state) {\n    return _state.uiFlags;\n  },\n};\n\nexport const actions = {\n  process: async function processAction({ commit }, payload) {\n    commit(types.SET_BULK_ACTIONS_FLAG, { isUpdating: true });\n    try {\n      await BulkActionsAPI.create(payload);\n    } catch (error) {\n      throw new Error(error);\n    } finally {\n      commit(types.SET_BULK_ACTIONS_FLAG, { isUpdating: false });\n    }\n  },\n};\n\nexport const mutations = {\n  [types.SET_BULK_ACTIONS_FLAG](_state, data) {\n    _state.uiFlags = {\n      ..._state.uiFlags,\n      ...data,\n    };\n  },\n};\n\nexport default {\n  namespaced: true,\n  actions,\n  state,\n  getters,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}