{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MenuItem from './menuItem.vue';\nimport MenuItemWithSubmenu from './menuItemWithSubmenu.vue';\nimport wootConstants from 'dashboard/constants.js';\nimport snoozeTimesMixin from 'dashboard/mixins/conversation/snoozeTimesMixin';\nimport { mapGetters } from 'vuex';\nimport AgentLoadingPlaceholder from './agentLoadingPlaceholder.vue';\nexport default {\n  components: {\n    MenuItem: MenuItem,\n    MenuItemWithSubmenu: MenuItemWithSubmenu,\n    AgentLoadingPlaceholder: AgentLoadingPlaceholder\n  },\n  mixins: [snoozeTimesMixin],\n  props: {\n    status: {\n      type: String,\n      default: ''\n    },\n    hasUnreadMessages: {\n      type: Boolean,\n      default: false\n    },\n    inboxId: {\n      type: Number,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      STATUS_TYPE: wootConstants.STATUS_TYPE,\n      unreadOption: {\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.MARK_AS_UNREAD'),\n        icon: 'mail'\n      },\n      statusMenuConfig: [{\n        key: wootConstants.STATUS_TYPE.RESOLVED,\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.RESOLVED'),\n        icon: 'checkmark'\n      }, {\n        key: wootConstants.STATUS_TYPE.PENDING,\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.PENDING'),\n        icon: 'book-clock'\n      }, {\n        key: wootConstants.STATUS_TYPE.OPEN,\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.REOPEN'),\n        icon: 'arrow-redo'\n      }],\n      snoozeMenuConfig: {\n        key: 'snooze',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.TITLE'),\n        icon: 'snooze',\n        options: [{\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.NEXT_REPLY'),\n          key: 'next-reply',\n          snoozedUntil: null\n        }, {\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.TOMORROW'),\n          key: 'tomorrow',\n          snoozedUntil: 'tomorrow'\n        }, {\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.NEXT_WEEK'),\n          key: 'next-week',\n          snoozedUntil: 'nextWeek'\n        }]\n      },\n      labelMenuConfig: {\n        key: 'label',\n        icon: 'tag',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_LABEL')\n      },\n      agentMenuConfig: {\n        key: 'agent',\n        icon: 'person-add',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_AGENT')\n      },\n      teamMenuConfig: {\n        key: 'team',\n        icon: 'people-team-add',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_TEAM')\n      }\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    labels: 'labels/getLabels',\n    teams: 'teams/getTeams',\n    assignableAgentsUiFlags: 'inboxAssignableAgents/getUIFlags'\n  })), {}, {\n    assignableAgents: function assignableAgents() {\n      return [{\n        confirmed: true,\n        name: 'None',\n        id: null,\n        role: 'agent',\n        account_id: 0,\n        email: 'None'\n      }].concat(_toConsumableArray(this.$store.getters['inboxAssignableAgents/getAssignableAgents'](this.inboxId)));\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('inboxAssignableAgents/fetch', [this.inboxId]);\n  },\n  methods: {\n    toggleStatus: function toggleStatus(status, snoozedUntil) {\n      this.$emit('update-conversation', status, snoozedUntil);\n    },\n    snoozeConversation: function snoozeConversation(snoozedUntil) {\n      this.$emit('update-conversation', this.STATUS_TYPE.SNOOZED, this.snoozeTimes[snoozedUntil] || null);\n    },\n    show: function show(key) {\n      // If the conversation status is same as the action, then don't display the option\n      // i.e.: Don't show an option to resolve if the conversation is already resolved.\n      return this.status !== key;\n    },\n    generateMenuLabelConfig: function generateMenuLabelConfig(option) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'text';\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        key: option.id\n      }, type === 'icon' && {\n        icon: option.icon\n      }), type === 'label' && {\n        color: option.color\n      }), type === 'agent' && {\n        thumbnail: option.thumbnail\n      }), type === 'text' && {\n        label: option.label\n      }), type === 'label' && {\n        label: option.title\n      }), type === 'agent' && {\n        label: option.name\n      }), type === 'team' && {\n        label: option.name\n      });\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"menu-container\">\n    <menu-item\n      v-if=\"!hasUnreadMessages\"\n      :option=\"unreadOption\"\n      variant=\"icon\"\n      @click=\"$emit('mark-as-unread')\"\n    />\n    <template v-for=\"option in statusMenuConfig\">\n      <menu-item\n        v-if=\"show(option.key)\"\n        :key=\"option.key\"\n        :option=\"option\"\n        variant=\"icon\"\n        @click=\"toggleStatus(option.key, null)\"\n      />\n    </template>\n    <menu-item-with-submenu :option=\"snoozeMenuConfig\">\n      <menu-item\n        v-for=\"(option, i) in snoozeMenuConfig.options\"\n        :key=\"i\"\n        :option=\"option\"\n        @click=\"snoozeConversation(option.snoozedUntil)\"\n      />\n    </menu-item-with-submenu>\n    <menu-item-with-submenu\n      :option=\"labelMenuConfig\"\n      :sub-menu-available=\"!!labels.length\"\n    >\n      <template>\n        <menu-item\n          v-for=\"label in labels\"\n          :key=\"label.id\"\n          :option=\"generateMenuLabelConfig(label, 'label')\"\n          variant=\"label\"\n          @click=\"$emit('assign-label', label)\"\n        />\n      </template>\n    </menu-item-with-submenu>\n    <menu-item-with-submenu\n      :option=\"agentMenuConfig\"\n      :sub-menu-available=\"!!assignableAgents.length\"\n    >\n      <agent-loading-placeholder v-if=\"assignableAgentsUiFlags.isFetching\" />\n      <template v-else>\n        <menu-item\n          v-for=\"agent in assignableAgents\"\n          :key=\"agent.id\"\n          :option=\"generateMenuLabelConfig(agent, 'agent')\"\n          variant=\"agent\"\n          @click=\"$emit('assign-agent', agent)\"\n        />\n      </template>\n    </menu-item-with-submenu>\n    <menu-item-with-submenu\n      :option=\"teamMenuConfig\"\n      :sub-menu-available=\"!!teams.length\"\n    >\n      <menu-item\n        v-for=\"team in teams\"\n        :key=\"team.id\"\n        :option=\"generateMenuLabelConfig(team, 'team')\"\n        @click=\"$emit('assign-team', team)\"\n      />\n    </menu-item-with-submenu>\n  </div>\n</template>\n\n<script>\nimport MenuItem from './menuItem.vue';\nimport MenuItemWithSubmenu from './menuItemWithSubmenu.vue';\nimport wootConstants from 'dashboard/constants.js';\nimport snoozeTimesMixin from 'dashboard/mixins/conversation/snoozeTimesMixin';\nimport { mapGetters } from 'vuex';\nimport AgentLoadingPlaceholder from './agentLoadingPlaceholder.vue';\nexport default {\n  components: {\n    MenuItem,\n    MenuItemWithSubmenu,\n    AgentLoadingPlaceholder,\n  },\n  mixins: [snoozeTimesMixin],\n  props: {\n    status: {\n      type: String,\n      default: '',\n    },\n    hasUnreadMessages: {\n      type: Boolean,\n      default: false,\n    },\n    inboxId: {\n      type: Number,\n      default: null,\n    },\n  },\n  data() {\n    return {\n      STATUS_TYPE: wootConstants.STATUS_TYPE,\n      unreadOption: {\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.MARK_AS_UNREAD'),\n        icon: 'mail',\n      },\n      statusMenuConfig: [\n        {\n          key: wootConstants.STATUS_TYPE.RESOLVED,\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.RESOLVED'),\n          icon: 'checkmark',\n        },\n        {\n          key: wootConstants.STATUS_TYPE.PENDING,\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.PENDING'),\n          icon: 'book-clock',\n        },\n        {\n          key: wootConstants.STATUS_TYPE.OPEN,\n          label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.REOPEN'),\n          icon: 'arrow-redo',\n        },\n      ],\n      snoozeMenuConfig: {\n        key: 'snooze',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.TITLE'),\n        icon: 'snooze',\n        options: [\n          {\n            label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.NEXT_REPLY'),\n            key: 'next-reply',\n            snoozedUntil: null,\n          },\n          {\n            label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.TOMORROW'),\n            key: 'tomorrow',\n            snoozedUntil: 'tomorrow',\n          },\n          {\n            label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.SNOOZE.NEXT_WEEK'),\n            key: 'next-week',\n            snoozedUntil: 'nextWeek',\n          },\n        ],\n      },\n      labelMenuConfig: {\n        key: 'label',\n        icon: 'tag',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_LABEL'),\n      },\n      agentMenuConfig: {\n        key: 'agent',\n        icon: 'person-add',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_AGENT'),\n      },\n      teamMenuConfig: {\n        key: 'team',\n        icon: 'people-team-add',\n        label: this.$t('CONVERSATION.CARD_CONTEXT_MENU.ASSIGN_TEAM'),\n      },\n    };\n  },\n  computed: {\n    ...mapGetters({\n      labels: 'labels/getLabels',\n      teams: 'teams/getTeams',\n      assignableAgentsUiFlags: 'inboxAssignableAgents/getUIFlags',\n    }),\n    assignableAgents() {\n      return [\n        {\n          confirmed: true,\n          name: 'None',\n          id: null,\n          role: 'agent',\n          account_id: 0,\n          email: 'None',\n        },\n        ...this.$store.getters['inboxAssignableAgents/getAssignableAgents'](\n          this.inboxId\n        ),\n      ];\n    },\n  },\n  mounted() {\n    this.$store.dispatch('inboxAssignableAgents/fetch', [this.inboxId]);\n  },\n  methods: {\n    toggleStatus(status, snoozedUntil) {\n      this.$emit('update-conversation', status, snoozedUntil);\n    },\n    snoozeConversation(snoozedUntil) {\n      this.$emit(\n        'update-conversation',\n        this.STATUS_TYPE.SNOOZED,\n        this.snoozeTimes[snoozedUntil] || null\n      );\n    },\n    show(key) {\n      // If the conversation status is same as the action, then don't display the option\n      // i.e.: Don't show an option to resolve if the conversation is already resolved.\n      return this.status !== key;\n    },\n    generateMenuLabelConfig(option, type = 'text') {\n      return {\n        key: option.id,\n        ...(type === 'icon' && { icon: option.icon }),\n        ...(type === 'label' && { color: option.color }),\n        ...(type === 'agent' && { thumbnail: option.thumbnail }),\n        ...(type === 'text' && { label: option.label }),\n        ...(type === 'label' && { label: option.title }),\n        ...(type === 'agent' && { label: option.name }),\n        ...(type === 'team' && { label: option.name }),\n      };\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.menu-container {\n  padding: var(--space-smaller);\n  background-color: var(--white);\n  box-shadow: var(--shadow-context-menu);\n  border-radius: var(--border-radius-normal);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation/contextMenu"},"metadata":{},"sourceType":"module"}