{"ast":null,"code":"import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport { URLPattern } from 'urlpattern-polyfill';\nexport var isPatternMatchingWithURL = function isPatternMatchingWithURL(urlPattern, url) {\n  var updatedUrlPattern = urlPattern;\n  var locationObj = new URL(url);\n\n  if (updatedUrlPattern.endsWith('/')) {\n    updatedUrlPattern = updatedUrlPattern.slice(0, -1) + '*\\\\?*\\\\#*';\n  }\n\n  if (locationObj.pathname.endsWith('/')) {\n    locationObj.pathname = locationObj.pathname.slice(0, -1);\n  }\n\n  var pattern = new URLPattern(updatedUrlPattern);\n  return pattern.test(locationObj.toString());\n}; // Format all campaigns\n\nexport var formatCampaigns = function formatCampaigns(_ref) {\n  var campaigns = _ref.campaigns;\n  return campaigns.map(function (item) {\n    var _item$trigger_rules, _item$trigger_rules2;\n\n    return {\n      id: item.id,\n      triggerOnlyDuringBusinessHours: item.trigger_only_during_business_hours || false,\n      timeOnPage: item === null || item === void 0 ? void 0 : (_item$trigger_rules = item.trigger_rules) === null || _item$trigger_rules === void 0 ? void 0 : _item$trigger_rules.time_on_page,\n      url: item === null || item === void 0 ? void 0 : (_item$trigger_rules2 = item.trigger_rules) === null || _item$trigger_rules2 === void 0 ? void 0 : _item$trigger_rules2.url\n    };\n  });\n}; // Filter all campaigns based on current URL and business availability time\n\nexport var filterCampaigns = function filterCampaigns(_ref2) {\n  var campaigns = _ref2.campaigns,\n      currentURL = _ref2.currentURL,\n      isInBusinessHours = _ref2.isInBusinessHours;\n  return campaigns.filter(function (campaign) {\n    if (!isPatternMatchingWithURL(campaign.url, currentURL)) {\n      return false;\n    }\n\n    if (campaign.triggerOnlyDuringBusinessHours) {\n      return isInBusinessHours;\n    }\n\n    return true;\n  });\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/helpers/campaignHelper.js"],"names":["URLPattern","isPatternMatchingWithURL","urlPattern","url","updatedUrlPattern","locationObj","URL","endsWith","slice","pathname","pattern","test","toString","formatCampaigns","campaigns","map","item","id","triggerOnlyDuringBusinessHours","trigger_only_during_business_hours","timeOnPage","trigger_rules","time_on_page","filterCampaigns","currentURL","isInBusinessHours","filter","campaign"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,qBAA3B;AAEA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,UAAD,EAAaC,GAAb,EAAqB;AAC3D,MAAIC,iBAAiB,GAAGF,UAAxB;AACA,MAAMG,WAAW,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAApB;;AAEA,MAAIC,iBAAiB,CAACG,QAAlB,CAA2B,GAA3B,CAAJ,EAAqC;AACnCH,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACI,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,IAAiC,WAArD;AACD;;AAED,MAAIH,WAAW,CAACI,QAAZ,CAAqBF,QAArB,CAA8B,GAA9B,CAAJ,EAAwC;AACtCF,IAAAA,WAAW,CAACI,QAAZ,GAAuBJ,WAAW,CAACI,QAAZ,CAAqBD,KAArB,CAA2B,CAA3B,EAA8B,CAAC,CAA/B,CAAvB;AACD;;AAED,MAAME,OAAO,GAAG,IAAIV,UAAJ,CAAeI,iBAAf,CAAhB;AACA,SAAOM,OAAO,CAACC,IAAR,CAAaN,WAAW,CAACO,QAAZ,EAAb,CAAP;AACD,CAdM,C,CAgBP;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAChD,SAAOA,SAAS,CAACC,GAAV,CAAc,UAAAC,IAAI,EAAI;AAAA;;AAC3B,WAAO;AACLC,MAAAA,EAAE,EAAED,IAAI,CAACC,EADJ;AAELC,MAAAA,8BAA8B,EAC5BF,IAAI,CAACG,kCAAL,IAA2C,KAHxC;AAILC,MAAAA,UAAU,EAAEJ,IAAF,aAAEA,IAAF,8CAAEA,IAAI,CAAEK,aAAR,wDAAE,oBAAqBC,YAJ5B;AAKLnB,MAAAA,GAAG,EAAEa,IAAF,aAAEA,IAAF,+CAAEA,IAAI,CAAEK,aAAR,yDAAE,qBAAqBlB;AALrB,KAAP;AAOD,GARM,CAAP;AASD,CAVM,C,CAYP;;AACA,OAAO,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,QAIzB;AAAA,MAHJT,SAGI,SAHJA,SAGI;AAAA,MAFJU,UAEI,SAFJA,UAEI;AAAA,MADJC,iBACI,SADJA,iBACI;AACJ,SAAOX,SAAS,CAACY,MAAV,CAAiB,UAAAC,QAAQ,EAAI;AAClC,QAAI,CAAC1B,wBAAwB,CAAC0B,QAAQ,CAACxB,GAAV,EAAeqB,UAAf,CAA7B,EAAyD;AACvD,aAAO,KAAP;AACD;;AACD,QAAIG,QAAQ,CAACT,8BAAb,EAA6C;AAC3C,aAAOO,iBAAP;AACD;;AACD,WAAO,IAAP;AACD,GARM,CAAP;AASD,CAdM","sourcesContent":["import { URLPattern } from 'urlpattern-polyfill';\n\nexport const isPatternMatchingWithURL = (urlPattern, url) => {\n  let updatedUrlPattern = urlPattern;\n  const locationObj = new URL(url);\n\n  if (updatedUrlPattern.endsWith('/')) {\n    updatedUrlPattern = updatedUrlPattern.slice(0, -1) + '*\\\\?*\\\\#*';\n  }\n\n  if (locationObj.pathname.endsWith('/')) {\n    locationObj.pathname = locationObj.pathname.slice(0, -1);\n  }\n\n  const pattern = new URLPattern(updatedUrlPattern);\n  return pattern.test(locationObj.toString());\n};\n\n// Format all campaigns\nexport const formatCampaigns = ({ campaigns }) => {\n  return campaigns.map(item => {\n    return {\n      id: item.id,\n      triggerOnlyDuringBusinessHours:\n        item.trigger_only_during_business_hours || false,\n      timeOnPage: item?.trigger_rules?.time_on_page,\n      url: item?.trigger_rules?.url,\n    };\n  });\n};\n\n// Filter all campaigns based on current URL and business availability time\nexport const filterCampaigns = ({\n  campaigns,\n  currentURL,\n  isInBusinessHours,\n}) => {\n  return campaigns.filter(campaign => {\n    if (!isPatternMatchingWithURL(campaign.url, currentURL)) {\n      return false;\n    }\n    if (campaign.triggerOnlyDuringBusinessHours) {\n      return isInBusinessHours;\n    }\n    return true;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}