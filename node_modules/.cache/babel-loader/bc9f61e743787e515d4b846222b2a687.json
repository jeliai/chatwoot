{"ast":null,"code":"\"use strict\";\n\nvar isodate = require(\"@segment/isodate\");\n\nvar milliseconds = require(\"./milliseconds\");\n\nvar seconds = require(\"./seconds\");\n\nvar objProto = Object.prototype;\nvar toStr = objProto.toString;\n\nfunction isDate(value) {\n  return toStr.call(value) === \"[object Date]\";\n}\n\nfunction isNumber(value) {\n  return toStr.call(value) === \"[object Number]\";\n}\n/**\n * Returns a new Javascript Date object, allowing a variety of extra input types\n * over the native Date constructor.\n *\n * @param {Date|string|number} val\n */\n\n\nmodule.exports = function newDate(val) {\n  if (isDate(val)) return val;\n  if (isNumber(val)) return new Date(toMs(val)); // date strings\n\n  if (isodate.is(val)) {\n    return isodate.parse(val);\n  }\n\n  if (milliseconds.is(val)) {\n    return milliseconds.parse(val);\n  }\n\n  if (seconds.is(val)) {\n    return seconds.parse(val);\n  } // fallback to Date.parse\n\n\n  return new Date(val);\n};\n/**\n * If the number passed val is seconds from the epoch, turn it into milliseconds.\n * Milliseconds would be greater than 31557600000 (December 31, 1970).\n *\n * @param {number} num\n */\n\n\nfunction toMs(num) {\n  if (num < 31557600000) return num * 1000;\n  return num;\n}","map":null,"metadata":{},"sourceType":"module"}