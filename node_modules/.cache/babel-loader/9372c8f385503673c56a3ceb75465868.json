{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, minLength, email } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\nexport default {\n  props: {\n    onClose: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      agentName: '',\n      agentEmail: '',\n      agentType: 'agent',\n      vertical: 'bottom',\n      horizontal: 'center',\n      roles: [{\n        name: 'administrator',\n        label: this.$t('AGENT_MGMT.AGENT_TYPES.ADMINISTRATOR')\n      }, {\n        name: 'agent',\n        label: this.$t('AGENT_MGMT.AGENT_TYPES.AGENT')\n      }],\n      show: true\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'agents/getUIFlags'\n  })),\n  validations: {\n    agentName: {\n      required: required,\n      minLength: minLength(1)\n    },\n    agentEmail: {\n      required: required,\n      email: email\n    },\n    agentType: {\n      required: required\n    }\n  },\n  methods: {\n    showAlert: function showAlert(message) {\n      bus.$emit('newToastMessage', message);\n    },\n    addAgent: function addAgent() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _error$response, _error$response$data, _error$response$data$, errorResponse, errorMessage;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('agents/create', {\n                  name: _this.agentName,\n                  email: _this.agentEmail,\n                  role: _this.agentType\n                });\n\n              case 3:\n                _this.showAlert(_this.$t('AGENT_MGMT.ADD.API.SUCCESS_MESSAGE'));\n\n                _this.onClose();\n\n                _context.next = 17;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                _error$response = _context.t0.response;\n                _error$response = _error$response === void 0 ? {} : _error$response;\n                _error$response$data = _error$response.data;\n                _error$response$data = _error$response$data === void 0 ? {} : _error$response$data;\n                _error$response$data$ = _error$response$data.error, errorResponse = _error$response$data$ === void 0 ? '' : _error$response$data$;\n                errorMessage = '';\n\n                if (_context.t0.response.status === 422) {\n                  errorMessage = _this.$t('AGENT_MGMT.ADD.API.EXIST_MESSAGE');\n                } else {\n                  errorMessage = _this.$t('AGENT_MGMT.ADD.API.ERROR_MESSAGE');\n                }\n\n                _this.showAlert(errorResponse || errorMessage);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["AddAgent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,SAAA,QAAA,EAAA,SAAA,EAAA,KAAA,QAAA,0BAAA;AACA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CAAA;AAFA;AADA,GADA;AAOA,EAAA,IAPA,kBAOA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,SAAA,EAAA,OAHA;AAIA,MAAA,QAAA,EAAA,QAJA;AAKA,MAAA,UAAA,EAAA,QALA;AAMA,MAAA,KAAA,EAAA,CACA;AACA,QAAA,IAAA,EAAA,eADA;AAEA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,sCAAA;AAFA,OADA,EAKA;AACA,QAAA,IAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA,KAAA,EAAA,CAAA,8BAAA;AAFA,OALA,CANA;AAgBA,MAAA,IAAA,EAAA;AAhBA,KAAA;AAkBA,GA1BA;AA2BA,EAAA,QAAA,oBACA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA;AADA,GAAA,CADA,CA3BA;AAgCA,EAAA,WAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAFA,KADA;AAKA,IAAA,UAAA,EAAA;AACA,MAAA,QAAA,EAAA,QADA;AAEA,MAAA,KAAA,EAAA;AAFA,KALA;AASA,IAAA,SAAA,EAAA;AACA,MAAA,QAAA,EAAA;AADA;AATA,GAhCA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,OADA,EACA;AACA,MAAA,GAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,OAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,eAAA,EAAA;AACA,kBAAA,IAAA,EAAA,KAAA,CAAA,SADA;AAEA,kBAAA,KAAA,EAAA,KAAA,CAAA,UAFA;AAGA,kBAAA,IAAA,EAAA,KAAA,CAAA;AAHA,iBAAA,CAFA;;AAAA;AAOA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oCAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,OAAA;;AARA;AAAA;;AAAA;AAAA;AAAA;AAAA,8CAWA,QAXA;AAUA,+DACA,EADA;AAVA,uDAWA,IAXA;AAUA,yEACA,EADA;AAVA,6DAWA,KAXA,EAWA,aAXA,sCAWA,EAXA;AAaA,gBAAA,YAbA,GAaA,EAbA;;AAcA,oBAAA,YAAA,QAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,kBAAA,YAAA,GAAA,KAAA,CAAA,EAAA,CAAA,kCAAA,CAAA;AACA,iBAFA,MAEA;AACA,kBAAA,YAAA,GAAA,KAAA,CAAA,EAAA,CAAA,kCAAA,CAAA;AACA;;AACA,gBAAA,KAAA,CAAA,SAAA,CAAA,aAAA,IAAA,YAAA;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAzBA;AA9CA,CAAA","sourcesContent":["<template>\n  <woot-modal :show.sync=\"show\" :on-close=\"onClose\">\n    <div class=\"column content-box\">\n      <woot-modal-header\n        :header-title=\"$t('AGENT_MGMT.ADD.TITLE')\"\n        :header-content=\"$t('AGENT_MGMT.ADD.DESC')\"\n      />\n\n      <form class=\"row\" @submit.prevent=\"addAgent()\">\n        <div class=\"medium-12 columns\">\n          <label :class=\"{ error: $v.agentName.$error }\">\n            {{ $t('AGENT_MGMT.ADD.FORM.NAME.LABEL') }}\n            <input\n              v-model.trim=\"agentName\"\n              type=\"text\"\n              :placeholder=\"$t('AGENT_MGMT.ADD.FORM.NAME.PLACEHOLDER')\"\n              @input=\"$v.agentName.$touch\"\n            />\n          </label>\n        </div>\n        <div class=\"medium-12 columns\">\n          <label :class=\"{ error: $v.agentType.$error }\">\n            {{ $t('AGENT_MGMT.ADD.FORM.AGENT_TYPE.LABEL') }}\n            <select v-model=\"agentType\">\n              <option v-for=\"role in roles\" :key=\"role.name\" :value=\"role.name\">\n                {{ role.label }}\n              </option>\n            </select>\n            <span v-if=\"$v.agentType.$error\" class=\"message\">\n              {{ $t('AGENT_MGMT.ADD.FORM.AGENT_TYPE.ERROR') }}\n            </span>\n          </label>\n        </div>\n        <div class=\"medium-12 columns\">\n          <label :class=\"{ error: $v.agentEmail.$error }\">\n            {{ $t('AGENT_MGMT.ADD.FORM.EMAIL.LABEL') }}\n            <input\n              v-model.trim=\"agentEmail\"\n              type=\"text\"\n              :placeholder=\"$t('AGENT_MGMT.ADD.FORM.EMAIL.PLACEHOLDER')\"\n              @input=\"$v.agentEmail.$touch\"\n            />\n          </label>\n        </div>\n        <div class=\"modal-footer\">\n          <div class=\"medium-12 columns\">\n            <woot-submit-button\n              :disabled=\"\n                $v.agentEmail.$invalid ||\n                  $v.agentName.$invalid ||\n                  uiFlags.isCreating\n              \"\n              :button-text=\"$t('AGENT_MGMT.ADD.FORM.SUBMIT')\"\n              :loading=\"uiFlags.isCreating\"\n            />\n            <button class=\"button clear\" @click.prevent=\"onClose\">\n              {{ $t('AGENT_MGMT.ADD.CANCEL_BUTTON_TEXT') }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </woot-modal>\n</template>\n\n<script>\nimport { required, minLength, email } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\n\nexport default {\n  props: {\n    onClose: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      agentName: '',\n      agentEmail: '',\n      agentType: 'agent',\n      vertical: 'bottom',\n      horizontal: 'center',\n      roles: [\n        {\n          name: 'administrator',\n          label: this.$t('AGENT_MGMT.AGENT_TYPES.ADMINISTRATOR'),\n        },\n        {\n          name: 'agent',\n          label: this.$t('AGENT_MGMT.AGENT_TYPES.AGENT'),\n        },\n      ],\n      show: true,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      uiFlags: 'agents/getUIFlags',\n    }),\n  },\n  validations: {\n    agentName: {\n      required,\n      minLength: minLength(1),\n    },\n    agentEmail: {\n      required,\n      email,\n    },\n    agentType: {\n      required,\n    },\n  },\n\n  methods: {\n    showAlert(message) {\n      bus.$emit('newToastMessage', message);\n    },\n    async addAgent() {\n      try {\n        await this.$store.dispatch('agents/create', {\n          name: this.agentName,\n          email: this.agentEmail,\n          role: this.agentType,\n        });\n        this.showAlert(this.$t('AGENT_MGMT.ADD.API.SUCCESS_MESSAGE'));\n        this.onClose();\n      } catch (error) {\n        const {\n          response: { data: { error: errorResponse = '' } = {} } = {},\n        } = error;\n        let errorMessage = '';\n        if (error.response.status === 422) {\n          errorMessage = this.$t('AGENT_MGMT.ADD.API.EXIST_MESSAGE');\n        } else {\n          errorMessage = this.$t('AGENT_MGMT.ADD.API.ERROR_MESSAGE');\n        }\n        this.showAlert(errorResponse || errorMessage);\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/agents"},"metadata":{},"sourceType":"module"}