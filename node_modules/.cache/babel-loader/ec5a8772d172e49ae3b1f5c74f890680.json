{"ast":null,"code":"exports.sync = function (store, router, options) {\n  var moduleName = (options || {}).moduleName || 'route';\n  store.registerModule(moduleName, {\n    state: cloneRoute(router.currentRoute),\n    mutations: {\n      'router/ROUTE_CHANGED': function routerROUTE_CHANGED(state, transition) {\n        store.state[moduleName] = cloneRoute(transition.to, transition.from);\n      }\n    }\n  });\n  var isTimeTraveling = false;\n  var currentPath; // sync router on store change\n\n  store.watch(function (state) {\n    return state[moduleName];\n  }, function (route) {\n    if (route.fullPath === currentPath) {\n      return;\n    }\n\n    isTimeTraveling = true;\n    var methodToUse = currentPath == null ? 'replace' : 'push';\n    currentPath = route.fullPath;\n    router[methodToUse](route);\n  }, {\n    sync: true\n  }); // sync store on router navigation\n\n  router.afterEach(function (to, from) {\n    if (isTimeTraveling) {\n      isTimeTraveling = false;\n      return;\n    }\n\n    currentPath = to.fullPath;\n    store.commit('router/ROUTE_CHANGED', {\n      to: to,\n      from: from\n    });\n  });\n};\n\nfunction cloneRoute(to, from) {\n  var clone = {\n    name: to.name,\n    path: to.path,\n    hash: to.hash,\n    query: to.query,\n    params: to.params,\n    fullPath: to.fullPath,\n    meta: to.meta\n  };\n\n  if (from) {\n    clone.from = cloneRoute(from);\n  }\n\n  return Object.freeze(clone);\n}","map":null,"metadata":{},"sourceType":"module"}