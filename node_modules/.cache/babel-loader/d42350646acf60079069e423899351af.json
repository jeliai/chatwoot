{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\nimport { convertToAttributeSlug } from 'dashboard/helper/commons.js';\nimport { ATTRIBUTE_MODELS, ATTRIBUTE_TYPES } from './constants';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  mixins: [alertMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      displayName: '',\n      description: '',\n      attributeModel: 0,\n      attributeType: 0,\n      attributeKey: '',\n      models: ATTRIBUTE_MODELS,\n      types: ATTRIBUTE_TYPES,\n      values: [],\n      options: [],\n      show: true,\n      isTouched: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    uiFlags: 'getUIFlags'\n  })), {}, {\n    isMultiselectInvalid: function isMultiselectInvalid() {\n      return this.isTouched && this.values.length === 0;\n    },\n    isTagInputInvalid: function isTagInputInvalid() {\n      return this.isAttributeTypeList && this.values.length === 0;\n    },\n    attributeListValues: function attributeListValues() {\n      return this.values.map(function (item) {\n        return item.name;\n      });\n    },\n    isButtonDisabled: function isButtonDisabled() {\n      return this.$v.displayName.$invalid || this.$v.description.$invalid || this.uiFlags.isCreating || this.isTagInputInvalid;\n    },\n    keyErrorMessage: function keyErrorMessage() {\n      if (!this.$v.attributeKey.isKey) {\n        return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.IN_VALID');\n      }\n\n      return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.ERROR');\n    },\n    isAttributeTypeList: function isAttributeTypeList() {\n      return this.attributeType === 6;\n    }\n  }),\n  validations: {\n    displayName: {\n      required: required,\n      minLength: minLength(1)\n    },\n    description: {\n      required: required\n    },\n    attributeModel: {\n      required: required\n    },\n    attributeType: {\n      required: required\n    },\n    attributeKey: {\n      required: required,\n      isKey: function isKey(value) {\n        return !(value.indexOf(' ') >= 0);\n      }\n    }\n  },\n  methods: {\n    addTagValue: function addTagValue(tagValue) {\n      var tag = {\n        name: tagValue\n      };\n      this.values.push(tag);\n      this.$refs.tagInput.$el.focus();\n    },\n    onTouch: function onTouch() {\n      this.isTouched = true;\n    },\n    onDisplayNameChange: function onDisplayNameChange() {\n      this.attributeKey = convertToAttributeSlug(this.displayName);\n    },\n    addAttributes: function addAttributes() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var errorMessage;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.$v.$touch();\n\n                if (!_this.$v.$invalid) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.$store.dispatch('attributes/create', {\n                  attribute_display_name: _this.displayName,\n                  attribute_description: _this.description,\n                  attribute_model: _this.attributeModel,\n                  attribute_display_type: _this.attributeType,\n                  attribute_key: _this.attributeKey,\n                  attribute_values: _this.attributeListValues\n                });\n\n              case 6:\n                _this.alertMessage = _this.$t('ATTRIBUTES_MGMT.ADD.API.SUCCESS_MESSAGE');\n\n                _this.onClose();\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                errorMessage = _context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message;\n                _this.alertMessage = errorMessage || _this.$t('ATTRIBUTES_MGMT.ADD.API.ERROR_MESSAGE');\n\n              case 14:\n                _context.prev = 14;\n\n                _this.showAlert(_this.alertMessage);\n\n                return _context.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10, 14, 17]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["AddAttribute.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <woot-modal :show.sync=\"show\" :on-close=\"onClose\">\n    <div class=\"column content-box\">\n      <woot-modal-header :header-title=\"$t('ATTRIBUTES_MGMT.ADD.TITLE')\" />\n\n      <form class=\"row\" @submit.prevent=\"addAttributes\">\n        <div class=\"medium-12 columns\">\n          <label :class=\"{ error: $v.attributeModel.$error }\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.MODEL.LABEL') }}\n            <select v-model=\"attributeModel\">\n              <option v-for=\"model in models\" :key=\"model.id\" :value=\"model.id\">\n                {{ model.option }}\n              </option>\n            </select>\n            <span v-if=\"$v.attributeModel.$error\" class=\"message\">\n              {{ $t('ATTRIBUTES_MGMT.ADD.FORM.MODEL.ERROR') }}\n            </span>\n          </label>\n          <woot-input\n            v-model=\"displayName\"\n            :label=\"$t('ATTRIBUTES_MGMT.ADD.FORM.NAME.LABEL')\"\n            type=\"text\"\n            :class=\"{ error: $v.displayName.$error }\"\n            :error=\"\n              $v.displayName.$error\n                ? $t('ATTRIBUTES_MGMT.ADD.FORM.NAME.ERROR')\n                : ''\n            \"\n            :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.NAME.PLACEHOLDER')\"\n            @input=\"onDisplayNameChange\"\n            @blur=\"$v.displayName.$touch\"\n          />\n          <woot-input\n            v-model=\"attributeKey\"\n            :label=\"$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.LABEL')\"\n            type=\"text\"\n            :class=\"{ error: $v.attributeKey.$error }\"\n            :error=\"$v.attributeKey.$error ? keyErrorMessage : ''\"\n            :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.PLACEHOLDER')\"\n            @blur=\"$v.attributeKey.$touch\"\n          />\n          <label :class=\"{ error: $v.description.$error }\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.DESC.LABEL') }}\n            <textarea\n              v-model=\"description\"\n              rows=\"3\"\n              type=\"text\"\n              :placeholder=\"$t('ATTRIBUTES_MGMT.ADD.FORM.DESC.PLACEHOLDER')\"\n              @blur=\"$v.description.$touch\"\n            />\n            <span v-if=\"$v.description.$error\" class=\"message\">\n              {{ $t('ATTRIBUTES_MGMT.ADD.FORM.DESC.ERROR') }}\n            </span>\n          </label>\n          <label :class=\"{ error: $v.attributeType.$error }\">\n            {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LABEL') }}\n            <select v-model=\"attributeType\">\n              <option v-for=\"type in types\" :key=\"type.id\" :value=\"type.id\">\n                {{ type.option }}\n              </option>\n            </select>\n            <span v-if=\"$v.attributeType.$error\" class=\"message\">\n              {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.ERROR') }}\n            </span>\n          </label>\n          <div v-if=\"isAttributeTypeList\" class=\"multiselect--wrap\">\n            <label>\n              {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LIST.LABEL') }}\n            </label>\n            <multiselect\n              ref=\"tagInput\"\n              v-model=\"values\"\n              :placeholder=\"\n                $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LIST.PLACEHOLDER')\n              \"\n              label=\"name\"\n              track-by=\"name\"\n              :class=\"{ invalid: isMultiselectInvalid }\"\n              :options=\"options\"\n              :multiple=\"true\"\n              :taggable=\"true\"\n              @close=\"onTouch\"\n              @tag=\"addTagValue\"\n            />\n            <label v-show=\"isMultiselectInvalid\" class=\"error-message\">\n              {{ $t('ATTRIBUTES_MGMT.ADD.FORM.TYPE.LIST.ERROR') }}\n            </label>\n          </div>\n          <div class=\"modal-footer\">\n            <woot-submit-button\n              :disabled=\"isButtonDisabled\"\n              :button-text=\"$t('ATTRIBUTES_MGMT.ADD.SUBMIT')\"\n            />\n            <button class=\"button clear\" @click.prevent=\"onClose\">\n              {{ $t('ATTRIBUTES_MGMT.ADD.CANCEL_BUTTON_TEXT') }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </woot-modal>\n</template>\n\n<script>\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport { mapGetters } from 'vuex';\nimport { convertToAttributeSlug } from 'dashboard/helper/commons.js';\nimport { ATTRIBUTE_MODELS, ATTRIBUTE_TYPES } from './constants';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nexport default {\n  mixins: [alertMixin],\n  props: {\n    onClose: {\n      type: Function,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      displayName: '',\n      description: '',\n      attributeModel: 0,\n      attributeType: 0,\n      attributeKey: '',\n      models: ATTRIBUTE_MODELS,\n      types: ATTRIBUTE_TYPES,\n      values: [],\n      options: [],\n      show: true,\n      isTouched: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      uiFlags: 'getUIFlags',\n    }),\n    isMultiselectInvalid() {\n      return this.isTouched && this.values.length === 0;\n    },\n    isTagInputInvalid() {\n      return this.isAttributeTypeList && this.values.length === 0;\n    },\n    attributeListValues() {\n      return this.values.map(item => item.name);\n    },\n    isButtonDisabled() {\n      return (\n        this.$v.displayName.$invalid ||\n        this.$v.description.$invalid ||\n        this.uiFlags.isCreating ||\n        this.isTagInputInvalid\n      );\n    },\n    keyErrorMessage() {\n      if (!this.$v.attributeKey.isKey) {\n        return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.IN_VALID');\n      }\n      return this.$t('ATTRIBUTES_MGMT.ADD.FORM.KEY.ERROR');\n    },\n    isAttributeTypeList() {\n      return this.attributeType === 6;\n    },\n  },\n\n  validations: {\n    displayName: {\n      required,\n      minLength: minLength(1),\n    },\n    description: {\n      required,\n    },\n    attributeModel: {\n      required,\n    },\n    attributeType: {\n      required,\n    },\n    attributeKey: {\n      required,\n      isKey(value) {\n        return !(value.indexOf(' ') >= 0);\n      },\n    },\n  },\n\n  methods: {\n    addTagValue(tagValue) {\n      const tag = {\n        name: tagValue,\n      };\n      this.values.push(tag);\n      this.$refs.tagInput.$el.focus();\n    },\n    onTouch() {\n      this.isTouched = true;\n    },\n    onDisplayNameChange() {\n      this.attributeKey = convertToAttributeSlug(this.displayName);\n    },\n    async addAttributes() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n      try {\n        await this.$store.dispatch('attributes/create', {\n          attribute_display_name: this.displayName,\n          attribute_description: this.description,\n          attribute_model: this.attributeModel,\n          attribute_display_type: this.attributeType,\n          attribute_key: this.attributeKey,\n          attribute_values: this.attributeListValues,\n        });\n        this.alertMessage = this.$t('ATTRIBUTES_MGMT.ADD.API.SUCCESS_MESSAGE');\n        this.onClose();\n      } catch (error) {\n        const errorMessage = error?.message;\n        this.alertMessage =\n          errorMessage || this.$t('ATTRIBUTES_MGMT.ADD.API.ERROR_MESSAGE');\n      } finally {\n        this.showAlert(this.alertMessage);\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.key-value {\n  padding: 0 var(--space-small) var(--space-small) 0;\n  font-family: monospace;\n}\n.multiselect--wrap {\n  margin-bottom: var(--space-normal);\n  .error-message {\n    color: var(--r-400);\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-normal);\n  }\n  .invalid {\n    ::v-deep {\n      .multiselect__tags {\n        border: 1px solid var(--r-400);\n      }\n    }\n  }\n}\n::v-deep {\n  .multiselect {\n    margin-bottom: 0;\n  }\n  .multiselect__content-wrapper {\n    display: none;\n  }\n  .multiselect--active .multiselect__tags {\n    border-radius: var(--border-radius-normal);\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/attributes"},"metadata":{},"sourceType":"module"}