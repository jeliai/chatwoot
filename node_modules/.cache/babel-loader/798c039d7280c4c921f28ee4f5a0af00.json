{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport AddAutomationRule from './AddAutomationRule.vue';\nimport EditAutomationRule from './EditAutomationRule.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport timeMixin from 'dashboard/mixins/time';\nexport default {\n  components: {\n    AddAutomationRule: AddAutomationRule,\n    EditAutomationRule: EditAutomationRule\n  },\n  mixins: [alertMixin, timeMixin],\n  data: function data() {\n    return {\n      loading: {},\n      showAddPopup: false,\n      showEditPopup: false,\n      showDeleteConfirmationPopup: false,\n      selectedResponse: {},\n      toggleModalTitle: this.$t('AUTOMATION.TOGGLE.ACTIVATION_TITLE'),\n      toggleModalDescription: this.$t('AUTOMATION.TOGGLE.ACTIVATION_DESCRIPTION')\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    records: ['automations/getAutomations'],\n    uiFlags: 'automations/getUIFlags'\n  })), {}, {\n    // Delete Modal\n    deleteConfirmText: function deleteConfirmText() {\n      return \"\".concat(this.$t('AUTOMATION.DELETE.CONFIRM.YES'), \" \").concat(this.selectedResponse.name);\n    },\n    deleteRejectText: function deleteRejectText() {\n      return \"\".concat(this.$t('AUTOMATION.DELETE.CONFIRM.NO'), \" \").concat(this.selectedResponse.name);\n    },\n    deleteMessage: function deleteMessage() {\n      return \" \".concat(this.selectedResponse.name, \"?\");\n    }\n  }),\n  mounted: function mounted() {\n    this.$store.dispatch('inboxes/get');\n    this.$store.dispatch('agents/get');\n    this.$store.dispatch('contacts/get');\n    this.$store.dispatch('teams/get');\n    this.$store.dispatch('labels/get');\n    this.$store.dispatch('campaigns/get');\n    this.$store.dispatch('automations/get');\n  },\n  methods: {\n    openAddPopup: function openAddPopup() {\n      this.showAddPopup = true;\n    },\n    hideAddPopup: function hideAddPopup() {\n      this.showAddPopup = false;\n    },\n    openEditPopup: function openEditPopup(response) {\n      this.selectedResponse = response;\n      this.showEditPopup = true;\n    },\n    hideEditPopup: function hideEditPopup() {\n      this.showEditPopup = false;\n    },\n    openDeletePopup: function openDeletePopup(response) {\n      this.showDeleteConfirmationPopup = true;\n      this.selectedResponse = response;\n    },\n    closeDeletePopup: function closeDeletePopup() {\n      this.showDeleteConfirmationPopup = false;\n    },\n    confirmDeletion: function confirmDeletion() {\n      this.loading[this.selectedResponse.id] = true;\n      this.closeDeletePopup();\n      this.deleteAutomation(this.selectedResponse.id);\n    },\n    deleteAutomation: function deleteAutomation(id) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch('automations/delete', id);\n\n              case 3:\n                _this.showAlert(_this.$t('AUTOMATION.DELETE.API.SUCCESS_MESSAGE'));\n\n                _this.loading[_this.selectedResponse.id] = false;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.showAlert(_this.$t('AUTOMATION.DELETE.API.ERROR_MESSAGE'));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    cloneAutomation: function cloneAutomation(id) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _this2.$store.dispatch('automations/clone', id);\n\n              case 3:\n                _this2.showAlert(_this2.$t('AUTOMATION.CLONE.API.SUCCESS_MESSAGE'));\n\n                _this2.$store.dispatch('automations/get');\n\n                _this2.loading[_this2.selectedResponse.id] = false;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                _this2.showAlert(_this2.$t('AUTOMATION.CLONE.API.ERROR_MESSAGE'));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8]]);\n      }))();\n    },\n    submitAutomation: function submitAutomation(payload, mode) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var action, successMessage, errorMessage;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                action = mode === 'edit' ? 'automations/update' : 'automations/create';\n                successMessage = mode === 'edit' ? _this3.$t('AUTOMATION.EDIT.API.SUCCESS_MESSAGE') : _this3.$t('AUTOMATION.ADD.API.SUCCESS_MESSAGE');\n                _context3.next = 5;\n                return _this3.$store.dispatch(action, payload);\n\n              case 5:\n                _this3.showAlert(successMessage);\n\n                _this3.hideAddPopup();\n\n                _this3.hideEditPopup();\n\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](0);\n                errorMessage = mode === 'edit' ? _this3.$t('AUTOMATION.EDIT.API.ERROR_MESSAGE') : _this3.$t('AUTOMATION.ADD.API.ERROR_MESSAGE');\n\n                _this3.showAlert(errorMessage);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 10]]);\n      }))();\n    },\n    toggleAutomation: function toggleAutomation(automation, status) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var ok, message;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _this4.toggleModalTitle = status ? _this4.$t('AUTOMATION.TOGGLE.DEACTIVATION_TITLE') : _this4.$t('AUTOMATION.TOGGLE.ACTIVATION_TITLE');\n                _this4.toggleModalDescription = status ? _this4.$t('AUTOMATION.TOGGLE.DEACTIVATION_DESCRIPTION', {\n                  automationName: automation.name\n                }) : _this4.$t('AUTOMATION.TOGGLE.ACTIVATION_DESCRIPTION', {\n                  automationName: automation.name\n                }); // Check if user confirms to proceed\n\n                _context4.next = 5;\n                return _this4.$refs.confirmDialog.showConfirmation();\n\n              case 5:\n                ok = _context4.sent;\n\n                if (!ok) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 9;\n                return _this4.$store.dispatch('automations/update', {\n                  id: automation.id,\n                  active: !status\n                });\n\n              case 9:\n                message = status ? _this4.$t('AUTOMATION.TOGGLE.DEACTIVATION_SUCCESFUL') : _this4.$t('AUTOMATION.TOGGLE.ACTIVATION_SUCCESFUL');\n\n                _this4.showAlert(message);\n\n              case 11:\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                _this4.showAlert(_this4.$t('AUTOMATION.EDIT.API.ERROR_MESSAGE'));\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 13]]);\n      }))();\n    },\n    readableTime: function readableTime(date) {\n      return this.messageStamp(new Date(date), 'LLL d, h:mm a');\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <woot-button\n      color-scheme=\"success\"\n      class-names=\"button--fixed-right-top\"\n      icon=\"add-circle\"\n      @click=\"openAddPopup()\"\n    >\n      {{ $t('AUTOMATION.HEADER_BTN_TXT') }}\n    </woot-button>\n    <div class=\"row\">\n      <div class=\"small-8 columns with-right-space\">\n        <p\n          v-if=\"!uiFlags.isFetching && !records.length\"\n          class=\"no-items-error-message\"\n        >\n          {{ $t('AUTOMATION.LIST.404') }}\n        </p>\n        <woot-loading-state\n          v-if=\"uiFlags.isFetching\"\n          :message=\"$t('AUTOMATION.LOADING')\"\n        />\n        <table v-if=\"!uiFlags.isFetching && records.length\" class=\"woot-table\">\n          <thead>\n            <th\n              v-for=\"thHeader in $t('AUTOMATION.LIST.TABLE_HEADER')\"\n              :key=\"thHeader\"\n            >\n              {{ thHeader }}\n            </th>\n          </thead>\n          <tbody>\n            <tr v-for=\"(automation, index) in records\" :key=\"index\">\n              <td>{{ automation.name }}</td>\n              <td>{{ automation.description }}</td>\n              <td>\n                <woot-switch\n                  :value=\"automation.active\"\n                  @input=\"toggleAutomation(automation, automation.active)\"\n                />\n              </td>\n              <td>{{ readableTime(automation.created_on) }}</td>\n              <td class=\"button-wrapper\">\n                <woot-button\n                  v-tooltip.top=\"$t('AUTOMATION.FORM.EDIT')\"\n                  variant=\"smooth\"\n                  size=\"tiny\"\n                  color-scheme=\"secondary\"\n                  class-names=\"grey-btn\"\n                  :is-loading=\"loading[automation.id]\"\n                  icon=\"edit\"\n                  @click=\"openEditPopup(automation)\"\n                />\n                <woot-button\n                  v-tooltip.top=\"$t('AUTOMATION.CLONE.TOOLTIP')\"\n                  variant=\"smooth\"\n                  size=\"tiny\"\n                  color-scheme=\"primary\"\n                  class-names=\"grey-btn\"\n                  :is-loading=\"loading[automation.id]\"\n                  icon=\"copy\"\n                  @click=\"cloneAutomation(automation.id)\"\n                />\n                <woot-button\n                  v-tooltip.top=\"$t('AUTOMATION.FORM.DELETE')\"\n                  variant=\"smooth\"\n                  color-scheme=\"alert\"\n                  size=\"tiny\"\n                  icon=\"dismiss-circle\"\n                  class-names=\"grey-btn\"\n                  :is-loading=\"loading[automation.id]\"\n                  @click=\"openDeletePopup(automation, index)\"\n                />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div class=\"small-4 columns\">\n        <span v-dompurify-html=\"$t('AUTOMATION.SIDEBAR_TXT')\" />\n      </div>\n    </div>\n    <woot-modal\n      :show.sync=\"showAddPopup\"\n      size=\"medium\"\n      :on-close=\"hideAddPopup\"\n    >\n      <add-automation-rule\n        v-if=\"showAddPopup\"\n        :on-close=\"hideAddPopup\"\n        @saveAutomation=\"submitAutomation\"\n      />\n    </woot-modal>\n\n    <woot-delete-modal\n      :show.sync=\"showDeleteConfirmationPopup\"\n      :on-close=\"closeDeletePopup\"\n      :on-confirm=\"confirmDeletion\"\n      :title=\"$t('LABEL_MGMT.DELETE.CONFIRM.TITLE')\"\n      :message=\"$t('AUTOMATION.DELETE.CONFIRM.MESSAGE')\"\n      :message-value=\"deleteMessage\"\n      :confirm-text=\"deleteConfirmText\"\n      :reject-text=\"deleteRejectText\"\n    />\n\n    <woot-modal\n      :show.sync=\"showEditPopup\"\n      size=\"medium\"\n      :on-close=\"hideEditPopup\"\n    >\n      <edit-automation-rule\n        v-if=\"showEditPopup\"\n        :on-close=\"hideEditPopup\"\n        :selected-response=\"selectedResponse\"\n        @saveAutomation=\"submitAutomation\"\n      />\n    </woot-modal>\n    <woot-confirm-modal\n      ref=\"confirmDialog\"\n      :title=\"toggleModalTitle\"\n      :description=\"toggleModalDescription\"\n    />\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport AddAutomationRule from './AddAutomationRule.vue';\nimport EditAutomationRule from './EditAutomationRule.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport timeMixin from 'dashboard/mixins/time';\n\nexport default {\n  components: {\n    AddAutomationRule,\n    EditAutomationRule,\n  },\n  mixins: [alertMixin, timeMixin],\n  data() {\n    return {\n      loading: {},\n      showAddPopup: false,\n      showEditPopup: false,\n      showDeleteConfirmationPopup: false,\n      selectedResponse: {},\n      toggleModalTitle: this.$t('AUTOMATION.TOGGLE.ACTIVATION_TITLE'),\n      toggleModalDescription: this.$t(\n        'AUTOMATION.TOGGLE.ACTIVATION_DESCRIPTION'\n      ),\n    };\n  },\n  computed: {\n    ...mapGetters({\n      records: ['automations/getAutomations'],\n      uiFlags: 'automations/getUIFlags',\n    }),\n    // Delete Modal\n    deleteConfirmText() {\n      return `${this.$t('AUTOMATION.DELETE.CONFIRM.YES')} ${\n        this.selectedResponse.name\n      }`;\n    },\n    deleteRejectText() {\n      return `${this.$t('AUTOMATION.DELETE.CONFIRM.NO')} ${\n        this.selectedResponse.name\n      }`;\n    },\n    deleteMessage() {\n      return ` ${this.selectedResponse.name}?`;\n    },\n  },\n  mounted() {\n    this.$store.dispatch('inboxes/get');\n    this.$store.dispatch('agents/get');\n    this.$store.dispatch('contacts/get');\n    this.$store.dispatch('teams/get');\n    this.$store.dispatch('labels/get');\n    this.$store.dispatch('campaigns/get');\n    this.$store.dispatch('automations/get');\n  },\n  methods: {\n    openAddPopup() {\n      this.showAddPopup = true;\n    },\n    hideAddPopup() {\n      this.showAddPopup = false;\n    },\n    openEditPopup(response) {\n      this.selectedResponse = response;\n      this.showEditPopup = true;\n    },\n    hideEditPopup() {\n      this.showEditPopup = false;\n    },\n    openDeletePopup(response) {\n      this.showDeleteConfirmationPopup = true;\n      this.selectedResponse = response;\n    },\n    closeDeletePopup() {\n      this.showDeleteConfirmationPopup = false;\n    },\n    confirmDeletion() {\n      this.loading[this.selectedResponse.id] = true;\n      this.closeDeletePopup();\n      this.deleteAutomation(this.selectedResponse.id);\n    },\n    async deleteAutomation(id) {\n      try {\n        await this.$store.dispatch('automations/delete', id);\n        this.showAlert(this.$t('AUTOMATION.DELETE.API.SUCCESS_MESSAGE'));\n        this.loading[this.selectedResponse.id] = false;\n      } catch (error) {\n        this.showAlert(this.$t('AUTOMATION.DELETE.API.ERROR_MESSAGE'));\n      }\n    },\n    async cloneAutomation(id) {\n      try {\n        await this.$store.dispatch('automations/clone', id);\n        this.showAlert(this.$t('AUTOMATION.CLONE.API.SUCCESS_MESSAGE'));\n        this.$store.dispatch('automations/get');\n        this.loading[this.selectedResponse.id] = false;\n      } catch (error) {\n        this.showAlert(this.$t('AUTOMATION.CLONE.API.ERROR_MESSAGE'));\n      }\n    },\n    async submitAutomation(payload, mode) {\n      try {\n        const action =\n          mode === 'edit' ? 'automations/update' : 'automations/create';\n        const successMessage =\n          mode === 'edit'\n            ? this.$t('AUTOMATION.EDIT.API.SUCCESS_MESSAGE')\n            : this.$t('AUTOMATION.ADD.API.SUCCESS_MESSAGE');\n        await this.$store.dispatch(action, payload);\n        this.showAlert(successMessage);\n        this.hideAddPopup();\n        this.hideEditPopup();\n      } catch (error) {\n        const errorMessage =\n          mode === 'edit'\n            ? this.$t('AUTOMATION.EDIT.API.ERROR_MESSAGE')\n            : this.$t('AUTOMATION.ADD.API.ERROR_MESSAGE');\n        this.showAlert(errorMessage);\n      }\n    },\n    async toggleAutomation(automation, status) {\n      try {\n        this.toggleModalTitle = status\n          ? this.$t('AUTOMATION.TOGGLE.DEACTIVATION_TITLE')\n          : this.$t('AUTOMATION.TOGGLE.ACTIVATION_TITLE');\n        this.toggleModalDescription = status\n          ? this.$t('AUTOMATION.TOGGLE.DEACTIVATION_DESCRIPTION', {\n              automationName: automation.name,\n            })\n          : this.$t('AUTOMATION.TOGGLE.ACTIVATION_DESCRIPTION', {\n              automationName: automation.name,\n            });\n        // Check if user confirms to proceed\n        const ok = await this.$refs.confirmDialog.showConfirmation();\n        if (ok) {\n          await await this.$store.dispatch('automations/update', {\n            id: automation.id,\n            active: !status,\n          });\n          const message = status\n            ? this.$t('AUTOMATION.TOGGLE.DEACTIVATION_SUCCESFUL')\n            : this.$t('AUTOMATION.TOGGLE.ACTIVATION_SUCCESFUL');\n          this.showAlert(message);\n        }\n      } catch (error) {\n        this.showAlert(this.$t('AUTOMATION.EDIT.API.ERROR_MESSAGE'));\n      }\n    },\n    readableTime(date) {\n      return this.messageStamp(new Date(date), 'LLL d, h:mm a');\n    },\n  },\n};\n</script>\n\n<style scoped>\n.automation__status-checkbox {\n  margin: 0;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/automation"},"metadata":{},"sourceType":"module"}