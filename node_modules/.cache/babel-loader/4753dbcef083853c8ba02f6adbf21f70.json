{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport adminMixin from '../../../mixins/isAdmin';\nimport accountMixin from '../../../mixins/account';\nimport OnboardingView from './OnboardingView';\nexport default {\n  components: {\n    OnboardingView: OnboardingView\n  },\n  mixins: [accountMixin, adminMixin],\n  props: {\n    isOnExpandedLayout: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    allConversations: 'getAllConversations',\n    inboxesList: 'inboxes/getInboxes',\n    uiFlags: 'inboxes/getUIFlags',\n    loadingChatList: 'getChatListLoadingStatus'\n  })), {}, {\n    loadingIndicatorMessage: function loadingIndicatorMessage() {\n      if (this.uiFlags.isFetching) {\n        return this.$t('CONVERSATION.LOADING_INBOXES');\n      }\n\n      return this.$t('CONVERSATION.LOADING_CONVERSATIONS');\n    },\n    conversationMissingMessage: function conversationMissingMessage() {\n      if (!this.isOnExpandedLayout) {\n        return this.$t('CONVERSATION.SELECT_A_CONVERSATION');\n      }\n\n      return this.$t('CONVERSATION.404');\n    },\n    newInboxURL: function newInboxURL() {\n      return this.addAccountScoping('settings/inboxes/new');\n    },\n    emptyClassName: function emptyClassName() {\n      if (!this.inboxesList.length && !this.uiFlags.isFetching && !this.loadingChatList && this.isAdmin) {\n        return 'inbox-empty-state';\n      }\n\n      return 'columns conv-empty-state';\n    }\n  })\n};","map":{"version":3,"sources":["EmptyState.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,yBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,cAAA,EAAA;AADA,GADA;AAIA,EAAA,MAAA,EAAA,CAAA,YAAA,EAAA,UAAA,CAJA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GALA;AAWA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,WAAA,EAAA,iBADA;AAEA,IAAA,gBAAA,EAAA,qBAFA;AAGA,IAAA,WAAA,EAAA,oBAHA;AAIA,IAAA,OAAA,EAAA,oBAJA;AAKA,IAAA,eAAA,EAAA;AALA,GAAA,CADA;AAQA,IAAA,uBARA,qCAQA;AACA,UAAA,KAAA,OAAA,CAAA,UAAA,EAAA;AACA,eAAA,KAAA,EAAA,CAAA,8BAAA,CAAA;AACA;;AACA,aAAA,KAAA,EAAA,CAAA,oCAAA,CAAA;AACA,KAbA;AAcA,IAAA,0BAdA,wCAcA;AACA,UAAA,CAAA,KAAA,kBAAA,EAAA;AACA,eAAA,KAAA,EAAA,CAAA,oCAAA,CAAA;AACA;;AACA,aAAA,KAAA,EAAA,CAAA,kBAAA,CAAA;AACA,KAnBA;AAoBA,IAAA,WApBA,yBAoBA;AACA,aAAA,KAAA,iBAAA,CAAA,sBAAA,CAAA;AACA,KAtBA;AAuBA,IAAA,cAvBA,4BAuBA;AACA,UACA,CAAA,KAAA,WAAA,CAAA,MAAA,IACA,CAAA,KAAA,OAAA,CAAA,UADA,IAEA,CAAA,KAAA,eAFA,IAGA,KAAA,OAJA,EAKA;AACA,eAAA,mBAAA;AACA;;AACA,aAAA,0BAAA;AACA;AAjCA;AAXA,CAAA","sourcesContent":["<template>\n  <div :class=\"emptyClassName\">\n    <woot-loading-state\n      v-if=\"uiFlags.isFetching || loadingChatList\"\n      :message=\"loadingIndicatorMessage\"\n    />\n    <!-- No inboxes attached -->\n    <div\n      v-if=\"!inboxesList.length && !uiFlags.isFetching && !loadingChatList\"\n      class=\"clearfix\"\n    >\n      <onboarding-view v-if=\"isAdmin\" />\n      <div v-else class=\"current-chat\">\n        <div>\n          <img src=\"~dashboard/assets/images/inboxes.svg\" alt=\"No Inboxes\" />\n          <span>\n            {{ $t('CONVERSATION.NO_INBOX_AGENT') }}\n          </span>\n        </div>\n      </div>\n    </div>\n    <!-- Show empty state images if not loading -->\n    <div\n      v-else-if=\"!uiFlags.isFetching && !loadingChatList\"\n      class=\"current-chat\"\n    >\n      <!-- No conversations available -->\n      <div v-if=\"!allConversations.length\">\n        <img src=\"~dashboard/assets/images/chat.svg\" alt=\"No Chat\" />\n        <span>\n          {{ $t('CONVERSATION.NO_MESSAGE_1') }}\n          <br />\n        </span>\n      </div>\n      <!-- No conversation selected -->\n      <div v-else-if=\"allConversations.length && !currentChat.id\">\n        <img src=\"~dashboard/assets/images/chat.svg\" alt=\"No Chat\" />\n        <span>{{ conversationMissingMessage }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport adminMixin from '../../../mixins/isAdmin';\nimport accountMixin from '../../../mixins/account';\nimport OnboardingView from './OnboardingView';\n\nexport default {\n  components: {\n    OnboardingView,\n  },\n  mixins: [accountMixin, adminMixin],\n  props: {\n    isOnExpandedLayout: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      allConversations: 'getAllConversations',\n      inboxesList: 'inboxes/getInboxes',\n      uiFlags: 'inboxes/getUIFlags',\n      loadingChatList: 'getChatListLoadingStatus',\n    }),\n    loadingIndicatorMessage() {\n      if (this.uiFlags.isFetching) {\n        return this.$t('CONVERSATION.LOADING_INBOXES');\n      }\n      return this.$t('CONVERSATION.LOADING_CONVERSATIONS');\n    },\n    conversationMissingMessage() {\n      if (!this.isOnExpandedLayout) {\n        return this.$t('CONVERSATION.SELECT_A_CONVERSATION');\n      }\n      return this.$t('CONVERSATION.404');\n    },\n    newInboxURL() {\n      return this.addAccountScoping('settings/inboxes/new');\n    },\n    emptyClassName() {\n      if (\n        !this.inboxesList.length &&\n        !this.uiFlags.isFetching &&\n        !this.loadingChatList &&\n        this.isAdmin\n      ) {\n        return 'inbox-empty-state';\n      }\n      return 'columns conv-empty-state';\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.inbox-empty-state {\n  height: 100%;\n  overflow: auto;\n}\n\n.current-chat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n\n    img {\n      margin: var(--space-normal);\n      width: 10rem;\n    }\n\n    span {\n      font-size: var(--font-size-small);\n      font-weight: var(--font-weight-medium);\n      text-align: center;\n    }\n  }\n}\n\n.conv-empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}