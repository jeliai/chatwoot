{"ast":null,"code":"import { __assign } from \"tslib\";\n\nfunction disabledActionDestinations(plan, settings) {\n  var _a, _b;\n\n  if (!plan || !Object.keys(plan)) {\n    return {};\n  }\n\n  var disabledIntegrations = Object.keys(plan.integrations).filter(function (i) {\n    return plan.integrations[i] === false;\n  }); // This accounts for cases like Fullstory, where the settings.integrations\n  // contains a \"Fullstory\" object but settings.remotePlugins contains \"Fullstory (Actions)\"\n\n  var disabledRemotePlugins = [];\n  ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).forEach(function (p) {\n    disabledIntegrations.forEach(function (int) {\n      if (p.name.includes(int) || int.includes(p.name)) {\n        disabledRemotePlugins.push(p.name);\n      }\n    });\n  });\n  return ((_b = settings.remotePlugins) !== null && _b !== void 0 ? _b : []).reduce(function (acc, p) {\n    // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONValue\n    if (p.settings['subscriptions']) {\n      if (disabledRemotePlugins.includes(p.name)) {\n        // @ts-expect-error element implicitly has an 'any' type because p.settings is a JSONValue\n        p.settings['subscriptions'].forEach( // @ts-expect-error parameter 'sub' implicitly has an 'any' type\n        function (sub) {\n          return acc[p.name + \" \" + sub.partnerAction] = false;\n        });\n      }\n    }\n\n    return acc;\n  }, {});\n}\n\nexport function schemaFilter(track, settings) {\n  function filter(ctx) {\n    var plan = track;\n    var ev = ctx.event.event;\n\n    if (plan && ev) {\n      var planEvent = plan[ev];\n\n      if ((planEvent === null || planEvent === void 0 ? void 0 : planEvent.enabled) === false) {\n        ctx.updateEvent('integrations', __assign(__assign({}, ctx.event.integrations), {\n          All: false,\n          'Segment.io': true\n        }));\n        return ctx;\n      } else {\n        var disabledActions = disabledActionDestinations(planEvent, settings);\n        ctx.updateEvent('integrations', __assign(__assign(__assign({}, ctx.event.integrations), planEvent === null || planEvent === void 0 ? void 0 : planEvent.integrations), disabledActions));\n      }\n    }\n\n    return ctx;\n  }\n\n  return {\n    name: 'Schema Filter',\n    version: '0.1.0',\n    isLoaded: function isLoaded() {\n      return true;\n    },\n    load: function load() {\n      return Promise.resolve();\n    },\n    type: 'before',\n    page: filter,\n    alias: filter,\n    track: filter,\n    identify: filter,\n    group: filter\n  };\n}","map":null,"metadata":{},"sourceType":"module"}