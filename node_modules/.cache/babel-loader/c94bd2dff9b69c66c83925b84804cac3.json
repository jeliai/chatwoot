{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // NOTES //\n\n/*\n* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).\n*/\n// MODULES //\n\nvar PINF = require('@stdlib/constants-float64-pinf');\n\nvar NINF = require('@stdlib/constants-float64-ninf');\n\nvar BIAS = require('@stdlib/constants-float64-exponent-bias');\n\nvar MAX_EXPONENT = require('@stdlib/constants-float64-max-base2-exponent');\n\nvar MAX_SUBNORMAL_EXPONENT = require('@stdlib/constants-float64-max-base2-exponent-subnormal');\n\nvar MIN_SUBNORMAL_EXPONENT = require('@stdlib/constants-float64-min-base2-exponent-subnormal');\n\nvar isnan = require('@stdlib/math-base-assert-is-nan');\n\nvar isInfinite = require('@stdlib/math-base-assert-is-infinite');\n\nvar copysign = require('@stdlib/math-base-special-copysign');\n\nvar normalize = require('@stdlib/number-float64-base-normalize');\n\nvar floatExp = require('@stdlib/number-float64-base-exponent');\n\nvar toWords = require('@stdlib/number-float64-base-to-words');\n\nvar fromWords = require('@stdlib/number-float64-base-from-words'); // VARIABLES //\n// 1/(1<<52) = 1/(2**52) = 1/4503599627370496\n\n\nvar TWO52_INV = 2.220446049250313e-16; // Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223\n\nvar CLEAR_EXP_MASK = 0x800fffff >>> 0; // asm type annotation\n// Normalization workspace:\n\nvar FRAC = [0.0, 0.0]; // WARNING: not thread safe\n// High/low words workspace:\n\nvar WORDS = [0, 0]; // WARNING: not thread safe\n// MAIN //\n\n/**\n* Multiplies a double-precision floating-point number by an integer power of two.\n*\n* @param {number} frac - fraction\n* @param {integer} exp - exponent\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8\n* // returns 4.0\n*\n* @example\n* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)\n* // returns 1.0\n*\n* @example\n* var x = ldexp( 0.0, 20 );\n* // returns 0.0\n*\n* @example\n* var x = ldexp( -0.0, 39 );\n* // returns -0.0\n*\n* @example\n* var x = ldexp( NaN, -101 );\n* // returns NaN\n*\n* @example\n* var x = ldexp( Infinity, 11 );\n* // returns Infinity\n*\n* @example\n* var x = ldexp( -Infinity, -118 );\n* // returns -Infinity\n*/\n\nfunction ldexp(frac, exp) {\n  var high;\n  var m;\n\n  if (frac === 0.0 || // handles +-0\n  isnan(frac) || isInfinite(frac)) {\n    return frac;\n  } // Normalize the input fraction:\n\n\n  normalize(FRAC, frac);\n  frac = FRAC[0];\n  exp += FRAC[1]; // Extract the exponent from `frac` and add it to `exp`:\n\n  exp += floatExp(frac); // Check for underflow/overflow...\n\n  if (exp < MIN_SUBNORMAL_EXPONENT) {\n    return copysign(0.0, frac);\n  }\n\n  if (exp > MAX_EXPONENT) {\n    if (frac < 0.0) {\n      return NINF;\n    }\n\n    return PINF;\n  } // Check for a subnormal and scale accordingly to retain precision...\n\n\n  if (exp <= MAX_SUBNORMAL_EXPONENT) {\n    exp += 52;\n    m = TWO52_INV;\n  } else {\n    m = 1.0;\n  } // Split the fraction into higher and lower order words:\n\n\n  toWords(WORDS, frac);\n  high = WORDS[0]; // Clear the exponent bits within the higher order word:\n\n  high &= CLEAR_EXP_MASK; // Set the exponent bits to the new exponent:\n\n  high |= exp + BIAS << 20; // Create a new floating-point number:\n\n  return m * fromWords(high, WORDS[1]);\n} // EXPORTS //\n\n\nmodule.exports = ldexp;","map":null,"metadata":{},"sourceType":"module"}