{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required } from 'vuelidate/lib/validators';\nimport router from '../../../../index';\n\nvar shouldStartWithPlusSign = function shouldStartWithPlusSign() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return value.startsWith('+');\n};\n\nexport default {\n  mixins: [alertMixin],\n  data: function data() {\n    return {\n      inboxName: '',\n      phoneNumber: '',\n      apiKey: ''\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    uiFlags: 'inboxes/getUIFlags'\n  })),\n  validations: {\n    inboxName: {\n      required: required\n    },\n    phoneNumber: {\n      required: required,\n      shouldStartWithPlusSign: shouldStartWithPlusSign\n    },\n    apiKey: {\n      required: required\n    }\n  },\n  methods: {\n    createChannel: function createChannel() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var whatsappChannel;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.$v.$touch();\n\n                if (!_this.$v.$invalid) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.$store.dispatch('inboxes/createChannel', {\n                  name: _this.inboxName,\n                  channel: {\n                    type: 'whatsapp',\n                    phone_number: _this.phoneNumber,\n                    provider_config: {\n                      api_key: _this.apiKey\n                    }\n                  }\n                });\n\n              case 6:\n                whatsappChannel = _context.sent;\n                router.replace({\n                  name: 'settings_inboxes_add_agents',\n                  params: {\n                    page: 'new',\n                    inbox_id: whatsappChannel.id\n                  }\n                });\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n\n                _this.showAlert(_this.$t('INBOX_MGMT.ADD.WHATSAPP.API.ERROR_MESSAGE'));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["360DialogWhatsapp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,SAAA,QAAA,QAAA,0BAAA;AACA,OAAA,MAAA,MAAA,mBAAA;;AAEA,IAAA,uBAAA,GAAA,SAAA,uBAAA;AAAA,MAAA,KAAA,uEAAA,EAAA;AAAA,SAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAAA;AAAA,CAAA;;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,UAAA,CADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,WAAA,EAAA,EAFA;AAGA,MAAA,MAAA,EAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,QAAA,oBACA,UAAA,CAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA,CADA,CATA;AAYA,EAAA,WAAA,EAAA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KADA;AAEA,IAAA,WAAA,EAAA;AAAA,MAAA,QAAA,EAAA,QAAA;AAAA,MAAA,uBAAA,EAAA;AAAA,KAFA;AAGA,IAAA,MAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA;AAHA,GAZA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,EAAA,CAAA,MAAA;;AADA,qBAEA,KAAA,CAAA,EAAA,CAAA,QAFA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAOA,KAAA,CAAA,MAAA,CAAA,QAAA,CACA,uBADA,EAEA;AACA,kBAAA,IAAA,EAAA,KAAA,CAAA,SADA;AAEA,kBAAA,OAAA,EAAA;AACA,oBAAA,IAAA,EAAA,UADA;AAEA,oBAAA,YAAA,EAAA,KAAA,CAAA,WAFA;AAGA,oBAAA,eAAA,EAAA;AACA,sBAAA,OAAA,EAAA,KAAA,CAAA;AADA;AAHA;AAFA,iBAFA,CAPA;;AAAA;AAOA,gBAAA,eAPA;AAqBA,gBAAA,MAAA,CAAA,OAAA,CAAA;AACA,kBAAA,IAAA,EAAA,6BADA;AAEA,kBAAA,MAAA,EAAA;AACA,oBAAA,IAAA,EAAA,KADA;AAEA,oBAAA,QAAA,EAAA,eAAA,CAAA;AAFA;AAFA,iBAAA;AArBA;AAAA;;AAAA;AAAA;AAAA;;AA6BA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,2CAAA,CAAA;;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAhCA;AAjBA,CAAA","sourcesContent":["<template>\n  <form class=\"row\" @submit.prevent=\"createChannel()\">\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.inboxName.$error }\">\n        {{ $t('INBOX_MGMT.ADD.WHATSAPP.INBOX_NAME.LABEL') }}\n        <input\n          v-model.trim=\"inboxName\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.WHATSAPP.INBOX_NAME.PLACEHOLDER')\"\n          @blur=\"$v.inboxName.$touch\"\n        />\n        <span v-if=\"$v.inboxName.$error\" class=\"message\">\n          {{ $t('INBOX_MGMT.ADD.WHATSAPP.INBOX_NAME.ERROR') }}\n        </span>\n      </label>\n    </div>\n\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.phoneNumber.$error }\">\n        {{ $t('INBOX_MGMT.ADD.WHATSAPP.PHONE_NUMBER.LABEL') }}\n        <input\n          v-model.trim=\"phoneNumber\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.WHATSAPP.PHONE_NUMBER.PLACEHOLDER')\"\n          @blur=\"$v.phoneNumber.$touch\"\n        />\n        <span v-if=\"$v.phoneNumber.$error\" class=\"message\">\n          {{ $t('INBOX_MGMT.ADD.WHATSAPP.PHONE_NUMBER.ERROR') }}\n        </span>\n      </label>\n    </div>\n\n    <div class=\"medium-8 columns\">\n      <label :class=\"{ error: $v.apiKey.$error }\">\n        <span>\n          {{ $t('INBOX_MGMT.ADD.WHATSAPP.API_KEY.LABEL') }}\n        </span>\n        <input\n          v-model.trim=\"apiKey\"\n          type=\"text\"\n          :placeholder=\"$t('INBOX_MGMT.ADD.WHATSAPP.API_KEY.PLACEHOLDER')\"\n          @blur=\"$v.apiKey.$touch\"\n        />\n        <span v-if=\"$v.apiKey.$error\" class=\"message\">\n          {{ $t('INBOX_MGMT.ADD.WHATSAPP.API_KEY.ERROR') }}\n        </span>\n      </label>\n    </div>\n\n    <div class=\"medium-12 columns\">\n      <woot-submit-button\n        :loading=\"uiFlags.isCreating\"\n        :button-text=\"$t('INBOX_MGMT.ADD.WHATSAPP.SUBMIT_BUTTON')\"\n      />\n    </div>\n  </form>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { required } from 'vuelidate/lib/validators';\nimport router from '../../../../index';\n\nconst shouldStartWithPlusSign = (value = '') => value.startsWith('+');\n\nexport default {\n  mixins: [alertMixin],\n  data() {\n    return {\n      inboxName: '',\n      phoneNumber: '',\n      apiKey: '',\n    };\n  },\n  computed: {\n    ...mapGetters({ uiFlags: 'inboxes/getUIFlags' }),\n  },\n  validations: {\n    inboxName: { required },\n    phoneNumber: { required, shouldStartWithPlusSign },\n    apiKey: { required },\n  },\n  methods: {\n    async createChannel() {\n      this.$v.$touch();\n      if (this.$v.$invalid) {\n        return;\n      }\n\n      try {\n        const whatsappChannel = await this.$store.dispatch(\n          'inboxes/createChannel',\n          {\n            name: this.inboxName,\n            channel: {\n              type: 'whatsapp',\n              phone_number: this.phoneNumber,\n              provider_config: {\n                api_key: this.apiKey,\n              },\n            },\n          }\n        );\n\n        router.replace({\n          name: 'settings_inboxes_add_agents',\n          params: {\n            page: 'new',\n            inbox_id: whatsappChannel.id,\n          },\n        });\n      } catch (error) {\n        this.showAlert(this.$t('INBOX_MGMT.ADD.WHATSAPP.API.ERROR_MESSAGE'));\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox/channels"},"metadata":{},"sourceType":"module"}