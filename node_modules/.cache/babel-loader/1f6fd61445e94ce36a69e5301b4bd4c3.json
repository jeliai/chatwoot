{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar i = function i(_i, e) {\n  return \"method\" === e.kind && e.descriptor && !(\"value\" in e.descriptor) ? _objectSpread(_objectSpread({}, e), {}, {\n    finisher: function finisher(n) {\n      n.createProperty(e.key, _i);\n    }\n  }) : {\n    kind: \"field\",\n    key: Symbol(),\n    placement: \"own\",\n    descriptor: {},\n    originalKey: e.key,\n    initializer: function initializer() {\n      \"function\" == typeof e.initializer && (this[e.key] = e.initializer.call(this));\n    },\n    finisher: function finisher(n) {\n      n.createProperty(e.key, _i);\n    }\n  };\n};\n\nfunction e(e) {\n  return function (n, t) {\n    return void 0 !== t ? function (i, e, n) {\n      e.constructor.createProperty(n, i);\n    }(e, n, t) : i(e, n);\n  };\n}\n\nexport { e as property };","map":null,"metadata":{},"sourceType":"module"}