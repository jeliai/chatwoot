{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport { hasPushPermissions, requestPushPermissions, verifyServiceWorkerExistence } from '../../../../helper/pushHelper';\nexport default {\n  mixins: [alertMixin, configMixin, uiSettingsMixin],\n  data: function data() {\n    return {\n      selectedEmailFlags: [],\n      selectedPushFlags: [],\n      enableAudioAlerts: false,\n      hasEnabledPushPermissions: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    emailFlags: 'userNotificationSettings/getSelectedEmailFlags',\n    pushFlags: 'userNotificationSettings/getSelectedPushFlags',\n    uiSettings: 'getUISettings'\n  })), {}, {\n    isBrowserSafari: function isBrowserSafari() {\n      if (window.browserConfig) {\n        return window.browserConfig.is_safari === 'true';\n      }\n\n      return false;\n    }\n  }),\n  watch: {\n    emailFlags: function emailFlags(value) {\n      this.selectedEmailFlags = value;\n    },\n    pushFlags: function pushFlags(value) {\n      this.selectedPushFlags = value;\n    },\n    uiSettings: function uiSettings(value) {\n      var _value$enable_audio_a = value.enable_audio_alerts,\n          enableAudio = _value$enable_audio_a === void 0 ? false : _value$enable_audio_a;\n      this.enableAudioAlerts = enableAudio;\n    }\n  },\n  mounted: function mounted() {\n    if (hasPushPermissions()) {\n      this.getPushSubscription();\n    }\n\n    this.$store.dispatch('userNotificationSettings/get');\n    var _this$uiSettings$enab = this.uiSettings.enable_audio_alerts,\n        enableAudio = _this$uiSettings$enab === void 0 ? false : _this$uiSettings$enab;\n    this.enableAudioAlerts = enableAudio;\n  },\n  methods: {\n    onRegistrationSuccess: function onRegistrationSuccess() {\n      this.hasEnabledPushPermissions = true;\n    },\n    onRequestPermissions: function onRequestPermissions() {\n      requestPushPermissions({\n        onSuccess: this.onRegistrationSuccess\n      });\n    },\n    getPushSubscription: function getPushSubscription() {\n      var _this = this;\n\n      verifyServiceWorkerExistence(function (registration) {\n        return registration.pushManager.getSubscription().then(function (subscription) {\n          if (!subscription) {\n            _this.hasEnabledPushPermissions = false;\n          } else {\n            _this.hasEnabledPushPermissions = true;\n          }\n        }) // eslint-disable-next-line no-console\n        .catch(function (error) {\n          return console.log(error);\n        });\n      });\n    },\n    updateNotificationSettings: function updateNotificationSettings() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  _this2.$store.dispatch('userNotificationSettings/update', {\n                    selectedEmailFlags: _this2.selectedEmailFlags,\n                    selectedPushFlags: _this2.selectedPushFlags\n                  });\n\n                  _this2.showAlert(_this2.$t('PROFILE_SETTINGS.FORM.API.UPDATE_SUCCESS'));\n                } catch (error) {\n                  _this2.showAlert(_this2.$t('PROFILE_SETTINGS.FORM.API.UPDATE_ERROR'));\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    handleEmailInput: function handleEmailInput(e) {\n      this.selectedEmailFlags = this.toggleInput(this.selectedEmailFlags, e.target.value);\n      this.updateNotificationSettings();\n    },\n    handlePushInput: function handlePushInput(e) {\n      this.selectedPushFlags = this.toggleInput(this.selectedPushFlags, e.target.value);\n      this.updateNotificationSettings();\n    },\n    handleAudioInput: function handleAudioInput(e) {\n      this.enableAudioAlerts = e.target.value;\n      this.updateUISettings({\n        enable_audio_alerts: this.enableAudioAlerts\n      });\n      this.showAlert(this.$t('PROFILE_SETTINGS.FORM.API.UPDATE_SUCCESS'));\n    },\n    toggleInput: function toggleInput(selected, current) {\n      if (selected.includes(current)) {\n        var newSelectedFlags = selected.filter(function (flag) {\n          return flag !== current;\n        });\n        return newSelectedFlags;\n      }\n\n      return [].concat(_toConsumableArray(selected), [current]);\n    }\n  }\n};","map":{"version":3,"sources":["NotificationSettings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiPA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,OAAA,WAAA,MAAA,2BAAA;AACA,OAAA,eAAA,MAAA,6BAAA;AACA,SACA,kBADA,EAEA,sBAFA,EAGA,4BAHA,QAIA,+BAJA;AAMA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,eAAA,CADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA,EADA;AAEA,MAAA,iBAAA,EAAA,EAFA;AAGA,MAAA,iBAAA,EAAA,KAHA;AAIA,MAAA,yBAAA,EAAA;AAJA,KAAA;AAMA,GATA;AAUA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,UAAA,EAAA,gDADA;AAEA,IAAA,SAAA,EAAA,+CAFA;AAGA,IAAA,UAAA,EAAA;AAHA,GAAA,CADA;AAMA,IAAA,eANA,6BAMA;AACA,UAAA,MAAA,CAAA,aAAA,EAAA;AACA,eAAA,MAAA,CAAA,aAAA,CAAA,SAAA,KAAA,MAAA;AACA;;AACA,aAAA,KAAA;AACA;AAXA,IAVA;AAuBA,EAAA,KAAA,EAAA;AACA,IAAA,UADA,sBACA,KADA,EACA;AACA,WAAA,kBAAA,GAAA,KAAA;AACA,KAHA;AAIA,IAAA,SAJA,qBAIA,KAJA,EAIA;AACA,WAAA,iBAAA,GAAA,KAAA;AACA,KANA;AAOA,IAAA,UAPA,sBAOA,KAPA,EAOA;AACA,kCAAA,KAAA,CAAA,mBAAA;AAAA,UAAA,WAAA,sCAAA,KAAA;AACA,WAAA,iBAAA,GAAA,WAAA;AACA;AAVA,GAvBA;AAmCA,EAAA,OAnCA,qBAmCA;AACA,QAAA,kBAAA,EAAA,EAAA;AACA,WAAA,mBAAA;AACA;;AAEA,SAAA,MAAA,CAAA,QAAA,CAAA,8BAAA;AACA,gCAAA,KAAA,UAAA,CAAA,mBAAA;AAAA,QAAA,WAAA,sCAAA,KAAA;AACA,SAAA,iBAAA,GAAA,WAAA;AACA,GA3CA;AA4CA,EAAA,OAAA,EAAA;AACA,IAAA,qBADA,mCACA;AACA,WAAA,yBAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,oBAJA,kCAIA;AACA,MAAA,sBAAA,CAAA;AACA,QAAA,SAAA,EAAA,KAAA;AADA,OAAA,CAAA;AAGA,KARA;AASA,IAAA,mBATA,iCASA;AAAA;;AACA,MAAA,4BAAA,CAAA,UAAA,YAAA;AAAA,eACA,YAAA,CAAA,WAAA,CACA,eADA,GAEA,IAFA,CAEA,UAAA,YAAA,EAAA;AACA,cAAA,CAAA,YAAA,EAAA;AACA,YAAA,KAAA,CAAA,yBAAA,GAAA,KAAA;AACA,WAFA,MAEA;AACA,YAAA,KAAA,CAAA,yBAAA,GAAA,IAAA;AACA;AACA,SARA,EASA;AATA,SAUA,KAVA,CAUA,UAAA,KAAA;AAAA,iBAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA;AAAA,SAVA,CADA;AAAA,OAAA,CAAA;AAaA,KAvBA;AAwBA,IAAA,0BAxBA,wCAwBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAA;AACA,kBAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,iCAAA,EAAA;AACA,oBAAA,kBAAA,EAAA,MAAA,CAAA,kBADA;AAEA,oBAAA,iBAAA,EAAA,MAAA,CAAA;AAFA,mBAAA;;AAIA,kBAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA,0CAAA,CAAA;AACA,iBANA,CAMA,OAAA,KAAA,EAAA;AACA,kBAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CAAA,wCAAA,CAAA;AACA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,KAlCA;AAmCA,IAAA,gBAnCA,4BAmCA,CAnCA,EAmCA;AACA,WAAA,kBAAA,GAAA,KAAA,WAAA,CACA,KAAA,kBADA,EAEA,CAAA,CAAA,MAAA,CAAA,KAFA,CAAA;AAKA,WAAA,0BAAA;AACA,KA1CA;AA2CA,IAAA,eA3CA,2BA2CA,CA3CA,EA2CA;AACA,WAAA,iBAAA,GAAA,KAAA,WAAA,CACA,KAAA,iBADA,EAEA,CAAA,CAAA,MAAA,CAAA,KAFA,CAAA;AAKA,WAAA,0BAAA;AACA,KAlDA;AAmDA,IAAA,gBAnDA,4BAmDA,CAnDA,EAmDA;AACA,WAAA,iBAAA,GAAA,CAAA,CAAA,MAAA,CAAA,KAAA;AACA,WAAA,gBAAA,CAAA;AACA,QAAA,mBAAA,EAAA,KAAA;AADA,OAAA;AAGA,WAAA,SAAA,CAAA,KAAA,EAAA,CAAA,0CAAA,CAAA;AACA,KAzDA;AA0DA,IAAA,WA1DA,uBA0DA,QA1DA,EA0DA,OA1DA,EA0DA;AACA,UAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAA;AACA,YAAA,gBAAA,GAAA,QAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,iBAAA,IAAA,KAAA,OAAA;AAAA,SAAA,CAAA;AACA,eAAA,gBAAA;AACA;;AACA,0CAAA,QAAA,IAAA,OAAA;AACA;AAhEA;AA5CA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"profile--settings--row row\">\n      <div class=\"columns small-3 \">\n        <h4 class=\"block-title\">\n          {{ $t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.TITLE') }}\n        </h4>\n        <p>\n          {{ $t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.NOTE') }}\n        </p>\n      </div>\n      <div class=\"columns small-9\">\n        <div>\n          <input\n            id=\"audio_enable_alert_none\"\n            v-model=\"enableAudioAlerts\"\n            class=\"notification--checkbox\"\n            type=\"radio\"\n            value=\"none\"\n            @input=\"handleAudioInput\"\n          />\n          <label for=\"audio_enable_alert_none\">\n            {{ $t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.NONE') }}\n          </label>\n        </div>\n        <div>\n          <input\n            id=\"audio_enable_alert_mine\"\n            v-model=\"enableAudioAlerts\"\n            class=\"notification--checkbox\"\n            type=\"radio\"\n            value=\"mine\"\n            @input=\"handleAudioInput\"\n          />\n          <label for=\"audio_enable_alert_mine\">\n            {{\n              $t('PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.ASSIGNED')\n            }}\n          </label>\n        </div>\n        <div>\n          <input\n            id=\"audio_enable_alert_all\"\n            v-model=\"enableAudioAlerts\"\n            class=\"notification--checkbox\"\n            type=\"radio\"\n            value=\"all\"\n            @input=\"handleAudioInput\"\n          />\n          <label for=\"audio_enable_alert_all\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.AUDIO_NOTIFICATIONS_SECTION.ALL_CONVERSATIONS'\n              )\n            }}\n          </label>\n        </div>\n      </div>\n    </div>\n    <div class=\"profile--settings--row row\">\n      <div class=\"columns small-3 \">\n        <h4 class=\"block-title\">\n          {{ $t('PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.TITLE') }}\n        </h4>\n        <p>\n          {{ $t('PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.NOTE') }}\n        </p>\n      </div>\n      <div class=\"columns small-9\">\n        <div>\n          <input\n            v-model=\"selectedEmailFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"email_conversation_creation\"\n            @input=\"handleEmailInput\"\n          />\n          <label for=\"conversation_creation\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.CONVERSATION_CREATION'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedEmailFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"email_conversation_assignment\"\n            @input=\"handleEmailInput\"\n          />\n          <label for=\"conversation_assignment\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.CONVERSATION_ASSIGNMENT'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedEmailFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"email_conversation_mention\"\n            @input=\"handleEmailInput\"\n          />\n          <label for=\"conversation_mention\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.CONVERSATION_MENTION'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedEmailFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"email_assigned_conversation_new_message\"\n            @input=\"handleEmailInput\"\n          />\n          <label for=\"assigned_conversation_new_message\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.EMAIL_NOTIFICATIONS_SECTION.ASSIGNED_CONVERSATION_NEW_MESSAGE'\n              )\n            }}\n          </label>\n        </div>\n      </div>\n    </div>\n    <div\n      v-if=\"vapidPublicKey && !isBrowserSafari\"\n      class=\"profile--settings--row row push-row\"\n    >\n      <div class=\"columns small-3 \">\n        <h4 class=\"block-title\">\n          {{ $t('PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.TITLE') }}\n        </h4>\n        <p>{{ $t('PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.NOTE') }}</p>\n      </div>\n      <div class=\"columns small-9\">\n        <p v-if=\"hasEnabledPushPermissions\">\n          {{\n            $t(\n              'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.HAS_ENABLED_PUSH'\n            )\n          }}\n        </p>\n        <div v-else class=\"push-notification--button\">\n          <woot-submit-button\n            :button-text=\"\n              $t(\n                'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.REQUEST_PUSH'\n              )\n            \"\n            class=\"button nice small\"\n            type=\"button\"\n            @click=\"onRequestPermissions\"\n          />\n        </div>\n        <div>\n          <input\n            v-model=\"selectedPushFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"push_conversation_creation\"\n            @input=\"handlePushInput\"\n          />\n          <label for=\"conversation_creation\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.CONVERSATION_CREATION'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedPushFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"push_conversation_assignment\"\n            @input=\"handlePushInput\"\n          />\n          <label for=\"conversation_assignment\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.CONVERSATION_ASSIGNMENT'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedPushFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"push_conversation_mention\"\n            @input=\"handlePushInput\"\n          />\n          <label for=\"conversation_mention\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.CONVERSATION_MENTION'\n              )\n            }}\n          </label>\n        </div>\n\n        <div>\n          <input\n            v-model=\"selectedPushFlags\"\n            class=\"notification--checkbox\"\n            type=\"checkbox\"\n            value=\"push_assigned_conversation_new_message\"\n            @input=\"handlePushInput\"\n          />\n          <label for=\"assigned_conversation_new_message\">\n            {{\n              $t(\n                'PROFILE_SETTINGS.FORM.PUSH_NOTIFICATIONS_SECTION.ASSIGNED_CONVERSATION_NEW_MESSAGE'\n              )\n            }}\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport configMixin from 'shared/mixins/configMixin';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport {\n  hasPushPermissions,\n  requestPushPermissions,\n  verifyServiceWorkerExistence,\n} from '../../../../helper/pushHelper';\n\nexport default {\n  mixins: [alertMixin, configMixin, uiSettingsMixin],\n  data() {\n    return {\n      selectedEmailFlags: [],\n      selectedPushFlags: [],\n      enableAudioAlerts: false,\n      hasEnabledPushPermissions: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      emailFlags: 'userNotificationSettings/getSelectedEmailFlags',\n      pushFlags: 'userNotificationSettings/getSelectedPushFlags',\n      uiSettings: 'getUISettings',\n    }),\n    isBrowserSafari() {\n      if (window.browserConfig) {\n        return window.browserConfig.is_safari === 'true';\n      }\n      return false;\n    },\n  },\n  watch: {\n    emailFlags(value) {\n      this.selectedEmailFlags = value;\n    },\n    pushFlags(value) {\n      this.selectedPushFlags = value;\n    },\n    uiSettings(value) {\n      const { enable_audio_alerts: enableAudio = false } = value;\n      this.enableAudioAlerts = enableAudio;\n    },\n  },\n  mounted() {\n    if (hasPushPermissions()) {\n      this.getPushSubscription();\n    }\n\n    this.$store.dispatch('userNotificationSettings/get');\n    const { enable_audio_alerts: enableAudio = false } = this.uiSettings;\n    this.enableAudioAlerts = enableAudio;\n  },\n  methods: {\n    onRegistrationSuccess() {\n      this.hasEnabledPushPermissions = true;\n    },\n    onRequestPermissions() {\n      requestPushPermissions({\n        onSuccess: this.onRegistrationSuccess,\n      });\n    },\n    getPushSubscription() {\n      verifyServiceWorkerExistence(registration =>\n        registration.pushManager\n          .getSubscription()\n          .then(subscription => {\n            if (!subscription) {\n              this.hasEnabledPushPermissions = false;\n            } else {\n              this.hasEnabledPushPermissions = true;\n            }\n          })\n          // eslint-disable-next-line no-console\n          .catch(error => console.log(error))\n      );\n    },\n    async updateNotificationSettings() {\n      try {\n        this.$store.dispatch('userNotificationSettings/update', {\n          selectedEmailFlags: this.selectedEmailFlags,\n          selectedPushFlags: this.selectedPushFlags,\n        });\n        this.showAlert(this.$t('PROFILE_SETTINGS.FORM.API.UPDATE_SUCCESS'));\n      } catch (error) {\n        this.showAlert(this.$t('PROFILE_SETTINGS.FORM.API.UPDATE_ERROR'));\n      }\n    },\n    handleEmailInput(e) {\n      this.selectedEmailFlags = this.toggleInput(\n        this.selectedEmailFlags,\n        e.target.value\n      );\n\n      this.updateNotificationSettings();\n    },\n    handlePushInput(e) {\n      this.selectedPushFlags = this.toggleInput(\n        this.selectedPushFlags,\n        e.target.value\n      );\n\n      this.updateNotificationSettings();\n    },\n    handleAudioInput(e) {\n      this.enableAudioAlerts = e.target.value;\n      this.updateUISettings({\n        enable_audio_alerts: this.enableAudioAlerts,\n      });\n      this.showAlert(this.$t('PROFILE_SETTINGS.FORM.API.UPDATE_SUCCESS'));\n    },\n    toggleInput(selected, current) {\n      if (selected.includes(current)) {\n        const newSelectedFlags = selected.filter(flag => flag !== current);\n        return newSelectedFlags;\n      }\n      return [...selected, current];\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~dashboard/assets/scss/variables.scss';\n\n.notification--checkbox {\n  font-size: $font-size-large;\n}\n\n.push-notification--button {\n  margin-bottom: var(--space-one);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/profile"},"metadata":{},"sourceType":"module"}