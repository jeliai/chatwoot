{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get as getCookie, set as setCookie } from 'js-cookie';\nimport { tld } from '../../core/user/tld';\nimport { version } from '../../generated/version';\nvar domain = undefined;\n\ntry {\n  domain = tld(new URL(window.location.href));\n} catch (_) {\n  domain = undefined;\n}\n\nvar cookieOptions = {\n  expires: 31536000000,\n  secure: false,\n  path: '/'\n};\n\nif (domain) {\n  cookieOptions.domain = domain;\n} // Default value will be updated to 'web' in `bundle-umd.ts` for web build.\n\n\nvar _version = 'npm';\nexport function setVersionType(version) {\n  _version = version;\n}\nexport function getVersionType() {\n  return _version;\n}\nexport function sCookie(key, value) {\n  return setCookie(key, value, cookieOptions);\n}\nexport function ampId() {\n  var ampId = getCookie('_ga');\n\n  if (ampId && ampId.startsWith('amp')) {\n    return ampId;\n  }\n}\nexport function utm(query) {\n  if (query.startsWith('?')) {\n    query = query.substring(1);\n  }\n\n  query = query.replace(/\\?/g, '&');\n  return query.split('&').reduce(function (acc, str) {\n    var _a = str.split('='),\n        k = _a[0],\n        _b = _a[1],\n        v = _b === void 0 ? '' : _b;\n\n    if (k.includes('utm_') && k.length > 4) {\n      var utmParam = k.substr(4);\n\n      if (utmParam === 'campaign') {\n        utmParam = 'name';\n      }\n\n      acc[utmParam] = decodeURIComponent(v.replace(/\\+/g, ' '));\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction ads(query) {\n  var queryIds = {\n    btid: 'dataxu',\n    urid: 'millennial-media'\n  };\n\n  if (query.startsWith('?')) {\n    query = query.substring(1);\n  }\n\n  query = query.replace(/\\?/g, '&');\n  var parts = query.split('&');\n\n  for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n    var part = parts_1[_i];\n\n    var _a = part.split('='),\n        k = _a[0],\n        v = _a[1];\n\n    if (queryIds[k]) {\n      return {\n        id: v,\n        type: queryIds[k]\n      };\n    }\n  }\n}\n\nfunction referrerId(query, ctx) {\n  var stored = getCookie('s:context.referrer');\n  var ad = ads(query);\n  stored = stored ? JSON.parse(stored) : undefined;\n  ad = ad !== null && ad !== void 0 ? ad : stored;\n\n  if (!ad) {\n    return;\n  }\n\n  if (ctx) {\n    ctx.referrer = __assign(__assign({}, ctx.referrer), ad);\n  }\n\n  setCookie('s:context.referrer', JSON.stringify(ad), cookieOptions);\n}\n\nexport function normalize(analytics, json, settings, integrations) {\n  var _a, _b, _c;\n\n  var user = analytics.user();\n  var query = window.location.search;\n  json.context = (_b = (_a = json.context) !== null && _a !== void 0 ? _a : json.options) !== null && _b !== void 0 ? _b : {};\n  var ctx = json.context;\n  var anonId = json.anonymousId;\n  delete json.options;\n  json.writeKey = settings === null || settings === void 0 ? void 0 : settings.apiKey;\n  ctx.userAgent = window.navigator.userAgent; // @ts-ignore\n\n  var locale = navigator.userLanguage || navigator.language;\n\n  if (typeof ctx.locale === 'undefined' && typeof locale !== 'undefined') {\n    ctx.locale = locale;\n  }\n\n  if (!ctx.library) {\n    var type = getVersionType();\n\n    if (type === 'web') {\n      ctx.library = {\n        name: 'analytics.js',\n        version: \"next-\" + version\n      };\n    } else {\n      ctx.library = {\n        name: 'analytics.js',\n        version: \"npm:next-\" + version\n      };\n    }\n  }\n\n  if (query && !ctx.campaign) {\n    ctx.campaign = utm(query);\n  }\n\n  referrerId(query, ctx);\n  json.userId = json.userId || user.id();\n  json.anonymousId = user.anonymousId(anonId);\n  json.sentAt = new Date();\n  json.timestamp = new Date();\n  var failed = analytics.queue.failedInitializations || [];\n\n  if (failed.length > 0) {\n    json._metadata = {\n      failedInitializations: failed\n    };\n  }\n\n  var bundled = [];\n  var unbundled = [];\n\n  for (var key in integrations) {\n    var integration = integrations[key];\n\n    if (key === 'Segment.io') {\n      bundled.push(key);\n    }\n\n    if (integration.bundlingStatus === 'bundled') {\n      bundled.push(key);\n    }\n\n    if (integration.bundlingStatus === 'unbundled') {\n      unbundled.push(key);\n    }\n  } // This will make sure that the disabled cloud mode destinations will be\n  // included in the unbundled list.\n\n\n  for (var _i = 0, _d = (settings === null || settings === void 0 ? void 0 : settings.unbundledIntegrations) || []; _i < _d.length; _i++) {\n    var settingsUnbundled = _d[_i];\n\n    if (!unbundled.includes(settingsUnbundled)) {\n      unbundled.push(settingsUnbundled);\n    }\n  }\n\n  var configIds = (_c = settings === null || settings === void 0 ? void 0 : settings.maybeBundledConfigIds) !== null && _c !== void 0 ? _c : {};\n  var bundledConfigIds = [];\n  bundled.sort().forEach(function (name) {\n    var _a;\n\n    ;\n    ((_a = configIds[name]) !== null && _a !== void 0 ? _a : []).forEach(function (id) {\n      bundledConfigIds.push(id);\n    });\n  });\n\n  if ((settings === null || settings === void 0 ? void 0 : settings.addBundledMetadata) !== false) {\n    json._metadata = __assign(__assign({}, json._metadata), {\n      bundled: bundled.sort(),\n      unbundled: unbundled.sort(),\n      bundledIds: bundledConfigIds\n    });\n  }\n\n  var amp = ampId();\n\n  if (amp) {\n    ctx.amp = {\n      id: amp\n    };\n  }\n\n  return json;\n}","map":null,"metadata":{},"sourceType":"module"}