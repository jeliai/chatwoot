{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nexport default {\n  computed: _objectSpread(_objectSpread({\n    assignableAgents: function assignableAgents() {\n      return this.$store.getters['inboxAssignableAgents/getAssignableAgents'](this.inboxId);\n    }\n  }, mapGetters({\n    currentUser: 'getCurrentUser'\n  })), {}, {\n    isAgentSelected: function isAgentSelected() {\n      var _this$currentChat, _this$currentChat$met;\n\n      return (_this$currentChat = this.currentChat) === null || _this$currentChat === void 0 ? void 0 : (_this$currentChat$met = _this$currentChat.meta) === null || _this$currentChat$met === void 0 ? void 0 : _this$currentChat$met.assignee;\n    },\n    agentsList: function agentsList() {\n      var _this = this;\n\n      var agents = this.assignableAgents || [];\n      return [].concat(_toConsumableArray(this.isAgentSelected ? [{\n        confirmed: true,\n        name: 'None',\n        id: 0,\n        role: 'agent',\n        account_id: 0,\n        email: 'None'\n      }] : []), _toConsumableArray(agents)).map(function (item) {\n        return item.id === _this.currentUser.id ? _objectSpread(_objectSpread({}, item), {}, {\n          availability_status: _this.currentUser.availability_status\n        }) : item;\n      });\n    }\n  })\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/agentMixin.js"],"names":["mapGetters","computed","assignableAgents","$store","getters","inboxId","currentUser","isAgentSelected","currentChat","meta","assignee","agentsList","agents","confirmed","name","id","role","account_id","email","map","item","availability_status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACbC,EAAAA,QAAQ;AACNC,IAAAA,gBADM,8BACa;AACjB,aAAO,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,2CAApB,EACL,KAAKC,OADA,CAAP;AAGD;AALK,KAMHL,UAAU,CAAC;AAAEM,IAAAA,WAAW,EAAE;AAAf,GAAD,CANP;AAONC,IAAAA,eAPM,6BAOY;AAAA;;AAChB,kCAAO,KAAKC,WAAZ,+EAAO,kBAAkBC,IAAzB,0DAAO,sBAAwBC,QAA/B;AACD,KATK;AAUNC,IAAAA,UAVM,wBAUO;AAAA;;AACX,UAAMC,MAAM,GAAG,KAAKV,gBAAL,IAAyB,EAAxC;AACA,aAAO,6BACD,KAAKK,eAAL,GACA,CACE;AACEM,QAAAA,SAAS,EAAE,IADb;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,EAAE,EAAE,CAHN;AAIEC,QAAAA,IAAI,EAAE,OAJR;AAKEC,QAAAA,UAAU,EAAE,CALd;AAMEC,QAAAA,KAAK,EAAE;AANT,OADF,CADA,GAWA,EAZC,sBAaFN,MAbE,GAcLO,GAdK,CAcD,UAAAC,IAAI;AAAA,eACRA,IAAI,CAACL,EAAL,KAAY,KAAI,CAACT,WAAL,CAAiBS,EAA7B,mCAESK,IAFT;AAGMC,UAAAA,mBAAmB,EAAE,KAAI,CAACf,WAAL,CAAiBe;AAH5C,aAKID,IANI;AAAA,OAdH,CAAP;AAsBD;AAlCK;AADK,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\n\nexport default {\n  computed: {\n    assignableAgents() {\n      return this.$store.getters['inboxAssignableAgents/getAssignableAgents'](\n        this.inboxId\n      );\n    },\n    ...mapGetters({ currentUser: 'getCurrentUser' }),\n    isAgentSelected() {\n      return this.currentChat?.meta?.assignee;\n    },\n    agentsList() {\n      const agents = this.assignableAgents || [];\n      return [\n        ...(this.isAgentSelected\n          ? [\n              {\n                confirmed: true,\n                name: 'None',\n                id: 0,\n                role: 'agent',\n                account_id: 0,\n                email: 'None',\n              },\n            ]\n          : []),\n        ...agents,\n      ].map(item =>\n        item.id === this.currentUser.id\n          ? {\n              ...item,\n              availability_status: this.currentUser.availability_status,\n            }\n          : item\n      );\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}