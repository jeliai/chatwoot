{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport { groupBy } from 'widget/helpers/utils';\nimport { groupConversationBySender } from './helpers';\nimport { formatUnixDate } from 'shared/helpers/DateHelper';\nexport var getters = {\n  getAllMessagesLoaded: function getAllMessagesLoaded(_state) {\n    return _state.uiFlags.allMessagesLoaded;\n  },\n  getIsCreating: function getIsCreating(_state) {\n    return _state.uiFlags.isCreating;\n  },\n  getIsAgentTyping: function getIsAgentTyping(_state) {\n    return _state.uiFlags.isAgentTyping;\n  },\n  getConversation: function getConversation(_state) {\n    return _state.conversations;\n  },\n  getConversationSize: function getConversationSize(_state) {\n    return Object.keys(_state.conversations).length;\n  },\n  getEarliestMessage: function getEarliestMessage(_state) {\n    var conversation = Object.values(_state.conversations);\n\n    if (conversation.length) {\n      return conversation[0];\n    }\n\n    return {};\n  },\n  getGroupedConversation: function getGroupedConversation(_state) {\n    var conversationGroupedByDate = groupBy(Object.values(_state.conversations), function (message) {\n      return formatUnixDate(message.created_at);\n    });\n    return Object.keys(conversationGroupedByDate).map(function (date) {\n      return {\n        date: date,\n        messages: groupConversationBySender(conversationGroupedByDate[date])\n      };\n    });\n  },\n  getIsFetchingList: function getIsFetchingList(_state) {\n    return _state.uiFlags.isFetchingList;\n  },\n  getMessageCount: function getMessageCount(_state) {\n    return Object.values(_state.conversations).length;\n  },\n  getUnreadMessageCount: function getUnreadMessageCount(_state) {\n    var userLastSeenAt = _state.meta.userLastSeenAt;\n    return Object.values(_state.conversations).filter(function (chat) {\n      var createdAt = chat.created_at,\n          messageType = chat.message_type;\n      var isOutGoing = messageType === MESSAGE_TYPE.OUTGOING;\n      var hasNotSeen = userLastSeenAt ? createdAt * 1000 > userLastSeenAt * 1000 : true;\n      return hasNotSeen && isOutGoing;\n    }).length;\n  },\n  getUnreadTextMessages: function getUnreadTextMessages(_state, _getters) {\n    var unreadCount = _getters.getUnreadMessageCount;\n\n    var allMessages = _toConsumableArray(Object.values(_state.conversations));\n\n    var unreadAgentMessages = allMessages.filter(function (message) {\n      var messageType = message.message_type;\n      return messageType === MESSAGE_TYPE.OUTGOING;\n    });\n    var maxUnreadCount = Math.min(unreadCount, 3);\n    return unreadAgentMessages.splice(-maxUnreadCount);\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/widget/store/modules/conversation/getters.js"],"names":["MESSAGE_TYPE","groupBy","groupConversationBySender","formatUnixDate","getters","getAllMessagesLoaded","_state","uiFlags","allMessagesLoaded","getIsCreating","isCreating","getIsAgentTyping","isAgentTyping","getConversation","conversations","getConversationSize","Object","keys","length","getEarliestMessage","conversation","values","getGroupedConversation","conversationGroupedByDate","message","created_at","map","date","messages","getIsFetchingList","isFetchingList","getMessageCount","getUnreadMessageCount","userLastSeenAt","meta","filter","chat","createdAt","messageType","message_type","isOutGoing","OUTGOING","hasNotSeen","getUnreadTextMessages","_getters","unreadCount","allMessages","unreadAgentMessages","maxUnreadCount","Math","min","splice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,yBAAT,QAA0C,WAA1C;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,oBAAoB,EAAE,8BAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,OAAP,CAAeC,iBAAnB;AAAA,GADP;AAErBC,EAAAA,aAAa,EAAE,uBAAAH,MAAM;AAAA,WAAIA,MAAM,CAACC,OAAP,CAAeG,UAAnB;AAAA,GAFA;AAGrBC,EAAAA,gBAAgB,EAAE,0BAAAL,MAAM;AAAA,WAAIA,MAAM,CAACC,OAAP,CAAeK,aAAnB;AAAA,GAHH;AAIrBC,EAAAA,eAAe,EAAE,yBAAAP,MAAM;AAAA,WAAIA,MAAM,CAACQ,aAAX;AAAA,GAJF;AAKrBC,EAAAA,mBAAmB,EAAE,6BAAAT,MAAM;AAAA,WAAIU,MAAM,CAACC,IAAP,CAAYX,MAAM,CAACQ,aAAnB,EAAkCI,MAAtC;AAAA,GALN;AAMrBC,EAAAA,kBAAkB,EAAE,4BAAAb,MAAM,EAAI;AAC5B,QAAMc,YAAY,GAAGJ,MAAM,CAACK,MAAP,CAAcf,MAAM,CAACQ,aAArB,CAArB;;AACA,QAAIM,YAAY,CAACF,MAAjB,EAAyB;AACvB,aAAOE,YAAY,CAAC,CAAD,CAAnB;AACD;;AACD,WAAO,EAAP;AACD,GAZoB;AAarBE,EAAAA,sBAAsB,EAAE,gCAAAhB,MAAM,EAAI;AAChC,QAAMiB,yBAAyB,GAAGtB,OAAO,CACvCe,MAAM,CAACK,MAAP,CAAcf,MAAM,CAACQ,aAArB,CADuC,EAEvC,UAAAU,OAAO;AAAA,aAAIrB,cAAc,CAACqB,OAAO,CAACC,UAAT,CAAlB;AAAA,KAFgC,CAAzC;AAIA,WAAOT,MAAM,CAACC,IAAP,CAAYM,yBAAZ,EAAuCG,GAAvC,CAA2C,UAAAC,IAAI;AAAA,aAAK;AACzDA,QAAAA,IAAI,EAAJA,IADyD;AAEzDC,QAAAA,QAAQ,EAAE1B,yBAAyB,CAACqB,yBAAyB,CAACI,IAAD,CAA1B;AAFsB,OAAL;AAAA,KAA/C,CAAP;AAID,GAtBoB;AAuBrBE,EAAAA,iBAAiB,EAAE,2BAAAvB,MAAM;AAAA,WAAIA,MAAM,CAACC,OAAP,CAAeuB,cAAnB;AAAA,GAvBJ;AAwBrBC,EAAAA,eAAe,EAAE,yBAAAzB,MAAM,EAAI;AACzB,WAAOU,MAAM,CAACK,MAAP,CAAcf,MAAM,CAACQ,aAArB,EAAoCI,MAA3C;AACD,GA1BoB;AA2BrBc,EAAAA,qBAAqB,EAAE,+BAAA1B,MAAM,EAAI;AAC/B,QAAQ2B,cAAR,GAA2B3B,MAAM,CAAC4B,IAAlC,CAAQD,cAAR;AACA,WAAOjB,MAAM,CAACK,MAAP,CAAcf,MAAM,CAACQ,aAArB,EAAoCqB,MAApC,CAA2C,UAAAC,IAAI,EAAI;AACxD,UAAoBC,SAApB,GAA6DD,IAA7D,CAAQX,UAAR;AAAA,UAA6Ca,WAA7C,GAA6DF,IAA7D,CAA+BG,YAA/B;AACA,UAAMC,UAAU,GAAGF,WAAW,KAAKtC,YAAY,CAACyC,QAAhD;AACA,UAAMC,UAAU,GAAGT,cAAc,GAC7BI,SAAS,GAAG,IAAZ,GAAmBJ,cAAc,GAAG,IADP,GAE7B,IAFJ;AAGA,aAAOS,UAAU,IAAIF,UAArB;AACD,KAPM,EAOJtB,MAPH;AAQD,GArCoB;AAsCrByB,EAAAA,qBAAqB,EAAE,+BAACrC,MAAD,EAASsC,QAAT,EAAsB;AAC3C,QAAMC,WAAW,GAAGD,QAAQ,CAACZ,qBAA7B;;AACA,QAAMc,WAAW,sBAAO9B,MAAM,CAACK,MAAP,CAAcf,MAAM,CAACQ,aAArB,CAAP,CAAjB;;AACA,QAAMiC,mBAAmB,GAAGD,WAAW,CAACX,MAAZ,CAAmB,UAAAX,OAAO,EAAI;AACxD,UAAsBc,WAAtB,GAAsCd,OAAtC,CAAQe,YAAR;AACA,aAAOD,WAAW,KAAKtC,YAAY,CAACyC,QAApC;AACD,KAH2B,CAA5B;AAIA,QAAMO,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASL,WAAT,EAAsB,CAAtB,CAAvB;AACA,WAAOE,mBAAmB,CAACI,MAApB,CAA2B,CAACH,cAA5B,CAAP;AACD;AA/CoB,CAAhB","sourcesContent":["import { MESSAGE_TYPE } from 'widget/helpers/constants';\nimport { groupBy } from 'widget/helpers/utils';\nimport { groupConversationBySender } from './helpers';\nimport { formatUnixDate } from 'shared/helpers/DateHelper';\n\nexport const getters = {\n  getAllMessagesLoaded: _state => _state.uiFlags.allMessagesLoaded,\n  getIsCreating: _state => _state.uiFlags.isCreating,\n  getIsAgentTyping: _state => _state.uiFlags.isAgentTyping,\n  getConversation: _state => _state.conversations,\n  getConversationSize: _state => Object.keys(_state.conversations).length,\n  getEarliestMessage: _state => {\n    const conversation = Object.values(_state.conversations);\n    if (conversation.length) {\n      return conversation[0];\n    }\n    return {};\n  },\n  getGroupedConversation: _state => {\n    const conversationGroupedByDate = groupBy(\n      Object.values(_state.conversations),\n      message => formatUnixDate(message.created_at)\n    );\n    return Object.keys(conversationGroupedByDate).map(date => ({\n      date,\n      messages: groupConversationBySender(conversationGroupedByDate[date]),\n    }));\n  },\n  getIsFetchingList: _state => _state.uiFlags.isFetchingList,\n  getMessageCount: _state => {\n    return Object.values(_state.conversations).length;\n  },\n  getUnreadMessageCount: _state => {\n    const { userLastSeenAt } = _state.meta;\n    return Object.values(_state.conversations).filter(chat => {\n      const { created_at: createdAt, message_type: messageType } = chat;\n      const isOutGoing = messageType === MESSAGE_TYPE.OUTGOING;\n      const hasNotSeen = userLastSeenAt\n        ? createdAt * 1000 > userLastSeenAt * 1000\n        : true;\n      return hasNotSeen && isOutGoing;\n    }).length;\n  },\n  getUnreadTextMessages: (_state, _getters) => {\n    const unreadCount = _getters.getUnreadMessageCount;\n    const allMessages = [...Object.values(_state.conversations)];\n    const unreadAgentMessages = allMessages.filter(message => {\n      const { message_type: messageType } = message;\n      return messageType === MESSAGE_TYPE.OUTGOING;\n    });\n    const maxUnreadCount = Math.min(unreadCount, 3);\n    return unreadAgentMessages.splice(-maxUnreadCount);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}