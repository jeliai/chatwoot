{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ConversationCard from 'dashboard/components/widgets/conversation/ConversationCard';\nimport { mapGetters } from 'vuex';\nimport Spinner from 'shared/components/Spinner';\nexport default {\n  components: {\n    ConversationCard: ConversationCard,\n    Spinner: Spinner\n  },\n  props: {\n    contactId: {\n      type: [String, Number],\n      required: true\n    },\n    conversationId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  computed: _objectSpread({\n    conversations: function conversations() {\n      return this.$store.getters['contactConversations/getContactConversation'](this.contactId);\n    },\n    previousConversations: function previousConversations() {\n      var _this = this;\n\n      return this.conversations.filter(function (conversation) {\n        return conversation.id !== Number(_this.conversationId);\n      });\n    }\n  }, mapGetters({\n    uiFlags: 'contactConversations/getUIFlags'\n  })),\n  watch: {\n    contactId: function contactId(newContactId, prevContactId) {\n      if (newContactId && newContactId !== prevContactId) {\n        this.$store.dispatch('contactConversations/get', newContactId);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.$store.dispatch('contactConversations/get', this.contactId);\n  }\n};","map":{"version":3,"sources":["ContactConversations.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAA,gBAAA,MAAA,4DAAA;AACA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,OAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA,gBADA;AAEA,IAAA,OAAA,EAAA;AAFA,GADA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CADA;AAEA,MAAA,QAAA,EAAA;AAFA;AALA,GALA;AAeA,EAAA,QAAA;AACA,IAAA,aADA,2BACA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,6CAAA,EACA,KAAA,SADA,CAAA;AAGA,KALA;AAMA,IAAA,qBANA,mCAMA;AAAA;;AACA,aAAA,KAAA,aAAA,CAAA,MAAA,CACA,UAAA,YAAA;AAAA,eAAA,YAAA,CAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,cAAA,CAAA;AAAA,OADA,CAAA;AAGA;AAVA,KAWA,UAAA,CAAA;AACA,IAAA,OAAA,EAAA;AADA,GAAA,CAXA,CAfA;AA8BA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,qBACA,YADA,EACA,aADA,EACA;AACA,UAAA,YAAA,IAAA,YAAA,KAAA,aAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,0BAAA,EAAA,YAAA;AACA;AACA;AALA,GA9BA;AAqCA,EAAA,OArCA,qBAqCA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,0BAAA,EAAA,KAAA,SAAA;AACA;AAvCA,CAAA","sourcesContent":["<template>\n  <div class=\"contact-conversation--panel\">\n    <div v-if=\"!uiFlags.isFetching\" class=\"contact-conversation__wrap\">\n      <div v-if=\"!previousConversations.length\" class=\"no-label-message\">\n        <span>\n          {{ $t('CONTACT_PANEL.CONVERSATIONS.NO_RECORDS_FOUND') }}\n        </span>\n      </div>\n      <div v-else class=\"contact-conversation--list\">\n        <conversation-card\n          v-for=\"conversation in previousConversations\"\n          :key=\"conversation.id\"\n          :chat=\"conversation\"\n          :hide-inbox-name=\"false\"\n          :hide-thumbnail=\"true\"\n          class=\"compact\"\n        />\n      </div>\n    </div>\n    <spinner v-else />\n  </div>\n</template>\n\n<script>\nimport ConversationCard from 'dashboard/components/widgets/conversation/ConversationCard';\nimport { mapGetters } from 'vuex';\nimport Spinner from 'shared/components/Spinner';\n\nexport default {\n  components: {\n    ConversationCard,\n    Spinner,\n  },\n  props: {\n    contactId: {\n      type: [String, Number],\n      required: true,\n    },\n    conversationId: {\n      type: [String, Number],\n      required: true,\n    },\n  },\n  computed: {\n    conversations() {\n      return this.$store.getters['contactConversations/getContactConversation'](\n        this.contactId\n      );\n    },\n    previousConversations() {\n      return this.conversations.filter(\n        conversation => conversation.id !== Number(this.conversationId)\n      );\n    },\n    ...mapGetters({\n      uiFlags: 'contactConversations/getUIFlags',\n    }),\n  },\n  watch: {\n    contactId(newContactId, prevContactId) {\n      if (newContactId && newContactId !== prevContactId) {\n        this.$store.dispatch('contactConversations/get', newContactId);\n      }\n    },\n  },\n  mounted() {\n    this.$store.dispatch('contactConversations/get', this.contactId);\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.no-label-message {\n  margin-bottom: var(--space-normal);\n  color: var(--b-500);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/conversation"},"metadata":{},"sourceType":"module"}