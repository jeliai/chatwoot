{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport Settings from './Settings';\nimport adminMixin from '../../../../mixins/isAdmin';\nimport accountMixin from '../../../../mixins/account';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\nexport default {\n  components: {\n    Settings: Settings\n  },\n  mixins: [adminMixin, accountMixin, globalConfigMixin],\n  data: function data() {\n    return {\n      loading: {},\n      showSettings: false,\n      showDeletePopup: false,\n      selectedInbox: {}\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    inboxesList: 'inboxes/getInboxes',\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    // Delete Modal\n    deleteConfirmText: function deleteConfirmText() {\n      return \"\".concat(this.$t('INBOX_MGMT.DELETE.CONFIRM.YES'), \" \").concat(this.selectedInbox.name);\n    },\n    deleteRejectText: function deleteRejectText() {\n      return \"\".concat(this.$t('INBOX_MGMT.DELETE.CONFIRM.NO'), \" \").concat(this.selectedInbox.name);\n    },\n    confirmDeleteMessage: function confirmDeleteMessage() {\n      return \"\".concat(this.$t('INBOX_MGMT.DELETE.CONFIRM.MESSAGE'), \" \").concat(this.selectedInbox.name, \" ?\");\n    },\n    confirmPlaceHolderText: function confirmPlaceHolderText() {\n      return \"\".concat(this.$t('INBOX_MGMT.DELETE.CONFIRM.PLACE_HOLDER', {\n        inboxName: this.selectedInbox.name\n      }));\n    }\n  }),\n  methods: {\n    twilioChannelName: function twilioChannelName(item) {\n      var _item$medium = item.medium,\n          medium = _item$medium === void 0 ? '' : _item$medium;\n      if (medium === 'whatsapp') return 'WhatsApp';\n      return 'Twilio SMS';\n    },\n    openSettings: function openSettings(inbox) {\n      this.showSettings = true;\n      this.selectedInbox = inbox;\n    },\n    closeSettings: function closeSettings() {\n      this.showSettings = false;\n      this.selectedInbox = {};\n    },\n    deleteInbox: function deleteInbox(_ref) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = _ref.id;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.$store.dispatch('inboxes/delete', id);\n\n              case 4:\n                bus.$emit('newToastMessage', _this.$t('INBOX_MGMT.DELETE.API.SUCCESS_MESSAGE'));\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                bus.$emit('newToastMessage', _this.$t('INBOX_MGMT.DELETE.API.ERROR_MESSAGE'));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 7]]);\n      }))();\n    },\n    confirmDeletion: function confirmDeletion() {\n      this.deleteInbox(this.selectedInbox);\n      this.closeDelete();\n    },\n    openDelete: function openDelete(inbox) {\n      this.showDeletePopup = true;\n      this.selectedInbox = inbox;\n    },\n    closeDelete: function closeDelete() {\n      this.showDeletePopup = false;\n      this.selectedInbox = {};\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <!-- List Canned Response -->\n    <div class=\"row\">\n      <div class=\"small-8 columns with-right-space\">\n        <p v-if=\"!inboxesList.length\" class=\"no-items-error-message\">\n          {{ $t('INBOX_MGMT.LIST.404') }}\n          <router-link\n            v-if=\"isAdmin\"\n            :to=\"addAccountScoping('settings/inboxes/new')\"\n          >\n            {{ $t('SETTINGS.INBOXES.NEW_INBOX') }}\n          </router-link>\n        </p>\n\n        <table v-if=\"inboxesList.length\" class=\"woot-table\">\n          <tbody>\n            <tr v-for=\"item in inboxesList\" :key=\"item.id\">\n              <td>\n                <img\n                  v-if=\"item.avatar_url\"\n                  class=\"woot-thumbnail\"\n                  :src=\"item.avatar_url\"\n                  alt=\"No Page Image\"\n                />\n                <img\n                  v-else\n                  class=\"woot-thumbnail\"\n                  src=\"~dashboard/assets/images/flag.svg\"\n                  alt=\"No Page Image\"\n                />\n              </td>\n              <!-- Short Code  -->\n              <td>\n                <span class=\"agent-name\">{{ item.name }}</span>\n                <span v-if=\"item.channel_type === 'Channel::FacebookPage'\">\n                  Facebook\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::WebWidget'\">\n                  Website\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::TwitterProfile'\">\n                  Twitter\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::TwilioSms'\">\n                  {{ twilioChannelName(item) }}\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::Whatsapp'\">\n                  Whatsapp\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::Sms'\">\n                  Sms\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::Email'\">\n                  Email\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::Telegram'\">\n                  Telegram\n                </span>\n                <span v-if=\"item.channel_type === 'Channel::Line'\">Line</span>\n                <span v-if=\"item.channel_type === 'Channel::Api'\">\n                  {{ globalConfig.apiChannelName || 'API' }}\n                </span>\n              </td>\n\n              <!-- Action Buttons -->\n              <td>\n                <div class=\"button-wrapper\">\n                  <router-link\n                    :to=\"addAccountScoping(`settings/inboxes/${item.id}`)\"\n                  >\n                    <woot-button\n                      v-if=\"isAdmin\"\n                      v-tooltip.top=\"$t('INBOX_MGMT.SETTINGS')\"\n                      variant=\"smooth\"\n                      size=\"tiny\"\n                      icon=\"settings\"\n                      color-scheme=\"secondary\"\n                      class-names=\"grey-btn\"\n                    />\n                  </router-link>\n\n                  <woot-button\n                    v-if=\"isAdmin\"\n                    v-tooltip.top=\"$t('INBOX_MGMT.DELETE.BUTTON_TEXT')\"\n                    variant=\"smooth\"\n                    color-scheme=\"alert\"\n                    size=\"tiny\"\n                    class-names=\"grey-btn\"\n                    :is-loading=\"loading[item.id]\"\n                    icon=\"dismiss-circle\"\n                    @click=\"openDelete(item)\"\n                  />\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div class=\"small-4 columns\">\n        <span\n          v-dompurify-html=\"\n            useInstallationName(\n              $t('INBOX_MGMT.SIDEBAR_TXT'),\n              globalConfig.installationName\n            )\n          \"\n        />\n      </div>\n    </div>\n    <settings\n      v-if=\"showSettings\"\n      :show.sync=\"showSettings\"\n      :on-close=\"closeSettings\"\n      :inbox=\"selectedInbox\"\n    />\n\n    <woot-confirm-delete-modal\n      v-if=\"showDeletePopup\"\n      :show.sync=\"showDeletePopup\"\n      :title=\"$t('INBOX_MGMT.DELETE.CONFIRM.TITLE')\"\n      :message=\"confirmDeleteMessage\"\n      :confirm-text=\"deleteConfirmText\"\n      :reject-text=\"deleteRejectText\"\n      :confirm-value=\"selectedInbox.name\"\n      :confirm-place-holder-text=\"confirmPlaceHolderText\"\n      @on-confirm=\"confirmDeletion\"\n      @on-close=\"closeDelete\"\n    />\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport Settings from './Settings';\nimport adminMixin from '../../../../mixins/isAdmin';\nimport accountMixin from '../../../../mixins/account';\nimport globalConfigMixin from 'shared/mixins/globalConfigMixin';\n\nexport default {\n  components: {\n    Settings,\n  },\n  mixins: [adminMixin, accountMixin, globalConfigMixin],\n  data() {\n    return {\n      loading: {},\n      showSettings: false,\n      showDeletePopup: false,\n      selectedInbox: {},\n    };\n  },\n  computed: {\n    ...mapGetters({\n      inboxesList: 'inboxes/getInboxes',\n      globalConfig: 'globalConfig/get',\n    }),\n    // Delete Modal\n    deleteConfirmText() {\n      return `${this.$t('INBOX_MGMT.DELETE.CONFIRM.YES')} ${\n        this.selectedInbox.name\n      }`;\n    },\n    deleteRejectText() {\n      return `${this.$t('INBOX_MGMT.DELETE.CONFIRM.NO')} ${\n        this.selectedInbox.name\n      }`;\n    },\n    confirmDeleteMessage() {\n      return `${this.$t('INBOX_MGMT.DELETE.CONFIRM.MESSAGE')} ${\n        this.selectedInbox.name\n      } ?`;\n    },\n    confirmPlaceHolderText() {\n      return `${this.$t('INBOX_MGMT.DELETE.CONFIRM.PLACE_HOLDER', {\n        inboxName: this.selectedInbox.name,\n      })}`;\n    },\n  },\n  methods: {\n    twilioChannelName(item) {\n      const { medium = '' } = item;\n      if (medium === 'whatsapp') return 'WhatsApp';\n      return 'Twilio SMS';\n    },\n    openSettings(inbox) {\n      this.showSettings = true;\n      this.selectedInbox = inbox;\n    },\n    closeSettings() {\n      this.showSettings = false;\n      this.selectedInbox = {};\n    },\n    async deleteInbox({ id }) {\n      try {\n        await this.$store.dispatch('inboxes/delete', id);\n        bus.$emit(\n          'newToastMessage',\n          this.$t('INBOX_MGMT.DELETE.API.SUCCESS_MESSAGE')\n        );\n      } catch (error) {\n        bus.$emit(\n          'newToastMessage',\n          this.$t('INBOX_MGMT.DELETE.API.ERROR_MESSAGE')\n        );\n      }\n    },\n\n    confirmDeletion() {\n      this.deleteInbox(this.selectedInbox);\n      this.closeDelete();\n    },\n    openDelete(inbox) {\n      this.showDeletePopup = true;\n      this.selectedInbox = inbox;\n    },\n    closeDelete() {\n      this.showDeletePopup = false;\n      this.selectedInbox = {};\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/inbox"},"metadata":{},"sourceType":"module"}