{"ast":null,"code":"/* eslint-disable no-cond-assign */\n\n/* eslint-disable no-plusplus */\nimport { undoItem, redoItem, icons, MenuItem } from 'prosemirror-menu';\nimport { toggleMark } from 'prosemirror-commands';\nimport { wrapInList } from 'prosemirror-schema-list';\nimport { openPrompt } from './prompt';\nimport { TextField } from './TextField'; // Helpers to create specific types of items\n\nfunction cmdItem(cmd, options) {\n  var passedOptions = {\n    label: options.title,\n    run: cmd\n  };\n  Object.keys(options).reduce(function (acc, optionKey) {\n    acc[optionKey] = options[optionKey];\n    return acc;\n  }, passedOptions);\n  if ((!options.enable || options.enable === true) && !options.select) passedOptions[options.enable ? 'enable' : 'select'] = function (state) {\n    return cmd(state);\n  };\n  return new MenuItem(passedOptions);\n}\n\nfunction markActive(state, type) {\n  var _state$selection = state.selection,\n      from = _state$selection.from,\n      $from = _state$selection.$from,\n      to = _state$selection.to,\n      empty = _state$selection.empty;\n  if (empty) return type.isInSet(state.storedMarks || $from.marks());\n  return state.doc.rangeHasMark(from, to, type);\n}\n\nfunction markItem(markType, options) {\n  var passedOptions = {\n    active: function active(state) {\n      return markActive(state, markType);\n    },\n    enable: true\n  };\n  Object.keys(options).reduce(function (acc, optionKey) {\n    acc[optionKey] = options[optionKey];\n    return acc;\n  }, passedOptions);\n  return cmdItem(toggleMark(markType), passedOptions);\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: 'Add or remove link',\n    icon: icons.link,\n    active: function active(state) {\n      return markActive(state, markType);\n    },\n    enable: function enable(state) {\n      return !state.selection.empty;\n    },\n    run: function run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch);\n        return true;\n      }\n\n      openPrompt({\n        title: 'Create a link',\n        fields: {\n          href: new TextField({\n            label: 'https://example.com',\n            class: 'small',\n            required: true\n          })\n        },\n        callback: function callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch);\n          view.focus();\n        }\n      });\n      return false;\n    }\n  });\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options);\n}\n\nexport function buildMenuItems(schema) {\n  var r = {};\n  var type;\n  if (type = schema.marks.strong) r.toggleStrong = markItem(type, {\n    title: 'Toggle strong style',\n    icon: icons.strong\n  });\n  if (type = schema.marks.em) r.toggleEm = markItem(type, {\n    title: 'Toggle emphasis',\n    icon: icons.em\n  });\n  if (type = schema.marks.code) r.toggleCode = markItem(type, {\n    title: 'Toggle code font',\n    icon: icons.code\n  });\n  if (type = schema.marks.link) r.toggleLink = linkItem(type);\n  if (type = schema.nodes.bullet_list) r.wrapBulletList = wrapListItem(type, {\n    title: 'Wrap in bullet list',\n    icon: icons.bulletList\n  });\n  if (type = schema.nodes.ordered_list) r.wrapOrderedList = wrapListItem(type, {\n    title: 'Wrap in ordered list',\n    icon: icons.orderedList\n  });\n\n  var cut = function cut(arr) {\n    return arr.filter(function (x) {\n      return x;\n    });\n  };\n\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])];\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList])];\n  r.fullMenu = r.inlineMenu.concat([[undoItem, redoItem]], r.blockMenu);\n  return r;\n}","map":null,"metadata":{},"sourceType":"module"}