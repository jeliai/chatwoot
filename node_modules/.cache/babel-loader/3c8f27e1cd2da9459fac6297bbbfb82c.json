{"ast":null,"code":"import \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.promise.finally.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\nimport WootDropdownItem from 'shared/components/ui/dropdown/DropdownItem';\nimport WootDropdownMenu from 'shared/components/ui/dropdown/DropdownMenu';\nimport WootDropdownHeader from 'shared/components/ui/dropdown/DropdownHeader';\nimport WootDropdownDivider from 'shared/components/ui/dropdown/DropdownDivider';\nimport AvailabilityStatusBadge from '../widgets/conversation/AvailabilityStatusBadge';\nvar AVAILABILITY_STATUS_KEYS = ['online', 'busy', 'offline'];\nexport default {\n  components: {\n    WootDropdownHeader: WootDropdownHeader,\n    WootDropdownDivider: WootDropdownDivider,\n    WootDropdownMenu: WootDropdownMenu,\n    WootDropdownItem: WootDropdownItem,\n    AvailabilityStatusBadge: AvailabilityStatusBadge\n  },\n  mixins: [clickaway],\n  data: function data() {\n    return {\n      isStatusMenuOpened: false,\n      isUpdating: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    getCurrentUserAvailability: 'getCurrentUserAvailability',\n    currentAccountId: 'getCurrentAccountId'\n  })), {}, {\n    availabilityDisplayLabel: function availabilityDisplayLabel() {\n      var _this = this;\n\n      var availabilityIndex = AVAILABILITY_STATUS_KEYS.findIndex(function (key) {\n        return key === _this.currentUserAvailability;\n      });\n      return this.$t('PROFILE_SETTINGS.FORM.AVAILABILITY.STATUSES_LIST')[availabilityIndex];\n    },\n    currentUserAvailability: function currentUserAvailability() {\n      return this.getCurrentUserAvailability;\n    },\n    availabilityStatuses: function availabilityStatuses() {\n      var _this2 = this;\n\n      return this.$t('PROFILE_SETTINGS.FORM.AVAILABILITY.STATUSES_LIST').map(function (statusLabel, index) {\n        return {\n          label: statusLabel,\n          value: AVAILABILITY_STATUS_KEYS[index],\n          disabled: _this2.currentUserAvailability === AVAILABILITY_STATUS_KEYS[index]\n        };\n      });\n    }\n  }),\n  methods: {\n    openStatusMenu: function openStatusMenu() {\n      this.isStatusMenuOpened = true;\n    },\n    closeStatusMenu: function closeStatusMenu() {\n      this.isStatusMenuOpened = false;\n    },\n    changeAvailabilityStatus: function changeAvailabilityStatus(availability) {\n      var _this3 = this;\n\n      var accountId = this.currentAccountId;\n\n      if (this.isUpdating) {\n        return;\n      }\n\n      this.isUpdating = true;\n      this.$store.dispatch('updateAvailability', {\n        availability: availability,\n        account_id: accountId\n      }).finally(function () {\n        _this3.isUpdating = false;\n      });\n    }\n  }\n};","map":{"version":3,"sources":["AvailabilityStatus.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,KAAA,IAAA,SAAA,QAAA,eAAA;AACA,OAAA,gBAAA,MAAA,4CAAA;AACA,OAAA,gBAAA,MAAA,4CAAA;AACA,OAAA,kBAAA,MAAA,8CAAA;AACA,OAAA,mBAAA,MAAA,+CAAA;AACA,OAAA,uBAAA,MAAA,iDAAA;AAEA,IAAA,wBAAA,GAAA,CAAA,QAAA,EAAA,MAAA,EAAA,SAAA,CAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,kBAAA,EAAA,kBADA;AAEA,IAAA,mBAAA,EAAA,mBAFA;AAGA,IAAA,gBAAA,EAAA,gBAHA;AAIA,IAAA,gBAAA,EAAA,gBAJA;AAKA,IAAA,uBAAA,EAAA;AALA,GADA;AASA,EAAA,MAAA,EAAA,CAAA,SAAA,CATA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA,KADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GAhBA;AAkBA,EAAA,QAAA,kCACA,UAAA,CAAA;AACA,IAAA,0BAAA,EAAA,4BADA;AAEA,IAAA,gBAAA,EAAA;AAFA,GAAA,CADA;AAKA,IAAA,wBALA,sCAKA;AAAA;;AACA,UAAA,iBAAA,GAAA,wBAAA,CAAA,SAAA,CACA,UAAA,GAAA;AAAA,eAAA,GAAA,KAAA,KAAA,CAAA,uBAAA;AAAA,OADA,CAAA;AAGA,aAAA,KAAA,EAAA,CAAA,kDAAA,EACA,iBADA,CAAA;AAGA,KAZA;AAaA,IAAA,uBAbA,qCAaA;AACA,aAAA,KAAA,0BAAA;AACA,KAfA;AAgBA,IAAA,oBAhBA,kCAgBA;AAAA;;AACA,aAAA,KAAA,EAAA,CAAA,kDAAA,EAAA,GAAA,CACA,UAAA,WAAA,EAAA,KAAA;AAAA,eAAA;AACA,UAAA,KAAA,EAAA,WADA;AAEA,UAAA,KAAA,EAAA,wBAAA,CAAA,KAAA,CAFA;AAGA,UAAA,QAAA,EACA,MAAA,CAAA,uBAAA,KAAA,wBAAA,CAAA,KAAA;AAJA,SAAA;AAAA,OADA,CAAA;AAQA;AAzBA,IAlBA;AA8CA,EAAA,OAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,WAAA,kBAAA,GAAA,IAAA;AACA,KAHA;AAIA,IAAA,eAJA,6BAIA;AACA,WAAA,kBAAA,GAAA,KAAA;AACA,KANA;AAOA,IAAA,wBAPA,oCAOA,YAPA,EAOA;AAAA;;AACA,UAAA,SAAA,GAAA,KAAA,gBAAA;;AACA,UAAA,KAAA,UAAA,EAAA;AACA;AACA;;AAEA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,MAAA,CACA,QADA,CACA,oBADA,EACA;AACA,QAAA,YAAA,EAAA,YADA;AAEA,QAAA,UAAA,EAAA;AAFA,OADA,EAKA,OALA,CAKA,YAAA;AACA,QAAA,MAAA,CAAA,UAAA,GAAA,KAAA;AACA,OAPA;AAQA;AAtBA;AA9CA,CAAA","sourcesContent":["<template>\n  <woot-dropdown-menu>\n    <woot-dropdown-header :title=\"$t('SIDEBAR.SET_AVAILABILITY_TITLE')\" />\n    <woot-dropdown-item\n      v-for=\"status in availabilityStatuses\"\n      :key=\"status.value\"\n      class=\"status-items\"\n    >\n      <woot-button\n        size=\"small\"\n        :color-scheme=\"status.disabled ? '' : 'secondary'\"\n        :variant=\"status.disabled ? 'smooth' : 'clear'\"\n        class-names=\"status-change--dropdown-button\"\n        @click=\"changeAvailabilityStatus(status.value)\"\n      >\n        <availability-status-badge :status=\"status.value\" />\n        {{ status.label }}\n      </woot-button>\n    </woot-dropdown-item>\n    <woot-dropdown-divider />\n  </woot-dropdown-menu>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\nimport WootDropdownItem from 'shared/components/ui/dropdown/DropdownItem';\nimport WootDropdownMenu from 'shared/components/ui/dropdown/DropdownMenu';\nimport WootDropdownHeader from 'shared/components/ui/dropdown/DropdownHeader';\nimport WootDropdownDivider from 'shared/components/ui/dropdown/DropdownDivider';\nimport AvailabilityStatusBadge from '../widgets/conversation/AvailabilityStatusBadge';\n\nconst AVAILABILITY_STATUS_KEYS = ['online', 'busy', 'offline'];\n\nexport default {\n  components: {\n    WootDropdownHeader,\n    WootDropdownDivider,\n    WootDropdownMenu,\n    WootDropdownItem,\n    AvailabilityStatusBadge,\n  },\n\n  mixins: [clickaway],\n\n  data() {\n    return {\n      isStatusMenuOpened: false,\n      isUpdating: false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({\n      getCurrentUserAvailability: 'getCurrentUserAvailability',\n      currentAccountId: 'getCurrentAccountId',\n    }),\n    availabilityDisplayLabel() {\n      const availabilityIndex = AVAILABILITY_STATUS_KEYS.findIndex(\n        key => key === this.currentUserAvailability\n      );\n      return this.$t('PROFILE_SETTINGS.FORM.AVAILABILITY.STATUSES_LIST')[\n        availabilityIndex\n      ];\n    },\n    currentUserAvailability() {\n      return this.getCurrentUserAvailability;\n    },\n    availabilityStatuses() {\n      return this.$t('PROFILE_SETTINGS.FORM.AVAILABILITY.STATUSES_LIST').map(\n        (statusLabel, index) => ({\n          label: statusLabel,\n          value: AVAILABILITY_STATUS_KEYS[index],\n          disabled:\n            this.currentUserAvailability === AVAILABILITY_STATUS_KEYS[index],\n        })\n      );\n    },\n  },\n\n  methods: {\n    openStatusMenu() {\n      this.isStatusMenuOpened = true;\n    },\n    closeStatusMenu() {\n      this.isStatusMenuOpened = false;\n    },\n    changeAvailabilityStatus(availability) {\n      const accountId = this.currentAccountId;\n      if (this.isUpdating) {\n        return;\n      }\n\n      this.isUpdating = true;\n      this.$store\n        .dispatch('updateAvailability', {\n          availability: availability,\n          account_id: accountId,\n        })\n        .finally(() => {\n          this.isUpdating = false;\n        });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import '~dashboard/assets/scss/variables';\n\n.status {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: var(--space-micro) var(--space-smaller);\n}\n\n.status-view {\n  display: flex;\n  align-items: baseline;\n\n  & &--title {\n    color: var(--b-600);\n    font-size: var(--font-size-small);\n    font-weight: var(--font-weight-medium);\n    margin-left: var(--space-small);\n\n    &:first-letter {\n      text-transform: capitalize;\n    }\n  }\n}\n\n.status-change {\n  .dropdown-pane {\n    top: -132px;\n    right: var(--space-normal);\n  }\n\n  .status-items {\n    display: flex;\n    align-items: baseline;\n  }\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/layout"},"metadata":{},"sourceType":"module"}