{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport Auth from '../../api/auth';\nimport WootSubmitButton from '../../components/buttons/FormSubmitButton';\nimport { DEFAULT_REDIRECT_URL } from '../../constants';\nexport default {\n  components: {\n    WootSubmitButton: WootSubmitButton\n  },\n  props: {\n    resetPasswordToken: {\n      type: String,\n      default: ''\n    },\n    redirectUrl: {\n      type: String,\n      default: ''\n    },\n    config: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      // We need to initialize the component with any\n      // properties that will be used in it\n      credentials: {\n        confirmPassword: '',\n        password: ''\n      },\n      newPasswordAPI: {\n        message: '',\n        showLoading: false\n      },\n      error: ''\n    };\n  },\n  mounted: function mounted() {\n    // If url opened without token\n    // redirect to login\n    if (!this.resetPasswordToken) {\n      window.location = DEFAULT_REDIRECT_URL;\n    }\n  },\n  validations: {\n    credentials: {\n      password: {\n        required: required,\n        minLength: minLength(6)\n      },\n      confirmPassword: {\n        required: required,\n        minLength: minLength(6),\n        isEqPassword: function isEqPassword(value) {\n          if (value !== this.credentials.password) {\n            return false;\n          }\n\n          return true;\n        }\n      }\n    }\n  },\n  methods: {\n    showAlert: function showAlert(message) {\n      // Reset loading, current selected agent\n      this.newPasswordAPI.showLoading = false;\n      bus.$emit('newToastMessage', message);\n    },\n    login: function login() {\n      var _this = this;\n\n      this.newPasswordAPI.showLoading = true;\n      var credentials = {\n        confirmPassword: this.credentials.confirmPassword,\n        password: this.credentials.password,\n        resetPasswordToken: this.resetPasswordToken\n      };\n      Auth.setNewPassword(credentials).then(function (res) {\n        if (res.status === 200) {\n          window.location = DEFAULT_REDIRECT_URL;\n        }\n      }).catch(function (error) {\n        var _error$data;\n\n        var errorMessage = _this.$t('SET_NEW_PASSWORD.API.ERROR_MESSAGE');\n\n        if (error !== null && error !== void 0 && (_error$data = error.data) !== null && _error$data !== void 0 && _error$data.message) {\n          errorMessage = error.data.message;\n        }\n\n        _this.showAlert(errorMessage);\n      });\n    }\n  }\n};","map":{"version":3,"sources":["PasswordEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,SAAA,QAAA,EAAA,SAAA,QAAA,0BAAA;AACA,OAAA,IAAA,MAAA,gBAAA;AAEA,OAAA,gBAAA,MAAA,2CAAA;AACA,SAAA,oBAAA,QAAA,iBAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GADA;AAIA,EAAA,KAAA,EAAA;AACA,IAAA,kBAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KADA;AAEA,IAAA,WAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAFA;AAGA,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA;AAAA;AAHA,GAJA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA;AACA;AACA,MAAA,WAAA,EAAA;AACA,QAAA,eAAA,EAAA,EADA;AAEA,QAAA,QAAA,EAAA;AAFA,OAHA;AAOA,MAAA,cAAA,EAAA;AACA,QAAA,OAAA,EAAA,EADA;AAEA,QAAA,WAAA,EAAA;AAFA,OAPA;AAWA,MAAA,KAAA,EAAA;AAXA,KAAA;AAaA,GAvBA;AAwBA,EAAA,OAxBA,qBAwBA;AACA;AACA;AACA,QAAA,CAAA,KAAA,kBAAA,EAAA;AACA,MAAA,MAAA,CAAA,QAAA,GAAA,oBAAA;AACA;AACA,GA9BA;AA+BA,EAAA,WAAA,EAAA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,QAAA,EAAA;AACA,QAAA,QAAA,EAAA,QADA;AAEA,QAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAFA,OADA;AAKA,MAAA,eAAA,EAAA;AACA,QAAA,QAAA,EAAA,QADA;AAEA,QAAA,SAAA,EAAA,SAAA,CAAA,CAAA,CAFA;AAGA,QAAA,YAHA,wBAGA,KAHA,EAGA;AACA,cAAA,KAAA,KAAA,KAAA,WAAA,CAAA,QAAA,EAAA;AACA,mBAAA,KAAA;AACA;;AACA,iBAAA,IAAA;AACA;AARA;AALA;AADA,GA/BA;AAiDA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,qBACA,OADA,EACA;AACA;AACA,WAAA,cAAA,CAAA,WAAA,GAAA,KAAA;AACA,MAAA,GAAA,CAAA,KAAA,CAAA,iBAAA,EAAA,OAAA;AACA,KALA;AAMA,IAAA,KANA,mBAMA;AAAA;;AACA,WAAA,cAAA,CAAA,WAAA,GAAA,IAAA;AACA,UAAA,WAAA,GAAA;AACA,QAAA,eAAA,EAAA,KAAA,WAAA,CAAA,eADA;AAEA,QAAA,QAAA,EAAA,KAAA,WAAA,CAAA,QAFA;AAGA,QAAA,kBAAA,EAAA,KAAA;AAHA,OAAA;AAKA,MAAA,IAAA,CAAA,cAAA,CAAA,WAAA,EACA,IADA,CACA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,GAAA,oBAAA;AACA;AACA,OALA,EAMA,KANA,CAMA,UAAA,KAAA,EAAA;AAAA;;AACA,YAAA,YAAA,GAAA,KAAA,CAAA,EAAA,CAAA,oCAAA,CAAA;;AACA,YAAA,KAAA,aAAA,KAAA,8BAAA,KAAA,CAAA,IAAA,wCAAA,YAAA,OAAA,EAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,IAAA,CAAA,OAAA;AACA;;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,YAAA;AACA,OAZA;AAaA;AA1BA;AAjDA,CAAA","sourcesContent":["<template>\n  <form\n    class=\"login-box medium-4 column align-self-middle\"\n    @submit.prevent=\"login()\"\n  >\n    <div class=\"column log-in-form\">\n      <h4>{{ $t('SET_NEW_PASSWORD.TITLE') }}</h4>\n      <label :class=\"{ error: $v.credentials.password.$error }\">\n        {{ $t('LOGIN.PASSWORD.LABEL') }}\n        <input\n          v-model.trim=\"credentials.password\"\n          type=\"password\"\n          :placeholder=\"$t('SET_NEW_PASSWORD.PASSWORD.PLACEHOLDER')\"\n          @input=\"$v.credentials.password.$touch\"\n        />\n        <span v-if=\"$v.credentials.password.$error\" class=\"message\">\n          {{ $t('SET_NEW_PASSWORD.PASSWORD.ERROR') }}\n        </span>\n      </label>\n      <label :class=\"{ error: $v.credentials.confirmPassword.$error }\">\n        {{ $t('SET_NEW_PASSWORD.CONFIRM_PASSWORD.LABEL') }}\n        <input\n          v-model.trim=\"credentials.confirmPassword\"\n          type=\"password\"\n          :placeholder=\"$t('SET_NEW_PASSWORD.CONFIRM_PASSWORD.PLACEHOLDER')\"\n          @input=\"$v.credentials.confirmPassword.$touch\"\n        />\n        <span v-if=\"$v.credentials.confirmPassword.$error\" class=\"message\">\n          {{ $t('SET_NEW_PASSWORD.CONFIRM_PASSWORD.ERROR') }}\n        </span>\n      </label>\n      <woot-submit-button\n        :disabled=\"\n          $v.credentials.password.$invalid ||\n            $v.credentials.confirmPassword.$invalid ||\n            newPasswordAPI.showLoading\n        \"\n        :button-text=\"$t('SET_NEW_PASSWORD.SUBMIT')\"\n        :loading=\"newPasswordAPI.showLoading\"\n        button-class=\"expanded\"\n      />\n      <!-- <input type=\"submit\" class=\"button \" v-on:click.prevent=\"login()\" v-bind:value=\"\" > -->\n    </div>\n  </form>\n</template>\n\n<script>\nimport { required, minLength } from 'vuelidate/lib/validators';\nimport Auth from '../../api/auth';\n\nimport WootSubmitButton from '../../components/buttons/FormSubmitButton';\nimport { DEFAULT_REDIRECT_URL } from '../../constants';\n\nexport default {\n  components: {\n    WootSubmitButton,\n  },\n  props: {\n    resetPasswordToken: { type: String, default: '' },\n    redirectUrl: { type: String, default: '' },\n    config: { type: String, default: '' },\n  },\n  data() {\n    return {\n      // We need to initialize the component with any\n      // properties that will be used in it\n      credentials: {\n        confirmPassword: '',\n        password: '',\n      },\n      newPasswordAPI: {\n        message: '',\n        showLoading: false,\n      },\n      error: '',\n    };\n  },\n  mounted() {\n    // If url opened without token\n    // redirect to login\n    if (!this.resetPasswordToken) {\n      window.location = DEFAULT_REDIRECT_URL;\n    }\n  },\n  validations: {\n    credentials: {\n      password: {\n        required,\n        minLength: minLength(6),\n      },\n      confirmPassword: {\n        required,\n        minLength: minLength(6),\n        isEqPassword(value) {\n          if (value !== this.credentials.password) {\n            return false;\n          }\n          return true;\n        },\n      },\n    },\n  },\n  methods: {\n    showAlert(message) {\n      // Reset loading, current selected agent\n      this.newPasswordAPI.showLoading = false;\n      bus.$emit('newToastMessage', message);\n    },\n    login() {\n      this.newPasswordAPI.showLoading = true;\n      const credentials = {\n        confirmPassword: this.credentials.confirmPassword,\n        password: this.credentials.password,\n        resetPasswordToken: this.resetPasswordToken,\n      };\n      Auth.setNewPassword(credentials)\n        .then(res => {\n          if (res.status === 200) {\n            window.location = DEFAULT_REDIRECT_URL;\n          }\n        })\n        .catch(error => {\n          let errorMessage = this.$t('SET_NEW_PASSWORD.API.ERROR_MESSAGE');\n          if (error?.data?.message) {\n            errorMessage = error.data.message;\n          }\n          this.showAlert(errorMessage);\n        });\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/auth"},"metadata":{},"sourceType":"module"}