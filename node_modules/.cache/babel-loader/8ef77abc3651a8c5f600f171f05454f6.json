{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Vue from 'vue';\nimport types from '../mutation-types';\nimport ConversationApi from '../../api/inbox/conversation';\nvar state = {\n  mineCount: 0,\n  unAssignedCount: 0,\n  allCount: 0\n};\nexport var getters = {\n  getStats: function getStats($state) {\n    return $state;\n  }\n};\nexport var actions = {\n  get: function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, params) {\n      var commit, response, meta;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return ConversationApi.meta(params);\n\n            case 4:\n              response = _context.sent;\n              meta = response.data.meta;\n              commit(types.SET_CONV_TAB_META, meta);\n              _context.next = 11;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 9]]);\n    }));\n\n    function get(_x, _x2) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }(),\n  set: function set(_ref2, meta) {\n    var commit = _ref2.commit;\n    commit(types.SET_CONV_TAB_META, meta);\n  }\n};\nexport var mutations = _defineProperty({}, types.SET_CONV_TAB_META, function ($state) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      mineCount = _ref3.mine_count,\n      unAssignedCount = _ref3.unassigned_count,\n      allCount = _ref3.all_count;\n\n  Vue.set($state, 'mineCount', mineCount);\n  Vue.set($state, 'allCount', allCount);\n  Vue.set($state, 'unAssignedCount', unAssignedCount);\n});\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversationStats.js"],"names":["Vue","types","ConversationApi","state","mineCount","unAssignedCount","allCount","getters","getStats","$state","actions","get","params","commit","meta","response","data","SET_CONV_TAB_META","set","mutations","mine_count","unassigned_count","all_count","namespaced"],"mappings":";;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,CADC;AAEZC,EAAAA,eAAe,EAAE,CAFL;AAGZC,EAAAA,QAAQ,EAAE;AAHE,CAAd;AAMA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,QAAQ,EAAE,kBAAAC,MAAM;AAAA,WAAIA,MAAJ;AAAA;AADK,CAAhB;AAIP,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,GAAG;AAAA,uEAAE,uBAAmBC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,MAAT,QAASA,MAAT;AAAA;AAAA;AAAA,qBAEsBX,eAAe,CAACY,IAAhB,CAAqBF,MAArB,CAFtB;;AAAA;AAEKG,cAAAA,QAFL;AAISD,cAAAA,IAJT,GAKGC,QALH,CAICC,IAJD,CAISF,IAJT;AAMDD,cAAAA,MAAM,CAACZ,KAAK,CAACgB,iBAAP,EAA0BH,IAA1B,CAAN;AANC;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADkB;AAYrBI,EAAAA,GAZqB,sBAYLJ,IAZK,EAYC;AAAA,QAAhBD,MAAgB,SAAhBA,MAAgB;AACpBA,IAAAA,MAAM,CAACZ,KAAK,CAACgB,iBAAP,EAA0BH,IAA1B,CAAN;AACD;AAdoB,CAAhB;AAiBP,OAAO,IAAMK,SAAS,uBACnBlB,KAAK,CAACgB,iBADa,YAElBR,MAFkB,EAQlB;AAAA,kFADI,EACJ;AAAA,MAJcL,SAId,SAJEgB,UAIF;AAAA,MAHoBf,eAGpB,SAHEgB,gBAGF;AAAA,MAFaf,QAEb,SAFEgB,SAEF;;AACAtB,EAAAA,GAAG,CAACkB,GAAJ,CAAQT,MAAR,EAAgB,WAAhB,EAA6BL,SAA7B;AACAJ,EAAAA,GAAG,CAACkB,GAAJ,CAAQT,MAAR,EAAgB,UAAhB,EAA4BH,QAA5B;AACAN,EAAAA,GAAG,CAACkB,GAAJ,CAAQT,MAAR,EAAgB,iBAAhB,EAAmCJ,eAAnC;AACD,CAZmB,CAAf;AAeP,eAAe;AACbkB,EAAAA,UAAU,EAAE,IADC;AAEbpB,EAAAA,KAAK,EAALA,KAFa;AAGbI,EAAAA,OAAO,EAAPA,OAHa;AAIbG,EAAAA,OAAO,EAAPA,OAJa;AAKbS,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import Vue from 'vue';\nimport types from '../mutation-types';\nimport ConversationApi from '../../api/inbox/conversation';\n\nconst state = {\n  mineCount: 0,\n  unAssignedCount: 0,\n  allCount: 0,\n};\n\nexport const getters = {\n  getStats: $state => $state,\n};\n\nexport const actions = {\n  get: async ({ commit }, params) => {\n    try {\n      const response = await ConversationApi.meta(params);\n      const {\n        data: { meta },\n      } = response;\n      commit(types.SET_CONV_TAB_META, meta);\n    } catch (error) {\n      // Ignore error\n    }\n  },\n  set({ commit }, meta) {\n    commit(types.SET_CONV_TAB_META, meta);\n  },\n};\n\nexport const mutations = {\n  [types.SET_CONV_TAB_META](\n    $state,\n    {\n      mine_count: mineCount,\n      unassigned_count: unAssignedCount,\n      all_count: allCount,\n    } = {}\n  ) {\n    Vue.set($state, 'mineCount', mineCount);\n    Vue.set($state, 'allCount', allCount);\n    Vue.set($state, 'unAssignedCount', unAssignedCount);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"]},"metadata":{},"sourceType":"module"}