{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Spinner from 'shared/components/Spinner';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {\n    Spinner: Spinner\n  },\n  mixins: [alertMixin],\n  props: {\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    initialFileName: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      uploadState: 'idle',\n      label: this.$t('AUTOMATION.ATTACHMENT.LABEL_IDLE')\n    };\n  },\n  mounted: function mounted() {\n    if (this.initialFileName) {\n      this.label = this.initialFileName;\n      this.uploadState = 'uploaded';\n    }\n  },\n  methods: {\n    onChangeFile: function onChangeFile(event) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var file, formData, id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.uploadState = 'processing';\n                _this.label = _this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOADING');\n                _context.prev = 2;\n                file = event.target.files[0];\n                formData = new FormData();\n                formData.append('attachment', file, file.name);\n                _context.next = 8;\n                return _this.$store.dispatch('automations/uploadAttachment', formData);\n\n              case 8:\n                id = _context.sent;\n\n                _this.$emit('input', [id]);\n\n                _this.uploadState = 'uploaded';\n                _this.label = _this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOADED');\n                _context.next = 19;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](2);\n                _this.uploadState = 'failed';\n                _this.label = _this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOAD_FAILED');\n\n                _this.showAlert(_this.$t('AUTOMATION.ATTACHMENT.UPLOAD_ERROR'));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 14]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"sources":["AutomationFileInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAA,OAAA,MAAA,2BAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GADA;AAIA,EAAA,MAAA,EAAA,CAAA,UAAA,CAJA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AALA,GALA;AAeA,EAAA,IAfA,kBAeA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,MADA;AAEA,MAAA,KAAA,EAAA,KAAA,EAAA,CAAA,kCAAA;AAFA,KAAA;AAIA,GApBA;AAqBA,EAAA,OArBA,qBAqBA;AACA,QAAA,KAAA,eAAA,EAAA;AACA,WAAA,KAAA,GAAA,KAAA,eAAA;AACA,WAAA,WAAA,GAAA,UAAA;AACA;AACA,GA1BA;AA2BA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,KADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,WAAA,GAAA,YAAA;AACA,gBAAA,KAAA,CAAA,KAAA,GAAA,KAAA,CAAA,EAAA,CAAA,uCAAA,CAAA;AAFA;AAIA,gBAAA,IAJA,GAIA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAJA;AAKA,gBAAA,QALA,GAKA,IAAA,QAAA,EALA;AAMA,gBAAA,QAAA,CAAA,MAAA,CAAA,YAAA,EAAA,IAAA,EAAA,IAAA,CAAA,IAAA;AANA;AAAA,uBAOA,KAAA,CAAA,MAAA,CAAA,QAAA,CACA,8BADA,EAEA,QAFA,CAPA;;AAAA;AAOA,gBAAA,EAPA;;AAWA,gBAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,EAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,WAAA,GAAA,UAAA;AACA,gBAAA,KAAA,CAAA,KAAA,GAAA,KAAA,CAAA,EAAA,CAAA,sCAAA,CAAA;AAbA;AAAA;;AAAA;AAAA;AAAA;AAeA,gBAAA,KAAA,CAAA,WAAA,GAAA,QAAA;AACA,gBAAA,KAAA,CAAA,KAAA,GAAA,KAAA,CAAA,EAAA,CAAA,2CAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,EAAA,CAAA,oCAAA,CAAA;;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AApBA;AA3BA,CAAA","sourcesContent":["<template>\n  <label class=\"input-wrapper\" :class=\"uploadState\">\n    <input\n      v-if=\"uploadState !== 'processing'\"\n      type=\"file\"\n      name=\"attachment\"\n      :class=\"uploadState === 'processing' ? 'disabled' : ''\"\n      @change=\"onChangeFile\"\n    />\n    <spinner v-if=\"uploadState === 'processing'\" />\n    <fluent-icon v-if=\"uploadState === 'idle'\" icon=\"file-upload\" />\n    <fluent-icon\n      v-if=\"uploadState === 'uploaded'\"\n      icon=\"checkmark-circle\"\n      type=\"outline\"\n      class=\"success-icon\"\n    />\n    <fluent-icon\n      v-if=\"uploadState === 'failed'\"\n      icon=\"dismiss-circle\"\n      type=\"outline\"\n      class=\"error-icon\"\n    />\n    <p class=\"file-button\">{{ label }}</p>\n  </label>\n</template>\n\n<script>\nimport Spinner from 'shared/components/Spinner';\nimport alertMixin from 'shared/mixins/alertMixin';\nexport default {\n  components: {\n    Spinner,\n  },\n  mixins: [alertMixin],\n  props: {\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    initialFileName: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      uploadState: 'idle',\n      label: this.$t('AUTOMATION.ATTACHMENT.LABEL_IDLE'),\n    };\n  },\n  mounted() {\n    if (this.initialFileName) {\n      this.label = this.initialFileName;\n      this.uploadState = 'uploaded';\n    }\n  },\n  methods: {\n    async onChangeFile(event) {\n      this.uploadState = 'processing';\n      this.label = this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOADING');\n      try {\n        const file = event.target.files[0];\n        const formData = new FormData();\n        formData.append('attachment', file, file.name);\n        const id = await this.$store.dispatch(\n          'automations/uploadAttachment',\n          formData\n        );\n        this.$emit('input', [id]);\n        this.uploadState = 'uploaded';\n        this.label = this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOADED');\n      } catch (error) {\n        this.uploadState = 'failed';\n        this.label = this.$t('AUTOMATION.ATTACHMENT.LABEL_UPLOAD_FAILED');\n        this.showAlert(this.$t('AUTOMATION.ATTACHMENT.UPLOAD_ERROR'));\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\ninput[type='file'] {\n  display: none;\n}\n.input-wrapper {\n  display: flex;\n  height: 39px;\n  background-color: var(--white);\n  border-radius: var(--border-radius-small);\n  border: 1px dashed var(--w-100);\n  padding: var(--space-smaller) var(--space-small);\n  align-items: center;\n  font-size: var(--font-size-mini);\n  cursor: pointer;\n}\n.success-icon {\n  margin-right: var(--space-small);\n  color: var(--g-500);\n}\n.error-icon {\n  margin-right: var(--space-small);\n  color: var(--r-500);\n}\n\n.processing {\n  cursor: not-allowed;\n  opacity: 0.9;\n}\n.file-button {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  margin-bottom: 0;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets"},"metadata":{},"sourceType":"module"}