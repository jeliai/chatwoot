{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.from.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ContactsHeader from './Header';\nimport ContactsTable from './ContactsTable';\nimport ContactInfoPanel from './ContactInfoPanel';\nimport CreateContact from 'dashboard/routes/dashboard/conversation/contact/CreateContact';\nimport TableFooter from 'dashboard/components/widgets/TableFooter';\nimport ImportContacts from './ImportContacts.vue';\nimport ContactsAdvancedFilters from './ContactsAdvancedFilters.vue';\nimport contactFilterItems from '../contactFilterItems';\nimport filterQueryGenerator from '../../../../helper/filterQueryGenerator';\nimport AddCustomViews from 'dashboard/routes/dashboard/customviews/AddCustomViews';\nimport DeleteCustomViews from 'dashboard/routes/dashboard/customviews/DeleteCustomViews';\nvar DEFAULT_PAGE = 1;\nvar FILTER_TYPE_CONTACT = 1;\nexport default {\n  components: {\n    ContactsHeader: ContactsHeader,\n    ContactsTable: ContactsTable,\n    TableFooter: TableFooter,\n    ContactInfoPanel: ContactInfoPanel,\n    CreateContact: CreateContact,\n    ImportContacts: ImportContacts,\n    ContactsAdvancedFilters: ContactsAdvancedFilters,\n    AddCustomViews: AddCustomViews,\n    DeleteCustomViews: DeleteCustomViews\n  },\n  props: {\n    label: {\n      type: String,\n      default: ''\n    },\n    segmentsId: {\n      type: [String, Number],\n      default: 0\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      searchQuery: '',\n      showCreateModal: false,\n      showImportModal: false,\n      selectedContactId: '',\n      sortConfig: {\n        name: 'asc'\n      },\n      showFiltersModal: false,\n      contactFilterItems: contactFilterItems.map(function (filter) {\n        return _objectSpread(_objectSpread({}, filter), {}, {\n          attributeName: _this.$t(\"CONTACTS_FILTER.ATTRIBUTES.\".concat(filter.attributeI18nKey))\n        });\n      }),\n      segmentsQuery: {},\n      filterType: FILTER_TYPE_CONTACT,\n      showAddSegmentsModal: false,\n      showDeleteSegmentsModal: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    records: 'contacts/getContacts',\n    uiFlags: 'contacts/getUIFlags',\n    meta: 'contacts/getMeta',\n    segments: 'customViews/getCustomViews',\n    getAppliedContactFilters: 'contacts/getAppliedContactFilters'\n  })), {}, {\n    showEmptySearchResult: function showEmptySearchResult() {\n      var hasEmptyResults = !!this.searchQuery && this.records.length === 0;\n      return hasEmptyResults;\n    },\n    hasAppliedFilters: function hasAppliedFilters() {\n      return this.getAppliedContactFilters.length;\n    },\n    hasActiveSegments: function hasActiveSegments() {\n      return this.activeSegment && this.segmentsId !== 0;\n    },\n    isContactAndLabelDashboard: function isContactAndLabelDashboard() {\n      return this.$route.name === 'contacts_dashboard' || this.$route.name === 'contacts_labels_dashboard';\n    },\n    pageTitle: function pageTitle() {\n      if (this.hasActiveSegments) {\n        return this.activeSegment.name;\n      }\n\n      if (this.label) {\n        return \"#\".concat(this.label);\n      }\n\n      return this.$t('CONTACTS_PAGE.HEADER');\n    },\n    selectedContact: function selectedContact() {\n      var _this2 = this;\n\n      if (this.selectedContactId) {\n        var contact = this.records.find(function (item) {\n          return _this2.selectedContactId === item.id;\n        });\n        return contact;\n      }\n\n      return undefined;\n    },\n    showContactViewPane: function showContactViewPane() {\n      return this.selectedContactId !== '';\n    },\n    wrapClas: function wrapClas() {\n      return this.showContactViewPane ? 'medium-9' : 'medium-12';\n    },\n    pageParameter: function pageParameter() {\n      var _this$$route$query;\n\n      var selectedPageNumber = Number((_this$$route$query = this.$route.query) === null || _this$$route$query === void 0 ? void 0 : _this$$route$query.page);\n      return !Number.isNaN(selectedPageNumber) && selectedPageNumber >= DEFAULT_PAGE ? selectedPageNumber : DEFAULT_PAGE;\n    },\n    activeSegment: function activeSegment() {\n      var _this3 = this;\n\n      if (this.segmentsId) {\n        var _this$segments$filter = this.segments.filter(function (view) {\n          return view.id === Number(_this3.segmentsId);\n        }),\n            _this$segments$filter2 = _slicedToArray(_this$segments$filter, 1),\n            firstValue = _this$segments$filter2[0];\n\n        return firstValue;\n      }\n\n      return undefined;\n    }\n  }),\n  watch: {\n    label: function label() {\n      this.fetchContacts(DEFAULT_PAGE);\n\n      if (this.hasAppliedFilters) {\n        this.clearFilters();\n      }\n    },\n    activeSegment: function activeSegment() {\n      if (this.hasActiveSegments) {\n        var payload = this.activeSegment.query;\n        this.fetchSavedFilteredContact(payload, DEFAULT_PAGE);\n      }\n\n      if (this.hasAppliedFilters && this.$route.name === 'contacts_dashboard') {\n        this.fetchFilteredContacts(DEFAULT_PAGE);\n      } else {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.fetchContacts(this.pageParameter);\n  },\n  methods: {\n    updatePageParam: function updatePageParam(page) {\n      window.history.pushState({}, null, \"\".concat(this.$route.path, \"?page=\").concat(page));\n    },\n    getSortAttribute: function getSortAttribute() {\n      var _this4 = this;\n\n      var sortAttr = Object.keys(this.sortConfig).reduce(function (acc, sortKey) {\n        var sortOrder = _this4.sortConfig[sortKey];\n\n        if (sortOrder) {\n          var sortOrderSign = sortOrder === 'asc' ? '' : '-';\n          return \"\".concat(sortOrderSign).concat(sortKey);\n        }\n\n        return acc;\n      }, '');\n\n      if (!sortAttr) {\n        this.sortConfig = {\n          name: 'asc'\n        };\n        sortAttr = 'name';\n      }\n\n      return sortAttr;\n    },\n    fetchContacts: function fetchContacts(page) {\n      if (this.isContactAndLabelDashboard) {\n        this.updatePageParam(page);\n        var value = '';\n\n        if (this.searchQuery.charAt(0) === '+') {\n          value = this.searchQuery.substring(1);\n        } else {\n          value = this.searchQuery;\n        }\n\n        var requestParams = {\n          page: page,\n          sortAttr: this.getSortAttribute(),\n          label: this.label\n        };\n\n        if (!value) {\n          this.$store.dispatch('contacts/get', requestParams);\n        } else {\n          this.$store.dispatch('contacts/search', _objectSpread({\n            search: encodeURIComponent(value)\n          }, requestParams));\n        }\n      }\n    },\n    fetchSavedFilteredContact: function fetchSavedFilteredContact(payload, page) {\n      if (this.hasActiveSegments) {\n        this.updatePageParam(page);\n        this.$store.dispatch('contacts/filter', {\n          queryPayload: payload,\n          page: page\n        });\n      }\n    },\n    fetchFilteredContacts: function fetchFilteredContacts(page) {\n      if (this.hasAppliedFilters) {\n        var payload = this.segmentsQuery;\n        this.updatePageParam(page);\n        this.$store.dispatch('contacts/filter', {\n          queryPayload: payload,\n          page: page\n        });\n      }\n    },\n    onInputSearch: function onInputSearch(event) {\n      var newQuery = event.target.value;\n      var refetchAllContacts = !!this.searchQuery && newQuery === '';\n      this.searchQuery = newQuery;\n\n      if (refetchAllContacts) {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n    onSearchSubmit: function onSearchSubmit() {\n      this.selectedContactId = '';\n\n      if (this.searchQuery) {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n    onPageChange: function onPageChange(page) {\n      this.selectedContactId = '';\n\n      if (this.segmentsId !== 0) {\n        var payload = this.activeSegment.query;\n        this.fetchSavedFilteredContact(payload, page);\n      }\n\n      if (this.hasAppliedFilters) {\n        this.fetchFilteredContacts(page);\n      } else {\n        this.fetchContacts(page);\n      }\n    },\n    openContactInfoPanel: function openContactInfoPanel(contactId) {\n      this.selectedContactId = contactId;\n      this.showContactInfoPanelPane = true;\n    },\n    closeContactInfoPanel: function closeContactInfoPanel() {\n      this.selectedContactId = '';\n      this.showContactInfoPanelPane = false;\n    },\n    onToggleCreate: function onToggleCreate() {\n      this.showCreateModal = !this.showCreateModal;\n    },\n    onToggleSaveFilters: function onToggleSaveFilters() {\n      this.showAddSegmentsModal = true;\n    },\n    onCloseAddSegmentsModal: function onCloseAddSegmentsModal() {\n      this.showAddSegmentsModal = false;\n    },\n    onToggleDeleteFilters: function onToggleDeleteFilters() {\n      this.showDeleteSegmentsModal = true;\n    },\n    onCloseDeleteSegmentsModal: function onCloseDeleteSegmentsModal() {\n      this.showDeleteSegmentsModal = false;\n    },\n    onToggleImport: function onToggleImport() {\n      this.showImportModal = !this.showImportModal;\n    },\n    onSortChange: function onSortChange(params) {\n      this.sortConfig = params;\n      this.fetchContacts(this.meta.currentPage);\n    },\n    onToggleFilters: function onToggleFilters() {\n      this.showFiltersModal = !this.showFiltersModal;\n    },\n    onApplyFilter: function onApplyFilter(payload) {\n      this.closeContactInfoPanel();\n      this.segmentsQuery = filterQueryGenerator(payload);\n      this.$store.dispatch('contacts/filter', {\n        queryPayload: filterQueryGenerator(payload)\n      });\n      this.showFiltersModal = false;\n    },\n    clearFilters: function clearFilters() {\n      this.$store.dispatch('contacts/clearContactFilters');\n      this.fetchContacts(this.pageParameter);\n    },\n    openSavedItemInSegment: function openSavedItemInSegment() {\n      var lastItemInSegments = this.segments[this.segments.length - 1];\n      var lastItemId = lastItemInSegments.id;\n      this.$router.push({\n        name: 'contacts_segments_dashboard',\n        params: {\n          id: lastItemId\n        }\n      });\n    },\n    openLastItemAfterDeleteInSegment: function openLastItemAfterDeleteInSegment() {\n      if (this.segments.length > 0) {\n        this.openSavedItemInSegment();\n      } else {\n        this.$router.push({\n          name: 'contacts_dashboard'\n        });\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["ContactsView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"contacts-page row\">\n    <div class=\"left-wrap\" :class=\"wrapClas\">\n      <contacts-header\n        :search-query=\"searchQuery\"\n        :segments-id=\"segmentsId\"\n        :on-search-submit=\"onSearchSubmit\"\n        this-selected-contact-id=\"\"\n        :on-input-search=\"onInputSearch\"\n        :on-toggle-create=\"onToggleCreate\"\n        :on-toggle-import=\"onToggleImport\"\n        :on-toggle-filter=\"onToggleFilters\"\n        :header-title=\"pageTitle\"\n        @on-toggle-save-filter=\"onToggleSaveFilters\"\n        @on-toggle-delete-filter=\"onToggleDeleteFilters\"\n      />\n      <contacts-table\n        :contacts=\"records\"\n        :show-search-empty-state=\"showEmptySearchResult\"\n        :is-loading=\"uiFlags.isFetching\"\n        :on-click-contact=\"openContactInfoPanel\"\n        :active-contact-id=\"selectedContactId\"\n        :sort-config=\"sortConfig\"\n        @on-sort-change=\"onSortChange\"\n      />\n      <table-footer\n        :current-page=\"Number(meta.currentPage)\"\n        :total-count=\"meta.count\"\n        @page-change=\"onPageChange\"\n      />\n    </div>\n\n    <add-custom-views\n      v-if=\"showAddSegmentsModal\"\n      :custom-views-query=\"segmentsQuery\"\n      :filter-type=\"filterType\"\n      :open-last-saved-item=\"openSavedItemInSegment\"\n      @close=\"onCloseAddSegmentsModal\"\n    />\n    <delete-custom-views\n      v-if=\"showDeleteSegmentsModal\"\n      :show-delete-popup.sync=\"showDeleteSegmentsModal\"\n      :active-custom-view=\"activeSegment\"\n      :custom-views-id=\"segmentsId\"\n      :active-filter-type=\"filterType\"\n      :open-last-item-after-delete=\"openLastItemAfterDeleteInSegment\"\n      @close=\"onCloseDeleteSegmentsModal\"\n    />\n\n    <contact-info-panel\n      v-if=\"showContactViewPane\"\n      :contact=\"selectedContact\"\n      :on-close=\"closeContactInfoPanel\"\n    />\n    <create-contact :show=\"showCreateModal\" @cancel=\"onToggleCreate\" />\n    <woot-modal :show.sync=\"showImportModal\" :on-close=\"onToggleImport\">\n      <import-contacts v-if=\"showImportModal\" :on-close=\"onToggleImport\" />\n    </woot-modal>\n    <woot-modal\n      :show.sync=\"showFiltersModal\"\n      :on-close=\"onToggleFilters\"\n      size=\"medium\"\n    >\n      <contacts-advanced-filters\n        v-if=\"showFiltersModal\"\n        :on-close=\"onToggleFilters\"\n        :initial-filter-types=\"contactFilterItems\"\n        @applyFilter=\"onApplyFilter\"\n        @clearFilters=\"clearFilters\"\n      />\n    </woot-modal>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nimport ContactsHeader from './Header';\nimport ContactsTable from './ContactsTable';\nimport ContactInfoPanel from './ContactInfoPanel';\nimport CreateContact from 'dashboard/routes/dashboard/conversation/contact/CreateContact';\nimport TableFooter from 'dashboard/components/widgets/TableFooter';\nimport ImportContacts from './ImportContacts.vue';\nimport ContactsAdvancedFilters from './ContactsAdvancedFilters.vue';\nimport contactFilterItems from '../contactFilterItems';\nimport filterQueryGenerator from '../../../../helper/filterQueryGenerator';\nimport AddCustomViews from 'dashboard/routes/dashboard/customviews/AddCustomViews';\nimport DeleteCustomViews from 'dashboard/routes/dashboard/customviews/DeleteCustomViews';\n\nconst DEFAULT_PAGE = 1;\nconst FILTER_TYPE_CONTACT = 1;\n\nexport default {\n  components: {\n    ContactsHeader,\n    ContactsTable,\n    TableFooter,\n    ContactInfoPanel,\n    CreateContact,\n    ImportContacts,\n    ContactsAdvancedFilters,\n    AddCustomViews,\n    DeleteCustomViews,\n  },\n  props: {\n    label: { type: String, default: '' },\n    segmentsId: {\n      type: [String, Number],\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      searchQuery: '',\n      showCreateModal: false,\n      showImportModal: false,\n      selectedContactId: '',\n      sortConfig: { name: 'asc' },\n      showFiltersModal: false,\n      contactFilterItems: contactFilterItems.map(filter => ({\n        ...filter,\n        attributeName: this.$t(\n          `CONTACTS_FILTER.ATTRIBUTES.${filter.attributeI18nKey}`\n        ),\n      })),\n      segmentsQuery: {},\n      filterType: FILTER_TYPE_CONTACT,\n      showAddSegmentsModal: false,\n      showDeleteSegmentsModal: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      records: 'contacts/getContacts',\n      uiFlags: 'contacts/getUIFlags',\n      meta: 'contacts/getMeta',\n      segments: 'customViews/getCustomViews',\n      getAppliedContactFilters: 'contacts/getAppliedContactFilters',\n    }),\n    showEmptySearchResult() {\n      const hasEmptyResults = !!this.searchQuery && this.records.length === 0;\n      return hasEmptyResults;\n    },\n    hasAppliedFilters() {\n      return this.getAppliedContactFilters.length;\n    },\n    hasActiveSegments() {\n      return this.activeSegment && this.segmentsId !== 0;\n    },\n    isContactAndLabelDashboard() {\n      return (\n        this.$route.name === 'contacts_dashboard' ||\n        this.$route.name === 'contacts_labels_dashboard'\n      );\n    },\n    pageTitle() {\n      if (this.hasActiveSegments) {\n        return this.activeSegment.name;\n      }\n      if (this.label) {\n        return `#${this.label}`;\n      }\n      return this.$t('CONTACTS_PAGE.HEADER');\n    },\n    selectedContact() {\n      if (this.selectedContactId) {\n        const contact = this.records.find(\n          item => this.selectedContactId === item.id\n        );\n        return contact;\n      }\n      return undefined;\n    },\n    showContactViewPane() {\n      return this.selectedContactId !== '';\n    },\n    wrapClas() {\n      return this.showContactViewPane ? 'medium-9' : 'medium-12';\n    },\n    pageParameter() {\n      const selectedPageNumber = Number(this.$route.query?.page);\n      return !Number.isNaN(selectedPageNumber) &&\n        selectedPageNumber >= DEFAULT_PAGE\n        ? selectedPageNumber\n        : DEFAULT_PAGE;\n    },\n    activeSegment() {\n      if (this.segmentsId) {\n        const [firstValue] = this.segments.filter(\n          view => view.id === Number(this.segmentsId)\n        );\n        return firstValue;\n      }\n      return undefined;\n    },\n  },\n  watch: {\n    label() {\n      this.fetchContacts(DEFAULT_PAGE);\n      if (this.hasAppliedFilters) {\n        this.clearFilters();\n      }\n    },\n    activeSegment() {\n      if (this.hasActiveSegments) {\n        const payload = this.activeSegment.query;\n        this.fetchSavedFilteredContact(payload, DEFAULT_PAGE);\n      }\n      if (this.hasAppliedFilters && this.$route.name === 'contacts_dashboard') {\n        this.fetchFilteredContacts(DEFAULT_PAGE);\n      } else {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n  },\n  mounted() {\n    this.fetchContacts(this.pageParameter);\n  },\n  methods: {\n    updatePageParam(page) {\n      window.history.pushState({}, null, `${this.$route.path}?page=${page}`);\n    },\n    getSortAttribute() {\n      let sortAttr = Object.keys(this.sortConfig).reduce((acc, sortKey) => {\n        const sortOrder = this.sortConfig[sortKey];\n        if (sortOrder) {\n          const sortOrderSign = sortOrder === 'asc' ? '' : '-';\n          return `${sortOrderSign}${sortKey}`;\n        }\n        return acc;\n      }, '');\n      if (!sortAttr) {\n        this.sortConfig = { name: 'asc' };\n        sortAttr = 'name';\n      }\n      return sortAttr;\n    },\n    fetchContacts(page) {\n      if (this.isContactAndLabelDashboard) {\n        this.updatePageParam(page);\n        let value = '';\n        if (this.searchQuery.charAt(0) === '+') {\n          value = this.searchQuery.substring(1);\n        } else {\n          value = this.searchQuery;\n        }\n        const requestParams = {\n          page,\n          sortAttr: this.getSortAttribute(),\n          label: this.label,\n        };\n        if (!value) {\n          this.$store.dispatch('contacts/get', requestParams);\n        } else {\n          this.$store.dispatch('contacts/search', {\n            search: encodeURIComponent(value),\n            ...requestParams,\n          });\n        }\n      }\n    },\n    fetchSavedFilteredContact(payload, page) {\n      if (this.hasActiveSegments) {\n        this.updatePageParam(page);\n        this.$store.dispatch('contacts/filter', {\n          queryPayload: payload,\n          page,\n        });\n      }\n    },\n    fetchFilteredContacts(page) {\n      if (this.hasAppliedFilters) {\n        const payload = this.segmentsQuery;\n        this.updatePageParam(page);\n        this.$store.dispatch('contacts/filter', {\n          queryPayload: payload,\n          page,\n        });\n      }\n    },\n\n    onInputSearch(event) {\n      const newQuery = event.target.value;\n      const refetchAllContacts = !!this.searchQuery && newQuery === '';\n      this.searchQuery = newQuery;\n      if (refetchAllContacts) {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n    onSearchSubmit() {\n      this.selectedContactId = '';\n      if (this.searchQuery) {\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n    onPageChange(page) {\n      this.selectedContactId = '';\n      if (this.segmentsId !== 0) {\n        const payload = this.activeSegment.query;\n        this.fetchSavedFilteredContact(payload, page);\n      }\n      if (this.hasAppliedFilters) {\n        this.fetchFilteredContacts(page);\n      } else {\n        this.fetchContacts(page);\n      }\n    },\n    openContactInfoPanel(contactId) {\n      this.selectedContactId = contactId;\n      this.showContactInfoPanelPane = true;\n    },\n    closeContactInfoPanel() {\n      this.selectedContactId = '';\n      this.showContactInfoPanelPane = false;\n    },\n    onToggleCreate() {\n      this.showCreateModal = !this.showCreateModal;\n    },\n    onToggleSaveFilters() {\n      this.showAddSegmentsModal = true;\n    },\n    onCloseAddSegmentsModal() {\n      this.showAddSegmentsModal = false;\n    },\n    onToggleDeleteFilters() {\n      this.showDeleteSegmentsModal = true;\n    },\n    onCloseDeleteSegmentsModal() {\n      this.showDeleteSegmentsModal = false;\n    },\n    onToggleImport() {\n      this.showImportModal = !this.showImportModal;\n    },\n    onSortChange(params) {\n      this.sortConfig = params;\n      this.fetchContacts(this.meta.currentPage);\n    },\n    onToggleFilters() {\n      this.showFiltersModal = !this.showFiltersModal;\n    },\n    onApplyFilter(payload) {\n      this.closeContactInfoPanel();\n      this.segmentsQuery = filterQueryGenerator(payload);\n      this.$store.dispatch('contacts/filter', {\n        queryPayload: filterQueryGenerator(payload),\n      });\n      this.showFiltersModal = false;\n    },\n    clearFilters() {\n      this.$store.dispatch('contacts/clearContactFilters');\n      this.fetchContacts(this.pageParameter);\n    },\n    openSavedItemInSegment() {\n      const lastItemInSegments = this.segments[this.segments.length - 1];\n      const lastItemId = lastItemInSegments.id;\n      this.$router.push({\n        name: 'contacts_segments_dashboard',\n        params: { id: lastItemId },\n      });\n    },\n    openLastItemAfterDeleteInSegment() {\n      if (this.segments.length > 0) {\n        this.openSavedItemInSegment();\n      } else {\n        this.$router.push({ name: 'contacts_dashboard' });\n        this.fetchContacts(DEFAULT_PAGE);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.contacts-page {\n  width: 100%;\n}\n\n.left-wrap {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/contacts/components"},"metadata":{},"sourceType":"module"}