{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { throwErrorMessage } from 'dashboard/store/utils/api';\nimport ConversationApi from '../../../../api/inbox/conversation';\nimport mutationTypes from '../../../mutation-types';\nexport default {\n  markMessagesRead: function () {\n    var _markMessagesRead = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref, data) {\n      var commit, _yield$ConversationAp, _yield$ConversationAp2, id, lastSeen;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return ConversationApi.markMessageRead(data);\n\n            case 4:\n              _yield$ConversationAp = _context.sent;\n              _yield$ConversationAp2 = _yield$ConversationAp.data;\n              id = _yield$ConversationAp2.id;\n              lastSeen = _yield$ConversationAp2.agent_last_seen_at;\n              setTimeout(function () {\n                return commit(mutationTypes.UPDATE_MESSAGE_UNREAD_COUNT, {\n                  id: id,\n                  lastSeen: lastSeen\n                });\n              }, 4000);\n              _context.next = 13;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    function markMessagesRead(_x, _x2) {\n      return _markMessagesRead.apply(this, arguments);\n    }\n\n    return markMessagesRead;\n  }(),\n  markMessagesUnread: function () {\n    var _markMessagesUnread = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, _ref3) {\n      var commit, id, _yield$ConversationAp3, _yield$ConversationAp4, lastSeen, unreadCount;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              id = _ref3.id;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return ConversationApi.markMessagesUnread({\n                id: id\n              });\n\n            case 5:\n              _yield$ConversationAp3 = _context2.sent;\n              _yield$ConversationAp4 = _yield$ConversationAp3.data;\n              lastSeen = _yield$ConversationAp4.agent_last_seen_at;\n              unreadCount = _yield$ConversationAp4.unread_count;\n              commit(mutationTypes.UPDATE_MESSAGE_UNREAD_COUNT, {\n                id: id,\n                lastSeen: lastSeen,\n                unreadCount: unreadCount\n              });\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](2);\n              throwErrorMessage(_context2.t0);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 12]]);\n    }));\n\n    function markMessagesUnread(_x3, _x4) {\n      return _markMessagesUnread.apply(this, arguments);\n    }\n\n    return markMessagesUnread;\n  }()\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/store/modules/conversations/actions/messageReadActions.js"],"names":["throwErrorMessage","ConversationApi","mutationTypes","markMessagesRead","data","commit","markMessageRead","id","lastSeen","agent_last_seen_at","setTimeout","UPDATE_MESSAGE_UNREAD_COUNT","markMessagesUnread","unreadCount","unread_count"],"mappings":";;;;;;;;AAAA,SAASA,iBAAT,QAAkC,2BAAlC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,eAAe;AACbC,EAAAA,gBAAgB;AAAA,oFAAE,uBAAmBC,IAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,MAAT,QAASA,MAAT;AAAA;AAAA;AAAA,qBAIJJ,eAAe,CAACK,eAAhB,CAAgCF,IAAhC,CAJI;;AAAA;AAAA;AAAA,6DAGZA,IAHY;AAGJG,cAAAA,EAHI,0BAGJA,EAHI;AAGoBC,cAAAA,QAHpB,0BAGAC,kBAHA;AAKdC,cAAAA,UAAU,CACR;AAAA,uBACEL,MAAM,CAACH,aAAa,CAACS,2BAAf,EAA4C;AAAEJ,kBAAAA,EAAE,EAAFA,EAAF;AAAMC,kBAAAA,QAAQ,EAARA;AAAN,iBAA5C,CADR;AAAA,eADQ,EAGR,IAHQ,CAAV;AALc;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADH;AAgBbI,EAAAA,kBAAkB;AAAA,sFAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASP,cAAAA,MAAT,SAASA,MAAT;AAAqBE,cAAAA,EAArB,SAAqBA,EAArB;AAAA;AAAA;AAAA,qBAINN,eAAe,CAACW,kBAAhB,CAAmC;AAAEL,gBAAAA,EAAE,EAAFA;AAAF,eAAnC,CAJM;;AAAA;AAAA;AAAA,8DAGdH,IAHc;AAGcI,cAAAA,QAHd,0BAGNC,kBAHM;AAGsCI,cAAAA,WAHtC,0BAGwBC,YAHxB;AAKhBT,cAAAA,MAAM,CAACH,aAAa,CAACS,2BAAf,EAA4C;AAChDJ,gBAAAA,EAAE,EAAFA,EADgD;AAEhDC,gBAAAA,QAAQ,EAARA,QAFgD;AAGhDK,gBAAAA,WAAW,EAAXA;AAHgD,eAA5C,CAAN;AALgB;AAAA;;AAAA;AAAA;AAAA;AAWhBb,cAAAA,iBAAiB,cAAjB;;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBL,CAAf","sourcesContent":["import { throwErrorMessage } from 'dashboard/store/utils/api';\nimport ConversationApi from '../../../../api/inbox/conversation';\nimport mutationTypes from '../../../mutation-types';\n\nexport default {\n  markMessagesRead: async ({ commit }, data) => {\n    try {\n      const {\n        data: { id, agent_last_seen_at: lastSeen },\n      } = await ConversationApi.markMessageRead(data);\n      setTimeout(\n        () =>\n          commit(mutationTypes.UPDATE_MESSAGE_UNREAD_COUNT, { id, lastSeen }),\n        4000\n      );\n    } catch (error) {\n      // Handle error\n    }\n  },\n\n  markMessagesUnread: async ({ commit }, { id }) => {\n    try {\n      const {\n        data: { agent_last_seen_at: lastSeen, unread_count: unreadCount },\n      } = await ConversationApi.markMessagesUnread({ id });\n      commit(mutationTypes.UPDATE_MESSAGE_UNREAD_COUNT, {\n        id,\n        lastSeen,\n        unreadCount,\n      });\n    } catch (error) {\n      throwErrorMessage(error);\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}