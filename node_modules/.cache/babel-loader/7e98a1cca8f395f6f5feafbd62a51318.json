{"ast":null,"code":"import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { marked } from 'marked';\nimport DOMPurify from 'dompurify';\nimport { escapeHtml, afterSanitizeAttributes } from './HTMLSanitizer';\nvar TWITTER_USERNAME_REGEX = /(^|[^@\\w])@(\\w{1,15})\\b/g;\nvar TWITTER_USERNAME_REPLACEMENT = '$1<a href=\"http://twitter.com/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@$2</a>';\nvar TWITTER_HASH_REGEX = /(^|\\s)#(\\w+)/g;\nvar TWITTER_HASH_REPLACEMENT = '$1<a href=\"https://twitter.com/hashtag/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#$2</a>';\nvar USER_MENTIONS_REGEX = /mention:\\/\\/(user|team)\\/(\\d+)\\/(.+)/gm;\n\nvar MessageFormatter = /*#__PURE__*/function () {\n  function MessageFormatter(message) {\n    var isATweet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var isAPrivateNote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, MessageFormatter);\n\n    this.message = DOMPurify.sanitize(escapeHtml(message || ''));\n    this.isAPrivateNote = isAPrivateNote;\n    this.isATweet = isATweet;\n    this.marked = marked;\n    var renderer = {\n      heading: function heading(text) {\n        return \"<strong>\".concat(text, \"</strong>\");\n      },\n      link: function link(url, title, text) {\n        var mentionRegex = new RegExp(USER_MENTIONS_REGEX);\n\n        if (url.match(mentionRegex)) {\n          return \"<span class=\\\"prosemirror-mention-node\\\">\".concat(text, \"</span>\");\n        }\n\n        return \"<a rel=\\\"noreferrer noopener nofollow\\\" href=\\\"\".concat(url, \"\\\" class=\\\"link\\\" title=\\\"\").concat(title || '', \"\\\" target=\\\"_blank\\\">\").concat(text, \"</a>\");\n      }\n    };\n    this.marked.use({\n      renderer: renderer\n    });\n  }\n\n  _createClass(MessageFormatter, [{\n    key: \"formatMessage\",\n    value: function formatMessage() {\n      if (this.isATweet && !this.isAPrivateNote) {\n        var withUserName = this.message.replace(TWITTER_USERNAME_REGEX, TWITTER_USERNAME_REPLACEMENT);\n        var withHash = withUserName.replace(TWITTER_HASH_REGEX, TWITTER_HASH_REPLACEMENT);\n        var markedDownOutput = marked(withHash);\n        return markedDownOutput;\n      }\n\n      DOMPurify.addHook('afterSanitizeAttributes', afterSanitizeAttributes);\n      return DOMPurify.sanitize(marked(this.message, {\n        breaks: true,\n        gfm: true\n      }));\n    }\n  }, {\n    key: \"formattedMessage\",\n    get: function get() {\n      return this.formatMessage();\n    }\n  }, {\n    key: \"plainText\",\n    get: function get() {\n      var strippedOutHtml = new DOMParser().parseFromString(this.formattedMessage, 'text/html');\n      return strippedOutHtml.body.textContent || '';\n    }\n  }]);\n\n  return MessageFormatter;\n}();\n\nexport default MessageFormatter;","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/shared/helpers/MessageFormatter.js"],"names":["marked","DOMPurify","escapeHtml","afterSanitizeAttributes","TWITTER_USERNAME_REGEX","TWITTER_USERNAME_REPLACEMENT","TWITTER_HASH_REGEX","TWITTER_HASH_REPLACEMENT","USER_MENTIONS_REGEX","MessageFormatter","message","isATweet","isAPrivateNote","sanitize","renderer","heading","text","link","url","title","mentionRegex","RegExp","match","use","withUserName","replace","withHash","markedDownOutput","addHook","breaks","gfm","formatMessage","strippedOutHtml","DOMParser","parseFromString","formattedMessage","body","textContent"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,UAAT,EAAqBC,uBAArB,QAAoD,iBAApD;AAEA,IAAMC,sBAAsB,GAAG,0BAA/B;AACA,IAAMC,4BAA4B,GAChC,8FADF;AAGA,IAAMC,kBAAkB,GAAG,eAA3B;AACA,IAAMC,wBAAwB,GAC5B,uGADF;AAGA,IAAMC,mBAAmB,GAAG,wCAA5B;;IAEMC,gB;AACJ,4BAAYC,OAAZ,EAA+D;AAAA,QAA1CC,QAA0C,uEAA/B,KAA+B;AAAA,QAAxBC,cAAwB,uEAAP,KAAO;;AAAA;;AAC7D,SAAKF,OAAL,GAAeT,SAAS,CAACY,QAAV,CAAmBX,UAAU,CAACQ,OAAO,IAAI,EAAZ,CAA7B,CAAf;AACA,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKX,MAAL,GAAcA,MAAd;AAEA,QAAMc,QAAQ,GAAG;AACfC,MAAAA,OADe,mBACPC,IADO,EACD;AACZ,iCAAkBA,IAAlB;AACD,OAHc;AAIfC,MAAAA,IAJe,gBAIVC,GAJU,EAILC,KAJK,EAIEH,IAJF,EAIQ;AACrB,YAAMI,YAAY,GAAG,IAAIC,MAAJ,CAAWb,mBAAX,CAArB;;AACA,YAAIU,GAAG,CAACI,KAAJ,CAAUF,YAAV,CAAJ,EAA6B;AAC3B,oEAAiDJ,IAAjD;AACD;;AACD,wEAAsDE,GAAtD,uCAAkFC,KAAK,IACrF,EADF,kCACyBH,IADzB;AAED;AAXc,KAAjB;AAaA,SAAKhB,MAAL,CAAYuB,GAAZ,CAAgB;AAAET,MAAAA,QAAQ,EAARA;AAAF,KAAhB;AACD;;;;WAED,yBAAgB;AACd,UAAI,KAAKH,QAAL,IAAiB,CAAC,KAAKC,cAA3B,EAA2C;AACzC,YAAMY,YAAY,GAAG,KAAKd,OAAL,CAAae,OAAb,CACnBrB,sBADmB,EAEnBC,4BAFmB,CAArB;AAIA,YAAMqB,QAAQ,GAAGF,YAAY,CAACC,OAAb,CACfnB,kBADe,EAEfC,wBAFe,CAAjB;AAIA,YAAMoB,gBAAgB,GAAG3B,MAAM,CAAC0B,QAAD,CAA/B;AACA,eAAOC,gBAAP;AACD;;AACD1B,MAAAA,SAAS,CAAC2B,OAAV,CAAkB,yBAAlB,EAA6CzB,uBAA7C;AACA,aAAOF,SAAS,CAACY,QAAV,CACLb,MAAM,CAAC,KAAKU,OAAN,EAAe;AAAEmB,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,GAAG,EAAE;AAArB,OAAf,CADD,CAAP;AAGD;;;SAED,eAAuB;AACrB,aAAO,KAAKC,aAAL,EAAP;AACD;;;SAED,eAAgB;AACd,UAAMC,eAAe,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CACtB,KAAKC,gBADiB,EAEtB,WAFsB,CAAxB;AAIA,aAAOH,eAAe,CAACI,IAAhB,CAAqBC,WAArB,IAAoC,EAA3C;AACD;;;;;;AAGH,eAAe5B,gBAAf","sourcesContent":["import { marked } from 'marked';\nimport DOMPurify from 'dompurify';\nimport { escapeHtml, afterSanitizeAttributes } from './HTMLSanitizer';\n\nconst TWITTER_USERNAME_REGEX = /(^|[^@\\w])@(\\w{1,15})\\b/g;\nconst TWITTER_USERNAME_REPLACEMENT =\n  '$1<a href=\"http://twitter.com/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">@$2</a>';\n\nconst TWITTER_HASH_REGEX = /(^|\\s)#(\\w+)/g;\nconst TWITTER_HASH_REPLACEMENT =\n  '$1<a href=\"https://twitter.com/hashtag/$2\" target=\"_blank\" rel=\"noreferrer nofollow noopener\">#$2</a>';\n\nconst USER_MENTIONS_REGEX = /mention:\\/\\/(user|team)\\/(\\d+)\\/(.+)/gm;\n\nclass MessageFormatter {\n  constructor(message, isATweet = false, isAPrivateNote = false) {\n    this.message = DOMPurify.sanitize(escapeHtml(message || ''));\n    this.isAPrivateNote = isAPrivateNote;\n    this.isATweet = isATweet;\n    this.marked = marked;\n\n    const renderer = {\n      heading(text) {\n        return `<strong>${text}</strong>`;\n      },\n      link(url, title, text) {\n        const mentionRegex = new RegExp(USER_MENTIONS_REGEX);\n        if (url.match(mentionRegex)) {\n          return `<span class=\"prosemirror-mention-node\">${text}</span>`;\n        }\n        return `<a rel=\"noreferrer noopener nofollow\" href=\"${url}\" class=\"link\" title=\"${title ||\n          ''}\" target=\"_blank\">${text}</a>`;\n      },\n    };\n    this.marked.use({ renderer });\n  }\n\n  formatMessage() {\n    if (this.isATweet && !this.isAPrivateNote) {\n      const withUserName = this.message.replace(\n        TWITTER_USERNAME_REGEX,\n        TWITTER_USERNAME_REPLACEMENT\n      );\n      const withHash = withUserName.replace(\n        TWITTER_HASH_REGEX,\n        TWITTER_HASH_REPLACEMENT\n      );\n      const markedDownOutput = marked(withHash);\n      return markedDownOutput;\n    }\n    DOMPurify.addHook('afterSanitizeAttributes', afterSanitizeAttributes);\n    return DOMPurify.sanitize(\n      marked(this.message, { breaks: true, gfm: true })\n    );\n  }\n\n  get formattedMessage() {\n    return this.formatMessage();\n  }\n\n  get plainText() {\n    const strippedOutHtml = new DOMParser().parseFromString(\n      this.formattedMessage,\n      'text/html'\n    );\n    return strippedOutHtml.body.textContent || '';\n  }\n}\n\nexport default MessageFormatter;\n"]},"metadata":{},"sourceType":"module"}