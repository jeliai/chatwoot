{"ast":null,"code":"/* eslint-disable no-cond-assign */\nimport { inputRules, wrappingInputRule, textblockTypeInputRule, smartQuotes, emDash, ellipsis } from 'prosemirror-inputrules'; // : (NodeType) → InputRule\n// Given a blockquote node type, returns an input rule that turns `\"> \"`\n// at the start of a textblock into a blockquote.\n\nexport function blockQuoteRule(nodeType) {\n  return wrappingInputRule(/^\\s*>\\s$/, nodeType);\n} // : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a number\n// followed by a dot at the start of a textblock into an ordered list.\n\nexport function orderedListRule(nodeType) {\n  return wrappingInputRule(/^(\\d+)\\.\\s$/, nodeType, function (match) {\n    return {\n      order: +match[1]\n    };\n  }, function (match, node) {\n    return node.childCount + node.attrs.order === +match[1];\n  });\n} // : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a bullet\n// (dash, plush, or asterisk) at the start of a textblock into a\n// bullet list.\n\nexport function bulletListRule(nodeType) {\n  return wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType);\n} // : (NodeType) → InputRule\n// Given a code block node type, returns an input rule that turns a\n// textblock starting with three backticks into a code block.\n\nexport function codeBlockRule(nodeType) {\n  return textblockTypeInputRule(/^```$/, nodeType);\n} // : (NodeType, number) → InputRule\n// Given a node type and a maximum level, creates an input rule that\n// turns up to that number of `#` characters followed by a space at\n// the start of a textblock into a heading whose level corresponds to\n// the number of `#` signs.\n\nexport function headingRule(nodeType, maxLevel) {\n  return textblockTypeInputRule(new RegExp('^(#{1,' + maxLevel + '})\\\\s$'), nodeType, function (match) {\n    return {\n      level: match[1].length\n    };\n  });\n} // : (Schema) → Plugin\n// A set of input rules for creating the basic block quotes, lists,\n// code blocks, and heading.\n\nexport function buildInputRules(schema) {\n  var rules = smartQuotes.concat(ellipsis, emDash);\n  var type;\n  if (type = schema.nodes.blockquote) rules.push(blockQuoteRule(type));\n  if (type = schema.nodes.ordered_list) rules.push(orderedListRule(type));\n  if (type = schema.nodes.bullet_list) rules.push(bulletListRule(type));\n  if (type = schema.nodes.code_block) rules.push(codeBlockRule(type));\n  if (type = schema.nodes.heading) rules.push(headingRule(type, 6));\n  return inputRules({\n    rules: rules\n  });\n}","map":null,"metadata":{},"sourceType":"module"}