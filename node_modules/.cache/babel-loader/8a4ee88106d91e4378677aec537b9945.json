{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport fetch from 'node-fetch';\nimport { version } from '../../generated/version';\nexport function post(event, writeKey) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(\"https://api.june.so/sdk/\" + event.type, {\n            method: 'POST',\n            body: JSON.stringify(__assign(__assign({}, event), {\n              writeKey: writeKey\n            })),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })];\n\n        case 1:\n          res = _a.sent();\n\n          if (!res.ok) {\n            throw new Error('Message Rejected');\n          }\n\n          return [2\n          /*return*/\n          , event];\n      }\n    });\n  });\n}\nexport function analyticsNode(settings) {\n  var _this = this;\n\n  var send = function send(ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ctx.updateEvent('context.library.name', 'analytics-node-next');\n            ctx.updateEvent('context.library.version', version);\n            ctx.updateEvent('_metadata.nodeVersion', process.versions.node);\n            return [4\n            /*yield*/\n            , post(ctx.event, settings.writeKey)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , ctx];\n        }\n      });\n    });\n  };\n\n  var plugin = {\n    name: settings.name,\n    type: settings.type,\n    version: settings.version,\n    load: function load(ctx) {\n      return Promise.resolve(ctx);\n    },\n    isLoaded: function isLoaded() {\n      return true;\n    },\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send,\n    screen: send\n  };\n  return plugin;\n}","map":null,"metadata":{},"sourceType":"module"}