{"ast":null,"code":"import \"regenerator-runtime/runtime.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.promise.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport ChatFilter from './widgets/conversation/ChatFilter';\nimport ConversationAdvancedFilter from './widgets/conversation/ConversationAdvancedFilter';\nimport ChatTypeTabs from './widgets/ChatTypeTabs';\nimport ConversationCard from './widgets/conversation/ConversationCard';\nimport timeMixin from '../mixins/time';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport conversationMixin from '../mixins/conversations';\nimport wootConstants from '../constants';\nimport advancedFilterTypes from './widgets/conversation/advancedFilterItems';\nimport filterQueryGenerator from '../helper/filterQueryGenerator.js';\nimport AddCustomViews from 'dashboard/routes/dashboard/customviews/AddCustomViews';\nimport DeleteCustomViews from 'dashboard/routes/dashboard/customviews/DeleteCustomViews.vue';\nimport ConversationBulkActions from './widgets/conversation/conversationBulkActions/Index.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport { hasPressedAltAndJKey, hasPressedAltAndKKey } from 'shared/helpers/KeyboardHelpers';\nimport { conversationListPageURL } from '../helper/URLHelper';\nimport { isOnMentionsView, isOnUnattendedView } from '../store/modules/conversations/helpers/actionHelpers';\nexport default {\n  components: {\n    AddCustomViews: AddCustomViews,\n    ChatTypeTabs: ChatTypeTabs,\n    ConversationCard: ConversationCard,\n    ChatFilter: ChatFilter,\n    ConversationAdvancedFilter: ConversationAdvancedFilter,\n    DeleteCustomViews: DeleteCustomViews,\n    ConversationBulkActions: ConversationBulkActions\n  },\n  mixins: [timeMixin, conversationMixin, eventListenerMixins, alertMixin],\n  props: {\n    conversationInbox: {\n      type: [String, Number],\n      default: 0\n    },\n    teamId: {\n      type: [String, Number],\n      default: 0\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    conversationType: {\n      type: String,\n      default: ''\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0\n    },\n    showConversationList: {\n      default: true,\n      type: Boolean\n    },\n    isOnExpandedLayout: {\n      default: false,\n      type: Boolean\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      activeAssigneeTab: wootConstants.ASSIGNEE_TYPE.ME,\n      activeStatus: wootConstants.STATUS_TYPE.OPEN,\n      showAdvancedFilters: false,\n      advancedFilterTypes: advancedFilterTypes.map(function (filter) {\n        return _objectSpread(_objectSpread({}, filter), {}, {\n          attributeName: _this.$t(\"FILTER.ATTRIBUTES.\".concat(filter.attributeI18nKey))\n        });\n      }),\n      foldersQuery: {},\n      showAddFoldersModal: false,\n      showDeleteFoldersModal: false,\n      selectedConversations: [],\n      selectedInboxes: [],\n      isContextMenuOpen: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    chatLists: 'getAllConversations',\n    mineChatsList: 'getMineChats',\n    allChatList: 'getAllStatusChats',\n    unAssignedChatsList: 'getUnAssignedChats',\n    chatListLoading: 'getChatListLoadingStatus',\n    currentUserID: 'getCurrentUserID',\n    activeInbox: 'getSelectedInbox',\n    conversationStats: 'conversationStats/getStats',\n    appliedFilters: 'getAppliedConversationFilters',\n    folders: 'customViews/getCustomViews',\n    inboxes: 'inboxes/getInboxes'\n  })), {}, {\n    hasAppliedFilters: function hasAppliedFilters() {\n      return this.appliedFilters.length !== 0;\n    },\n    hasActiveFolders: function hasActiveFolders() {\n      return this.activeFolder && this.foldersId !== 0;\n    },\n    hasAppliedFiltersOrActiveFolders: function hasAppliedFiltersOrActiveFolders() {\n      return this.hasAppliedFilters || this.hasActiveFolders;\n    },\n    savedFoldersValue: function savedFoldersValue() {\n      if (this.hasActiveFolders) {\n        var payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n\n      return {};\n    },\n    showEndOfListMessage: function showEndOfListMessage() {\n      return this.conversationList.length && this.hasCurrentPageEndReached && !this.chatListLoading;\n    },\n    assigneeTabItems: function assigneeTabItems() {\n      var _this2 = this;\n\n      var ASSIGNEE_TYPE_TAB_KEYS = {\n        me: 'mineCount',\n        unassigned: 'unAssignedCount',\n        all: 'allCount'\n      };\n      return Object.keys(ASSIGNEE_TYPE_TAB_KEYS).map(function (key) {\n        var count = _this2.conversationStats[ASSIGNEE_TYPE_TAB_KEYS[key]] || 0;\n        return {\n          key: key,\n          name: _this2.$t(\"CHAT_LIST.ASSIGNEE_TYPE_TABS.\".concat(key)),\n          count: count\n        };\n      });\n    },\n    showAssigneeInConversationCard: function showAssigneeInConversationCard() {\n      return this.hasAppliedFiltersOrActiveFolders || this.activeAssigneeTab === wootConstants.ASSIGNEE_TYPE.ALL;\n    },\n    inbox: function inbox() {\n      return this.$store.getters['inboxes/getInbox'](this.activeInbox);\n    },\n    currentPage: function currentPage() {\n      return this.$store.getters['conversationPage/getCurrentPageFilter'](this.activeAssigneeTab);\n    },\n    currentPageFilterKey: function currentPageFilterKey() {\n      return this.hasAppliedFiltersOrActiveFolders ? 'appliedFilters' : this.activeAssigneeTab;\n    },\n    currentFiltersPage: function currentFiltersPage() {\n      return this.$store.getters['conversationPage/getCurrentPageFilter'](this.currentPageFilterKey);\n    },\n    hasCurrentPageEndReached: function hasCurrentPageEndReached() {\n      return this.$store.getters['conversationPage/getHasEndReached'](this.currentPageFilterKey);\n    },\n    conversationFilters: function conversationFilters() {\n      return {\n        inboxId: this.conversationInbox ? this.conversationInbox : undefined,\n        assigneeType: this.activeAssigneeTab,\n        status: this.activeStatus,\n        page: this.currentPage + 1,\n        labels: this.label ? [this.label] : undefined,\n        teamId: this.teamId || undefined,\n        conversationType: this.conversationType || undefined,\n        folders: this.hasActiveFolders ? this.savedFoldersValue : undefined\n      };\n    },\n    pageTitle: function pageTitle() {\n      if (this.hasAppliedFilters) {\n        return this.$t('CHAT_LIST.TAB_HEADING');\n      }\n\n      if (this.inbox.name) {\n        return this.inbox.name;\n      }\n\n      if (this.activeTeam.name) {\n        return this.activeTeam.name;\n      }\n\n      if (this.label) {\n        return \"#\".concat(this.label);\n      }\n\n      if (this.conversationType === 'mention') {\n        return this.$t('CHAT_LIST.MENTION_HEADING');\n      }\n\n      if (this.conversationType === 'unattended') {\n        return this.$t('CHAT_LIST.UNATTENDED_HEADING');\n      }\n\n      if (this.hasActiveFolders) {\n        return this.activeFolder.name;\n      }\n\n      return this.$t('CHAT_LIST.TAB_HEADING');\n    },\n    conversationList: function conversationList() {\n      var conversationList = [];\n\n      if (!this.hasAppliedFiltersOrActiveFolders) {\n        var filters = this.conversationFilters;\n\n        if (this.activeAssigneeTab === 'me') {\n          conversationList = _toConsumableArray(this.mineChatsList(filters));\n        } else if (this.activeAssigneeTab === 'unassigned') {\n          conversationList = _toConsumableArray(this.unAssignedChatsList(filters));\n        } else {\n          conversationList = _toConsumableArray(this.allChatList(filters));\n        }\n      } else {\n        conversationList = _toConsumableArray(this.chatLists);\n      }\n\n      return conversationList;\n    },\n    activeFolder: function activeFolder() {\n      var _this3 = this;\n\n      if (this.foldersId) {\n        var activeView = this.folders.filter(function (view) {\n          return view.id === Number(_this3.foldersId);\n        });\n\n        var _activeView = _slicedToArray(activeView, 1),\n            firstValue = _activeView[0];\n\n        return firstValue;\n      }\n\n      return undefined;\n    },\n    activeTeam: function activeTeam() {\n      if (this.teamId) {\n        return this.$store.getters['teams/getTeam'](this.teamId);\n      }\n\n      return {};\n    },\n    allConversationsSelected: function allConversationsSelected() {\n      var _this4 = this;\n\n      return this.conversationList.length === this.selectedConversations.length && this.conversationList.every(function (el) {\n        return _this4.selectedConversations.includes(el.id);\n      });\n    },\n    uniqueInboxes: function uniqueInboxes() {\n      return _toConsumableArray(new Set(this.selectedInboxes));\n    }\n  }),\n  watch: {\n    activeTeam: function activeTeam() {\n      this.resetAndFetchData();\n    },\n    conversationInbox: function conversationInbox() {\n      this.resetAndFetchData();\n    },\n    label: function label() {\n      this.resetAndFetchData();\n    },\n    conversationType: function conversationType() {\n      this.resetAndFetchData();\n    },\n    activeFolder: function activeFolder() {\n      if (!this.hasAppliedFilters) {\n        this.resetAndFetchData();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    this.$store.dispatch('setChatFilter', this.activeStatus);\n    this.resetAndFetchData();\n    bus.$on('fetch_conversation_stats', function () {\n      _this5.$store.dispatch('conversationStats/get', _this5.conversationFilters);\n    });\n  },\n  methods: {\n    onApplyFilter: function onApplyFilter(payload) {\n      this.resetBulkActions();\n      this.foldersQuery = filterQueryGenerator(payload);\n      this.$store.dispatch('conversationPage/reset');\n      this.$store.dispatch('emptyAllConversations');\n      this.fetchFilteredConversations(payload);\n    },\n    onClickOpenAddFoldersModal: function onClickOpenAddFoldersModal() {\n      this.showAddFoldersModal = true;\n    },\n    onCloseAddFoldersModal: function onCloseAddFoldersModal() {\n      this.showAddFoldersModal = false;\n    },\n    onClickOpenDeleteFoldersModal: function onClickOpenDeleteFoldersModal() {\n      this.showDeleteFoldersModal = true;\n    },\n    onCloseDeleteFoldersModal: function onCloseDeleteFoldersModal() {\n      this.showDeleteFoldersModal = false;\n    },\n    onToggleAdvanceFiltersModal: function onToggleAdvanceFiltersModal() {\n      this.showAdvancedFilters = !this.showAdvancedFilters;\n    },\n    getKeyboardListenerParams: function getKeyboardListenerParams() {\n      var allConversations = this.$refs.activeConversation.querySelectorAll('div.conversations-list div.conversation');\n      var activeConversation = this.$refs.activeConversation.querySelector('div.conversations-list div.conversation.active');\n\n      var activeConversationIndex = _toConsumableArray(allConversations).indexOf(activeConversation);\n\n      var lastConversationIndex = allConversations.length - 1;\n      return {\n        allConversations: allConversations,\n        activeConversation: activeConversation,\n        activeConversationIndex: activeConversationIndex,\n        lastConversationIndex: lastConversationIndex\n      };\n    },\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (hasPressedAltAndJKey(e)) {\n        var _this$getKeyboardList = this.getKeyboardListenerParams(),\n            allConversations = _this$getKeyboardList.allConversations,\n            activeConversationIndex = _this$getKeyboardList.activeConversationIndex;\n\n        if (activeConversationIndex === -1) {\n          allConversations[0].click();\n        }\n\n        if (activeConversationIndex >= 1) {\n          allConversations[activeConversationIndex - 1].click();\n        }\n      }\n\n      if (hasPressedAltAndKKey(e)) {\n        var _this$getKeyboardList2 = this.getKeyboardListenerParams(),\n            _allConversations = _this$getKeyboardList2.allConversations,\n            _activeConversationIndex = _this$getKeyboardList2.activeConversationIndex,\n            lastConversationIndex = _this$getKeyboardList2.lastConversationIndex;\n\n        if (_activeConversationIndex === -1) {\n          _allConversations[lastConversationIndex].click();\n        } else if (_activeConversationIndex < lastConversationIndex) {\n          _allConversations[_activeConversationIndex + 1].click();\n        }\n      }\n    },\n    resetAndFetchData: function resetAndFetchData() {\n      this.resetBulkActions();\n      this.$store.dispatch('conversationPage/reset');\n      this.$store.dispatch('emptyAllConversations');\n      this.$store.dispatch('clearConversationFilters');\n\n      if (this.hasActiveFolders) {\n        var payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n\n      if (this.foldersId) {\n        return;\n      }\n\n      this.fetchConversations();\n    },\n    fetchConversations: function fetchConversations() {\n      var _this6 = this;\n\n      this.$store.dispatch('fetchAllConversations', this.conversationFilters).then(function () {\n        return _this6.$emit('conversation-load');\n      });\n    },\n    loadMoreConversations: function loadMoreConversations() {\n      if (!this.hasAppliedFiltersOrActiveFolders) {\n        this.fetchConversations();\n      }\n\n      if (this.hasActiveFolders) {\n        var payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n\n      if (this.hasAppliedFilters) {\n        this.fetchFilteredConversations(this.appliedFilters);\n      }\n    },\n    fetchFilteredConversations: function fetchFilteredConversations(payload) {\n      var _this7 = this;\n\n      var page = this.currentFiltersPage + 1;\n      this.$store.dispatch('fetchFilteredConversations', {\n        queryData: filterQueryGenerator(payload),\n        page: page\n      }).then(function () {\n        return _this7.$emit('conversation-load');\n      });\n      this.showAdvancedFilters = false;\n    },\n    fetchSavedFilteredConversations: function fetchSavedFilteredConversations(payload) {\n      var _this8 = this;\n\n      var page = this.currentFiltersPage + 1;\n      this.$store.dispatch('fetchFilteredConversations', {\n        queryData: payload,\n        page: page\n      }).then(function () {\n        return _this8.$emit('conversation-load');\n      });\n    },\n    updateAssigneeTab: function updateAssigneeTab(selectedTab) {\n      if (this.activeAssigneeTab !== selectedTab) {\n        this.resetBulkActions();\n        bus.$emit('clearSearchInput');\n        this.activeAssigneeTab = selectedTab;\n\n        if (!this.currentPage) {\n          this.fetchConversations();\n        }\n      }\n    },\n    resetBulkActions: function resetBulkActions() {\n      this.selectedConversations = [];\n      this.selectedInboxes = [];\n    },\n    updateStatusType: function updateStatusType(index) {\n      if (this.activeStatus !== index) {\n        this.activeStatus = index;\n        this.resetAndFetchData();\n      }\n    },\n    openLastSavedItemInFolder: function openLastSavedItemInFolder() {\n      var lastItemOfFolder = this.folders[this.folders.length - 1];\n      var lastItemId = lastItemOfFolder.id;\n      this.$router.push({\n        name: 'folder_conversations',\n        params: {\n          id: lastItemId\n        }\n      });\n    },\n    openLastItemAfterDeleteInFolder: function openLastItemAfterDeleteInFolder() {\n      if (this.folders.length > 0) {\n        this.openLastSavedItemInFolder();\n      } else {\n        this.$router.push({\n          name: 'home'\n        });\n        this.fetchConversations();\n      }\n    },\n    isConversationSelected: function isConversationSelected(id) {\n      return this.selectedConversations.includes(id);\n    },\n    selectConversation: function selectConversation(conversationId, inboxId) {\n      this.selectedConversations.push(conversationId);\n      this.selectedInboxes.push(inboxId);\n    },\n    deSelectConversation: function deSelectConversation(conversationId, inboxId) {\n      this.selectedConversations = this.selectedConversations.filter(function (item) {\n        return item !== conversationId;\n      });\n      this.selectedInboxes = this.selectedInboxes.filter(function (item) {\n        return item !== inboxId;\n      });\n    },\n    selectAllConversations: function selectAllConversations(check) {\n      if (check) {\n        this.selectedConversations = this.conversationList.map(function (item) {\n          return item.id;\n        });\n        this.selectedInboxes = this.conversationList.map(function (item) {\n          return item.inbox_id;\n        });\n      } else {\n        this.resetBulkActions();\n      }\n    },\n    // Same method used in context menu, conversationId being passed from there.\n    onAssignAgent: function onAssignAgent(agent) {\n      var _arguments = arguments,\n          _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var conversationId;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                conversationId = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : null;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this9.$store.dispatch('bulkActions/process', {\n                  type: 'Conversation',\n                  ids: conversationId || _this9.selectedConversations,\n                  fields: {\n                    assignee_id: agent.id\n                  }\n                });\n\n              case 4:\n                _this9.selectedConversations = [];\n\n                if (conversationId) {\n                  _this9.showAlert(_this9.$t('CONVERSATION.CARD_CONTEXT_MENU.API.AGENT_ASSIGNMENT.SUCCESFUL', {\n                    agentName: agent.name,\n                    conversationId: conversationId\n                  }));\n                } else {\n                  _this9.showAlert(_this9.$t('BULK_ACTION.ASSIGN_SUCCESFUL'));\n                }\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n\n                _this9.showAlert(_this9.$t('BULK_ACTION.ASSIGN_FAILED'));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }))();\n    },\n    markAsUnread: function markAsUnread(conversationId) {\n      var _this10 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this10$$route, _this10$$route$params, accountId, inboxId, label, teamId, name, conversationType;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _this10.$store.dispatch('markMessagesUnread', {\n                  id: conversationId\n                });\n\n              case 3:\n                _this10$$route = _this10.$route, _this10$$route$params = _this10$$route.params, accountId = _this10$$route$params.accountId, inboxId = _this10$$route$params.inbox_id, label = _this10$$route$params.label, teamId = _this10$$route$params.teamId, name = _this10$$route.name;\n                conversationType = '';\n\n                if (isOnMentionsView({\n                  route: {\n                    name: name\n                  }\n                })) {\n                  conversationType = 'mention';\n                } else if (isOnUnattendedView({\n                  route: {\n                    name: name\n                  }\n                })) {\n                  conversationType = 'unattended';\n                }\n\n                _this10.$router.push(conversationListPageURL({\n                  accountId: accountId,\n                  conversationType: conversationType,\n                  customViewId: _this10.foldersId,\n                  inboxId: inboxId,\n                  label: label,\n                  teamId: teamId\n                }));\n\n                _context2.next = 11;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 9]]);\n      }))();\n    },\n    onAssignTeam: function onAssignTeam(team) {\n      var _arguments2 = arguments,\n          _this11 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var conversationId;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                conversationId = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : null;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return _this11.$store.dispatch('assignTeam', {\n                  conversationId: conversationId,\n                  teamId: team.id\n                });\n\n              case 4:\n                _this11.showAlert(_this11.$t('CONVERSATION.CARD_CONTEXT_MENU.API.TEAM_ASSIGNMENT.SUCCESFUL', {\n                  team: team.name,\n                  conversationId: conversationId\n                }));\n\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                _this11.showAlert(_this11.$t('CONVERSATION.CARD_CONTEXT_MENU.API.TEAM_ASSIGNMENT.FAILED'));\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 7]]);\n      }))();\n    },\n    // Same method used in context menu, conversationId being passed from there.\n    onAssignLabels: function onAssignLabels(labels) {\n      var _arguments3 = arguments,\n          _this12 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var conversationId;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                conversationId = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : null;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return _this12.$store.dispatch('bulkActions/process', {\n                  type: 'Conversation',\n                  ids: conversationId || _this12.selectedConversations,\n                  labels: {\n                    add: labels\n                  }\n                });\n\n              case 4:\n                _this12.selectedConversations = [];\n\n                if (conversationId) {\n                  _this12.showAlert(_this12.$t('CONVERSATION.CARD_CONTEXT_MENU.API.LABEL_ASSIGNMENT.SUCCESFUL', {\n                    labelName: labels[0],\n                    conversationId: conversationId\n                  }));\n                } else {\n                  _this12.showAlert(_this12.$t('BULK_ACTION.LABELS.ASSIGN_SUCCESFUL'));\n                }\n\n                _context4.next = 11;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _this12.showAlert(_this12.$t('BULK_ACTION.LABELS.ASSIGN_FAILED'));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 8]]);\n      }))();\n    },\n    onAssignTeamsForBulk: function onAssignTeamsForBulk(team) {\n      var _this13 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return _this13.$store.dispatch('bulkActions/process', {\n                  type: 'Conversation',\n                  ids: _this13.selectedConversations,\n                  fields: {\n                    team_id: team.id\n                  }\n                });\n\n              case 3:\n                _this13.selectedConversations = [];\n\n                _this13.showAlert(_this13.$t('BULK_ACTION.TEAMS.ASSIGN_SUCCESFUL'));\n\n                _context5.next = 10;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                _this13.showAlert(_this13.$t('BULK_ACTION.TEAMS.ASSIGN_FAILED'));\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[0, 7]]);\n      }))();\n    },\n    onUpdateConversations: function onUpdateConversations(status) {\n      var _this14 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return _this14.$store.dispatch('bulkActions/process', {\n                  type: 'Conversation',\n                  ids: _this14.selectedConversations,\n                  fields: {\n                    status: status\n                  }\n                });\n\n              case 3:\n                _this14.selectedConversations = [];\n\n                _this14.showAlert(_this14.$t('BULK_ACTION.UPDATE.UPDATE_SUCCESFUL'));\n\n                _context6.next = 10;\n                break;\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                _this14.showAlert(_this14.$t('BULK_ACTION.UPDATE.UPDATE_FAILED'));\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 7]]);\n      }))();\n    },\n    toggleConversationStatus: function toggleConversationStatus(conversationId, status, snoozedUntil) {\n      var _this15 = this;\n\n      this.$store.dispatch('toggleStatus', {\n        conversationId: conversationId,\n        status: status,\n        snoozedUntil: snoozedUntil\n      }).then(function () {\n        _this15.showAlert(_this15.$t('CONVERSATION.CHANGE_STATUS'));\n\n        _this15.isLoading = false;\n      });\n    },\n    allSelectedConversationsStatus: function allSelectedConversationsStatus(status) {\n      var _this16 = this;\n\n      if (!this.selectedConversations.length) return false;\n      return this.selectedConversations.every(function (item) {\n        return _this16.$store.getters.getConversationById(item).status === status;\n      });\n    },\n    onContextMenuToggle: function onContextMenuToggle(state) {\n      this.isContextMenuOpen = state;\n    }\n  }\n};","map":{"version":3,"sources":["ChatList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n    class=\"conversations-list-wrap\"\n    :class=\"{\n      hide: !showConversationList,\n      'list--full-width': isOnExpandedLayout,\n    }\"\n  >\n    <slot />\n    <div\n      class=\"chat-list__top\"\n      :class=\"{ filter__applied: hasAppliedFiltersOrActiveFolders }\"\n    >\n      <h1 class=\"page-title text-truncate\" :title=\"pageTitle\">\n        {{ pageTitle }}\n      </h1>\n\n      <div class=\"filter--actions\">\n        <chat-filter\n          v-if=\"!hasAppliedFiltersOrActiveFolders\"\n          @statusFilterChange=\"updateStatusType\"\n        />\n        <div v-if=\"hasAppliedFilters && !hasActiveFolders\">\n          <woot-button\n            v-tooltip.top-end=\"$t('FILTER.CUSTOM_VIEWS.ADD.SAVE_BUTTON')\"\n            size=\"tiny\"\n            variant=\"smooth\"\n            color-scheme=\"secondary\"\n            icon=\"save\"\n            @click=\"onClickOpenAddFoldersModal\"\n          />\n          <woot-button\n            v-tooltip.top-end=\"$t('FILTER.CLEAR_BUTTON_LABEL')\"\n            size=\"tiny\"\n            variant=\"smooth\"\n            color-scheme=\"alert\"\n            icon=\"dismiss-circle\"\n            @click=\"resetAndFetchData\"\n          />\n        </div>\n        <div v-if=\"hasActiveFolders\">\n          <woot-button\n            v-tooltip.top-end=\"$t('FILTER.CUSTOM_VIEWS.DELETE.DELETE_BUTTON')\"\n            size=\"tiny\"\n            variant=\"smooth\"\n            color-scheme=\"alert\"\n            icon=\"delete\"\n            class=\"delete-custom-view__button\"\n            @click=\"onClickOpenDeleteFoldersModal\"\n          />\n        </div>\n\n        <woot-button\n          v-else\n          v-tooltip.right=\"$t('FILTER.TOOLTIP_LABEL')\"\n          variant=\"clear\"\n          color-scheme=\"secondary\"\n          icon=\"filter\"\n          size=\"small\"\n          class=\"btn-filter\"\n          @click=\"onToggleAdvanceFiltersModal\"\n        />\n      </div>\n    </div>\n\n    <add-custom-views\n      v-if=\"showAddFoldersModal\"\n      :custom-views-query=\"foldersQuery\"\n      :open-last-saved-item=\"openLastSavedItemInFolder\"\n      @close=\"onCloseAddFoldersModal\"\n    />\n\n    <delete-custom-views\n      v-if=\"showDeleteFoldersModal\"\n      :show-delete-popup.sync=\"showDeleteFoldersModal\"\n      :active-custom-view=\"activeFolder\"\n      :custom-views-id=\"foldersId\"\n      :open-last-item-after-delete=\"openLastItemAfterDeleteInFolder\"\n      @close=\"onCloseDeleteFoldersModal\"\n    />\n\n    <chat-type-tabs\n      v-if=\"!hasAppliedFiltersOrActiveFolders\"\n      :items=\"assigneeTabItems\"\n      :active-tab=\"activeAssigneeTab\"\n      class=\"tab--chat-type\"\n      @chatTabChange=\"updateAssigneeTab\"\n    />\n\n    <p v-if=\"!chatListLoading && !conversationList.length\" class=\"content-box\">\n      {{ $t('CHAT_LIST.LIST.404') }}\n    </p>\n    <conversation-bulk-actions\n      v-if=\"selectedConversations.length\"\n      :conversations=\"selectedConversations\"\n      :all-conversations-selected=\"allConversationsSelected\"\n      :selected-inboxes=\"uniqueInboxes\"\n      :show-open-action=\"allSelectedConversationsStatus('open')\"\n      :show-resolved-action=\"allSelectedConversationsStatus('resolved')\"\n      :show-snoozed-action=\"allSelectedConversationsStatus('snoozed')\"\n      @select-all-conversations=\"selectAllConversations\"\n      @assign-agent=\"onAssignAgent\"\n      @update-conversations=\"onUpdateConversations\"\n      @assign-labels=\"onAssignLabels\"\n      @assign-team=\"onAssignTeamsForBulk\"\n    />\n    <div\n      ref=\"activeConversation\"\n      class=\"conversations-list\"\n      :class=\"{ 'is-context-menu-open': isContextMenuOpen }\"\n    >\n      <conversation-card\n        v-for=\"chat in conversationList\"\n        :key=\"chat.id\"\n        :active-label=\"label\"\n        :team-id=\"teamId\"\n        :folders-id=\"foldersId\"\n        :chat=\"chat\"\n        :conversation-type=\"conversationType\"\n        :show-assignee=\"showAssigneeInConversationCard\"\n        :selected=\"isConversationSelected(chat.id)\"\n        @select-conversation=\"selectConversation\"\n        @de-select-conversation=\"deSelectConversation\"\n        @assign-agent=\"onAssignAgent\"\n        @assign-team=\"onAssignTeam\"\n        @assign-label=\"onAssignLabels\"\n        @update-conversation-status=\"toggleConversationStatus\"\n        @context-menu-toggle=\"onContextMenuToggle\"\n        @mark-as-unread=\"markAsUnread\"\n      />\n\n      <div v-if=\"chatListLoading\" class=\"text-center\">\n        <span class=\"spinner\" />\n      </div>\n\n      <woot-button\n        v-if=\"!hasCurrentPageEndReached && !chatListLoading\"\n        variant=\"clear\"\n        size=\"expanded\"\n        @click=\"loadMoreConversations\"\n      >\n        {{ $t('CHAT_LIST.LOAD_MORE_CONVERSATIONS') }}\n      </woot-button>\n\n      <p\n        v-if=\"showEndOfListMessage\"\n        class=\"text-center text-muted end-of-list-text\"\n      >\n        {{ $t('CHAT_LIST.EOF') }}\n      </p>\n    </div>\n    <woot-modal\n      :show.sync=\"showAdvancedFilters\"\n      :on-close=\"onToggleAdvanceFiltersModal\"\n      size=\"medium\"\n    >\n      <conversation-advanced-filter\n        v-if=\"showAdvancedFilters\"\n        :initial-filter-types=\"advancedFilterTypes\"\n        :on-close=\"onToggleAdvanceFiltersModal\"\n        @applyFilter=\"onApplyFilter\"\n      />\n    </woot-modal>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\n\nimport ChatFilter from './widgets/conversation/ChatFilter';\nimport ConversationAdvancedFilter from './widgets/conversation/ConversationAdvancedFilter';\nimport ChatTypeTabs from './widgets/ChatTypeTabs';\nimport ConversationCard from './widgets/conversation/ConversationCard';\nimport timeMixin from '../mixins/time';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport conversationMixin from '../mixins/conversations';\nimport wootConstants from '../constants';\nimport advancedFilterTypes from './widgets/conversation/advancedFilterItems';\nimport filterQueryGenerator from '../helper/filterQueryGenerator.js';\nimport AddCustomViews from 'dashboard/routes/dashboard/customviews/AddCustomViews';\nimport DeleteCustomViews from 'dashboard/routes/dashboard/customviews/DeleteCustomViews.vue';\nimport ConversationBulkActions from './widgets/conversation/conversationBulkActions/Index.vue';\nimport alertMixin from 'shared/mixins/alertMixin';\n\nimport {\n  hasPressedAltAndJKey,\n  hasPressedAltAndKKey,\n} from 'shared/helpers/KeyboardHelpers';\nimport { conversationListPageURL } from '../helper/URLHelper';\nimport {\n  isOnMentionsView,\n  isOnUnattendedView,\n} from '../store/modules/conversations/helpers/actionHelpers';\n\nexport default {\n  components: {\n    AddCustomViews,\n    ChatTypeTabs,\n    ConversationCard,\n    ChatFilter,\n    ConversationAdvancedFilter,\n    DeleteCustomViews,\n    ConversationBulkActions,\n  },\n  mixins: [timeMixin, conversationMixin, eventListenerMixins, alertMixin],\n  props: {\n    conversationInbox: {\n      type: [String, Number],\n      default: 0,\n    },\n    teamId: {\n      type: [String, Number],\n      default: 0,\n    },\n    label: {\n      type: String,\n      default: '',\n    },\n    conversationType: {\n      type: String,\n      default: '',\n    },\n    foldersId: {\n      type: [String, Number],\n      default: 0,\n    },\n    showConversationList: {\n      default: true,\n      type: Boolean,\n    },\n    isOnExpandedLayout: {\n      default: false,\n      type: Boolean,\n    },\n  },\n  data() {\n    return {\n      activeAssigneeTab: wootConstants.ASSIGNEE_TYPE.ME,\n      activeStatus: wootConstants.STATUS_TYPE.OPEN,\n      showAdvancedFilters: false,\n      advancedFilterTypes: advancedFilterTypes.map(filter => ({\n        ...filter,\n        attributeName: this.$t(`FILTER.ATTRIBUTES.${filter.attributeI18nKey}`),\n      })),\n      foldersQuery: {},\n      showAddFoldersModal: false,\n      showDeleteFoldersModal: false,\n      selectedConversations: [],\n      selectedInboxes: [],\n      isContextMenuOpen: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      chatLists: 'getAllConversations',\n      mineChatsList: 'getMineChats',\n      allChatList: 'getAllStatusChats',\n      unAssignedChatsList: 'getUnAssignedChats',\n      chatListLoading: 'getChatListLoadingStatus',\n      currentUserID: 'getCurrentUserID',\n      activeInbox: 'getSelectedInbox',\n      conversationStats: 'conversationStats/getStats',\n      appliedFilters: 'getAppliedConversationFilters',\n      folders: 'customViews/getCustomViews',\n      inboxes: 'inboxes/getInboxes',\n    }),\n    hasAppliedFilters() {\n      return this.appliedFilters.length !== 0;\n    },\n    hasActiveFolders() {\n      return this.activeFolder && this.foldersId !== 0;\n    },\n    hasAppliedFiltersOrActiveFolders() {\n      return this.hasAppliedFilters || this.hasActiveFolders;\n    },\n    savedFoldersValue() {\n      if (this.hasActiveFolders) {\n        const payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n      return {};\n    },\n    showEndOfListMessage() {\n      return (\n        this.conversationList.length &&\n        this.hasCurrentPageEndReached &&\n        !this.chatListLoading\n      );\n    },\n    assigneeTabItems() {\n      const ASSIGNEE_TYPE_TAB_KEYS = {\n        me: 'mineCount',\n        unassigned: 'unAssignedCount',\n        all: 'allCount',\n      };\n      return Object.keys(ASSIGNEE_TYPE_TAB_KEYS).map(key => {\n        const count = this.conversationStats[ASSIGNEE_TYPE_TAB_KEYS[key]] || 0;\n        return {\n          key,\n          name: this.$t(`CHAT_LIST.ASSIGNEE_TYPE_TABS.${key}`),\n          count,\n        };\n      });\n    },\n    showAssigneeInConversationCard() {\n      return (\n        this.hasAppliedFiltersOrActiveFolders ||\n        this.activeAssigneeTab === wootConstants.ASSIGNEE_TYPE.ALL\n      );\n    },\n    inbox() {\n      return this.$store.getters['inboxes/getInbox'](this.activeInbox);\n    },\n    currentPage() {\n      return this.$store.getters['conversationPage/getCurrentPageFilter'](\n        this.activeAssigneeTab\n      );\n    },\n    currentPageFilterKey() {\n      return this.hasAppliedFiltersOrActiveFolders\n        ? 'appliedFilters'\n        : this.activeAssigneeTab;\n    },\n    currentFiltersPage() {\n      return this.$store.getters['conversationPage/getCurrentPageFilter'](\n        this.currentPageFilterKey\n      );\n    },\n    hasCurrentPageEndReached() {\n      return this.$store.getters['conversationPage/getHasEndReached'](\n        this.currentPageFilterKey\n      );\n    },\n    conversationFilters() {\n      return {\n        inboxId: this.conversationInbox ? this.conversationInbox : undefined,\n        assigneeType: this.activeAssigneeTab,\n        status: this.activeStatus,\n        page: this.currentPage + 1,\n        labels: this.label ? [this.label] : undefined,\n        teamId: this.teamId || undefined,\n        conversationType: this.conversationType || undefined,\n        folders: this.hasActiveFolders ? this.savedFoldersValue : undefined,\n      };\n    },\n    pageTitle() {\n      if (this.hasAppliedFilters) {\n        return this.$t('CHAT_LIST.TAB_HEADING');\n      }\n      if (this.inbox.name) {\n        return this.inbox.name;\n      }\n      if (this.activeTeam.name) {\n        return this.activeTeam.name;\n      }\n      if (this.label) {\n        return `#${this.label}`;\n      }\n      if (this.conversationType === 'mention') {\n        return this.$t('CHAT_LIST.MENTION_HEADING');\n      }\n      if (this.conversationType === 'unattended') {\n        return this.$t('CHAT_LIST.UNATTENDED_HEADING');\n      }\n      if (this.hasActiveFolders) {\n        return this.activeFolder.name;\n      }\n      return this.$t('CHAT_LIST.TAB_HEADING');\n    },\n    conversationList() {\n      let conversationList = [];\n      if (!this.hasAppliedFiltersOrActiveFolders) {\n        const filters = this.conversationFilters;\n        if (this.activeAssigneeTab === 'me') {\n          conversationList = [...this.mineChatsList(filters)];\n        } else if (this.activeAssigneeTab === 'unassigned') {\n          conversationList = [...this.unAssignedChatsList(filters)];\n        } else {\n          conversationList = [...this.allChatList(filters)];\n        }\n      } else {\n        conversationList = [...this.chatLists];\n      }\n\n      return conversationList;\n    },\n    activeFolder() {\n      if (this.foldersId) {\n        const activeView = this.folders.filter(\n          view => view.id === Number(this.foldersId)\n        );\n        const [firstValue] = activeView;\n        return firstValue;\n      }\n      return undefined;\n    },\n    activeTeam() {\n      if (this.teamId) {\n        return this.$store.getters['teams/getTeam'](this.teamId);\n      }\n      return {};\n    },\n    allConversationsSelected() {\n      return (\n        this.conversationList.length === this.selectedConversations.length &&\n        this.conversationList.every(el =>\n          this.selectedConversations.includes(el.id)\n        )\n      );\n    },\n    uniqueInboxes() {\n      return [...new Set(this.selectedInboxes)];\n    },\n  },\n  watch: {\n    activeTeam() {\n      this.resetAndFetchData();\n    },\n    conversationInbox() {\n      this.resetAndFetchData();\n    },\n    label() {\n      this.resetAndFetchData();\n    },\n    conversationType() {\n      this.resetAndFetchData();\n    },\n    activeFolder() {\n      if (!this.hasAppliedFilters) {\n        this.resetAndFetchData();\n      }\n    },\n  },\n  mounted() {\n    this.$store.dispatch('setChatFilter', this.activeStatus);\n    this.resetAndFetchData();\n\n    bus.$on('fetch_conversation_stats', () => {\n      this.$store.dispatch('conversationStats/get', this.conversationFilters);\n    });\n  },\n  methods: {\n    onApplyFilter(payload) {\n      this.resetBulkActions();\n      this.foldersQuery = filterQueryGenerator(payload);\n      this.$store.dispatch('conversationPage/reset');\n      this.$store.dispatch('emptyAllConversations');\n      this.fetchFilteredConversations(payload);\n    },\n    onClickOpenAddFoldersModal() {\n      this.showAddFoldersModal = true;\n    },\n    onCloseAddFoldersModal() {\n      this.showAddFoldersModal = false;\n    },\n    onClickOpenDeleteFoldersModal() {\n      this.showDeleteFoldersModal = true;\n    },\n    onCloseDeleteFoldersModal() {\n      this.showDeleteFoldersModal = false;\n    },\n    onToggleAdvanceFiltersModal() {\n      this.showAdvancedFilters = !this.showAdvancedFilters;\n    },\n    getKeyboardListenerParams() {\n      const allConversations = this.$refs.activeConversation.querySelectorAll(\n        'div.conversations-list div.conversation'\n      );\n      const activeConversation = this.$refs.activeConversation.querySelector(\n        'div.conversations-list div.conversation.active'\n      );\n      const activeConversationIndex = [...allConversations].indexOf(\n        activeConversation\n      );\n      const lastConversationIndex = allConversations.length - 1;\n      return {\n        allConversations,\n        activeConversation,\n        activeConversationIndex,\n        lastConversationIndex,\n      };\n    },\n    handleKeyEvents(e) {\n      if (hasPressedAltAndJKey(e)) {\n        const {\n          allConversations,\n          activeConversationIndex,\n        } = this.getKeyboardListenerParams();\n        if (activeConversationIndex === -1) {\n          allConversations[0].click();\n        }\n        if (activeConversationIndex >= 1) {\n          allConversations[activeConversationIndex - 1].click();\n        }\n      }\n      if (hasPressedAltAndKKey(e)) {\n        const {\n          allConversations,\n          activeConversationIndex,\n          lastConversationIndex,\n        } = this.getKeyboardListenerParams();\n        if (activeConversationIndex === -1) {\n          allConversations[lastConversationIndex].click();\n        } else if (activeConversationIndex < lastConversationIndex) {\n          allConversations[activeConversationIndex + 1].click();\n        }\n      }\n    },\n    resetAndFetchData() {\n      this.resetBulkActions();\n      this.$store.dispatch('conversationPage/reset');\n      this.$store.dispatch('emptyAllConversations');\n      this.$store.dispatch('clearConversationFilters');\n      if (this.hasActiveFolders) {\n        const payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n      if (this.foldersId) {\n        return;\n      }\n      this.fetchConversations();\n    },\n    fetchConversations() {\n      this.$store\n        .dispatch('fetchAllConversations', this.conversationFilters)\n        .then(() => this.$emit('conversation-load'));\n    },\n    loadMoreConversations() {\n      if (!this.hasAppliedFiltersOrActiveFolders) {\n        this.fetchConversations();\n      }\n      if (this.hasActiveFolders) {\n        const payload = this.activeFolder.query;\n        this.fetchSavedFilteredConversations(payload);\n      }\n      if (this.hasAppliedFilters) {\n        this.fetchFilteredConversations(this.appliedFilters);\n      }\n    },\n    fetchFilteredConversations(payload) {\n      let page = this.currentFiltersPage + 1;\n      this.$store\n        .dispatch('fetchFilteredConversations', {\n          queryData: filterQueryGenerator(payload),\n          page,\n        })\n        .then(() => this.$emit('conversation-load'));\n      this.showAdvancedFilters = false;\n    },\n    fetchSavedFilteredConversations(payload) {\n      let page = this.currentFiltersPage + 1;\n      this.$store\n        .dispatch('fetchFilteredConversations', {\n          queryData: payload,\n          page,\n        })\n        .then(() => this.$emit('conversation-load'));\n    },\n    updateAssigneeTab(selectedTab) {\n      if (this.activeAssigneeTab !== selectedTab) {\n        this.resetBulkActions();\n        bus.$emit('clearSearchInput');\n        this.activeAssigneeTab = selectedTab;\n        if (!this.currentPage) {\n          this.fetchConversations();\n        }\n      }\n    },\n    resetBulkActions() {\n      this.selectedConversations = [];\n      this.selectedInboxes = [];\n    },\n    updateStatusType(index) {\n      if (this.activeStatus !== index) {\n        this.activeStatus = index;\n        this.resetAndFetchData();\n      }\n    },\n    openLastSavedItemInFolder() {\n      const lastItemOfFolder = this.folders[this.folders.length - 1];\n      const lastItemId = lastItemOfFolder.id;\n      this.$router.push({\n        name: 'folder_conversations',\n        params: { id: lastItemId },\n      });\n    },\n    openLastItemAfterDeleteInFolder() {\n      if (this.folders.length > 0) {\n        this.openLastSavedItemInFolder();\n      } else {\n        this.$router.push({ name: 'home' });\n        this.fetchConversations();\n      }\n    },\n    isConversationSelected(id) {\n      return this.selectedConversations.includes(id);\n    },\n    selectConversation(conversationId, inboxId) {\n      this.selectedConversations.push(conversationId);\n      this.selectedInboxes.push(inboxId);\n    },\n    deSelectConversation(conversationId, inboxId) {\n      this.selectedConversations = this.selectedConversations.filter(\n        item => item !== conversationId\n      );\n      this.selectedInboxes = this.selectedInboxes.filter(\n        item => item !== inboxId\n      );\n    },\n    selectAllConversations(check) {\n      if (check) {\n        this.selectedConversations = this.conversationList.map(item => item.id);\n        this.selectedInboxes = this.conversationList.map(item => item.inbox_id);\n      } else {\n        this.resetBulkActions();\n      }\n    },\n    // Same method used in context menu, conversationId being passed from there.\n    async onAssignAgent(agent, conversationId = null) {\n      try {\n        await this.$store.dispatch('bulkActions/process', {\n          type: 'Conversation',\n          ids: conversationId || this.selectedConversations,\n          fields: {\n            assignee_id: agent.id,\n          },\n        });\n        this.selectedConversations = [];\n        if (conversationId) {\n          this.showAlert(\n            this.$t(\n              'CONVERSATION.CARD_CONTEXT_MENU.API.AGENT_ASSIGNMENT.SUCCESFUL',\n              {\n                agentName: agent.name,\n                conversationId,\n              }\n            )\n          );\n        } else {\n          this.showAlert(this.$t('BULK_ACTION.ASSIGN_SUCCESFUL'));\n        }\n      } catch (err) {\n        this.showAlert(this.$t('BULK_ACTION.ASSIGN_FAILED'));\n      }\n    },\n    async markAsUnread(conversationId) {\n      try {\n        await this.$store.dispatch('markMessagesUnread', {\n          id: conversationId,\n        });\n        const {\n          params: { accountId, inbox_id: inboxId, label, teamId },\n          name,\n        } = this.$route;\n        let conversationType = '';\n        if (isOnMentionsView({ route: { name } })) {\n          conversationType = 'mention';\n        } else if (isOnUnattendedView({ route: { name } })) {\n          conversationType = 'unattended';\n        }\n        this.$router.push(\n          conversationListPageURL({\n            accountId,\n            conversationType: conversationType,\n            customViewId: this.foldersId,\n            inboxId,\n            label,\n            teamId,\n          })\n        );\n      } catch (error) {\n        // Ignore error\n      }\n    },\n    async onAssignTeam(team, conversationId = null) {\n      try {\n        await this.$store.dispatch('assignTeam', {\n          conversationId,\n          teamId: team.id,\n        });\n        this.showAlert(\n          this.$t(\n            'CONVERSATION.CARD_CONTEXT_MENU.API.TEAM_ASSIGNMENT.SUCCESFUL',\n            {\n              team: team.name,\n              conversationId,\n            }\n          )\n        );\n      } catch (error) {\n        this.showAlert(\n          this.$t('CONVERSATION.CARD_CONTEXT_MENU.API.TEAM_ASSIGNMENT.FAILED')\n        );\n      }\n    },\n    // Same method used in context menu, conversationId being passed from there.\n    async onAssignLabels(labels, conversationId = null) {\n      try {\n        await this.$store.dispatch('bulkActions/process', {\n          type: 'Conversation',\n          ids: conversationId || this.selectedConversations,\n          labels: {\n            add: labels,\n          },\n        });\n        this.selectedConversations = [];\n        if (conversationId) {\n          this.showAlert(\n            this.$t(\n              'CONVERSATION.CARD_CONTEXT_MENU.API.LABEL_ASSIGNMENT.SUCCESFUL',\n              {\n                labelName: labels[0],\n                conversationId,\n              }\n            )\n          );\n        } else {\n          this.showAlert(this.$t('BULK_ACTION.LABELS.ASSIGN_SUCCESFUL'));\n        }\n      } catch (err) {\n        this.showAlert(this.$t('BULK_ACTION.LABELS.ASSIGN_FAILED'));\n      }\n    },\n    async onAssignTeamsForBulk(team) {\n      try {\n        await this.$store.dispatch('bulkActions/process', {\n          type: 'Conversation',\n          ids: this.selectedConversations,\n          fields: {\n            team_id: team.id,\n          },\n        });\n        this.selectedConversations = [];\n        this.showAlert(this.$t('BULK_ACTION.TEAMS.ASSIGN_SUCCESFUL'));\n      } catch (err) {\n        this.showAlert(this.$t('BULK_ACTION.TEAMS.ASSIGN_FAILED'));\n      }\n    },\n    async onUpdateConversations(status) {\n      try {\n        await this.$store.dispatch('bulkActions/process', {\n          type: 'Conversation',\n          ids: this.selectedConversations,\n          fields: {\n            status,\n          },\n        });\n        this.selectedConversations = [];\n        this.showAlert(this.$t('BULK_ACTION.UPDATE.UPDATE_SUCCESFUL'));\n      } catch (err) {\n        this.showAlert(this.$t('BULK_ACTION.UPDATE.UPDATE_FAILED'));\n      }\n    },\n    toggleConversationStatus(conversationId, status, snoozedUntil) {\n      this.$store\n        .dispatch('toggleStatus', {\n          conversationId,\n          status,\n          snoozedUntil,\n        })\n        .then(() => {\n          this.showAlert(this.$t('CONVERSATION.CHANGE_STATUS'));\n          this.isLoading = false;\n        });\n    },\n    allSelectedConversationsStatus(status) {\n      if (!this.selectedConversations.length) return false;\n      return this.selectedConversations.every(item => {\n        return this.$store.getters.getConversationById(item).status === status;\n      });\n    },\n    onContextMenuToggle(state) {\n      this.isContextMenuOpen = state;\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import '~dashboard/assets/scss/woot';\n\n.spinner {\n  margin-top: var(--space-normal);\n  margin-bottom: var(--space-normal);\n}\n\n.conversations-list {\n  // Prevent the list from scrolling if the submenu is opened\n  &.is-context-menu-open {\n    overflow: hidden !important;\n  }\n}\n\n.conversations-list-wrap {\n  flex-shrink: 0;\n  width: 34rem;\n  overflow: hidden;\n  @include breakpoint(large up) {\n    width: 36rem;\n  }\n  @include breakpoint(xlarge up) {\n    width: 35rem;\n  }\n  @include breakpoint(xxlarge up) {\n    width: 38rem;\n  }\n  @include breakpoint(xxxlarge up) {\n    flex-basis: 46rem;\n  }\n\n  &.hide {\n    display: none;\n  }\n\n  &.list--full-width {\n    width: 100%;\n    @include breakpoint(xxxlarge up) {\n      flex-basis: 100%;\n    }\n  }\n}\n.filter--actions {\n  display: flex;\n  align-items: center;\n}\n\n.btn-filter {\n  margin: 0 var(--space-smaller);\n}\n\n.filter__applied {\n  padding: 0 0 var(--space-slab) 0 !important;\n  border-bottom: 1px solid var(--color-border);\n}\n\n.delete-custom-view__button {\n  margin-right: var(--space-normal);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components"},"metadata":{},"sourceType":"module"}