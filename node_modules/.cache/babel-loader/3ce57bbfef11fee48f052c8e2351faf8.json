{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport AuthAPI from '../api/auth';\nimport BaseActionCableConnector from '../../shared/helpers/BaseActionCableConnector';\nimport { newMessageNotification } from 'shared/helpers/AudioNotificationHelper';\n\nvar ActionCableConnector = /*#__PURE__*/function (_BaseActionCableConne) {\n  _inherits(ActionCableConnector, _BaseActionCableConne);\n\n  var _super = _createSuper(ActionCableConnector);\n\n  function ActionCableConnector(app, pubsubToken) {\n    var _this;\n\n    _classCallCheck(this, ActionCableConnector);\n\n    var _ref = window.chatwootConfig || {},\n        _ref$websocketURL = _ref.websocketURL,\n        websocketURL = _ref$websocketURL === void 0 ? '' : _ref$websocketURL;\n\n    _this = _super.call(this, app, pubsubToken, websocketURL);\n\n    _this.isAValidEvent = function (data) {\n      return _this.app.$store.getters.getCurrentAccountId === data.account_id;\n    };\n\n    _this.onMessageUpdated = function (data) {\n      _this.app.$store.dispatch('updateMessage', data);\n    };\n\n    _this.onPresenceUpdate = function (data) {\n      _this.app.$store.dispatch('contacts/updatePresence', data.contacts);\n\n      _this.app.$store.dispatch('agents/updatePresence', data.users);\n\n      _this.app.$store.dispatch('setCurrentUserAvailability', data.users);\n    };\n\n    _this.onConversationContactChange = function (payload) {\n      var _payload$meta = payload.meta,\n          meta = _payload$meta === void 0 ? {} : _payload$meta,\n          conversationId = payload.id;\n\n      var _ref2 = meta || {},\n          sender = _ref2.sender;\n\n      if (conversationId) {\n        _this.app.$store.dispatch('updateConversationContact', _objectSpread({\n          conversationId: conversationId\n        }, sender));\n      }\n    };\n\n    _this.onAssigneeChanged = function (payload) {\n      var id = payload.id;\n\n      if (id) {\n        _this.app.$store.dispatch('updateConversation', payload);\n      }\n\n      _this.fetchConversationStats();\n    };\n\n    _this.onConversationCreated = function (data) {\n      _this.app.$store.dispatch('addConversation', data);\n\n      _this.fetchConversationStats();\n    };\n\n    _this.onConversationRead = function (data) {\n      _this.app.$store.dispatch('updateConversation', data);\n    };\n\n    _this.onLogout = function () {\n      return AuthAPI.logout();\n    };\n\n    _this.onMessageCreated = function (data) {\n      newMessageNotification(data);\n\n      _this.app.$store.dispatch('addMessage', data);\n    };\n\n    _this.onReload = function () {\n      return window.location.reload();\n    };\n\n    _this.onStatusChange = function (data) {\n      _this.app.$store.dispatch('updateConversation', data);\n\n      _this.fetchConversationStats();\n    };\n\n    _this.onConversationUpdated = function (data) {\n      _this.app.$store.dispatch('updateConversation', data);\n\n      _this.fetchConversationStats();\n    };\n\n    _this.onTypingOn = function (_ref3) {\n      var conversation = _ref3.conversation,\n          user = _ref3.user;\n      var conversationId = conversation.id;\n\n      _this.clearTimer(conversationId);\n\n      _this.app.$store.dispatch('conversationTypingStatus/create', {\n        conversationId: conversationId,\n        user: user\n      });\n\n      _this.initTimer({\n        conversation: conversation,\n        user: user\n      });\n    };\n\n    _this.onTypingOff = function (_ref4) {\n      var conversation = _ref4.conversation,\n          user = _ref4.user;\n      var conversationId = conversation.id;\n\n      _this.clearTimer(conversationId);\n\n      _this.app.$store.dispatch('conversationTypingStatus/destroy', {\n        conversationId: conversationId,\n        user: user\n      });\n    };\n\n    _this.onConversationMentioned = function (data) {\n      _this.app.$store.dispatch('addMentions', data);\n    };\n\n    _this.clearTimer = function (conversationId) {\n      var timerEvent = _this.CancelTyping[conversationId];\n\n      if (timerEvent) {\n        clearTimeout(timerEvent);\n        _this.CancelTyping[conversationId] = null;\n      }\n    };\n\n    _this.initTimer = function (_ref5) {\n      var conversation = _ref5.conversation,\n          user = _ref5.user;\n      var conversationId = conversation.id; // Turn off typing automatically after 30 seconds\n\n      _this.CancelTyping[conversationId] = setTimeout(function () {\n        _this.onTypingOff({\n          conversation: conversation,\n          user: user\n        });\n      }, 30000);\n    };\n\n    _this.fetchConversationStats = function () {\n      bus.$emit('fetch_conversation_stats');\n      bus.$emit('fetch_overview_reports');\n    };\n\n    _this.onContactDelete = function (data) {\n      _this.app.$store.dispatch('contacts/deleteContactThroughConversations', data.id);\n\n      _this.fetchConversationStats();\n    };\n\n    _this.onContactUpdate = function (data) {\n      _this.app.$store.dispatch('contacts/updateContact', data);\n    };\n\n    _this.onNotificationCreated = function (data) {\n      _this.app.$store.dispatch('notifications/addNotification', data);\n    };\n\n    _this.onFirstReplyCreated = function () {\n      bus.$emit('fetch_overview_reports');\n    };\n\n    _this.CancelTyping = [];\n    _this.events = {\n      'message.created': _this.onMessageCreated,\n      'message.updated': _this.onMessageUpdated,\n      'conversation.created': _this.onConversationCreated,\n      'conversation.status_changed': _this.onStatusChange,\n      'user:logout': _this.onLogout,\n      'page:reload': _this.onReload,\n      'assignee.changed': _this.onAssigneeChanged,\n      'conversation.typing_on': _this.onTypingOn,\n      'conversation.typing_off': _this.onTypingOff,\n      'conversation.contact_changed': _this.onConversationContactChange,\n      'presence.update': _this.onPresenceUpdate,\n      'contact.deleted': _this.onContactDelete,\n      'contact.updated': _this.onContactUpdate,\n      'conversation.mentioned': _this.onConversationMentioned,\n      'notification.created': _this.onNotificationCreated,\n      'first.reply.created': _this.onFirstReplyCreated,\n      'conversation.read': _this.onConversationRead,\n      'conversation.updated': _this.onConversationUpdated\n    };\n    return _this;\n  }\n\n  return ActionCableConnector;\n}(BaseActionCableConnector);\n\nexport default {\n  init: function init(pubsubToken) {\n    return new ActionCableConnector(window.WOOT, pubsubToken);\n  }\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/helper/actionCable.js"],"names":["AuthAPI","BaseActionCableConnector","newMessageNotification","ActionCableConnector","app","pubsubToken","window","chatwootConfig","websocketURL","isAValidEvent","data","$store","getters","getCurrentAccountId","account_id","onMessageUpdated","dispatch","onPresenceUpdate","contacts","users","onConversationContactChange","payload","meta","conversationId","id","sender","onAssigneeChanged","fetchConversationStats","onConversationCreated","onConversationRead","onLogout","logout","onMessageCreated","onReload","location","reload","onStatusChange","onConversationUpdated","onTypingOn","conversation","user","clearTimer","initTimer","onTypingOff","onConversationMentioned","timerEvent","CancelTyping","clearTimeout","setTimeout","bus","$emit","onContactDelete","onContactUpdate","onNotificationCreated","onFirstReplyCreated","events","init","WOOT"],"mappings":"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","sourcesContent":["import AuthAPI from '../api/auth';\nimport BaseActionCableConnector from '../../shared/helpers/BaseActionCableConnector';\nimport { newMessageNotification } from 'shared/helpers/AudioNotificationHelper';\n\nclass ActionCableConnector extends BaseActionCableConnector {\n  constructor(app, pubsubToken) {\n    const { websocketURL = '' } = window.chatwootConfig || {};\n    super(app, pubsubToken, websocketURL);\n    this.CancelTyping = [];\n    this.events = {\n      'message.created': this.onMessageCreated,\n      'message.updated': this.onMessageUpdated,\n      'conversation.created': this.onConversationCreated,\n      'conversation.status_changed': this.onStatusChange,\n      'user:logout': this.onLogout,\n      'page:reload': this.onReload,\n      'assignee.changed': this.onAssigneeChanged,\n      'conversation.typing_on': this.onTypingOn,\n      'conversation.typing_off': this.onTypingOff,\n      'conversation.contact_changed': this.onConversationContactChange,\n      'presence.update': this.onPresenceUpdate,\n      'contact.deleted': this.onContactDelete,\n      'contact.updated': this.onContactUpdate,\n      'conversation.mentioned': this.onConversationMentioned,\n      'notification.created': this.onNotificationCreated,\n      'first.reply.created': this.onFirstReplyCreated,\n      'conversation.read': this.onConversationRead,\n      'conversation.updated': this.onConversationUpdated,\n    };\n  }\n\n  isAValidEvent = data => {\n    return this.app.$store.getters.getCurrentAccountId === data.account_id;\n  };\n\n  onMessageUpdated = data => {\n    this.app.$store.dispatch('updateMessage', data);\n  };\n\n  onPresenceUpdate = data => {\n    this.app.$store.dispatch('contacts/updatePresence', data.contacts);\n    this.app.$store.dispatch('agents/updatePresence', data.users);\n    this.app.$store.dispatch('setCurrentUserAvailability', data.users);\n  };\n\n  onConversationContactChange = payload => {\n    const { meta = {}, id: conversationId } = payload;\n    const { sender } = meta || {};\n    if (conversationId) {\n      this.app.$store.dispatch('updateConversationContact', {\n        conversationId,\n        ...sender,\n      });\n    }\n  };\n\n  onAssigneeChanged = payload => {\n    const { id } = payload;\n    if (id) {\n      this.app.$store.dispatch('updateConversation', payload);\n    }\n    this.fetchConversationStats();\n  };\n\n  onConversationCreated = data => {\n    this.app.$store.dispatch('addConversation', data);\n    this.fetchConversationStats();\n  };\n\n  onConversationRead = data => {\n    this.app.$store.dispatch('updateConversation', data);\n  };\n\n  onLogout = () => AuthAPI.logout();\n\n  onMessageCreated = data => {\n    newMessageNotification(data);\n    this.app.$store.dispatch('addMessage', data);\n  };\n\n  onReload = () => window.location.reload();\n\n  onStatusChange = data => {\n    this.app.$store.dispatch('updateConversation', data);\n    this.fetchConversationStats();\n  };\n\n  onConversationUpdated = data => {\n    this.app.$store.dispatch('updateConversation', data);\n    this.fetchConversationStats();\n  };\n\n  onTypingOn = ({ conversation, user }) => {\n    const conversationId = conversation.id;\n\n    this.clearTimer(conversationId);\n    this.app.$store.dispatch('conversationTypingStatus/create', {\n      conversationId,\n      user,\n    });\n    this.initTimer({ conversation, user });\n  };\n\n  onTypingOff = ({ conversation, user }) => {\n    const conversationId = conversation.id;\n\n    this.clearTimer(conversationId);\n    this.app.$store.dispatch('conversationTypingStatus/destroy', {\n      conversationId,\n      user,\n    });\n  };\n\n  onConversationMentioned = data => {\n    this.app.$store.dispatch('addMentions', data);\n  };\n\n  clearTimer = conversationId => {\n    const timerEvent = this.CancelTyping[conversationId];\n\n    if (timerEvent) {\n      clearTimeout(timerEvent);\n      this.CancelTyping[conversationId] = null;\n    }\n  };\n\n  initTimer = ({ conversation, user }) => {\n    const conversationId = conversation.id;\n    // Turn off typing automatically after 30 seconds\n    this.CancelTyping[conversationId] = setTimeout(() => {\n      this.onTypingOff({ conversation, user });\n    }, 30000);\n  };\n\n  fetchConversationStats = () => {\n    bus.$emit('fetch_conversation_stats');\n    bus.$emit('fetch_overview_reports');\n  };\n\n  onContactDelete = data => {\n    this.app.$store.dispatch(\n      'contacts/deleteContactThroughConversations',\n      data.id\n    );\n    this.fetchConversationStats();\n  };\n\n  onContactUpdate = data => {\n    this.app.$store.dispatch('contacts/updateContact', data);\n  };\n\n  onNotificationCreated = data => {\n    this.app.$store.dispatch('notifications/addNotification', data);\n  };\n\n  onFirstReplyCreated = () => {\n    bus.$emit('fetch_overview_reports');\n  };\n}\n\nexport default {\n  init(pubsubToken) {\n    return new ActionCableConnector(window.WOOT, pubsubToken);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}