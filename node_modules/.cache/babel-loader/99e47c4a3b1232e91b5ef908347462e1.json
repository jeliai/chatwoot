{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport format from 'date-fns/format';\nimport ReportFilterSelector from './components/FilterSelector';\nimport { GROUP_BY_FILTER, METRIC_CHART } from './constants';\nimport reportMixin from '../../../../mixins/reportMixin';\nimport { formatTime } from '@chatwoot/utils';\nvar REPORTS_KEYS = {\n  CONVERSATIONS: 'conversations_count',\n  INCOMING_MESSAGES: 'incoming_messages_count',\n  OUTGOING_MESSAGES: 'outgoing_messages_count',\n  FIRST_RESPONSE_TIME: 'avg_first_response_time',\n  RESOLUTION_TIME: 'avg_resolution_time',\n  RESOLUTION_COUNT: 'resolutions_count'\n};\nexport default {\n  components: {\n    ReportFilterSelector: ReportFilterSelector\n  },\n  mixins: [reportMixin],\n  data: function data() {\n    return {\n      from: 0,\n      to: 0,\n      currentSelection: 0,\n      groupBy: GROUP_BY_FILTER[1],\n      filterItemsList: this.$t('REPORT.GROUP_BY_DAY_OPTIONS'),\n      selectedGroupByFilter: {},\n      businessHours: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    accountSummary: 'getAccountSummary',\n    accountReport: 'getAccountReports'\n  })), {}, {\n    collection: function collection() {\n      var _this = this;\n\n      if (this.accountReport.isFetching) {\n        return {};\n      }\n\n      if (!this.accountReport.data.length) return {};\n      var labels = this.accountReport.data.map(function (element) {\n        if (_this.groupBy.period === GROUP_BY_FILTER[2].period) {\n          var week_date = new Date(fromUnixTime(element.timestamp));\n          var first_day = week_date.getDate() - week_date.getDay();\n          var last_day = first_day + 6;\n          var week_first_date = new Date(week_date.setDate(first_day));\n          var week_last_date = new Date(week_date.setDate(last_day));\n          return \"\".concat(format(week_first_date, 'dd/MM/yy'), \" - \").concat(format(week_last_date, 'dd/MM/yy'));\n        }\n\n        if (_this.groupBy.period === GROUP_BY_FILTER[3].period) {\n          return format(fromUnixTime(element.timestamp), 'MMM-yyyy');\n        }\n\n        if (_this.groupBy.period === GROUP_BY_FILTER[4].period) {\n          return format(fromUnixTime(element.timestamp), 'yyyy');\n        }\n\n        return format(fromUnixTime(element.timestamp), 'dd-MMM-yyyy');\n      });\n      var datasets = METRIC_CHART[this.metrics[this.currentSelection].KEY].datasets.map(function (dataset) {\n        switch (dataset.type) {\n          case 'bar':\n            return _objectSpread(_objectSpread({}, dataset), {}, {\n              yAxisID: 'y-left',\n              label: _this.metrics[_this.currentSelection].NAME,\n              data: _this.accountReport.data.map(function (element) {\n                return element.value;\n              })\n            });\n\n          case 'line':\n            return _objectSpread(_objectSpread({}, dataset), {}, {\n              yAxisID: 'y-right',\n              label: _this.metrics[0].NAME,\n              data: _this.accountReport.data.map(function (element) {\n                return element.count;\n              })\n            });\n\n          default:\n            return dataset;\n        }\n      });\n      return {\n        labels: labels,\n        datasets: datasets\n      };\n    },\n    chartOptions: function chartOptions() {\n      var _this2 = this;\n\n      var tooltips = {};\n\n      if (this.isAverageMetricType(this.metrics[this.currentSelection].KEY)) {\n        tooltips.callbacks = {\n          label: function label(tooltipItem) {\n            return _this2.$t(_this2.metrics[_this2.currentSelection].TOOLTIP_TEXT, {\n              metricValue: formatTime(tooltipItem.yLabel),\n              conversationCount: _this2.accountReport.data[tooltipItem.index].count\n            });\n          }\n        };\n      }\n\n      return {\n        scales: METRIC_CHART[this.metrics[this.currentSelection].KEY].scales,\n        tooltips: tooltips\n      };\n    },\n    metrics: function metrics() {\n      var _this3 = this;\n\n      var reportKeys = ['CONVERSATIONS', 'INCOMING_MESSAGES', 'OUTGOING_MESSAGES', 'FIRST_RESPONSE_TIME', 'RESOLUTION_TIME', 'RESOLUTION_COUNT'];\n      var infoText = {\n        FIRST_RESPONSE_TIME: this.$t(\"REPORT.METRICS.FIRST_RESPONSE_TIME.INFO_TEXT\"),\n        RESOLUTION_TIME: this.$t(\"REPORT.METRICS.RESOLUTION_TIME.INFO_TEXT\")\n      };\n      return reportKeys.map(function (key) {\n        return {\n          NAME: _this3.$t(\"REPORT.METRICS.\".concat(key, \".NAME\")),\n          KEY: REPORTS_KEYS[key],\n          DESC: _this3.$t(\"REPORT.METRICS.\".concat(key, \".DESC\")),\n          INFO_TEXT: infoText[key],\n          TOOLTIP_TEXT: \"REPORT.METRICS.\".concat(key, \".TOOLTIP_TEXT\")\n        };\n      });\n    }\n  }),\n  methods: {\n    fetchAllData: function fetchAllData() {\n      var from = this.from,\n          to = this.to,\n          groupBy = this.groupBy,\n          businessHours = this.businessHours;\n      this.$store.dispatch('fetchAccountSummary', {\n        from: from,\n        to: to,\n        groupBy: groupBy.period,\n        businessHours: businessHours\n      });\n      this.fetchChartData();\n    },\n    fetchChartData: function fetchChartData() {\n      var from = this.from,\n          to = this.to,\n          groupBy = this.groupBy,\n          businessHours = this.businessHours;\n      this.$store.dispatch('fetchAccountReport', {\n        metric: this.metrics[this.currentSelection].KEY,\n        from: from,\n        to: to,\n        groupBy: groupBy.period,\n        businessHours: businessHours\n      });\n    },\n    downloadAgentReports: function downloadAgentReports() {\n      var from = this.from,\n          to = this.to;\n      var fileName = \"agent-report-\".concat(format(fromUnixTime(to), 'dd-MM-yyyy'), \".csv\");\n      this.$store.dispatch('downloadAgentReports', {\n        from: from,\n        to: to,\n        fileName: fileName\n      });\n    },\n    changeSelection: function changeSelection(index) {\n      this.currentSelection = index;\n      this.fetchChartData();\n    },\n    onDateRangeChange: function onDateRangeChange(_ref) {\n      var _this4 = this;\n\n      var from = _ref.from,\n          to = _ref.to,\n          groupBy = _ref.groupBy;\n      this.from = from;\n      this.to = to;\n      this.filterItemsList = this.fetchFilterItems(groupBy);\n      var filterItems = this.filterItemsList.filter(function (item) {\n        return item.id === _this4.groupBy.id;\n      });\n\n      if (filterItems.length > 0) {\n        this.selectedGroupByFilter = filterItems[0];\n      } else {\n        this.selectedGroupByFilter = this.filterItemsList[0];\n        this.groupBy = GROUP_BY_FILTER[this.selectedGroupByFilter.id];\n      }\n\n      this.fetchAllData();\n    },\n    onFilterChange: function onFilterChange(payload) {\n      this.groupBy = GROUP_BY_FILTER[payload.id];\n      this.fetchAllData();\n    },\n    fetchFilterItems: function fetchFilterItems(group_by) {\n      switch (group_by) {\n        case GROUP_BY_FILTER[2].period:\n          return this.$t('REPORT.GROUP_BY_WEEK_OPTIONS');\n\n        case GROUP_BY_FILTER[3].period:\n          return this.$t('REPORT.GROUP_BY_MONTH_OPTIONS');\n\n        case GROUP_BY_FILTER[4].period:\n          return this.$t('REPORT.GROUP_BY_YEAR_OPTIONS');\n\n        default:\n          return this.$t('REPORT.GROUP_BY_DAY_OPTIONS');\n      }\n    },\n    onBusinessHoursToggle: function onBusinessHoursToggle(value) {\n      this.businessHours = value;\n      this.fetchAllData();\n    }\n  }\n};","map":{"version":3,"sources":["Index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"column content-box\">\n    <woot-button\n      color-scheme=\"success\"\n      class-names=\"button--fixed-right-top\"\n      icon=\"arrow-download\"\n      @click=\"downloadAgentReports\"\n    >\n      {{ $t('REPORT.DOWNLOAD_AGENT_REPORTS') }}\n    </woot-button>\n\n    <report-filter-selector\n      group-by-filter\n      :selected-group-by-filter=\"selectedGroupByFilter\"\n      :filter-items-list=\"filterItemsList\"\n      @date-range-change=\"onDateRangeChange\"\n      @filter-change=\"onFilterChange\"\n      @business-hours-toggle=\"onBusinessHoursToggle\"\n    />\n    <div class=\"row\">\n      <woot-report-stats-card\n        v-for=\"(metric, index) in metrics\"\n        :key=\"metric.NAME\"\n        :desc=\"metric.DESC\"\n        :heading=\"metric.NAME\"\n        :info-text=\"displayInfoText(metric.KEY)\"\n        :index=\"index\"\n        :on-click=\"changeSelection\"\n        :point=\"displayMetric(metric.KEY)\"\n        :trend=\"calculateTrend(metric.KEY)\"\n        :selected=\"index === currentSelection\"\n      />\n    </div>\n    <div class=\"report-bar\">\n      <woot-loading-state\n        v-if=\"accountReport.isFetching\"\n        :message=\"$t('REPORT.LOADING_CHART')\"\n      />\n      <div v-else class=\"chart-container\">\n        <woot-bar\n          v-if=\"accountReport.data.length\"\n          :collection=\"collection\"\n          :chart-options=\"chartOptions\"\n        />\n        <span v-else class=\"empty-state\">\n          {{ $t('REPORT.NO_ENOUGH_DATA') }}\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport fromUnixTime from 'date-fns/fromUnixTime';\nimport format from 'date-fns/format';\nimport ReportFilterSelector from './components/FilterSelector';\nimport { GROUP_BY_FILTER, METRIC_CHART } from './constants';\nimport reportMixin from '../../../../mixins/reportMixin';\nimport { formatTime } from '@chatwoot/utils';\n\nconst REPORTS_KEYS = {\n  CONVERSATIONS: 'conversations_count',\n  INCOMING_MESSAGES: 'incoming_messages_count',\n  OUTGOING_MESSAGES: 'outgoing_messages_count',\n  FIRST_RESPONSE_TIME: 'avg_first_response_time',\n  RESOLUTION_TIME: 'avg_resolution_time',\n  RESOLUTION_COUNT: 'resolutions_count',\n};\n\nexport default {\n  components: {\n    ReportFilterSelector,\n  },\n  mixins: [reportMixin],\n  data() {\n    return {\n      from: 0,\n      to: 0,\n      currentSelection: 0,\n      groupBy: GROUP_BY_FILTER[1],\n      filterItemsList: this.$t('REPORT.GROUP_BY_DAY_OPTIONS'),\n      selectedGroupByFilter: {},\n      businessHours: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      accountSummary: 'getAccountSummary',\n      accountReport: 'getAccountReports',\n    }),\n    collection() {\n      if (this.accountReport.isFetching) {\n        return {};\n      }\n      if (!this.accountReport.data.length) return {};\n      const labels = this.accountReport.data.map(element => {\n        if (this.groupBy.period === GROUP_BY_FILTER[2].period) {\n          let week_date = new Date(fromUnixTime(element.timestamp));\n          const first_day = week_date.getDate() - week_date.getDay();\n          const last_day = first_day + 6;\n\n          const week_first_date = new Date(week_date.setDate(first_day));\n          const week_last_date = new Date(week_date.setDate(last_day));\n\n          return `${format(week_first_date, 'dd/MM/yy')} - ${format(\n            week_last_date,\n            'dd/MM/yy'\n          )}`;\n        }\n        if (this.groupBy.period === GROUP_BY_FILTER[3].period) {\n          return format(fromUnixTime(element.timestamp), 'MMM-yyyy');\n        }\n        if (this.groupBy.period === GROUP_BY_FILTER[4].period) {\n          return format(fromUnixTime(element.timestamp), 'yyyy');\n        }\n        return format(fromUnixTime(element.timestamp), 'dd-MMM-yyyy');\n      });\n\n      const datasets = METRIC_CHART[\n        this.metrics[this.currentSelection].KEY\n      ].datasets.map(dataset => {\n        switch (dataset.type) {\n          case 'bar':\n            return {\n              ...dataset,\n              yAxisID: 'y-left',\n              label: this.metrics[this.currentSelection].NAME,\n              data: this.accountReport.data.map(element => element.value),\n            };\n          case 'line':\n            return {\n              ...dataset,\n              yAxisID: 'y-right',\n              label: this.metrics[0].NAME,\n              data: this.accountReport.data.map(element => element.count),\n            };\n          default:\n            return dataset;\n        }\n      });\n\n      return {\n        labels,\n        datasets,\n      };\n    },\n    chartOptions() {\n      let tooltips = {};\n      if (this.isAverageMetricType(this.metrics[this.currentSelection].KEY)) {\n        tooltips.callbacks = {\n          label: tooltipItem => {\n            return this.$t(this.metrics[this.currentSelection].TOOLTIP_TEXT, {\n              metricValue: formatTime(tooltipItem.yLabel),\n              conversationCount: this.accountReport.data[tooltipItem.index]\n                .count,\n            });\n          },\n        };\n      }\n\n      return {\n        scales: METRIC_CHART[this.metrics[this.currentSelection].KEY].scales,\n        tooltips: tooltips,\n      };\n    },\n    metrics() {\n      const reportKeys = [\n        'CONVERSATIONS',\n        'INCOMING_MESSAGES',\n        'OUTGOING_MESSAGES',\n        'FIRST_RESPONSE_TIME',\n        'RESOLUTION_TIME',\n        'RESOLUTION_COUNT',\n      ];\n      const infoText = {\n        FIRST_RESPONSE_TIME: this.$t(\n          `REPORT.METRICS.FIRST_RESPONSE_TIME.INFO_TEXT`\n        ),\n        RESOLUTION_TIME: this.$t(`REPORT.METRICS.RESOLUTION_TIME.INFO_TEXT`),\n      };\n      return reportKeys.map(key => ({\n        NAME: this.$t(`REPORT.METRICS.${key}.NAME`),\n        KEY: REPORTS_KEYS[key],\n        DESC: this.$t(`REPORT.METRICS.${key}.DESC`),\n        INFO_TEXT: infoText[key],\n        TOOLTIP_TEXT: `REPORT.METRICS.${key}.TOOLTIP_TEXT`,\n      }));\n    },\n  },\n  methods: {\n    fetchAllData() {\n      const { from, to, groupBy, businessHours } = this;\n      this.$store.dispatch('fetchAccountSummary', {\n        from,\n        to,\n        groupBy: groupBy.period,\n        businessHours,\n      });\n      this.fetchChartData();\n    },\n    fetchChartData() {\n      const { from, to, groupBy, businessHours } = this;\n      this.$store.dispatch('fetchAccountReport', {\n        metric: this.metrics[this.currentSelection].KEY,\n        from,\n        to,\n        groupBy: groupBy.period,\n        businessHours,\n      });\n    },\n    downloadAgentReports() {\n      const { from, to } = this;\n      const fileName = `agent-report-${format(\n        fromUnixTime(to),\n        'dd-MM-yyyy'\n      )}.csv`;\n      this.$store.dispatch('downloadAgentReports', { from, to, fileName });\n    },\n    changeSelection(index) {\n      this.currentSelection = index;\n      this.fetchChartData();\n    },\n    onDateRangeChange({ from, to, groupBy }) {\n      this.from = from;\n      this.to = to;\n      this.filterItemsList = this.fetchFilterItems(groupBy);\n      const filterItems = this.filterItemsList.filter(\n        item => item.id === this.groupBy.id\n      );\n      if (filterItems.length > 0) {\n        this.selectedGroupByFilter = filterItems[0];\n      } else {\n        this.selectedGroupByFilter = this.filterItemsList[0];\n        this.groupBy = GROUP_BY_FILTER[this.selectedGroupByFilter.id];\n      }\n      this.fetchAllData();\n    },\n    onFilterChange(payload) {\n      this.groupBy = GROUP_BY_FILTER[payload.id];\n      this.fetchAllData();\n    },\n    fetchFilterItems(group_by) {\n      switch (group_by) {\n        case GROUP_BY_FILTER[2].period:\n          return this.$t('REPORT.GROUP_BY_WEEK_OPTIONS');\n        case GROUP_BY_FILTER[3].period:\n          return this.$t('REPORT.GROUP_BY_MONTH_OPTIONS');\n        case GROUP_BY_FILTER[4].period:\n          return this.$t('REPORT.GROUP_BY_YEAR_OPTIONS');\n        default:\n          return this.$t('REPORT.GROUP_BY_DAY_OPTIONS');\n      }\n    },\n    onBusinessHoursToggle(value) {\n      this.businessHours = value;\n      this.fetchAllData();\n    },\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/settings/reports"},"metadata":{},"sourceType":"module"}