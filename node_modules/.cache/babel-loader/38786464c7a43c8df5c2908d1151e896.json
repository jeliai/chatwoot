{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { schema, MarkdownParser, MarkdownSerializer } from 'prosemirror-markdown';\nimport { Schema } from 'prosemirror-model';\n\nvar mentionParser = function mentionParser() {\n  return {\n    node: 'mention',\n    getAttrs: function getAttrs(_ref) {\n      var mention = _ref.mention;\n      var userId = mention.userId,\n          userFullName = mention.userFullName;\n      return {\n        userId: userId,\n        userFullName: userFullName\n      };\n    }\n  };\n};\n\nvar markdownSerializer = function markdownSerializer() {\n  return function (state, node) {\n    var uri = state.esc(\"mention://user/\".concat(node.attrs.userId, \"/\").concat(encodeURIComponent(node.attrs.userFullName)));\n    var escapedDisplayName = state.esc('@' + (node.attrs.userFullName || ''));\n    state.write(\"[\".concat(escapedDisplayName, \"](\").concat(uri, \")\"));\n  };\n};\n\nexport var addMentionsToMarkdownSerializer = function addMentionsToMarkdownSerializer(serializer) {\n  return new MarkdownSerializer(_objectSpread({\n    mention: markdownSerializer()\n  }, serializer.nodes), serializer.marks);\n};\nvar mentionNode = {\n  attrs: {\n    userFullName: {\n      default: ''\n    },\n    userId: {\n      default: ''\n    }\n  },\n  group: 'inline',\n  inline: true,\n  selectable: true,\n  draggable: true,\n  atom: true,\n  toDOM: function toDOM(node) {\n    return ['span', {\n      class: 'prosemirror-mention-node',\n      'mention-user-id': node.attrs.userId,\n      'mention-user-full-name': node.attrs.userFullName\n    }, \"@\".concat(node.attrs.userFullName)];\n  },\n  parseDOM: [{\n    tag: 'span[mention-user-id][mention-user-full-name]',\n    getAttrs: function getAttrs(dom) {\n      var userId = dom.getAttribute('mention-user-id');\n      var userFullName = dom.getAttribute('mention-user-full-name');\n      return {\n        userId: userId,\n        userFullName: userFullName\n      };\n    }\n  }]\n};\n\nvar addMentionNodes = function addMentionNodes(nodes) {\n  return nodes.append({\n    mention: mentionNode\n  });\n};\n\nexport var schemaWithMentions = new Schema({\n  nodes: addMentionNodes(schema.spec.nodes),\n  marks: schema.spec.marks\n});\nexport var addMentionsToMarkdownParser = function addMentionsToMarkdownParser(parser) {\n  return new MarkdownParser(schemaWithMentions, parser.tokenizer, _objectSpread(_objectSpread({}, parser.tokens), {}, {\n    mention: mentionParser()\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}