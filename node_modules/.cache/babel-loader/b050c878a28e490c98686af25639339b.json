{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport AccordionItem from 'dashboard/components/Accordion/AccordionItem';\nimport ContactConversations from './ContactConversations.vue';\nimport ConversationAction from './ConversationAction.vue';\nimport ContactInfo from './contact/ContactInfo';\nimport ConversationInfo from './ConversationInfo';\nimport CustomAttributes from './customAttributes/CustomAttributes.vue';\nimport CustomAttributeSelector from './customAttributes/CustomAttributeSelector.vue';\nimport draggable from 'vuedraggable';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport MacrosList from './Macros/List';\nexport default {\n  components: {\n    AccordionItem: AccordionItem,\n    ContactConversations: ContactConversations,\n    ContactInfo: ContactInfo,\n    ConversationInfo: ConversationInfo,\n    CustomAttributes: CustomAttributes,\n    CustomAttributeSelector: CustomAttributeSelector,\n    ConversationAction: ConversationAction,\n    draggable: draggable,\n    MacrosList: MacrosList\n  },\n  mixins: [alertMixin, uiSettingsMixin],\n  props: {\n    conversationId: {\n      type: [Number, String],\n      required: true\n    },\n    inboxId: {\n      type: Number,\n      default: undefined\n    },\n    onToggle: {\n      type: Function,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      dragEnabled: true,\n      conversationSidebarItems: [],\n      dragging: false\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat',\n    currentUser: 'getCurrentUser',\n    uiFlags: 'inboxAssignableAgents/getUIFlags'\n  })), {}, {\n    conversationAdditionalAttributes: function conversationAdditionalAttributes() {\n      return this.currentConversationMetaData.additional_attributes || {};\n    },\n    channelType: function channelType() {\n      var _this$currentChat$met;\n\n      return (_this$currentChat$met = this.currentChat.meta) === null || _this$currentChat$met === void 0 ? void 0 : _this$currentChat$met.channel;\n    },\n    contact: function contact() {\n      return this.$store.getters['contacts/getContact'](this.contactId);\n    },\n    contactAdditionalAttributes: function contactAdditionalAttributes() {\n      return this.contact.additional_attributes || {};\n    },\n    contactId: function contactId() {\n      var _this$currentChat$met2, _this$currentChat$met3;\n\n      return (_this$currentChat$met2 = this.currentChat.meta) === null || _this$currentChat$met2 === void 0 ? void 0 : (_this$currentChat$met3 = _this$currentChat$met2.sender) === null || _this$currentChat$met3 === void 0 ? void 0 : _this$currentChat$met3.id;\n    },\n    currentConversationMetaData: function currentConversationMetaData() {\n      return this.$store.getters['conversationMetadata/getConversationMetadata'](this.conversationId);\n    },\n    hasContactAttributes: function hasContactAttributes() {\n      var customAttributes = this.contact.custom_attributes;\n      return customAttributes && Object.keys(customAttributes).length;\n    }\n  }),\n  watch: {\n    conversationId: function conversationId(newConversationId, prevConversationId) {\n      if (newConversationId && newConversationId !== prevConversationId) {\n        this.getContactDetails();\n      }\n    },\n    contactId: function contactId() {\n      this.getContactDetails();\n    }\n  },\n  mounted: function mounted() {\n    this.conversationSidebarItems = this.conversationSidebarItemsOrder;\n    this.getContactDetails();\n    this.$store.dispatch('attributes/get', 0);\n  },\n  methods: {\n    onPanelToggle: function onPanelToggle() {\n      this.onToggle();\n    },\n    getContactDetails: function getContactDetails() {\n      if (this.contactId) {\n        this.$store.dispatch('contacts/show', {\n          id: this.contactId\n        });\n      }\n    },\n    getAttributesByModel: function getAttributesByModel() {\n      if (this.contactId) {\n        this.$store.dispatch('contacts/show', {\n          id: this.contactId\n        });\n      }\n    },\n    openTranscriptModal: function openTranscriptModal() {\n      this.showTranscriptModal = true;\n    },\n    onDragEnd: function onDragEnd() {\n      this.dragging = false;\n      this.updateUISettings({\n        conversation_sidebar_items_order: this.conversationSidebarItems\n      });\n    }\n  }\n};","map":{"version":3,"sources":["ContactPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"medium-3 bg-white contact--panel\">\n    <woot-button\n      icon=\"chevron-right\"\n      class=\"close-button clear secondary\"\n      @click=\"onPanelToggle\"\n    />\n    <contact-info :contact=\"contact\" :channel-type=\"channelType\" />\n    <draggable\n      :list=\"conversationSidebarItems\"\n      :disabled=\"!dragEnabled\"\n      animation=\"200\"\n      class=\"list-group\"\n      ghost-class=\"ghost\"\n      handle=\".drag-handle\"\n      @start=\"dragging = true\"\n      @end=\"onDragEnd\"\n    >\n      <transition-group>\n        <div\n          v-for=\"element in conversationSidebarItems\"\n          :key=\"element.name\"\n          class=\"list-group-item\"\n        >\n          <div\n            v-if=\"element.name === 'conversation_actions'\"\n            class=\"conversation--actions\"\n          >\n            <accordion-item\n              :title=\"$t('CONVERSATION_SIDEBAR.ACCORDION.CONVERSATION_ACTIONS')\"\n              :is-open=\"isContactSidebarItemOpen('is_conv_actions_open')\"\n              @click=\"\n                value => toggleSidebarUIState('is_conv_actions_open', value)\n              \"\n            >\n              <conversation-action\n                :conversation-id=\"conversationId\"\n                :inbox-id=\"inboxId\"\n              />\n            </accordion-item>\n          </div>\n          <div v-else-if=\"element.name === 'conversation_info'\">\n            <accordion-item\n              :title=\"$t('CONVERSATION_SIDEBAR.ACCORDION.CONVERSATION_INFO')\"\n              :is-open=\"isContactSidebarItemOpen('is_conv_details_open')\"\n              compact\n              @click=\"\n                value => toggleSidebarUIState('is_conv_details_open', value)\n              \"\n            >\n              <conversation-info\n                :conversation-attributes=\"conversationAdditionalAttributes\"\n                :contact-attributes=\"contactAdditionalAttributes\"\n              />\n            </accordion-item>\n          </div>\n          <div v-else-if=\"element.name === 'contact_attributes'\">\n            <accordion-item\n              :title=\"$t('CONVERSATION_SIDEBAR.ACCORDION.CONTACT_ATTRIBUTES')\"\n              :is-open=\"isContactSidebarItemOpen('is_contact_attributes_open')\"\n              compact\n              @click=\"\n                value =>\n                  toggleSidebarUIState('is_contact_attributes_open', value)\n              \"\n            >\n              <custom-attributes\n                attribute-type=\"contact_attribute\"\n                attribute-class=\"conversation--attribute\"\n                class=\"even\"\n                :contact-id=\"contact.id\"\n              />\n              <custom-attribute-selector\n                attribute-type=\"contact_attribute\"\n                :contact-id=\"contact.id\"\n              />\n            </accordion-item>\n          </div>\n          <div v-else-if=\"element.name === 'previous_conversation'\">\n            <accordion-item\n              v-if=\"contact.id\"\n              :title=\"\n                $t('CONVERSATION_SIDEBAR.ACCORDION.PREVIOUS_CONVERSATION')\n              \"\n              :is-open=\"isContactSidebarItemOpen('is_previous_conv_open')\"\n              @click=\"\n                value => toggleSidebarUIState('is_previous_conv_open', value)\n              \"\n            >\n              <contact-conversations\n                :contact-id=\"contact.id\"\n                :conversation-id=\"conversationId\"\n              />\n            </accordion-item>\n          </div>\n          <woot-feature-toggle\n            v-else-if=\"element.name === 'macros'\"\n            feature-key=\"macros\"\n          >\n            <accordion-item\n              :title=\"$t('CONVERSATION_SIDEBAR.ACCORDION.MACROS')\"\n              :is-open=\"isContactSidebarItemOpen('is_macro_open')\"\n              compact\n              @click=\"value => toggleSidebarUIState('is_macro_open', value)\"\n            >\n              <macros-list :conversation-id=\"conversationId\" />\n            </accordion-item>\n          </woot-feature-toggle>\n        </div>\n      </transition-group>\n    </draggable>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport AccordionItem from 'dashboard/components/Accordion/AccordionItem';\nimport ContactConversations from './ContactConversations.vue';\nimport ConversationAction from './ConversationAction.vue';\n\nimport ContactInfo from './contact/ContactInfo';\nimport ConversationInfo from './ConversationInfo';\nimport CustomAttributes from './customAttributes/CustomAttributes.vue';\nimport CustomAttributeSelector from './customAttributes/CustomAttributeSelector.vue';\nimport draggable from 'vuedraggable';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport MacrosList from './Macros/List';\n\nexport default {\n  components: {\n    AccordionItem,\n    ContactConversations,\n    ContactInfo,\n    ConversationInfo,\n    CustomAttributes,\n    CustomAttributeSelector,\n    ConversationAction,\n    draggable,\n    MacrosList,\n  },\n  mixins: [alertMixin, uiSettingsMixin],\n  props: {\n    conversationId: {\n      type: [Number, String],\n      required: true,\n    },\n    inboxId: {\n      type: Number,\n      default: undefined,\n    },\n    onToggle: {\n      type: Function,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      dragEnabled: true,\n      conversationSidebarItems: [],\n      dragging: false,\n    };\n  },\n  computed: {\n    ...mapGetters({\n      currentChat: 'getSelectedChat',\n      currentUser: 'getCurrentUser',\n      uiFlags: 'inboxAssignableAgents/getUIFlags',\n    }),\n    conversationAdditionalAttributes() {\n      return this.currentConversationMetaData.additional_attributes || {};\n    },\n    channelType() {\n      return this.currentChat.meta?.channel;\n    },\n    contact() {\n      return this.$store.getters['contacts/getContact'](this.contactId);\n    },\n    contactAdditionalAttributes() {\n      return this.contact.additional_attributes || {};\n    },\n    contactId() {\n      return this.currentChat.meta?.sender?.id;\n    },\n    currentConversationMetaData() {\n      return this.$store.getters[\n        'conversationMetadata/getConversationMetadata'\n      ](this.conversationId);\n    },\n    hasContactAttributes() {\n      const { custom_attributes: customAttributes } = this.contact;\n      return customAttributes && Object.keys(customAttributes).length;\n    },\n  },\n  watch: {\n    conversationId(newConversationId, prevConversationId) {\n      if (newConversationId && newConversationId !== prevConversationId) {\n        this.getContactDetails();\n      }\n    },\n    contactId() {\n      this.getContactDetails();\n    },\n  },\n  mounted() {\n    this.conversationSidebarItems = this.conversationSidebarItemsOrder;\n    this.getContactDetails();\n    this.$store.dispatch('attributes/get', 0);\n  },\n  methods: {\n    onPanelToggle() {\n      this.onToggle();\n    },\n    getContactDetails() {\n      if (this.contactId) {\n        this.$store.dispatch('contacts/show', { id: this.contactId });\n      }\n    },\n    getAttributesByModel() {\n      if (this.contactId) {\n        this.$store.dispatch('contacts/show', { id: this.contactId });\n      }\n    },\n    openTranscriptModal() {\n      this.showTranscriptModal = true;\n    },\n\n    onDragEnd() {\n      this.dragging = false;\n      this.updateUISettings({\n        conversation_sidebar_items_order: this.conversationSidebarItems,\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '~dashboard/assets/scss/variables';\n\n.contact--panel {\n  background: white;\n  border-left: 1px solid var(--color-border);\n  font-size: $font-size-small;\n  overflow-y: auto;\n  overflow: auto;\n  position: relative;\n\n  i {\n    margin-right: $space-smaller;\n  }\n}\n\n.list-group {\n  .list-group-item {\n    background-color: var(--white);\n  }\n}\n\n::v-deep {\n  .contact--profile {\n    padding-bottom: var(--space-slab);\n    border-bottom: 1px solid var(--color-border);\n  }\n  .conversation--actions .multiselect-wrap--small {\n    .multiselect {\n      padding-left: var(--space-medium);\n      box-sizing: border-box;\n    }\n    .multiselect__element {\n      span {\n        width: 100%;\n      }\n    }\n  }\n}\n\n.close-button {\n  position: absolute;\n  right: $space-two;\n  top: $space-slab;\n  font-size: $font-size-default;\n  color: $color-heading;\n  z-index: 9989;\n}\n\n.conversation--labels {\n  padding: $space-medium;\n\n  .icon {\n    margin-right: $space-micro;\n    font-size: $font-size-micro;\n    color: #fff;\n  }\n\n  .label {\n    color: #fff;\n    padding: 0.2rem;\n  }\n}\n\n.contact--mute {\n  color: $alert-color;\n  display: block;\n  text-align: left;\n}\n\n.contact--actions {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.contact-info {\n  margin-top: var(--space-two);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/routes/dashboard/conversation"},"metadata":{},"sourceType":"module"}