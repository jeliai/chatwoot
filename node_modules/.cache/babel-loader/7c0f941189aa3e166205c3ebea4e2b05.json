{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mapGetters } from 'vuex';\nexport default {\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    teams: 'teams/getTeams'\n  })), {}, {\n    hasAnAssignedTeam: function hasAnAssignedTeam() {\n      var _this$currentChat, _this$currentChat$met;\n\n      return !!((_this$currentChat = this.currentChat) !== null && _this$currentChat !== void 0 && (_this$currentChat$met = _this$currentChat.meta) !== null && _this$currentChat$met !== void 0 && _this$currentChat$met.team);\n    },\n    teamsList: function teamsList() {\n      if (this.hasAnAssignedTeam) {\n        return [{\n          id: 0,\n          name: 'None'\n        }].concat(_toConsumableArray(this.teams));\n      }\n\n      return this.teams;\n    }\n  })\n};","map":{"version":3,"sources":["/Users/s.dastan/Desktop/chatwoot/chatwoot/app/javascript/dashboard/mixins/conversation/teamMixin.js"],"names":["mapGetters","computed","teams","hasAnAssignedTeam","currentChat","meta","team","teamsList","id","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACbC,EAAAA,QAAQ,kCACHD,UAAU,CAAC;AAAEE,IAAAA,KAAK,EAAE;AAAT,GAAD,CADP;AAENC,IAAAA,iBAFM,+BAEc;AAAA;;AAClB,aAAO,CAAC,uBAAC,KAAKC,WAAN,uEAAC,kBAAkBC,IAAnB,kDAAC,sBAAwBC,IAAzB,CAAR;AACD,KAJK;AAKNC,IAAAA,SALM,uBAKM;AACV,UAAI,KAAKJ,iBAAT,EAA4B;AAC1B,gBACE;AACEK,UAAAA,EAAE,EAAE,CADN;AAEEC,UAAAA,IAAI,EAAE;AAFR,SADF,4BAKK,KAAKP,KALV;AAOD;;AACD,aAAO,KAAKA,KAAZ;AACD;AAhBK;AADK,CAAf","sourcesContent":["import { mapGetters } from 'vuex';\n\nexport default {\n  computed: {\n    ...mapGetters({ teams: 'teams/getTeams' }),\n    hasAnAssignedTeam() {\n      return !!this.currentChat?.meta?.team;\n    },\n    teamsList() {\n      if (this.hasAnAssignedTeam) {\n        return [\n          {\n            id: 0,\n            name: 'None',\n          },\n          ...this.teams,\n        ];\n      }\n      return this.teams;\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}