{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport accountMixin from '../../../mixins/account';\nexport default {\n  mixins: [accountMixin],\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    globalConfig: 'globalConfig/get'\n  })), {}, {\n    newInboxURL: function newInboxURL() {\n      return this.addAccountScoping('settings/inboxes/new');\n    },\n    newAgentURL: function newAgentURL() {\n      return this.addAccountScoping('settings/agents/list');\n    },\n    newLabelsURL: function newLabelsURL() {\n      return this.addAccountScoping('settings/labels/list');\n    }\n  })\n};","map":{"version":3,"sources":["OnboardingView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,YAAA,MAAA,yBAAA;AAEA,eAAA;AACA,EAAA,MAAA,EAAA,CAAA,YAAA,CADA;AAEA,EAAA,QAAA,kCACA,UAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,CADA;AAEA,IAAA,WAFA,yBAEA;AACA,aAAA,KAAA,iBAAA,CAAA,sBAAA,CAAA;AACA,KAJA;AAKA,IAAA,WALA,yBAKA;AACA,aAAA,KAAA,iBAAA,CAAA,sBAAA,CAAA;AACA,KAPA;AAQA,IAAA,YARA,0BAQA;AACA,aAAA,KAAA,iBAAA,CAAA,sBAAA,CAAA;AACA;AAVA;AAFA,CAAA","sourcesContent":["<template>\n  <div class=\"columns onboarding-wrap\">\n    <div class=\"onboarding\">\n      <div class=\"scroll-wrap\">\n        <div class=\"features-item\">\n          <h1 class=\"page-title\">\n            <span>{{\n              $t('ONBOARDING.TITLE', {\n                installationName: globalConfig.installationName,\n              })\n            }}</span>\n          </h1>\n          <p class=\"intro-body\">\n            {{\n              $t('ONBOARDING.DESCRIPTION', {\n                installationName: globalConfig.installationName,\n              })\n            }}\n          </p>\n          <p v-if=\"globalConfig.installationName === 'Chatwoot'\">\n            <a\n              href=\"https://www.chatwoot.com/changelog\"\n              target=\"_blank\"\n              rel=\"noopener nofollow noreferrer\"\n              class=\"onboarding--link\"\n            >\n              {{ $t('ONBOARDING.READ_LATEST_UPDATES') }}\n            </a>\n            <span>ðŸŽ‰</span>\n          </p>\n        </div>\n        <div class=\"features-item\">\n          <h2 class=\"block-title\">\n            <span class=\"emoji\">ðŸ’¬</span>\n            <span class=\"conversation--title\">{{\n              $t('ONBOARDING.ALL_CONVERSATION.TITLE')\n            }}</span>\n          </h2>\n          <p class=\"intro-body\">\n            {{ $t('ONBOARDING.ALL_CONVERSATION.DESCRIPTION') }}\n          </p>\n        </div>\n        <div class=\"features-item\">\n          <h2 class=\"block-title\">\n            <span class=\"emoji\">ðŸ‘¥</span>\n            {{ $t('ONBOARDING.TEAM_MEMBERS.TITLE') }}\n          </h2>\n          <p class=\"intro-body\">\n            {{ $t('ONBOARDING.TEAM_MEMBERS.DESCRIPTION') }}\n          </p>\n          <router-link :to=\"newAgentURL\" class=\"onboarding--link\">\n            {{ $t('ONBOARDING.TEAM_MEMBERS.NEW_LINK') }}\n          </router-link>\n        </div>\n        <div class=\"features-item\">\n          <h2 class=\"block-title\">\n            <span class=\"emoji\">ðŸ“¥</span>{{ $t('ONBOARDING.INBOXES.TITLE') }}\n          </h2>\n          <p class=\"intro-body\">\n            {{ $t('ONBOARDING.INBOXES.DESCRIPTION') }}\n          </p>\n          <router-link :to=\"newInboxURL\" class=\"onboarding--link\">\n            {{ $t('ONBOARDING.INBOXES.NEW_LINK') }}\n          </router-link>\n        </div>\n        <div class=\"features-item\">\n          <h2 class=\"block-title\">\n            <span class=\"emoji\">ðŸ”–</span>{{ $t('ONBOARDING.LABELS.TITLE') }}\n          </h2>\n          <p class=\"intro-body\">\n            {{ $t('ONBOARDING.LABELS.DESCRIPTION') }}\n          </p>\n          <router-link :to=\"newLabelsURL\" class=\"onboarding--link\">\n            {{ $t('ONBOARDING.LABELS.NEW_LINK') }}\n          </router-link>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport accountMixin from '../../../mixins/account';\n\nexport default {\n  mixins: [accountMixin],\n  computed: {\n    ...mapGetters({ globalConfig: 'globalConfig/get' }),\n    newInboxURL() {\n      return this.addAccountScoping('settings/inboxes/new');\n    },\n    newAgentURL() {\n      return this.addAccountScoping('settings/agents/list');\n    },\n    newLabelsURL() {\n      return this.addAccountScoping('settings/labels/list');\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.onboarding-wrap {\n  display: flex;\n  font-size: var(--font-size-small);\n  justify-content: center;\n  overflow: auto;\n  text-align: left;\n}\n.onboarding {\n  height: 100vh;\n  overflow: auto;\n}\n\n.scroll-wrap {\n  padding: var(--space-larger) 13.6rem;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.features-item {\n  margin-bottom: var(--space-large);\n}\n\n.conversation--title {\n  margin-left: var(--space-minus-smaller);\n}\n\n.page-title {\n  font-size: var(--font-size-big);\n  font-weight: var(--font-weight-bold);\n  margin-bottom: var(--space-one);\n}\n\n.block-title {\n  font-weight: var(--font-weight-bold);\n  margin-bottom: var(--space-smaller);\n  margin-left: var(--space-minus-large);\n}\n\n.intro-body {\n  margin-bottom: var(--space-small);\n  line-height: 1.5;\n}\n\n.onboarding--link {\n  color: var(--w-500);\n  font-weight: var(--font-weight-medium);\n  text-decoration: underline;\n}\n\n.emoji {\n  width: var(--space-large);\n  display: inline-block;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}