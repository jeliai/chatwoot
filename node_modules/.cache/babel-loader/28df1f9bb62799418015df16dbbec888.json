{"ast":null,"code":"import { pTimeout } from './callback'; // Check if a user is opening the link in a new tab\n\nfunction userNewTab(event) {\n  var typedEvent = event;\n\n  if (typedEvent.ctrlKey || typedEvent.shiftKey || typedEvent.metaKey || typedEvent.button && typedEvent.button == 1) {\n    return true;\n  }\n\n  return false;\n} // Check if the link opens in new tab\n\n\nfunction linkNewTab(element, href) {\n  if (element.target === '_blank' && href) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function link(links, event, properties) {\n  var _this = this;\n\n  var elements = []; // always arrays, handles jquery\n\n  if (!links) {\n    return this;\n  }\n\n  if (links instanceof Element) {\n    elements = [links];\n  } else if ('toArray' in links) {\n    elements = links.toArray();\n  } else {\n    elements = links;\n  }\n\n  elements.forEach(function (el) {\n    el.addEventListener('click', function (elementEvent) {\n      var _a, _b;\n\n      var ev = event instanceof Function ? event(el) : event;\n      var props = properties instanceof Function ? properties(el) : properties;\n      var href = el.getAttribute('href') || el.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || el.getAttribute('xlink:href') || ((_a = el.getElementsByTagName('a')[0]) === null || _a === void 0 ? void 0 : _a.getAttribute('href'));\n      var trackEvent = pTimeout(_this.track(ev, props), (_b = _this.settings.timeout) !== null && _b !== void 0 ? _b : 500);\n\n      if (!linkNewTab(el, href) && !userNewTab(elementEvent)) {\n        if (href) {\n          elementEvent.preventDefault ? elementEvent.preventDefault() : elementEvent.returnValue = false;\n          trackEvent.catch(console.error).then(function () {\n            window.location.href = href;\n          }).catch(console.error);\n        }\n      }\n    }, false);\n  });\n  return this;\n}\nexport function form(forms, event, properties) {\n  var _this = this; // always arrays, handles jquery\n\n\n  if (!forms) return this;\n  if (forms instanceof HTMLFormElement) forms = [forms];\n  var elements = forms;\n  elements.forEach(function (el) {\n    if (!(el instanceof Element)) throw new TypeError('Must pass HTMLElement to trackForm/trackSubmit.');\n\n    var handler = function handler(elementEvent) {\n      var _a;\n\n      elementEvent.preventDefault ? elementEvent.preventDefault() : elementEvent.returnValue = false;\n      var ev = event instanceof Function ? event(el) : event;\n      var props = properties instanceof Function ? properties(el) : properties;\n      var trackEvent = pTimeout(_this.track(ev, props), (_a = _this.settings.timeout) !== null && _a !== void 0 ? _a : 500);\n      trackEvent.catch(console.error).then(function () {\n        el.submit();\n      }).catch(console.error);\n    }; // Support the events happening through jQuery or Zepto instead of through\n    // the normal DOM API, because `el.submit` doesn't bubble up events...\n\n\n    var $ = window.jQuery || window.Zepto;\n\n    if ($) {\n      $(el).submit(handler);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      el.addEventListener('submit', handler, false);\n    }\n  });\n  return this;\n}","map":null,"metadata":{},"sourceType":"module"}