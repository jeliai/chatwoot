{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport EmailTranscriptModal from './EmailTranscriptModal';\nimport ResolveAction from '../../buttons/ResolveAction';\nimport { CMD_MUTE_CONVERSATION, CMD_SEND_TRANSCRIPT, CMD_UNMUTE_CONVERSATION } from '../../../routes/dashboard/commands/commandBarBusEvents';\nexport default {\n  components: {\n    EmailTranscriptModal: EmailTranscriptModal,\n    ResolveAction: ResolveAction\n  },\n  mixins: [alertMixin, clickaway],\n  data: function data() {\n    return {\n      showEmailActionsModal: false\n    };\n  },\n  computed: _objectSpread({}, mapGetters({\n    currentChat: 'getSelectedChat'\n  })),\n  mounted: function mounted() {\n    bus.$on(CMD_MUTE_CONVERSATION, this.mute);\n    bus.$on(CMD_UNMUTE_CONVERSATION, this.unmute);\n    bus.$on(CMD_SEND_TRANSCRIPT, this.toggleEmailActionsModal);\n  },\n  destroyed: function destroyed() {\n    bus.$off(CMD_MUTE_CONVERSATION, this.mute);\n    bus.$off(CMD_UNMUTE_CONVERSATION, this.unmute);\n    bus.$off(CMD_SEND_TRANSCRIPT, this.toggleEmailActionsModal);\n  },\n  methods: {\n    mute: function mute() {\n      this.$store.dispatch('muteConversation', this.currentChat.id);\n      this.showAlert(this.$t('CONTACT_PANEL.MUTED_SUCCESS'));\n    },\n    unmute: function unmute() {\n      this.$store.dispatch('unmuteConversation', this.currentChat.id);\n      this.showAlert(this.$t('CONTACT_PANEL.UNMUTED_SUCCESS'));\n    },\n    toggleEmailActionsModal: function toggleEmailActionsModal() {\n      this.showEmailActionsModal = !this.showEmailActionsModal;\n    }\n  }\n};","map":{"version":3,"sources":["MoreActions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAAA,UAAA,QAAA,MAAA;AACA,SAAA,KAAA,IAAA,SAAA,QAAA,eAAA;AACA,OAAA,UAAA,MAAA,0BAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AACA,OAAA,aAAA,MAAA,6BAAA;AACA,SACA,qBADA,EAEA,mBAFA,EAGA,uBAHA,QAIA,wDAJA;AAMA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,oBAAA,EAAA,oBADA;AAEA,IAAA,aAAA,EAAA;AAFA,GADA;AAKA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,SAAA,CALA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,qBAAA,EAAA;AADA,KAAA;AAGA,GAVA;AAWA,EAAA,QAAA,oBACA,UAAA,CAAA;AAAA,IAAA,WAAA,EAAA;AAAA,GAAA,CADA,CAXA;AAcA,EAAA,OAdA,qBAcA;AACA,IAAA,GAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,KAAA,IAAA;AACA,IAAA,GAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,KAAA,MAAA;AACA,IAAA,GAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,KAAA,uBAAA;AACA,GAlBA;AAmBA,EAAA,SAnBA,uBAmBA;AACA,IAAA,GAAA,CAAA,IAAA,CAAA,qBAAA,EAAA,KAAA,IAAA;AACA,IAAA,GAAA,CAAA,IAAA,CAAA,uBAAA,EAAA,KAAA,MAAA;AACA,IAAA,GAAA,CAAA,IAAA,CAAA,mBAAA,EAAA,KAAA,uBAAA;AACA,GAvBA;AAwBA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,kBAAA,EAAA,KAAA,WAAA,CAAA,EAAA;AACA,WAAA,SAAA,CAAA,KAAA,EAAA,CAAA,6BAAA,CAAA;AACA,KAJA;AAKA,IAAA,MALA,oBAKA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,oBAAA,EAAA,KAAA,WAAA,CAAA,EAAA;AACA,WAAA,SAAA,CAAA,KAAA,EAAA,CAAA,+BAAA,CAAA;AACA,KARA;AASA,IAAA,uBATA,qCASA;AACA,WAAA,qBAAA,GAAA,CAAA,KAAA,qBAAA;AACA;AAXA;AAxBA,CAAA","sourcesContent":["<template>\n  <div class=\"flex-container actions--container\">\n    <woot-button\n      v-if=\"!currentChat.muted\"\n      v-tooltip=\"$t('CONTACT_PANEL.MUTE_CONTACT')\"\n      variant=\"clear\"\n      color-scheme=\"secondary\"\n      icon=\"speaker-mute\"\n      @click=\"mute\"\n    />\n    <woot-button\n      v-else\n      v-tooltip.left=\"$t('CONTACT_PANEL.UNMUTE_CONTACT')\"\n      variant=\"clear\"\n      color-scheme=\"secondary\"\n      icon=\"speaker-1\"\n      @click=\"unmute\"\n    />\n    <woot-button\n      v-tooltip=\"$t('CONTACT_PANEL.SEND_TRANSCRIPT')\"\n      variant=\"clear\"\n      color-scheme=\"secondary\"\n      icon=\"share\"\n      @click=\"toggleEmailActionsModal\"\n    />\n    <resolve-action\n      :conversation-id=\"currentChat.id\"\n      :status=\"currentChat.status\"\n    />\n    <email-transcript-modal\n      v-if=\"showEmailActionsModal\"\n      :show=\"showEmailActionsModal\"\n      :current-chat=\"currentChat\"\n      @cancel=\"toggleEmailActionsModal\"\n    />\n  </div>\n</template>\n<script>\nimport { mapGetters } from 'vuex';\nimport { mixin as clickaway } from 'vue-clickaway';\nimport alertMixin from 'shared/mixins/alertMixin';\nimport EmailTranscriptModal from './EmailTranscriptModal';\nimport ResolveAction from '../../buttons/ResolveAction';\nimport {\n  CMD_MUTE_CONVERSATION,\n  CMD_SEND_TRANSCRIPT,\n  CMD_UNMUTE_CONVERSATION,\n} from '../../../routes/dashboard/commands/commandBarBusEvents';\n\nexport default {\n  components: {\n    EmailTranscriptModal,\n    ResolveAction,\n  },\n  mixins: [alertMixin, clickaway],\n  data() {\n    return {\n      showEmailActionsModal: false,\n    };\n  },\n  computed: {\n    ...mapGetters({ currentChat: 'getSelectedChat' }),\n  },\n  mounted() {\n    bus.$on(CMD_MUTE_CONVERSATION, this.mute);\n    bus.$on(CMD_UNMUTE_CONVERSATION, this.unmute);\n    bus.$on(CMD_SEND_TRANSCRIPT, this.toggleEmailActionsModal);\n  },\n  destroyed() {\n    bus.$off(CMD_MUTE_CONVERSATION, this.mute);\n    bus.$off(CMD_UNMUTE_CONVERSATION, this.unmute);\n    bus.$off(CMD_SEND_TRANSCRIPT, this.toggleEmailActionsModal);\n  },\n  methods: {\n    mute() {\n      this.$store.dispatch('muteConversation', this.currentChat.id);\n      this.showAlert(this.$t('CONTACT_PANEL.MUTED_SUCCESS'));\n    },\n    unmute() {\n      this.$store.dispatch('unmuteConversation', this.currentChat.id);\n      this.showAlert(this.$t('CONTACT_PANEL.UNMUTED_SUCCESS'));\n    },\n    toggleEmailActionsModal() {\n      this.showEmailActionsModal = !this.showEmailActionsModal;\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.actions--container {\n  align-items: center;\n\n  .resolve-actions {\n    margin-left: var(--space-small);\n  }\n}\n\n.more--button {\n  align-items: center;\n  display: flex;\n  margin-left: var(--space-small);\n}\n\n.actions--container {\n  position: relative;\n}\n\n.dropdown-pane {\n  right: var(--space-minus-small);\n  top: 48px;\n}\n\n.icon {\n  margin-right: var(--space-smaller);\n  min-width: var(--space-normal);\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/conversation"},"metadata":{},"sourceType":"module"}