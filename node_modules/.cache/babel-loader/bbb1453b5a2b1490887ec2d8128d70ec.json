{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EditorView } from 'prosemirror-view';\nimport { defaultMarkdownSerializer } from 'prosemirror-markdown';\nimport { addMentionsToMarkdownSerializer, addMentionsToMarkdownParser, schemaWithMentions } from '@chatwoot/prosemirror-schema/src/mentions/schema';\nimport { suggestionsPlugin, triggerCharacters } from '@chatwoot/prosemirror-schema/src/mentions/plugin';\nimport { EditorState, Selection } from 'prosemirror-state';\nimport { defaultMarkdownParser } from 'prosemirror-markdown';\nimport { wootWriterSetup } from '@chatwoot/prosemirror-schema';\nimport TagAgents from '../conversation/TagAgents';\nimport CannedResponse from '../conversation/CannedResponse';\nvar TYPING_INDICATOR_IDLE_TIME = 4000;\nimport '@chatwoot/prosemirror-schema/src/woot-editor.css';\nimport { hasPressedEnterAndNotCmdOrShift, hasPressedCommandAndEnter, hasPressedAltAndPKey, hasPressedAltAndLKey } from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport { isEditorHotKeyEnabled } from 'dashboard/mixins/uiSettings';\nimport AnalyticsHelper, { ANALYTICS_EVENTS } from '../../../helper/AnalyticsHelper';\n\nvar createState = function createState(content, placeholder) {\n  var plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return EditorState.create({\n    doc: addMentionsToMarkdownParser(defaultMarkdownParser).parse(content),\n    plugins: wootWriterSetup({\n      schema: schemaWithMentions,\n      placeholder: placeholder,\n      plugins: plugins\n    })\n  });\n};\n\nexport default {\n  name: 'WootMessageEditor',\n  components: {\n    TagAgents: TagAgents,\n    CannedResponse: CannedResponse\n  },\n  mixins: [eventListenerMixins, uiSettingsMixin],\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    editorId: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    isPrivate: {\n      type: Boolean,\n      default: false\n    },\n    enableSuggestions: {\n      type: Boolean,\n      default: true\n    },\n    overrideLineBreaks: {\n      type: Boolean,\n      default: false\n    },\n    updateSelectionWith: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      showUserMentions: false,\n      showCannedMenu: false,\n      mentionSearchKey: '',\n      cannedSearchTerm: '',\n      editorView: null,\n      range: null,\n      state: undefined\n    };\n  },\n  computed: {\n    contentFromEditor: function contentFromEditor() {\n      return addMentionsToMarkdownSerializer(defaultMarkdownSerializer).serialize(this.editorView.state.doc);\n    },\n    plugins: function plugins() {\n      var _this = this;\n\n      if (!this.enableSuggestions) {\n        return [];\n      }\n\n      return [suggestionsPlugin({\n        matcher: triggerCharacters('@'),\n        onEnter: function onEnter(args) {\n          _this.showUserMentions = true;\n          _this.range = args.range;\n          _this.editorView = args.view;\n          return false;\n        },\n        onChange: function onChange(args) {\n          _this.editorView = args.view;\n          _this.range = args.range;\n          _this.mentionSearchKey = args.text.replace('@', '');\n          return false;\n        },\n        onExit: function onExit() {\n          _this.mentionSearchKey = '';\n          _this.showUserMentions = false;\n          return false;\n        },\n        onKeyDown: function onKeyDown(_ref) {\n          var event = _ref.event;\n          return event.keyCode === 13 && _this.showUserMentions;\n        }\n      }), suggestionsPlugin({\n        matcher: triggerCharacters('/'),\n        suggestionClass: '',\n        onEnter: function onEnter(args) {\n          if (_this.isPrivate) {\n            return false;\n          }\n\n          _this.showCannedMenu = true;\n          _this.range = args.range;\n          _this.editorView = args.view;\n          return false;\n        },\n        onChange: function onChange(args) {\n          _this.editorView = args.view;\n          _this.range = args.range;\n          _this.cannedSearchTerm = args.text.replace('/', '');\n          return false;\n        },\n        onExit: function onExit() {\n          _this.cannedSearchTerm = '';\n          _this.showCannedMenu = false;\n          return false;\n        },\n        onKeyDown: function onKeyDown(_ref2) {\n          var event = _ref2.event;\n          return event.keyCode === 13 && _this.showCannedMenu;\n        }\n      })];\n    }\n  },\n  watch: {\n    showUserMentions: function showUserMentions(updatedValue) {\n      this.$emit('toggle-user-mention', this.isPrivate && updatedValue);\n    },\n    showCannedMenu: function showCannedMenu(updatedValue) {\n      this.$emit('toggle-canned-menu', !this.isPrivate && updatedValue);\n    },\n    value: function value() {\n      var newValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (newValue !== this.contentFromEditor) {\n        this.reloadState();\n      }\n    },\n    editorId: function editorId() {\n      this.reloadState();\n    },\n    isPrivate: function isPrivate() {\n      this.reloadState();\n    },\n    updateSelectionWith: function updateSelectionWith(newValue, oldValue) {\n      if (!this.editorView) {\n        return null;\n      }\n\n      if (newValue !== oldValue) {\n        if (this.updateSelectionWith !== '') {\n          var node = this.editorView.state.schema.text(this.updateSelectionWith);\n          var tr = this.editorView.state.tr.replaceSelectionWith(node);\n          this.editorView.focus();\n          this.state = this.editorView.state.apply(tr);\n          this.emitOnChange();\n          this.$emit('clear-selection');\n        }\n      }\n\n      return null;\n    }\n  },\n  created: function created() {\n    this.state = createState(this.value, this.placeholder, this.plugins);\n  },\n  mounted: function mounted() {\n    this.createEditorView();\n    this.editorView.updateState(this.state);\n    this.focusEditorInputField();\n  },\n  methods: {\n    reloadState: function reloadState() {\n      this.state = createState(this.value, this.placeholder, this.plugins);\n      this.editorView.updateState(this.state);\n      this.focusEditorInputField();\n    },\n    createEditorView: function createEditorView() {\n      var _this2 = this;\n\n      this.editorView = new EditorView(this.$refs.editor, {\n        state: this.state,\n        dispatchTransaction: function dispatchTransaction(tx) {\n          _this2.state = _this2.state.apply(tx);\n\n          _this2.emitOnChange();\n        },\n        handleDOMEvents: {\n          keyup: function keyup() {\n            _this2.onKeyup();\n          },\n          keydown: function keydown(view, event) {\n            _this2.onKeydown(event);\n          },\n          focus: function focus() {\n            _this2.onFocus();\n          },\n          blur: function blur() {\n            _this2.onBlur();\n          },\n          paste: function paste(view, event) {\n            var data = event.clipboardData.files;\n\n            if (data.length > 0) {\n              event.preventDefault();\n            }\n          }\n        }\n      });\n    },\n    isEnterToSendEnabled: function isEnterToSendEnabled() {\n      return isEditorHotKeyEnabled(this.uiSettings, 'enter');\n    },\n    isCmdPlusEnterToSendEnabled: function isCmdPlusEnterToSendEnabled() {\n      return isEditorHotKeyEnabled(this.uiSettings, 'cmd_enter');\n    },\n    handleKeyEvents: function handleKeyEvents(e) {\n      if (hasPressedAltAndPKey(e)) {\n        this.focusEditorInputField();\n      }\n\n      if (hasPressedAltAndLKey(e)) {\n        this.focusEditorInputField();\n      }\n    },\n    focusEditorInputField: function focusEditorInputField() {\n      var tr = this.editorView.state.tr;\n      var selection = Selection.atEnd(tr.doc);\n      this.editorView.dispatch(tr.setSelection(selection));\n      this.editorView.focus();\n    },\n    insertMentionNode: function insertMentionNode(mentionItem) {\n      if (!this.editorView) {\n        return null;\n      }\n\n      var node = this.editorView.state.schema.nodes.mention.create({\n        userId: mentionItem.id,\n        userFullName: mentionItem.name\n      });\n      var tr = this.editorView.state.tr.replaceWith(this.range.from, this.range.to, node);\n      this.state = this.editorView.state.apply(tr);\n      this.emitOnChange();\n      AnalyticsHelper.track(ANALYTICS_EVENTS.USED_MENTIONS);\n      return false;\n    },\n    insertCannedResponse: function insertCannedResponse(cannedItem) {\n      if (!this.editorView) {\n        return null;\n      }\n\n      var from = this.range.from - 1;\n      var node = addMentionsToMarkdownParser(defaultMarkdownParser).parse(cannedItem);\n\n      if (node.childCount === 1) {\n        node = this.editorView.state.schema.text(cannedItem);\n        from = this.range.from;\n      }\n\n      var tr = this.editorView.state.tr.replaceWith(from, this.range.to, node);\n      this.state = this.editorView.state.apply(tr);\n      this.emitOnChange();\n      tr.scrollIntoView();\n      AnalyticsHelper.track(ANALYTICS_EVENTS.INSERTED_A_CANNED_RESPONSE);\n      return false;\n    },\n    emitOnChange: function emitOnChange() {\n      this.editorView.updateState(this.state);\n      this.$emit('input', this.contentFromEditor);\n    },\n    hideMentions: function hideMentions() {\n      this.showUserMentions = false;\n    },\n    resetTyping: function resetTyping() {\n      this.$emit('typing-off');\n      this.idleTimer = null;\n    },\n    turnOffIdleTimer: function turnOffIdleTimer() {\n      if (this.idleTimer) {\n        clearTimeout(this.idleTimer);\n      }\n    },\n    handleLineBreakWhenEnterToSendEnabled: function handleLineBreakWhenEnterToSendEnabled(event) {\n      if (hasPressedEnterAndNotCmdOrShift(event) && this.isEnterToSendEnabled() && !this.overrideLineBreaks) {\n        event.preventDefault();\n      }\n    },\n    handleLineBreakWhenCmdAndEnterToSendEnabled: function handleLineBreakWhenCmdAndEnterToSendEnabled(event) {\n      if (hasPressedCommandAndEnter(event) && this.isCmdPlusEnterToSendEnabled() && !this.overrideLineBreaks) {\n        event.preventDefault();\n      }\n    },\n    onKeyup: function onKeyup() {\n      var _this3 = this;\n\n      if (!this.idleTimer) {\n        this.$emit('typing-on');\n      }\n\n      this.turnOffIdleTimer();\n      this.idleTimer = setTimeout(function () {\n        return _this3.resetTyping();\n      }, TYPING_INDICATOR_IDLE_TIME);\n    },\n    onKeydown: function onKeydown(event) {\n      if (this.isEnterToSendEnabled()) {\n        this.handleLineBreakWhenEnterToSendEnabled(event);\n      }\n\n      if (this.isCmdPlusEnterToSendEnabled()) {\n        this.handleLineBreakWhenCmdAndEnterToSendEnabled(event);\n      }\n    },\n    onBlur: function onBlur() {\n      this.turnOffIdleTimer();\n      this.resetTyping();\n      this.$emit('blur');\n    },\n    onFocus: function onFocus() {\n      this.$emit('focus');\n    }\n  }\n};","map":{"version":3,"sources":["Editor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"editor-root\">\n    <tag-agents\n      v-if=\"showUserMentions && isPrivate\"\n      :search-key=\"mentionSearchKey\"\n      @click=\"insertMentionNode\"\n    />\n    <canned-response\n      v-if=\"showCannedMenu && !isPrivate\"\n      :search-key=\"cannedSearchTerm\"\n      @click=\"insertCannedResponse\"\n    />\n    <div ref=\"editor\" />\n  </div>\n</template>\n\n<script>\nimport { EditorView } from 'prosemirror-view';\n\nimport { defaultMarkdownSerializer } from 'prosemirror-markdown';\nimport {\n  addMentionsToMarkdownSerializer,\n  addMentionsToMarkdownParser,\n  schemaWithMentions,\n} from '@chatwoot/prosemirror-schema/src/mentions/schema';\n\nimport {\n  suggestionsPlugin,\n  triggerCharacters,\n} from '@chatwoot/prosemirror-schema/src/mentions/plugin';\nimport { EditorState, Selection } from 'prosemirror-state';\nimport { defaultMarkdownParser } from 'prosemirror-markdown';\nimport { wootWriterSetup } from '@chatwoot/prosemirror-schema';\n\nimport TagAgents from '../conversation/TagAgents';\nimport CannedResponse from '../conversation/CannedResponse';\n\nconst TYPING_INDICATOR_IDLE_TIME = 4000;\n\nimport '@chatwoot/prosemirror-schema/src/woot-editor.css';\nimport {\n  hasPressedEnterAndNotCmdOrShift,\n  hasPressedCommandAndEnter,\n  hasPressedAltAndPKey,\n  hasPressedAltAndLKey,\n} from 'shared/helpers/KeyboardHelpers';\nimport eventListenerMixins from 'shared/mixins/eventListenerMixins';\nimport uiSettingsMixin from 'dashboard/mixins/uiSettings';\nimport { isEditorHotKeyEnabled } from 'dashboard/mixins/uiSettings';\nimport AnalyticsHelper, {\n  ANALYTICS_EVENTS,\n} from '../../../helper/AnalyticsHelper';\n\nconst createState = (content, placeholder, plugins = []) => {\n  return EditorState.create({\n    doc: addMentionsToMarkdownParser(defaultMarkdownParser).parse(content),\n    plugins: wootWriterSetup({\n      schema: schemaWithMentions,\n      placeholder,\n      plugins,\n    }),\n  });\n};\n\nexport default {\n  name: 'WootMessageEditor',\n  components: { TagAgents, CannedResponse },\n  mixins: [eventListenerMixins, uiSettingsMixin],\n  props: {\n    value: { type: String, default: '' },\n    editorId: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    isPrivate: { type: Boolean, default: false },\n    enableSuggestions: { type: Boolean, default: true },\n    overrideLineBreaks: { type: Boolean, default: false },\n    updateSelectionWith: { type: String, default: '' },\n  },\n  data() {\n    return {\n      showUserMentions: false,\n      showCannedMenu: false,\n      mentionSearchKey: '',\n      cannedSearchTerm: '',\n      editorView: null,\n      range: null,\n      state: undefined,\n    };\n  },\n  computed: {\n    contentFromEditor() {\n      return addMentionsToMarkdownSerializer(\n        defaultMarkdownSerializer\n      ).serialize(this.editorView.state.doc);\n    },\n    plugins() {\n      if (!this.enableSuggestions) {\n        return [];\n      }\n\n      return [\n        suggestionsPlugin({\n          matcher: triggerCharacters('@'),\n          onEnter: args => {\n            this.showUserMentions = true;\n            this.range = args.range;\n            this.editorView = args.view;\n            return false;\n          },\n          onChange: args => {\n            this.editorView = args.view;\n            this.range = args.range;\n\n            this.mentionSearchKey = args.text.replace('@', '');\n            return false;\n          },\n          onExit: () => {\n            this.mentionSearchKey = '';\n            this.showUserMentions = false;\n            return false;\n          },\n          onKeyDown: ({ event }) => {\n            return event.keyCode === 13 && this.showUserMentions;\n          },\n        }),\n        suggestionsPlugin({\n          matcher: triggerCharacters('/'),\n          suggestionClass: '',\n          onEnter: args => {\n            if (this.isPrivate) {\n              return false;\n            }\n            this.showCannedMenu = true;\n            this.range = args.range;\n            this.editorView = args.view;\n            return false;\n          },\n          onChange: args => {\n            this.editorView = args.view;\n            this.range = args.range;\n\n            this.cannedSearchTerm = args.text.replace('/', '');\n            return false;\n          },\n          onExit: () => {\n            this.cannedSearchTerm = '';\n            this.showCannedMenu = false;\n            return false;\n          },\n          onKeyDown: ({ event }) => {\n            return event.keyCode === 13 && this.showCannedMenu;\n          },\n        }),\n      ];\n    },\n  },\n  watch: {\n    showUserMentions(updatedValue) {\n      this.$emit('toggle-user-mention', this.isPrivate && updatedValue);\n    },\n    showCannedMenu(updatedValue) {\n      this.$emit('toggle-canned-menu', !this.isPrivate && updatedValue);\n    },\n    value(newValue = '') {\n      if (newValue !== this.contentFromEditor) {\n        this.reloadState();\n      }\n    },\n    editorId() {\n      this.reloadState();\n    },\n    isPrivate() {\n      this.reloadState();\n    },\n\n    updateSelectionWith(newValue, oldValue) {\n      if (!this.editorView) {\n        return null;\n      }\n      if (newValue !== oldValue) {\n        if (this.updateSelectionWith !== '') {\n          const node = this.editorView.state.schema.text(\n            this.updateSelectionWith\n          );\n          const tr = this.editorView.state.tr.replaceSelectionWith(node);\n          this.editorView.focus();\n          this.state = this.editorView.state.apply(tr);\n          this.emitOnChange();\n          this.$emit('clear-selection');\n        }\n      }\n      return null;\n    },\n  },\n  created() {\n    this.state = createState(this.value, this.placeholder, this.plugins);\n  },\n  mounted() {\n    this.createEditorView();\n    this.editorView.updateState(this.state);\n    this.focusEditorInputField();\n  },\n  methods: {\n    reloadState() {\n      this.state = createState(this.value, this.placeholder, this.plugins);\n      this.editorView.updateState(this.state);\n      this.focusEditorInputField();\n    },\n    createEditorView() {\n      this.editorView = new EditorView(this.$refs.editor, {\n        state: this.state,\n        dispatchTransaction: tx => {\n          this.state = this.state.apply(tx);\n          this.emitOnChange();\n        },\n        handleDOMEvents: {\n          keyup: () => {\n            this.onKeyup();\n          },\n          keydown: (view, event) => {\n            this.onKeydown(event);\n          },\n          focus: () => {\n            this.onFocus();\n          },\n          blur: () => {\n            this.onBlur();\n          },\n          paste: (view, event) => {\n            const data = event.clipboardData.files;\n            if (data.length > 0) {\n              event.preventDefault();\n            }\n          },\n        },\n      });\n    },\n    isEnterToSendEnabled() {\n      return isEditorHotKeyEnabled(this.uiSettings, 'enter');\n    },\n    isCmdPlusEnterToSendEnabled() {\n      return isEditorHotKeyEnabled(this.uiSettings, 'cmd_enter');\n    },\n    handleKeyEvents(e) {\n      if (hasPressedAltAndPKey(e)) {\n        this.focusEditorInputField();\n      }\n      if (hasPressedAltAndLKey(e)) {\n        this.focusEditorInputField();\n      }\n    },\n    focusEditorInputField() {\n      const { tr } = this.editorView.state;\n      const selection = Selection.atEnd(tr.doc);\n\n      this.editorView.dispatch(tr.setSelection(selection));\n      this.editorView.focus();\n    },\n    insertMentionNode(mentionItem) {\n      if (!this.editorView) {\n        return null;\n      }\n      const node = this.editorView.state.schema.nodes.mention.create({\n        userId: mentionItem.id,\n        userFullName: mentionItem.name,\n      });\n\n      const tr = this.editorView.state.tr.replaceWith(\n        this.range.from,\n        this.range.to,\n        node\n      );\n      this.state = this.editorView.state.apply(tr);\n      this.emitOnChange();\n      AnalyticsHelper.track(ANALYTICS_EVENTS.USED_MENTIONS);\n\n      return false;\n    },\n\n    insertCannedResponse(cannedItem) {\n      if (!this.editorView) {\n        return null;\n      }\n\n      let from = this.range.from - 1;\n      let node = addMentionsToMarkdownParser(defaultMarkdownParser).parse(\n        cannedItem\n      );\n\n      if (node.childCount === 1) {\n        node = this.editorView.state.schema.text(cannedItem);\n        from = this.range.from;\n      }\n\n      const tr = this.editorView.state.tr.replaceWith(\n        from,\n        this.range.to,\n        node\n      );\n\n      this.state = this.editorView.state.apply(tr);\n      this.emitOnChange();\n\n      tr.scrollIntoView();\n      AnalyticsHelper.track(ANALYTICS_EVENTS.INSERTED_A_CANNED_RESPONSE);\n      return false;\n    },\n\n    emitOnChange() {\n      this.editorView.updateState(this.state);\n\n      this.$emit('input', this.contentFromEditor);\n    },\n\n    hideMentions() {\n      this.showUserMentions = false;\n    },\n    resetTyping() {\n      this.$emit('typing-off');\n      this.idleTimer = null;\n    },\n    turnOffIdleTimer() {\n      if (this.idleTimer) {\n        clearTimeout(this.idleTimer);\n      }\n    },\n    handleLineBreakWhenEnterToSendEnabled(event) {\n      if (\n        hasPressedEnterAndNotCmdOrShift(event) &&\n        this.isEnterToSendEnabled() &&\n        !this.overrideLineBreaks\n      ) {\n        event.preventDefault();\n      }\n    },\n    handleLineBreakWhenCmdAndEnterToSendEnabled(event) {\n      if (\n        hasPressedCommandAndEnter(event) &&\n        this.isCmdPlusEnterToSendEnabled() &&\n        !this.overrideLineBreaks\n      ) {\n        event.preventDefault();\n      }\n    },\n    onKeyup() {\n      if (!this.idleTimer) {\n        this.$emit('typing-on');\n      }\n      this.turnOffIdleTimer();\n      this.idleTimer = setTimeout(\n        () => this.resetTyping(),\n        TYPING_INDICATOR_IDLE_TIME\n      );\n    },\n    onKeydown(event) {\n      if (this.isEnterToSendEnabled()) {\n        this.handleLineBreakWhenEnterToSendEnabled(event);\n      }\n      if (this.isCmdPlusEnterToSendEnabled()) {\n        this.handleLineBreakWhenCmdAndEnterToSendEnabled(event);\n      }\n    },\n    onBlur() {\n      this.turnOffIdleTimer();\n      this.resetTyping();\n      this.$emit('blur');\n    },\n    onFocus() {\n      this.$emit('focus');\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.ProseMirror-menubar-wrapper {\n  display: flex;\n  flex-direction: column;\n\n  > .ProseMirror {\n    padding: 0;\n    word-break: break-word;\n  }\n}\n\n.editor-root {\n  width: 100%;\n}\n\n.ProseMirror-woot-style {\n  min-height: 8rem;\n  max-height: 12rem;\n  overflow: auto;\n}\n\n.ProseMirror-prompt {\n  z-index: var(--z-index-highest);\n  background: var(--color-background-light);\n  border-radius: var(--border-radius-normal);\n  border: 1px solid var(--color-border);\n}\n\n.is-private {\n  .prosemirror-mention-node {\n    font-weight: var(--font-weight-medium);\n    background: var(--s-50);\n    color: var(--s-900);\n    padding: 0 var(--space-smaller);\n  }\n}\n\n.editor-wrap {\n  margin-bottom: var(--space-normal);\n}\n\n.message-editor {\n  border: 1px solid var(--color-border);\n  border-radius: var(--border-radius-normal);\n  padding: 0 var(--space-slab);\n  margin-bottom: 0;\n}\n\n.editor_warning {\n  border: 1px solid var(--r-400);\n}\n\n.editor-warning__message {\n  color: var(--r-400);\n  font-weight: var(--font-weight-normal);\n  padding: var(--space-smaller) 0 0 0;\n}\n</style>\n"],"sourceRoot":"app/javascript/dashboard/components/widgets/WootWriter"},"metadata":{},"sourceType":"module"}