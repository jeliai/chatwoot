{"ast":null,"code":"import { isFunction, isPlainObject, isString, isNumber } from '../../plugins/validation';\nexport function resolveArguments(eventName, properties, options, callback) {\n  var _a;\n\n  var args = [eventName, properties, options, callback];\n  var name = isPlainObject(eventName) ? eventName.event : eventName;\n\n  if (!name || !isString(name)) {\n    throw new Error('Event missing');\n  }\n\n  var data = isPlainObject(eventName) ? (_a = eventName.properties) !== null && _a !== void 0 ? _a : {} : isPlainObject(properties) ? properties : {};\n  var opts = {};\n\n  if (isPlainObject(properties) && !isFunction(options)) {\n    opts = options !== null && options !== void 0 ? options : {};\n  }\n\n  if (isPlainObject(eventName) && !isFunction(properties)) {\n    opts = properties !== null && properties !== void 0 ? properties : {};\n  }\n\n  var cb = args.find(isFunction);\n  return [name, data, opts, cb];\n}\nexport function resolvePageArguments(category, name, properties, options, callback) {\n  var _a, _b;\n\n  var resolvedCategory = null;\n  var resolvedName = null;\n  var args = [category, name, properties, options, callback];\n  var strings = args.filter(isString);\n\n  if (strings[0] !== undefined && strings[1] !== undefined) {\n    resolvedCategory = strings[0];\n    resolvedName = strings[1];\n  }\n\n  if (strings.length === 1) {\n    resolvedCategory = null;\n    resolvedName = strings[0];\n  }\n\n  var resolvedCallback = args.find(isFunction);\n  var objects = args.filter(function (obj) {\n    if (resolvedName === null) {\n      return isPlainObject(obj);\n    }\n\n    return isPlainObject(obj) || obj === null;\n  });\n  var resolvedProperties = (_a = objects[0]) !== null && _a !== void 0 ? _a : {};\n  var resolvedOptions = (_b = objects[1]) !== null && _b !== void 0 ? _b : {};\n  return [resolvedCategory, resolvedName, resolvedProperties, resolvedOptions, resolvedCallback];\n}\nexport var resolveUserArguments = function resolveUserArguments(user) {\n  return function () {\n    var _a, _b, _c, _d, _e;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var id = null;\n    id = (_c = (_a = args.find(isString)) !== null && _a !== void 0 ? _a : (_b = args.find(isNumber)) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : user.id();\n    var objects = args.filter(function (obj) {\n      if (id === null) {\n        return isPlainObject(obj);\n      }\n\n      return isPlainObject(obj) || obj === null;\n    });\n    var data = (_d = objects[0]) !== null && _d !== void 0 ? _d : {};\n    var opts = (_e = objects[1]) !== null && _e !== void 0 ? _e : {};\n    var resolvedCallback = args.find(isFunction);\n    return [id, data, opts, resolvedCallback];\n  };\n};\nexport function resolveAliasArguments(to, from, options, callback) {\n  if (isNumber(to)) to = to.toString(); // Legacy behaviour - allow integers for alias calls\n\n  if (isNumber(from)) from = from.toString();\n  var args = [to, from, options, callback];\n\n  var _a = args.filter(isString),\n      _b = _a[0],\n      aliasTo = _b === void 0 ? to : _b,\n      _c = _a[1],\n      aliasFrom = _c === void 0 ? null : _c;\n\n  var _d = args.filter(isPlainObject)[0],\n      opts = _d === void 0 ? {} : _d;\n  var resolvedCallback = args.find(isFunction);\n  return [aliasTo, aliasFrom, opts, resolvedCallback];\n}","map":null,"metadata":{},"sourceType":"module"}